{"mappings":"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","sources":["<anon>","src/ts/app.ts","src/ts/util.ts","src/ts/xml.ts","src/ts/html.ts","src/ts/molecule.ts","src/ts/range.ts","src/ts/reaction.ts","src/ts/canvas.ts","src/ts/conditions.ts","src/ts/modelParameters.ts","src/ts/control.ts","src/ts/mesmer.ts"],"sourcesContent":["//import { openDB } from 'idb';\n/**\n * Get the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */ function $dcf293d9ee452407$export$3988ae62b71be9a3(map, key) {\n    if (!map.has(key)) throw new Error(`Key ${key} not found in map`);\n    return map.get(key);\n}\nfunction $dcf293d9ee452407$export$3205c97bcf96f7dc(...parts) {\n    let id = parts.join(\"-\");\n    // Replace any character that is not a letter (upper or lower case), a digit, a hyphen, or an underscore \n    // with an underscore. \n    let validId = id.replace(/[^a-zA-Z-_0-9]/g, \"_\");\n    // If the first character is a digit, two hyphens, or a hyphen followed by a digit, add an underscore to \n    // the beginning of the ID.\n    if (/^[0-9]|^--|-^[0-9]/.test(validId)) validId = \"_\" + validId;\n    return validId;\n}\nfunction $dcf293d9ee452407$export$bd2782c820638828(min, range, newMin, newRange, value) {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return (value - min) * newRange / (range + 0.0) + newMin;\n}\nfunction $dcf293d9ee452407$export$dc22ec7f8e0b9ac(map, delimiter) {\n    if (map == null) return \"\";\n    if (delimiter == undefined) delimiter = \", \";\n    return Array.from(map.entries()).map(([key, value])=>`${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$4323cc4280d5be7(array, delimiter) {\n    if (delimiter == undefined) delimiter = \", \";\n    return array.map((value)=>value == null ? \"null\" : value.toString()).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$736cc24a423eb64d(set, delimiter) {\n    if (delimiter == undefined) delimiter = \", \";\n    return Array.from(set).map((value)=>value == null ? \"null\" : value.toString()).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$8cfbaad830aa9e0a(s) {\n    let r = [];\n    for(let i = 0; i < s.length; i++)if ($dcf293d9ee452407$export$e90fb89750dba83f(s[i])) r.push(parseFloat(s[i]));\n    return r;\n}\nfunction $dcf293d9ee452407$export$e90fb89750dba83f(s) {\n    if (s === \"\") return false;\n    return !isNaN(Number(s));\n}\n\n\n/**\n * Remove an element with the given id.\n * @param id The id of the element to remove.\n * @param ids The set of ids to remove the id from.\n */ function $2cda23d1e44619db$export$cd7f480d6b8286c3(id, ids) {\n    let e = document.getElementById(id);\n    if (e != null) e.remove();\n    if (ids != undefined) ids.delete(id);\n}\nfunction $2cda23d1e44619db$export$8b2cd46c11844202({ divToAddTo: divToAppendTo, elementToInsertBefore: elementToInsertBefore, content: content, buttonLabel: buttonLabel, buttonId: buttonId, margin: margin = {\n    marginLeft: \"\",\n    marginTop: \"\",\n    marginBottom: \"\",\n    marginRight: \"\"\n}, contentDivId: contentDivId = \"\", contentDivClassName: contentDivClassName = \"\" }) {\n    let div = $2cda23d1e44619db$export$331ff980f0d45cff(contentDivId);\n    div.className = contentDivClassName;\n    //let button: HTMLButtonElement = document.createElement('button');\n    //button.id = contentDivId + 'Button';\n    //button.innerText = `${buttonLabel} ▼`;\n    let button = $2cda23d1e44619db$export$9b6d6ca62970729f(`${buttonLabel} \\u{25BC}`, buttonId, margin);\n    button.className = \"collapsible\";\n    button.addEventListener(\"click\", function() {\n        //button.innerText = button.innerText.includes('▼')\n        //    ? `${buttonLabel} ▲`\n        //    : `${buttonLabel} ▼`;\n        //button.textContent = button.textContent!.includes('▼') ? '▲' : '▼';\n        let parts = button.textContent.split(\" \");\n        parts[parts.length - 1] = parts[parts.length - 1] === \"\\u25BC\" ? \"\\u25B2\" : \"\\u25BC\";\n        button.textContent = parts.join(\" \");\n    });\n    div.appendChild(button);\n    div.appendChild(content);\n    if (elementToInsertBefore != null) divToAppendTo.insertBefore(div, elementToInsertBefore);\n    else divToAppendTo.appendChild(div);\n    $2cda23d1e44619db$var$setCollapsibleEventListener(button);\n    return div;\n}\n/**\n * For setting the event listener for a collapsible element.\n * @param e The element to add the event listener to.\n */ function $2cda23d1e44619db$var$setCollapsibleEventListener(e) {\n    // Remove any existing event listener.\n    e.removeEventListener(\"click\", $2cda23d1e44619db$var$toggleCollapsible);\n    // Add new event listener.\n    e.addEventListener(\"click\", $2cda23d1e44619db$var$toggleCollapsible);\n}\n/**\n * For toggling the collapsible content.\n */ function $2cda23d1e44619db$var$toggleCollapsible() {\n    this.classList.toggle(\"active\");\n    let nes = this.nextElementSibling;\n    if (nes != null) {\n        if (nes instanceof HTMLDivElement) {\n            if (nes.style.display === \"block\") nes.style.display = \"none\";\n            else nes.style.display = \"block\";\n        } else console.log(\"toggleCollapsible: nextElementSibling is not an HTMLDivElement\");\n    } else console.log(\"toggleCollapsible: nextElementSibling is null\");\n}\nfunction $2cda23d1e44619db$export$4e9ec2b27757d9dd(type, id, componentMargin, divMargin, func, value, labelTextContent) {\n    let div = $2cda23d1e44619db$export$78253536c0178a32(undefined, divMargin);\n    let input = $2cda23d1e44619db$export$cef1adc173ab7099(type, id, componentMargin, func, value);\n    let label = $2cda23d1e44619db$export$f2839682b8c07f35(labelTextContent, componentMargin);\n    label.htmlFor = id;\n    div.appendChild(label);\n    div.appendChild(input);\n    return div;\n}\nfunction $2cda23d1e44619db$export$cef1adc173ab7099(type, id, margin, func, value) {\n    let input = $2cda23d1e44619db$export$d80fffb1deb3b97e(type, id, margin);\n    input.onchange = func;\n    input.value = value;\n    $2cda23d1e44619db$export$d43d96a9a8ad3e51(input);\n    return input;\n}\nfunction $2cda23d1e44619db$export$d80fffb1deb3b97e(type, id, margin) {\n    let input = document.createElement(\"input\");\n    input.type = type;\n    input.id = id;\n    Object.assign(input.style, margin);\n    input.style.fontSize = \"1em\"; // Set the font size with a relative unit.\n    input.classList.add(\"auto-width\");\n    return input;\n}\nfunction $2cda23d1e44619db$export$ff083c49da8fe0f9(attributes, tagName) {\n    let s = \"<\" + tagName;\n    if (attributes) for (let [key, value] of attributes)s += \" \" + key + '=\"' + value + '\"';\n    return s + \" />\";\n}\nfunction $2cda23d1e44619db$export$d43d96a9a8ad3e51(input, minSize) {\n    if (minSize == undefined) minSize = 4;\n    input.style.width = input.value.length + minSize + \"ch\";\n}\nfunction $2cda23d1e44619db$export$fdd146df37959fe8(input, minSize) {\n    if (minSize == undefined) minSize = 6;\n    input.style.width = input.value.length + minSize + \"ch\";\n}\nfunction $2cda23d1e44619db$export$b89bf4b169286865(options, name, value, id, margin) {\n    let select = document.createElement(\"select\");\n    options.forEach((option)=>{\n        select.name = name;\n        select.id = id;\n        let optionElement = document.createElement(\"option\");\n        optionElement.value = option;\n        optionElement.text = option;\n        select.appendChild(optionElement);\n    });\n    select.value = value;\n    select.style.fontSize = \"1em\"; // Set the font size with a relative unit.\n    select.classList.add(\"auto-width\");\n    $2cda23d1e44619db$export$fdd146df37959fe8(select);\n    Object.assign(select.style, margin);\n    return select;\n}\nfunction $2cda23d1e44619db$export$4c3eba01cd3c5ba4(textContent, options, name, value, id, componentMargin, divMargin) {\n    let div = $2cda23d1e44619db$export$78253536c0178a32(undefined, divMargin);\n    let label = $2cda23d1e44619db$export$f2839682b8c07f35(textContent, componentMargin);\n    label.htmlFor = id;\n    div.appendChild(label);\n    div.appendChild($2cda23d1e44619db$export$b89bf4b169286865(options, name, value, id, componentMargin));\n    return div;\n}\nfunction $2cda23d1e44619db$export$9b6d6ca62970729f(textContent, id, boundary) {\n    let button = document.createElement(\"button\");\n    button.textContent = textContent;\n    if (id != undefined) button.id = id;\n    if (boundary != undefined) Object.assign(button.style, boundary);\n    button.style.fontSize = \"1em\"; // Set the font size with a relative unit.\n    return button;\n}\nfunction $2cda23d1e44619db$export$717b1c3df34dc89e(labeltext, textContent, id, componentMargin, divMargin) {\n    let div = $2cda23d1e44619db$export$78253536c0178a32(undefined, divMargin);\n    let label = $2cda23d1e44619db$export$f2839682b8c07f35(labeltext, componentMargin);\n    label.htmlFor = id;\n    Object.assign(label.style, componentMargin);\n    div.appendChild(label);\n    div.appendChild($2cda23d1e44619db$export$9b6d6ca62970729f(textContent, id, componentMargin));\n    return div;\n}\nfunction $2cda23d1e44619db$export$331ff980f0d45cff(id, margin) {\n    let div = document.createElement(\"div\");\n    if (id != undefined) div.id = id;\n    if (margin != undefined) Object.assign(div.style, margin);\n    return div;\n}\nfunction $2cda23d1e44619db$export$78253536c0178a32(id, margin) {\n    let div = $2cda23d1e44619db$export$331ff980f0d45cff(id, margin);\n    div.style.display = \"flex\";\n    div.style.flexWrap = \"wrap\";\n    return div;\n}\nfunction $2cda23d1e44619db$export$f2839682b8c07f35(textContent, margin) {\n    let label = document.createElement(\"label\");\n    Object.assign(label.style, margin);\n    label.textContent = textContent;\n    label.style.fontSize = \"1em\"; // Set the font size with a relative unit.\n    return label;\n}\n\n\nfunction $6648a11f147a5c05$export$735ee1799fd02602(xml, name) {\n    let v = xml.getAttribute(name);\n    if (!v) throw new Error(name + \" attribute not found\");\n    return v;\n}\nfunction $6648a11f147a5c05$export$91e73a91db22e6a2(element, tagName) {\n    let el = element.getElementsByTagName(tagName)[0];\n    if (el == null) throw new Error(tagName + \" element not found\");\n    return el;\n}\nfunction $6648a11f147a5c05$export$4e07613bf412feb7(element) {\n    let cn = element.childNodes;\n    if (cn == null) throw new Error(\"Element has no childNodes\");\n    return cn[0];\n}\nfunction $6648a11f147a5c05$export$13cb40e9b656ab9e(node) {\n    let nodeValue = node.nodeValue;\n    if (nodeValue == null) throw new Error(\"nodeValue is null\");\n    return nodeValue;\n}\nfunction $6648a11f147a5c05$export$433c819efd6b1ea5(e) {\n    let s;\n    let firstChildNode = $6648a11f147a5c05$export$4e07613bf412feb7(e);\n    if (firstChildNode) s = $6648a11f147a5c05$export$13cb40e9b656ab9e(firstChildNode).trim();\n    else s = \"\";\n    return s;\n}\nclass $6648a11f147a5c05$export$3288d34c523a1192 {\n    /**\n     * @param tagName The tag name.\n     */ constructor(tagName){\n        this.tagName = tagName;\n    }\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */ toXML(padding) {\n        let s = (0, $2cda23d1e44619db$export$ff083c49da8fe0f9)(undefined, this.tagName);\n        if (padding) return \"\\n\" + padding + s;\n        return s;\n    }\n}\nclass $6648a11f147a5c05$export$ca4ceee82ec565dc extends $6648a11f147a5c05$export$3288d34c523a1192 {\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, tagName){\n        super(tagName);\n        this.attributes = attributes;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        let r = this.tagName + `(`;\n        if (this.attributes) this.attributes.forEach((value, key)=>{\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */ toXML(padding) {\n        let s = \"\";\n        if (padding != undefined) s += \"\\n\" + padding;\n        s += \"<\" + this.tagName;\n        for (let [k, v] of this.attributes)s += \" \" + k + '=\"' + v.toString() + '\"';\n        return s + \" />\";\n    }\n}\nclass $6648a11f147a5c05$export$8f67221c6fb2ad09 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName);\n        this.value = value;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$82583fad49645fc9 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName);\n        this.value = value;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        let stringValue = this.value.toString().trim();\n        let c;\n        if (this.value < 0) c = 7;\n        else c = 6;\n        if (stringValue.length > c) stringValue = this.value.toExponential().trim();\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(stringValue, this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$38d8ebe2767f8865 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, tagName, values, delimiter){\n        super(attributes, tagName);\n        /**\n     * The delimiter of the values.\n     */ this.delimiter = \",\";\n        this.values = values;\n        if (delimiter != undefined) this.delimiter = delimiter;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */ setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$bd431b64ad3b0433 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */ constructor(attributes, tagName){\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */ addNode(node) {\n        this.nodes.set(this.nodes.size, node);\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        let s = super.toString();\n        this.nodes.forEach((v, k)=>{\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(pad, padding) {\n        let padding1;\n        if (pad != undefined && padding != undefined) padding1 = padding + pad;\n        let s = \"\";\n        if (this.nodes.size > 0) {\n            let i = 0;\n            this.nodes.forEach((v)=>{\n                if (v == undefined) console.warn(\"Node \" + i.toString() + \" is undefined this.nodes.size = \" + this.nodes.size);\n                else {\n                    if (v instanceof $6648a11f147a5c05$export$bd431b64ad3b0433) s += v.toXML(pad, padding1);\n                    else if (v instanceof $6648a11f147a5c05$export$ca4ceee82ec565dc) s += v.toXML(padding1);\n                    else s += v.toXML(padding1);\n                }\n            });\n            return $6648a11f147a5c05$export$dad497fe1f6e27c0(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s = (0, $2cda23d1e44619db$export$ff083c49da8fe0f9)(this.attributes, this.tagName);\n            if (padding != undefined) return \"\\n\" + padding + s;\n            return s;\n        }\n    }\n}\nfunction $6648a11f147a5c05$export$2cd488e9ab180ce2(tagName, attributes, padding) {\n    let s = \"\";\n    if (padding != undefined) s += \"\\n\" + padding;\n    s += \"<\" + tagName;\n    if (attributes) for (let [k, v] of attributes)s += \" \" + k + '=\"' + v.toString() + '\"';\n    return s + \">\";\n}\nfunction $6648a11f147a5c05$export$34b7e1ae786b72b0(tagName, padding, padValue) {\n    let s = \"\";\n    if (padValue) {\n        if (padding != undefined) s += \"\\n\" + padding;\n    }\n    return s + \"</\" + tagName + \">\";\n}\nfunction $6648a11f147a5c05$export$dad497fe1f6e27c0(content, tagName, attributes, padding, padValue) {\n    let startTag = $6648a11f147a5c05$export$2cd488e9ab180ce2(tagName, attributes, padding);\n    let endTag = $6648a11f147a5c05$export$34b7e1ae786b72b0(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\nfunction $6648a11f147a5c05$export$fe94072fee8a6976(element) {\n    let attributeNames = element.getAttributeNames();\n    let attributes = new Map();\n    attributeNames.forEach(function(attributeName) {\n        let attributeValue = element.getAttribute(attributeName);\n        if (attributeValue != null) attributes.set(attributeName, attributeValue);\n    });\n    return attributes;\n}\nfunction $6648a11f147a5c05$export$b7531b8ff18dc588(xml, tagName) {\n    let e = xml.getElementsByTagName(tagName);\n    if (e.length != 1) throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    return e[0];\n}\n\n\n\nclass $07cfde92b14f998c$export$d0e9917d83c120a0 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    static{\n        /**\n     * The key for the lower attribute.\n     */ this.s_lower = \"lower\";\n    }\n    static{\n        /**\n     * The key for the upper attribute.\n     */ this.s_upper = \"upper\";\n    }\n    static{\n        /**\n     * The key for the stepsize attribute.\n     */ this.s_stepsize = \"stepsize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName, value);\n    }\n    /**\n     * @param value The value of the Range.\n     */ setValue(value) {\n        this.value = value;\n    }\n    /**\n     * @returns The units of the Range.\n     */ getUnits() {\n        return this.attributes.get($07cfde92b14f998c$export$d0e9917d83c120a0.s_units);\n    }\n    /**\n     * @param units The units of the Range.\n     */ setUnits(units) {\n        this.attributes.set($07cfde92b14f998c$export$d0e9917d83c120a0.s_units, units);\n    }\n    /**\n     * Remove the units attribute.\n     */ removeUnits() {\n        this.attributes.delete($07cfde92b14f998c$export$d0e9917d83c120a0.s_units);\n    }\n    /**\n     * @returns The lower of the Range.\n     */ getLower() {\n        let lower = this.attributes.get($07cfde92b14f998c$export$d0e9917d83c120a0.s_lower);\n        if (lower != undefined) return parseFloat(lower);\n    }\n    /**\n     * @param lower The lower of the Range.\n     */ setLower(lower) {\n        this.attributes.set($07cfde92b14f998c$export$d0e9917d83c120a0.s_lower, lower.toString());\n    }\n    /**\n     * Remove the lower attribute.\n     */ removeLower() {\n        this.attributes.delete($07cfde92b14f998c$export$d0e9917d83c120a0.s_lower);\n    }\n    /**\n     * @returns The upper of the Range.\n     */ getUpper() {\n        let upper = this.attributes.get($07cfde92b14f998c$export$d0e9917d83c120a0.s_upper);\n        if (upper != undefined) return parseFloat(upper);\n    }\n    /**\n     * @param upper The upper of the Range.\n     */ setUpper(upper) {\n        this.attributes.set($07cfde92b14f998c$export$d0e9917d83c120a0.s_upper, upper.toString());\n    }\n    /**\n     * Remove the upper attribute.\n     */ removeUpper() {\n        this.attributes.delete($07cfde92b14f998c$export$d0e9917d83c120a0.s_upper);\n    }\n    /**\n     * @returns The stepsize of the Range.\n     */ getStepsize() {\n        let stepsize = this.attributes.get($07cfde92b14f998c$export$d0e9917d83c120a0.s_stepsize);\n        if (stepsize != undefined) return parseFloat(stepsize);\n    }\n    /**\n     * @param stepsize The stepsize of the Range.\n     */ setStepsize(stepsize) {\n        this.attributes.set($07cfde92b14f998c$export$d0e9917d83c120a0.s_stepsize, stepsize.toString());\n    }\n    /**\n     * Remove the stepsize attribute.\n     */ removeStepsize() {\n        this.attributes.delete($07cfde92b14f998c$export$d0e9917d83c120a0.s_stepsize);\n    }\n}\n\n\n\n\nclass $7cb8c0739b32549c$export$80986e6afdd7e0cb extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"atom\";\n    }\n    static{\n        /**\n     * The key for the id attribute.\n     */ this.s_id = \"id\";\n    }\n    static{\n        /**\n     * The key for the elementType attribute.\n     */ this.s_elementType = \"elementType\";\n    }\n    static{\n        /**\n     * The key for the x3 attribute.\n     */ this.s_x3 = \"x3\";\n    }\n    static{\n        /**\n     * The key for the y3 attribute.\n     */ this.s_y3 = \"y3\";\n    }\n    static{\n        /**\n     * The key for the z3 attribute.\n     */ this.s_z3 = \"z3\";\n    }\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     */ constructor(attributes, molecule){\n        super(attributes, $7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName);\n        this.molecule = molecule;\n    }\n    /**\n     * @returns True if the atom has coordinates.\n     */ hasCoordinates() {\n        if (this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_x3) != undefined && this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_y3) != undefined && this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_z3) != undefined) return true;\n        return false;\n    }\n    /**\n     * @returns The id.\n     */ getId() {\n        return this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_id);\n    }\n    /**\n     * @param id The id.\n     */ setId(id) {\n        this.attributes.set($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_id, id);\n    }\n    /**\n     * @returns The element type.\n     */ getElementType() {\n        return this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_elementType);\n    }\n    /**\n     * @param elementType The element type.\n     */ setElementType(elementType) {\n        this.attributes.set($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_elementType, elementType);\n    }\n    /**\n     * @returns The x3 attribute value as a number or undefined.\n     */ getX3() {\n        let x3 = this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_x3);\n        if (x3 != undefined) return parseFloat(x3);\n    }\n    /**\n     * @param x3 The x3 attribute value.\n     */ setX3(x3) {\n        this.attributes.set($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_x3, x3.toString());\n    }\n    /**\n     * Removes the x3 attribute.\n     */ removeX3() {\n        this.attributes.delete($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_x3);\n    }\n    /**\n     * @returns The y3 attribute value as a number or undefined.\n     */ getY3() {\n        let y3 = this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_y3);\n        if (y3 != undefined) return parseFloat(y3);\n    }\n    /**\n     * @param y3 The y3 attribute value.\n     */ setY3(y3) {\n        this.attributes.set($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_y3, y3.toString());\n    }\n    /**\n     * Removes the y3 attribute.\n     */ removeY3() {\n        this.attributes.delete($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_y3);\n    }\n    /**\n     * @returns The z3 attribute value as a number or undefined.\n     */ getZ3() {\n        let z3 = this.attributes.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.s_z3);\n        if (z3 != undefined) return parseFloat(z3);\n    }\n    /**\n     * @param z3 The z3 attribute value.\n     */ setZ3(z3) {\n        this.attributes.set(\"z3\", z3.toString());\n    }\n    /**\n     * Removes the x3 attribute.\n     */ removeZ3() {\n        this.attributes.delete(\"z3\");\n    }\n}\nclass $7cb8c0739b32549c$export$9cea715eceba39a0 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"atomArray\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */ constructor(attributes, atoms){\n        super(attributes, $7cb8c0739b32549c$export$9cea715eceba39a0.tagName);\n        this.index = new Map();\n        this.reverseIndex = new Map();\n        if (atoms == undefined) this.atoms = new Map();\n        else {\n            this.atoms = atoms;\n            atoms.forEach((atom, id)=>{\n                this.index.set(id, this.nodes.size);\n                this.reverseIndex.set(this.nodes.size, id);\n                this.nodes.set(this.nodes.size, atom);\n            });\n        }\n    }\n    /**\n     * @param id The id of the atom to get.\n     * @returns The atom with the given id.\n     */ getAtom(id) {\n        return this.atoms.get(id);\n    }\n    /**\n     * @param atom The atom to add.\n     * @returns The id of the atom.\n     */ addAtom(atom) {\n        //console.log('Adding atom...');\n        let id = atom.getId();\n        if (id == undefined) {\n            id = this.getNextAtomID();\n            atom.setId(id);\n        } else if (this.atoms.has(id)) {\n            let newID = this.getNextAtomID();\n            console.warn(\"Atom with id \" + id + \" already exists, adding with id \" + newID);\n            atom.setId(newID);\n            id = newID;\n        }\n        //console.log('Atom id: ' + id);\n        this.index.set(id, this.nodes.size);\n        this.reverseIndex.set(this.nodes.size, id);\n        this.nodes.set(this.nodes.size, atom);\n        this.atoms.set(id, atom);\n        /*\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.reverseIndex.keys() ' + Array.from(this.reverseIndex.keys()));\n        console.log('this.reverseIndex.values() ' + Array.from(this.reverseIndex.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */ return id;\n    }\n    /**\n     * @returns The atomId.\n     */ getNextAtomID() {\n        let i = 1;\n        let id = \"a\" + i.toString();\n        if (this.atoms.has(id)) while(this.atoms.has(id)){\n            i++;\n            id = \"a\" + i.toString();\n        }\n        return id;\n    }\n    /**\n     * @param id The id of the atom to remove.\n     */ removeAtom(id) {\n        let i = this.index.get(id);\n        if (i == undefined) throw new Error(\"Atom with id \" + id + \" does not exist!\");\n        console.log(\"Removing atom with id \" + id);\n        this.atoms.delete(id);\n        //this.index.delete(id);\n        //this.nodes.delete(i);\n        this.deleteNodeAndReindex(i, id);\n    /*\n        console.log('i ' + i);\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */ }\n    /**\n     * @param i The index of the atom to remove.\n     * @param id The id of the atom to remove.\n     */ deleteNodeAndReindex(i, id) {\n        this.nodes.delete(i);\n        this.index.delete(id);\n        this.reverseIndex.delete(i);\n        let newNodes = new Map();\n        let newIndex = new Map();\n        let newReverseIndex = new Map();\n        this.index.forEach((value, key)=>{\n            if (value > i) {\n                newNodes.set(value - 1, this.nodes.get(value));\n                newIndex.set(key, value - 1);\n                newReverseIndex.set(value - 1, key);\n            } else {\n                newNodes.set(value, this.nodes.get(value));\n                newIndex.set(key, value);\n                newReverseIndex.set(value, key);\n            }\n        });\n        this.nodes = newNodes;\n        this.index = newIndex;\n        this.reverseIndex = newReverseIndex;\n    }\n}\nclass $7cb8c0739b32549c$export$153327fc99ac0c53 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"bond\";\n    }\n    static{\n        /**\n     * The key for the atomRefs2 attribute.\n     */ this.s_atomRefs2 = \"atomRefs2\";\n    }\n    static{\n        /**\n     * The key for the id attribute.\n     */ this.s_id = \"id\";\n    }\n    static{\n        /**\n     * The key for the order attribute.\n     */ this.s_order = \"order\";\n    }\n    static{\n        /**\n     * The order options.\n     */ this.orderOptions = [\n            \"1\",\n            \"1.5\",\n            \"2\",\n            \"2.5\",\n            \"3\",\n            \"3.5\",\n            \"4\",\n            \"4.5\",\n            \"5\",\n            \"5.5\",\n            \"6\"\n        ];\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, molecule){\n        super(attributes, $7cb8c0739b32549c$export$153327fc99ac0c53.tagName);\n        this.molecule = molecule;\n    }\n    /**\n     * @returns The atomRefs2.\n     */ getAtomRefs2() {\n        let atomRefs2 = this.attributes.get($7cb8c0739b32549c$export$153327fc99ac0c53.s_atomRefs2);\n        let atomRefs = atomRefs2?.split(\" \") || [];\n        if (atomRefs2 == undefined) return \"a1 a1\";\n        return atomRefs2;\n    }\n    /**\n     * @param atomRefs2 The atomRefs2 to set.\n     */ setAtomRefs2(atomRefs2) {\n        this.attributes.set($7cb8c0739b32549c$export$153327fc99ac0c53.s_atomRefs2, atomRefs2);\n    }\n    /**\n     * @returns The id.\n     */ getId() {\n        return this.attributes.get($7cb8c0739b32549c$export$153327fc99ac0c53.s_id);\n    }\n    /**\n     * @param id The id to set the attribute value referred to by \"id\".\n     */ setId(id) {\n        this.attributes.set($7cb8c0739b32549c$export$153327fc99ac0c53.s_id, id);\n    }\n    /**\n     * @returns The attribute value referred to by \"order\" as a number or undefined.\n     */ getOrder() {\n        let order = this.attributes.get($7cb8c0739b32549c$export$153327fc99ac0c53.s_order);\n        if (order != undefined) return parseFloat(order);\n    }\n    /**\n     * @param order The order to set the attribute value referred to by \"order\".\n     */ setOrder(order) {\n        this.attributes.set($7cb8c0739b32549c$export$153327fc99ac0c53.s_order, order.toString());\n    }\n}\nclass $7cb8c0739b32549c$export$746fba2e30d93fe6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"bondArray\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bonds The bonds.\n     */ constructor(attributes, bonds){\n        super(attributes, $7cb8c0739b32549c$export$746fba2e30d93fe6.tagName);\n        this.index = new Map();\n        this.reverseIndex = new Map();\n        if (bonds == undefined) this.bonds = new Map();\n        else {\n            this.bonds = bonds;\n            bonds.forEach((bond, id)=>{\n                this.index.set(id, this.nodes.size);\n                this.reverseIndex.set(this.nodes.size, id);\n                this.nodes.set(this.nodes.size, bond);\n            });\n        }\n    }\n    /**\n     * @returns The bond ids.\n     */ getBondIds() {\n        return Array.from(this.bonds.keys());\n    }\n    /**\n     * @param id The id of the bond to get.\n     * @returns The bond with the given id.\n     */ getBond(id) {\n        return this.bonds.get(id);\n    }\n    /**\n     * Adds a bond to the array.\n     * @param bond The bond to add.\n     */ addBond(bond) {\n        //console.log('Add ' + bond.tagName + '...');\n        let id = bond.getId();\n        if (id == undefined) {\n            id = this.getNextBondID();\n            bond.setId(id);\n        } else if (this.bonds.has(id)) {\n            let newID = this.getNextBondID();\n            console.log(\"Bond with id \" + id + \" already exists, adding with id \" + newID);\n            bond.setId(newID);\n            id = newID;\n        }\n        //console.log('Bond id: ' + id);\n        this.index.set(id, this.nodes.size);\n        this.reverseIndex.set(this.nodes.size, id);\n        this.nodes.set(this.nodes.size, bond);\n        this.bonds.set(id, bond);\n        /*\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.reverseIndex.keys() ' + Array.from(this.reverseIndex.keys()));\n        console.log('this.reverseIndex.values() ' + Array.from(this.reverseIndex.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */ return id;\n    }\n    /**\n     * @returns The atomId.\n     */ getNextBondID() {\n        let i = 1;\n        let id = \"b\" + i.toString();\n        while(this.bonds.has(id)){\n            i++;\n            id = \"b\" + i.toString();\n        }\n        return id;\n    }\n    /**\n     * @param id The id of the atom to remove.\n     */ removeBond(id) {\n        let i = this.index.get(id);\n        if (i == undefined) throw new Error(\"Bond with id \" + id + \" does not exist!\");\n        console.log(\"Removing bond with id \" + id);\n        this.bonds.delete(id);\n        //this.index.delete(id);\n        //this.nodes.delete(i);\n        this.deleteNodeAndReindex(i, id);\n    /*\n        console.log('i ' + i);\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */ }\n    /**\n     * @param i The index of the bond to remove.\n     * @param id The id of the bond to remove.\n     */ deleteNodeAndReindex(i, id) {\n        this.nodes.delete(i);\n        this.index.delete(id);\n        this.reverseIndex.delete(i);\n        let newNodes = new Map();\n        let newIndex = new Map();\n        let newReverseIndex = new Map();\n        this.index.forEach((value, key)=>{\n            if (value > i) {\n                newNodes.set(value - 1, this.nodes.get(value));\n                newIndex.set(key, value - 1);\n                newReverseIndex.set(value - 1, key);\n            } else {\n                newNodes.set(value, this.nodes.get(value));\n                newIndex.set(key, value);\n                newReverseIndex.set(value, key);\n            }\n        });\n        this.nodes = newNodes;\n        this.index = newIndex;\n        this.reverseIndex = newReverseIndex;\n    }\n}\nclass $7cb8c0739b32549c$export$d29b345ea2be5072 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"scalar\";\n    }\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$d29b345ea2be5072.tagName, value);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits = this.attributes.get($7cb8c0739b32549c$export$d29b345ea2be5072.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) //console.log('Units are not the same, changing units...');\n                this.attributes.set($7cb8c0739b32549c$export$d29b345ea2be5072.s_units, units);\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$9f93a3fdf2490572 extends (0, $6648a11f147a5c05$export$38d8ebe2767f8865) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"array\";\n    }\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, values, delimiter){\n        super(attributes, $7cb8c0739b32549c$export$9f93a3fdf2490572.tagName, values, delimiter);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits = this.attributes.get($7cb8c0739b32549c$export$9f93a3fdf2490572.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set($7cb8c0739b32549c$export$9f93a3fdf2490572.s_units, units);\n                    console.log(\"Units changed from \" + existingUnits + \" to \" + units);\n                }\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$a5a2be813176eb0e extends (0, $6648a11f147a5c05$export$38d8ebe2767f8865) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"matrix\";\n    }\n    static{\n        /**\n     * The key for the rows attribute.\n     */ this.s_rows = \"rows\";\n    }\n    static{\n        /**\n     * The key for the matrixType attribute.\n     */ this.s_matrixType = \"matrixType\";\n    }\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, values, delimiter){\n        super(attributes, $7cb8c0739b32549c$export$9f93a3fdf2490572.tagName, values, delimiter);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits = this.attributes.get($7cb8c0739b32549c$export$9f93a3fdf2490572.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set($7cb8c0739b32549c$export$9f93a3fdf2490572.s_units, units);\n                    console.log(\"Units changed from \" + existingUnits + \" to \" + units);\n                }\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$41b04b3a73e7216d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"property\";\n    }\n    static{\n        /**\n     * The key for the dictRef attribute.\n     */ this.s_dictRef = \"dictRef\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, $7cb8c0739b32549c$export$41b04b3a73e7216d.tagName);\n        let dictRef = attributes.get($7cb8c0739b32549c$export$41b04b3a73e7216d.s_dictRef);\n        if (dictRef == undefined) throw new Error($7cb8c0739b32549c$export$41b04b3a73e7216d.s_dictRef + \" is undefined!\");\n        this.dictRef = dictRef;\n        if (property) this.nodes.set(0, property);\n    }\n    /**\n     * @returns The property.\n     */ getProperty() {\n        return this.nodes.get(0);\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        this.nodes.set(0, property);\n    }\n}\nclass $7cb8c0739b32549c$export$95174cf0748f45cd extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        /**\n     * The dictionary reference.\n     */ this.dictRef = \"me:ZPE\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n    /**\n     * @param units The units.\n     * Should be one of Mesmer.energyUnits.\n     */ setUnits(units) {\n        this.getProperty().updateUnits(units);\n    }\n}\nclass $7cb8c0739b32549c$export$1288989e9be37590 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        /**\n     * The dictionary reference.\n     */ this.dictRef = \"me:frequenciesScaleFactor\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$2762c8fbc03043ca extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        /**\n     * The dictionary reference.\n     */ this.dictRef = \"me:vibFreqs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$984abe26ded13ee0 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        /**\n     * The dictionary reference.\n     */ this.dictRef = \"me:rotConsts\";\n    }\n    static{\n        /**\n     * The units.\n     */ this.unitOptions = [\n            \"cm-1\",\n            \"GHz\",\n            \"amuA^2\"\n        ];\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$a3772f6eb527275b extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        /**\n     * The dictionary reference.\n     */ this.dictRef = \"me:MW\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$22995ecd2bdeb2 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        /**\n     * The dictionary reference.\n     */ this.dictRef = \"me:imFreqs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$4e0d1ad7ad6a0802 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"propertyList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */ constructor(attributes, properties){\n        super(attributes, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        this.index = new Map();\n        if (properties != undefined) properties.forEach((property)=>{\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */ getProperty(dictRef) {\n        let i = this.index.get(dictRef);\n        if (i != undefined) return this.nodes.get(i);\n        else throw new Error(\"Property \" + dictRef + \" does not exist\");\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        let i = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log(\"Property \" + property.dictRef + \" already exists, updating...\");\n            this.nodes.set(i, property);\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$16fc56ab40b12b45 extends (0, $07cfde92b14f998c$export$d0e9917d83c120a0) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:deltaEDown\";\n    }\n    static{\n        /**\n     * The key for the bathGas attribute.\n     */ this.s_bathGas = \"bathGas\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$16fc56ab40b12b45.tagName, value);\n    }\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */ getBathGas() {\n        return this.attributes.get($7cb8c0739b32549c$export$16fc56ab40b12b45.s_bathGas);\n    }\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */ setBathGas(bathGas) {\n        this.attributes.set($7cb8c0739b32549c$export$16fc56ab40b12b45.s_bathGas, bathGas);\n    }\n}\nclass $7cb8c0739b32549c$export$1aede585378507cb extends $7cb8c0739b32549c$export$16fc56ab40b12b45 {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:deltaEDown2\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, value);\n    }\n}\nclass $7cb8c0739b32549c$export$f8ecc5f7f62d6fbf extends (0, $07cfde92b14f998c$export$d0e9917d83c120a0) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:deltaEDownTExponent\";\n    }\n    static{\n        /**\n     * The referenceTemperature attribute key.\n     */ this.s_referenceTemperature = \"referenceTemperature\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$f8ecc5f7f62d6fbf.tagName, value);\n    }\n    /**\n     * @returns The referenceTemperature.\n     */ getReferenceTemperature() {\n        return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, $7cb8c0739b32549c$export$f8ecc5f7f62d6fbf.s_referenceTemperature));\n    }\n    /**\n     * @param referenceTemperature The referenceTemperature.\n     */ setReferenceTemperature(referenceTemperature) {\n        this.attributes.set($7cb8c0739b32549c$export$f8ecc5f7f62d6fbf.s_referenceTemperature, referenceTemperature.toString());\n    }\n}\nclass $7cb8c0739b32549c$export$fbea747a02da7eb8 extends (0, $07cfde92b14f998c$export$d0e9917d83c120a0) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:deltaEDownLinEne\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$fbea747a02da7eb8.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$499950da20810ac9 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:energyTransferModel\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */ constructor(attributes, deltaEDowns){\n        super(attributes, $7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (deltaEDowns != undefined) deltaEDowns.forEach((deltaEDown)=>{\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n    /**\n     * @returns The DeltaEDowns.\n     */ getDeltaEDowns() {\n        let deltaEDowns = [];\n        this.nodes.forEach((node)=>{\n            if (node instanceof $7cb8c0739b32549c$export$16fc56ab40b12b45) deltaEDowns.push(node);\n        });\n        return deltaEDowns;\n    }\n    /**\n     * @param deltaEDowns The DeltaEDowns.\n     */ setDeltaEDowns(deltaEDowns) {\n        this.nodes.clear();\n        deltaEDowns.forEach((deltaEDown)=>{\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */ getDeltaEDown(index) {\n        if (index < 0 || index >= this.nodes.size) throw new Error(\"index out of range\");\n        return this.nodes.get(index);\n    }\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */ setDeltaEDown(index, deltaEDown) {\n        this.nodes.set(index, deltaEDown);\n    }\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */ addDeltaEDown(deltaEDown) {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\nclass $7cb8c0739b32549c$export$bbdce6c921702068 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:DOSCMethod\";\n    }\n    static{\n        /**\n     * The options for the \"xsi:type\" or \"name\" attribute value.\n     */ this.xsi_typeOptions = [\n            \"ClassicalRotors\",\n            \"QMRotors\",\n            \"me:ClassicalRotors\",\n            \"me:QMRotors\"\n        ];\n    }\n    static{\n        /**\n     * The key for the \"xsi:type\" attribute value.\n     */ this.s_xsi_type = \"xsi:type\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (attributes.get($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type) == undefined) {\n            let name = attributes.get(\"name\");\n            if (name == undefined) throw new Error(\"Neither xsi:type or name are defined.\");\n            else attributes.set($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type, name);\n        }\n    }\n    /**\n     * @returns The xsi:type.\n     */ getXsiType() {\n        return this.attributes.get($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type);\n    }\n    /**\n     * @param xsiType The xsi:type.\n     */ setXsiType(xsiType) {\n        this.attributes.set($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type, xsiType);\n    }\n}\nclass $7cb8c0739b32549c$export$aef8e5ad5552fd72 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:bondRef\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */ constructor(attributes, bondRef){\n        super(attributes, $7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, bondRef);\n    }\n}\nclass $7cb8c0739b32549c$export$86ca5149fcde8feb extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PotentialPoint\";\n    }\n    static{\n        /**\n     * The key angle attribute.\n     */ this.s_angle = \"angle\";\n    }\n    static{\n        /**\n     * The key potential attribute.\n     */ this.s_potential = \"potential\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$86ca5149fcde8feb.tagName);\n        let angle = attributes.get($7cb8c0739b32549c$export$86ca5149fcde8feb.s_angle);\n        if (angle == undefined) throw new Error($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential + \" is undefined!\");\n        this.angle = parseFloat(angle);\n        let potential = attributes.get($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential);\n        if (potential == undefined) throw new Error($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential + \" is undefined!\");\n        this.potential = parseFloat(potential);\n    }\n    /**\n     * @returns The angle.\n     */ getAngle() {\n        return this.angle;\n    }\n    /**\n     * @param angle The angle of the PotentialPoint.\n     */ setAngle(angle) {\n        this.angle = angle;\n        this.attributes.set($7cb8c0739b32549c$export$86ca5149fcde8feb.s_angle, angle.toString());\n    }\n    /**\n     * @returns The potential.\n     */ getPotential() {\n        return this.potential;\n    }\n    /**\n     * @param potential The potential of the PotentialPoint.\n     */ setPotential(potential) {\n        this.potential = potential;\n        this.attributes.set($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential, potential.toString());\n    }\n}\nclass $7cb8c0739b32549c$export$9b8e857b9a081d2 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:HinderedRotorPotential\";\n    }\n    static{\n        /**\n     * The permitted formats.\n     */ this.formats = new Set([\n            \"numerical\",\n            \"analytical\"\n        ]);\n    }\n    static{\n        /**\n     * The key for the format attribute value.\n     */ this.s_format = \"format\";\n    }\n    static{\n        /**\n     * The key for the units attribute value.\n     */ this.s_units = \"units\";\n    }\n    static{\n        /**\n     * The key for the expansionSize attribute value.\n     */ this.s_expansionSize = \"expansionSize\";\n    }\n    static{\n        /**\n     * The key for the useSineTerms attribute value.\n     */ this.s_useSineTerms = \"useSineTerms\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param potentialPoints The PotentialPoints.\n     */ constructor(attributes, potentialPoints){\n        super(attributes, $7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        let format = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_format);\n        if (format == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_format + \" is undefined!\");\n        this.format = format;\n        let units = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_units);\n        if (units == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_units + \" is undefined!\");\n        this.units = units;\n        if (potentialPoints != undefined) potentialPoints.forEach((p)=>{\n            this.nodes.set(this.nodes.size, p);\n        });\n        let expansionSize = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_expansionSize);\n        if (expansionSize == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_expansionSize + \" is undefined!\");\n        this.expansionSize = parseFloat(expansionSize);\n        let useSineTerms = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_useSineTerms);\n        if (useSineTerms == undefined) this.useSineTerms = false;\n        else this.useSineTerms = true;\n    //this.useSineTerms = (useSineTerms == \"yes\");\n    }\n    /**\n     * @returns The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */ getFormat() {\n        return this.format;\n    }\n    /**\n     * @param format The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */ setFormat(format) {\n        this.format = format;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_format, format);\n    }\n    /**\n     * @returns The units of the HinderedRotorPotential.\n     * Should be one of Mesmer.energyUnits.\n     */ getUnits() {\n        return this.units;\n    }\n    /**\n     * @param units The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */ setUnits(units) {\n        this.units = units;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_units, units);\n    }\n    /**\n     * @returns The expansionSize of the HinderedRotorPotential.\n     */ getExpansionSize() {\n        return this.expansionSize;\n    }\n    /**\n     * @param expansionSize The expansionSize of the HinderedRotorPotential.\n     */ setExpansionSize(expansionSize) {\n        this.expansionSize = expansionSize;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_expansionSize, expansionSize.toString());\n    }\n    /**\n     * @returns The useSineTerms of the HinderedRotorPotential.\n     */ getUseSineTerms() {\n        return this.useSineTerms;\n    }\n    /**\n     * @param useSineTerms The useSineTerms of the HinderedRotorPotential.\n     */ setUseSineTerms(useSineTerms) {\n        this.useSineTerms = useSineTerms;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_useSineTerms, useSineTerms ? \"yes\" : \"no\");\n    }\n    /**\n     * @returns The potential point with the given index.\n     */ getPotentialPoint(i) {\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the potential point at the given index.\n     * @param i The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */ setPotentialPoint(i, p) {\n        this.nodes.set(i, p);\n    }\n    /**\n     * Sets the potential points.\n     * @param potentialPoints The potential points.\n     */ setPotentialPoints(potentialPoints) {\n        this.nodes.clear();\n        potentialPoints.forEach((p)=>{\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */ addPotentialPoint(p) {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n    /**\n     * @param i The index of the potential point to remove.\n     */ removePotentialPoint(i) {\n        this.nodes.delete(i);\n    }\n}\nclass $7cb8c0739b32549c$export$9513c16afdf7d852 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        this.tagName = \"me:periodicity\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$9513c16afdf7d852.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$ae98b7db6376163d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:ExtraDOSCMethod\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */ constructor(attributes, bondRef, hinderedRotorPotential, periodicity){\n        super(attributes, $7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        this.index = new Map();\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, this.nodes.size - 1);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName, this.nodes.size - 1);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set($7cb8c0739b32549c$export$9513c16afdf7d852.tagName, this.nodes.size - 1);\n        }\n    }\n    /**\n     * @returns The bondRef.\n     */ getBondRef() {\n        let i = this.index.get($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */ setBondRef(bondRef) {\n        let i = this.index.get($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName);\n        if (i != undefined) this.nodes.set(i, bondRef);\n        else {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, this.nodes.size - 1);\n        }\n    }\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */ getHinderedRotorPotential() {\n        let i = this.index.get($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */ setHinderedRotorPotential(hinderedRotorPotential) {\n        let i = this.index.get($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        if (i != undefined) this.nodes.set(i, hinderedRotorPotential);\n        else {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName, this.nodes.size - 1);\n        }\n    }\n    /**\n     * @returns The periodicity of the molecule.\n     */ getPeriodicity() {\n        let i = this.index.get($7cb8c0739b32549c$export$9513c16afdf7d852.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */ setPeriodicity(periodicity) {\n        let i = this.index.get($7cb8c0739b32549c$export$9513c16afdf7d852.tagName);\n        if (i != undefined) this.nodes.set(i, periodicity);\n        else {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set($7cb8c0739b32549c$export$9513c16afdf7d852.tagName, this.nodes.size - 1);\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$97850fe2f2906f00 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:reservoirSize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$97850fe2f2906f00.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$3da9759ad07746a3 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"molecule\";\n    }\n    static{\n        /**\n     * The key for the id attribute value.\n     */ this.s_id = \"id\";\n    }\n    static{\n        /**\n     * The key for the description attribute value.\n     */ this.s_description = \"description\";\n    }\n    static{\n        /**\n     * The key for the active attribute value.\n     */ this.s_active = \"active\";\n    }\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. This will also include an \"id\".\n     * Additional attributes may include: \"description\" and \"active\" (and possibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */ constructor(attributes, id, //atoms?: Atom | AtomArray,\n    atoms, //bonds?: Bond | BondArray,\n    bonds, properties, energyTransferModel, dOSCMethod, extraDOSCMethod, reservoirSize){\n        super(attributes, $7cb8c0739b32549c$export$3da9759ad07746a3.tagName);\n        this.index = new Map();\n        this.id = id;\n        let i = 0;\n        // Atoms\n        if (!atoms) atoms = new $7cb8c0739b32549c$export$9cea715eceba39a0(new Map());\n        this.nodes.set(i, atoms);\n        this.index.set($7cb8c0739b32549c$export$9cea715eceba39a0.tagName, i);\n        i++;\n        // Bonds\n        if (!bonds) bonds = new $7cb8c0739b32549c$export$746fba2e30d93fe6(new Map());\n        this.nodes.set(i, bonds);\n        this.index.set($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName, i);\n        i++;\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set($7cb8c0739b32549c$export$499950da20810ac9.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set($7cb8c0739b32549c$export$bbdce6c921702068.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set($7cb8c0739b32549c$export$ae98b7db6376163d.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set($7cb8c0739b32549c$export$97850fe2f2906f00.tagName, i);\n        }\n    }\n    /**\n     * Get the description or the id of the molecule.\n     * @returns The description of the molecule, or the id if it is not set.\n     */ getDescription() {\n        let description = this.attributes.get($7cb8c0739b32549c$export$3da9759ad07746a3.s_description);\n        if (description != undefined) return description;\n        return this.id;\n    }\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */ setDescription(description) {\n        this.attributes.set($7cb8c0739b32549c$export$3da9759ad07746a3.s_description, description);\n    }\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */ getActive() {\n        let active = this.attributes.get($7cb8c0739b32549c$export$3da9759ad07746a3.s_active);\n        if (active != undefined) {\n            if (active == \"true\") return true;\n            else return false;\n        }\n    }\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */ setActive(active) {\n        this.attributes.set($7cb8c0739b32549c$export$3da9759ad07746a3.s_active, active.toString());\n    }\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */ getLabel() {\n        let label = this.id;\n        let description = this.getDescription();\n        if (description != undefined) label += \" (\" + description + \")\";\n        let active = this.getActive();\n        if (active) label += \" (\" + $7cb8c0739b32549c$export$3da9759ad07746a3.s_active + \")\";\n        return label;\n    }\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */ getAttributesAsString() {\n        return Array.from(this.attributes, ([key, value])=>`${key}=\\\"${value}\\\"`).join(\", \");\n    }\n    /**\n     * @returns The properties of the molecule.\n     */ getProperties() {\n        let i = this.index.get($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        if (i == undefined) {\n            i = this.index.get($7cb8c0739b32549c$export$41b04b3a73e7216d.tagName);\n            if (i == undefined) return undefined;\n            else return this.nodes.get(i);\n        } else return this.nodes.get(i);\n    }\n    /**\n     * @param properties The properties.\n     */ setProperties(properties) {\n        let i = this.index.get($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else this.nodes.set(i, properties);\n    }\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */ getProperty(dictRef) {\n        let properties = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof $7cb8c0739b32549c$export$4e0d1ad7ad6a0802) //console.log('PropertyList');\n            return properties.getProperty(dictRef);\n            else //console.log('Property');\n            return properties;\n        }\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        let properties = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof $7cb8c0739b32549c$export$4e0d1ad7ad6a0802) properties.setProperty(property);\n            else this.setProperties(properties);\n        } else this.setProperties(property);\n    }\n    /**\n     * @param atomId The id of the atom.\n     * @returns The atom for the given atomId.\n     */ getAtom(atomId) {\n        return this.getAtoms().getAtom(atomId);\n    }\n    /**\n     * @returns The atoms of the molecule.\n     */ getAtoms() {\n        let i = this.index.get($7cb8c0739b32549c$export$9cea715eceba39a0.tagName);\n        return this.nodes.get(i);\n    }\n    /**\n     * @param atoms The atoms.\n     */ setAtoms(atoms) {\n        this.index.set($7cb8c0739b32549c$export$9cea715eceba39a0.tagName, this.nodes.size);\n        this.nodes.set(this.nodes.size, atoms);\n    }\n    /**\n     * @param bondId The id of the bond.\n     * @returns The bond for the given bondId.\n     */ getBond(bondId) {\n        return this.getBonds().getBond(bondId);\n    }\n    /**\n     * @returns The bonds of the molecule.\n     */ getBonds() {\n        let i = this.index.get($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName);\n        return this.nodes.get(i);\n    }\n    /**\n     * @param bonds The bonds.\n     */ setBonds(bonds) {\n        this.index.set($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName, this.nodes.size);\n        this.nodes.set(this.nodes.size, bonds);\n    }\n    /**\n     * @returns The energy transfer model of the molecule.\n     */ getEnergyTransferModel() {\n        let i = this.index.get($7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */ setEnergyTransferModel(energyTransferModel) {\n        let i = this.index.get($7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$499950da20810ac9.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else this.nodes.set(i, energyTransferModel);\n    }\n    /**\n     * @returns The DOSC method of the molecule.\n     */ getDOSCMethod() {\n        let i = this.index.get($7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */ setDOSCMethod(dOSCMethod) {\n        let i = this.index.get($7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$bbdce6c921702068.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else this.nodes.set(i, dOSCMethod);\n    }\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */ getExtraDOSCMethod() {\n        let i = this.index.get($7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */ setExtraDOSCMethod(extraDOSCMethod) {\n        let i = this.index.get($7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$ae98b7db6376163d.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else this.nodes.set(i, extraDOSCMethod);\n    }\n    /**\n     * @returns The reservoir size of the molecule.\n     */ getReservoirSize() {\n        let i = this.index.get($7cb8c0739b32549c$export$97850fe2f2906f00.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */ setReservoirSize(reservoirSize) {\n        let i = this.index.get($7cb8c0739b32549c$export$97850fe2f2906f00.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$97850fe2f2906f00.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else this.nodes.set(i, reservoirSize);\n    }\n    /**\n     * Get the ZPE value of the molecule.\n     */ getEnergy() {\n        let p = this.getProperty($7cb8c0739b32549c$export$95174cf0748f45cd.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error($7cb8c0739b32549c$export$95174cf0748f45cd.dictRef + \" property not found!\");\n        //return 0;\n        }\n        return p.getProperty().value;\n    }\n}\n\n\n\nclass $381c11e38cac5410$export$e8a062bb2fc9e2ba extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"molecule\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$e8a062bb2fc9e2ba.tagName);\n        this.ref = attributes.get(\"ref\");\n        this.role = attributes.get(\"role\");\n    }\n    /**\n     * @param role The role of the molecule in the reaction.\n     */ setRole(role) {\n        this.role = role;\n    }\n}\nclass $381c11e38cac5410$export$dcfd4302d04b7fb6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reactant\";\n    }\n    static{\n        /**\n     * The role options.\n     */ this.roleOptions = [\n            \"deficientReactant\",\n            \"excessReactant\",\n            \"modelled\"\n        ];\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$dcfd4302d04b7fb6.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$264ad599d7cef668 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"product\";\n    }\n    static{\n        /**\n     * The role options.\n     */ this.roleOptions = [\n            \"modelled\",\n            \"sink\"\n        ];\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$264ad599d7cef668.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$145c1ed87b1a2216 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:transitionState\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$145c1ed87b1a2216.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$38ce90ac8b004d85 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:preExponential\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$38ce90ac8b004d85.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$1bdc69d2439d749d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:activationEnergy\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$1bdc69d2439d749d.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$8d95dd32819bc86c extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:TInfinity\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$8d95dd32819bc86c.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$d08982dd841d496f extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:nInfinity\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$d08982dd841d496f.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$6fa70ee10f356b6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MCRCMethod\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n    }\n}\nclass $381c11e38cac5410$export$191e95ebb11cc88 extends $381c11e38cac5410$export$6fa70ee10f356b6 {\n    static{\n        /**\n     * The xsiType.\n     */ this.xsiType = \"me:MesmerILT\";\n    }\n    static{\n        /**\n     * The tag name.\n     */ this.xsiType2 = \"MesmerILT\";\n    }\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */ constructor(attributes, preExponential, activationEnergy, tInfinity, nInfinity){\n        super(attributes);\n        this.index = new Map();\n        if (preExponential != undefined) {\n            this.index.set($381c11e38cac5410$export$38ce90ac8b004d85.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set($381c11e38cac5410$export$1bdc69d2439d749d.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set($381c11e38cac5410$export$8d95dd32819bc86c.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set($381c11e38cac5410$export$d08982dd841d496f.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */ getPreExponential() {\n        let i = this.index.get($381c11e38cac5410$export$38ce90ac8b004d85.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param preExponential The pre-exponential factor.\n     */ setPreExponential(preExponential) {\n        let i = this.index.get($381c11e38cac5410$export$38ce90ac8b004d85.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$38ce90ac8b004d85.tagName, this.nodes.size);\n            this.addNode(preExponential);\n        } else this.nodes.set(i, preExponential);\n    }\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */ getActivationEnergy() {\n        let i = this.index.get($381c11e38cac5410$export$1bdc69d2439d749d.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param activationEnergy The activation energy.\n     */ setActivationEnergy(activationEnergy) {\n        let i = this.index.get($381c11e38cac5410$export$1bdc69d2439d749d.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$1bdc69d2439d749d.tagName, this.nodes.size);\n            this.addNode(activationEnergy);\n        } else this.nodes.set(i, activationEnergy);\n    }\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */ getTInfinity() {\n        let i = this.index.get($381c11e38cac5410$export$8d95dd32819bc86c.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param tInfinity The TInfinity.\n     */ setTInfinity(tInfinity) {\n        let i = this.index.get($381c11e38cac5410$export$8d95dd32819bc86c.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$8d95dd32819bc86c.tagName, this.nodes.size);\n            this.addNode(tInfinity);\n        } else this.nodes.set(i, tInfinity);\n    }\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */ getNInfinity() {\n        let i = this.index.get($381c11e38cac5410$export$d08982dd841d496f.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param nInfinity The NInfinity.\n     */ setNInfinity(nInfinity) {\n        let i = this.index.get($381c11e38cac5410$export$d08982dd841d496f.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$d08982dd841d496f.tagName, this.nodes.size);\n            this.addNode(nInfinity);\n        } else this.nodes.set(i, nInfinity);\n    }\n}\nclass $381c11e38cac5410$export$c3cf6f96dac11421 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:tunneling\";\n    }\n    static{\n        /**\n     * The options.\n     */ this.options = [\n            \"Eckart\",\n            \"WKB\"\n        ];\n    }\n    static{\n        /**\n     * The key to the name attribute value.\n     */ this.s_name = \"name\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n    }\n    /**\n     * @returns The name of the tunneling method.\n     */ getName() {\n        return this.attributes.get($381c11e38cac5410$export$c3cf6f96dac11421.s_name);\n    }\n    /**\n     * @param The name of the tunneling method.\n     */ setName(name) {\n        this.attributes.set($381c11e38cac5410$export$c3cf6f96dac11421.s_name, name);\n    }\n}\nclass $381c11e38cac5410$export$284227145ed02b04 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:excessReactantConc\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$284227145ed02b04.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$d2ae4167a30cf6bb extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reaction\";\n    }\n    static{\n        /**\n     * The key to the id attribute value.\n     */ this.s_id = \"id\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */ constructor(attributes, reactants, products, tunneling, transitionStates, mCRCMethod, excessReactantConc){\n        super(attributes, $381c11e38cac5410$export$d2ae4167a30cf6bb.tagName);\n        this.index = new Map();\n        this.reactantsIndex = new Map();\n        this.productsIndex = new Map();\n        this.transitionStatesIndex = new Map();\n        let id = attributes.get($381c11e38cac5410$export$d2ae4167a30cf6bb.s_id);\n        if (id == undefined) throw new Error($381c11e38cac5410$export$d2ae4167a30cf6bb.s_id + \" is undefined!\");\n        this.id = id;\n        if (reactants != undefined) {\n            reactants.forEach((reactant)=>{\n                this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n                this.addNode(reactant);\n            });\n            this.index.set($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName, this.reactantsIndex);\n        }\n        if (products != undefined) {\n            products.forEach((product)=>{\n                this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n                this.addNode(product);\n            });\n            this.index.set($381c11e38cac5410$export$264ad599d7cef668.tagName, this.productsIndex);\n        }\n        if (tunneling != undefined) {\n            this.index.set($381c11e38cac5410$export$c3cf6f96dac11421.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach((transitionState)=>{\n                this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n                this.addNode(transitionState);\n            });\n            this.index.set($381c11e38cac5410$export$145c1ed87b1a2216.tagName, this.transitionStatesIndex);\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set($381c11e38cac5410$export$6fa70ee10f356b6.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set($381c11e38cac5410$export$284227145ed02b04.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n    /**\n     * Add a node to the index.\n     */ addToIndex(tagName, node) {\n        let v = this.index.get(tagName);\n        if (v == undefined) this.index.set(tagName, this.nodes.size);\n        else if (v instanceof Map) v.set(node.tagName, this.nodes.size);\n        else {\n            let map = new Map();\n            map.set(this.nodes.get(v).ref, v);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n    /**\n     * @returns The reactants.\n     */ getReactants() {\n        let i = this.index.get($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * Set the reactants.\n     */ setReactants(reactants) {\n        reactants.forEach((reactant)=>{\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n            this.addNode(reactant);\n        });\n        this.index.set($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName, this.reactantsIndex);\n    }\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */ getReactant(ref) {\n        let index = this.reactantsIndex.get(ref);\n        if (index == undefined) throw new Error(`Reactant with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @param reactant The reactant to add.\n     */ addReactant(reactant) {\n        this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n        this.addNode(reactant);\n    }\n    /**\n     * @param ref The ref of the reactant to remove.\n     */ removeReactant(ref) {\n        let index = this.reactantsIndex.get(ref);\n        if (index == undefined) throw new Error(`Reactant with ref ${ref} not found`);\n        else {\n            this.nodes.delete(index);\n            this.reactantsIndex.delete(ref);\n        }\n    }\n    /**\n     * @returns The products.\n     */ getProducts() {\n        let i = this.index.get($381c11e38cac5410$export$264ad599d7cef668.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * Set the products.\n     */ setProducts(products) {\n        products.forEach((product)=>{\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n            this.addNode(product);\n        });\n        this.index.set($381c11e38cac5410$export$264ad599d7cef668.tagName, this.productsIndex);\n    }\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */ getProduct(ref) {\n        let index = this.productsIndex.get(ref);\n        if (index == undefined) throw new Error(`Product with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @param product The product to add.\n     */ addProduct(product) {\n        this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n        this.addNode(product);\n    }\n    /**\n     * @param ref The ref of the product to remove.\n     */ removeProduct(ref) {\n        let index = this.productsIndex.get(ref);\n        if (index == undefined) throw new Error(`Product with ref ${ref} not found`);\n        else {\n            this.nodes.delete(index);\n            this.productsIndex.delete(ref);\n        }\n    }\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */ getTunneling() {\n        let i = this.index.get($381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */ setTunneling(tunneling) {\n        let i = this.index.get($381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$c3cf6f96dac11421.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, tunneling);\n        }\n    }\n    /**\n     * @returns The transition states.\n     */ getTransitionStates() {\n        let i = this.index.get($381c11e38cac5410$export$145c1ed87b1a2216.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * Set the transition states.\n     */ setTransitionStates(transitionStates) {\n        transitionStates.forEach((transitionState)=>{\n            this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n            this.addNode(transitionState);\n        });\n        this.index.set($381c11e38cac5410$export$145c1ed87b1a2216.tagName, this.transitionStatesIndex);\n    }\n    /**\n     * @returns A particular TransitionState.\n     * @param ref The ref of the transition state to return.\n     * @returns The transition state at the given index.\n     */ getTransitionState(ref) {\n        let index = this.transitionStatesIndex.get(ref);\n        if (index == undefined) throw new Error(`Transition state with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @param transitionState The transition state to add.\n     */ addTransitionState(transitionState) {\n        this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n        this.addNode(transitionState);\n    }\n    /**\n     * @param ref The ref of the transition state to remove.\n     */ removeTransitionState(ref) {\n        let index = this.transitionStatesIndex.get(ref);\n        if (index == undefined) throw new Error(`Transition State with ref ${ref} not found`);\n        else {\n            this.nodes.delete(index);\n            this.transitionStatesIndex.delete(ref);\n        }\n    }\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */ getMCRCMethod() {\n        let i = this.index.get($381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */ setMCRCMethod(mCRCMethod) {\n        let i = this.index.get($381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$6fa70ee10f356b6.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, mCRCMethod);\n        }\n    }\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */ getExcessReactantConc() {\n        let i = this.index.get($381c11e38cac5410$export$284227145ed02b04.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the excess reactant concentration or create it if it is undefined.\n     */ setExcessReactantConc(excessReactantConc) {\n        let i = this.index.get($381c11e38cac5410$export$284227145ed02b04.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$284227145ed02b04.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        } else {\n            if (i instanceof Map) throw new Error(\"ExcessReactantConc is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, excessReactantConc);\n        }\n    }\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */ getReactantsLabel() {\n        return this.getReactants().map((reactant)=>reactant.getMolecule().ref).join(\" + \");\n    }\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */ getProductsLabel() {\n        return this.getProducts().map((product)=>product.getMolecule().ref).join(\" + \");\n    }\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */ getLabel() {\n        let label = this.getReactantsLabel() + \" -> \" + this.getProductsLabel();\n        return label;\n    }\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */ getReactantsEnergy(molecules) {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map((reactant)=>{\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            return molecule.getEnergy();\n        }).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */ getProductsEnergy(molecules) {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map((product)=>{\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            return molecule.getEnergy();\n        }).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */ get(tagName, dictRef) {\n        if (this.index.has(tagName)) {\n            let i = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex = i.get(dictRef);\n                    if (nodeIndex != undefined) return this.nodes.get(nodeIndex);\n                } else return this.nodes.get(i);\n            }\n        }\n    }\n}\n\n\n\n/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param x1 The end x-coordinate of the line.\n * @param y1 The end y-coordinate of the line.\n * @param font The font to use.\n * @param th The height of the text in pixels.\n * @param label The label.\n * @param energyString The energy.\n */ function $d2b4a77a4d44562c$export$479ac392a7fb4419(ctx, strokeStyle, strokewidth, x0, y0, x1, y1, font, th, label, energyString) {\n    let x_centre = x0 + (x1 - x0) / 2;\n    $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, energyString, font, strokeStyle, $d2b4a77a4d44562c$var$getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, label, font, strokeStyle, $d2b4a77a4d44562c$var$getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    $d2b4a77a4d44562c$export$819db45aec5fcbe5(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n/**\n * @param ctx The context to use.\n * @param text The text to get the start x-coordinate of.\n * @paramfont The font to use.  \n * @param x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */ function $d2b4a77a4d44562c$var$getTextStartX(ctx, text, font, x_centre) {\n    let tw = $d2b4a77a4d44562c$export$37827d046293d309(ctx, text, font);\n    return x_centre - tw / 2;\n}\nfunction $d2b4a77a4d44562c$export$819db45aec5fcbe5(ctx, strokeStyle, strokewidth, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\nfunction $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, text, font, colour, x, y) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\nfunction $d2b4a77a4d44562c$export$c398604a09be5382(ctx, text, font) {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\nfunction $d2b4a77a4d44562c$export$37827d046293d309(ctx, text, font) {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}\n\n\n\nclass $613b909b2797b099$export$b33a132661f4be58 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:bathGas\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     */ constructor(attributes, moleculeID){\n        super(attributes, $613b909b2797b099$export$b33a132661f4be58.tagName, moleculeID);\n    }\n}\nclass $613b909b2797b099$export$cdeafdd1d936ed5b extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:experimentalRate\";\n    }\n    static{\n        /**\n     * The key to the ref1 attribute value.\n     */ this.s_ref1 = \"ref1\";\n    }\n    static{\n        /**\n     * The key to the ref2 attribute value.\n     */ this.s_ref2 = \"ref2\";\n    }\n    static{\n        /**\n     * The key to the refReaction attribute value.\n     */ this.s_refReaction = \"refReaction\";\n    }\n    static{\n        /**\n     * The key to the error attribute value.\n     */ this.s_error = \"error\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$cdeafdd1d936ed5b.tagName, value);\n    /*\n        if (!this.attributes.has(ExperimentalRate.s_ref1)) {\n            console.error(\"ExperimentalRate.constructor: ref1 attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_ref2)) {\n            console.error(\"ExperimentalRate.constructor: ref2 attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_refReaction)) {\n            console.error(\"ExperimentalRate.constructor: refReaction attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_error)) {\n            console.error(\"ExperimentalRate.constructor: error attribute is missing.\");\n        }\n        */ }\n    /**\n     * @returns The ref1 attribute or undefined if there is no ref1 attribute.\n     */ getRef1() {\n        return this.attributes.get($613b909b2797b099$export$cdeafdd1d936ed5b.s_ref1);\n    }\n    /**\n     * Set the ref1 attribute.\n     * @param ref1 The ref1.\n     */ setRef1(ref1) {\n        this.attributes.set($613b909b2797b099$export$cdeafdd1d936ed5b.s_ref1, ref1);\n    }\n    /**\n     * @returns The ref2 attribute or undefined if there is no ref2 attribute.\n     */ getRef2() {\n        return this.attributes.get($613b909b2797b099$export$cdeafdd1d936ed5b.s_ref2);\n    }\n    /**\n     * Set the ref2 attribute.\n     * @param ref2 The ref2.\n     */ setRef2(ref2) {\n        this.attributes.set($613b909b2797b099$export$cdeafdd1d936ed5b.s_ref2, ref2);\n    }\n    /**\n     * @returns The refReaction attribute or undefined if there is no refReaction attribute.\n     */ getRefReaction() {\n        return this.attributes.get($613b909b2797b099$export$cdeafdd1d936ed5b.s_refReaction);\n    }\n    /**\n     * Set the refReaction attribute.\n     * @param refReaction The refReaction.\n     */ setRefReaction(refReaction) {\n        this.attributes.set($613b909b2797b099$export$cdeafdd1d936ed5b.s_refReaction, refReaction);\n    }\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */ getError() {\n        return parseFloat(this.attributes.get($613b909b2797b099$export$cdeafdd1d936ed5b.s_error));\n    }\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */ setError(error) {\n        this.attributes.set($613b909b2797b099$export$cdeafdd1d936ed5b.s_error, error.toString());\n    }\n}\nclass $613b909b2797b099$export$c291f4faacd745a6 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:experimentalYield\";\n    }\n    static{\n        /**\n     * The key to the ref attribute value.\n     */ this.s_ref = \"ref\";\n    }\n    static{\n        /**\n     * The key to the error attribute value.\n     */ this.s_error = \"error\";\n    }\n    static{\n        /**\n     * The key to the yieldTime attribute value.\n     */ this.s_yieldTime = \"yieldTime\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$c291f4faacd745a6.tagName, value);\n    }\n    /**\n     * @returns The ref attribute or undefined if there is no ref attribute.\n     */ getRef() {\n        return this.attributes.get($613b909b2797b099$export$c291f4faacd745a6.s_ref);\n    }\n    /**\n     * Set the ref attribute.\n     * @param ref The ref.\n     */ setRef(ref) {\n        this.attributes.set($613b909b2797b099$export$c291f4faacd745a6.s_ref, ref);\n    }\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */ getError() {\n        return parseFloat(this.attributes.get($613b909b2797b099$export$c291f4faacd745a6.s_error));\n    }\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */ setError(error) {\n        this.attributes.set($613b909b2797b099$export$c291f4faacd745a6.s_error, error.toString());\n    }\n    /**\n     * @returns The yieldTime attribute or undefined if there is no yieldTime attribute.\n     */ getYieldTime() {\n        return parseFloat(this.attributes.get($613b909b2797b099$export$c291f4faacd745a6.s_yieldTime));\n    }\n    /**\n     * Set the yieldTime attribute.\n     * @param yieldTime The yieldTime.\n     */ setYieldTime(yieldTime) {\n        this.attributes.set($613b909b2797b099$export$c291f4faacd745a6.s_yieldTime, yieldTime.toString());\n    }\n}\nclass $613b909b2797b099$export$ed9dfbc127680fd1 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:experimentalEigenvalue\";\n    }\n    static{\n        /**\n     * The key to the EigenvalueID attribute value.\n     */ this.s_EigenvalueID = \"EigenvalueID\";\n    }\n    static{\n        /**\n     * The key to the error attribute value.\n     */ this.s_error = \"error\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$ed9dfbc127680fd1.tagName, value);\n    /*\n        if (!this.attributes.has(ExperimentalEigenvalue.s_EigenvalueID)) {\n            console.error(\"ExperimentalEigenvalue.constructor: EigenvalueID attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalEigenvalue.s_error)) {\n            console.error(\"ExperimentalEigenvalue.constructor: error attribute is missing.\");\n        }\n        */ }\n    /**\n     * @returns The EigenvalueID attribute.\n     */ getEigenvalueID() {\n        return this.attributes.get($613b909b2797b099$export$ed9dfbc127680fd1.s_EigenvalueID);\n    }\n    /**\n     * Set the EigenvalueID attribute.\n     * @param EigenvalueID The EigenvalueID.\n     */ setEigenvalueID(EigenvalueID) {\n        this.attributes.set($613b909b2797b099$export$ed9dfbc127680fd1.s_EigenvalueID, EigenvalueID);\n    }\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */ getError() {\n        return parseFloat(this.attributes.get($613b909b2797b099$export$ed9dfbc127680fd1.s_error));\n    }\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */ setError(error) {\n        this.attributes.set($613b909b2797b099$export$ed9dfbc127680fd1.s_error, error.toString());\n    }\n}\nclass $613b909b2797b099$export$284227145ed02b04 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:excessReactantConc\";\n    }\n    static{\n        /**\n     * The key to the percent attribute value.\n     */ this.s_percent = \"percent\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$284227145ed02b04.tagName, value);\n    }\n    /**\n     * @returns The percent attribute or undefined if there is no percent attribute.\n     */ getPercent() {\n        return this.attributes.get($613b909b2797b099$export$284227145ed02b04.s_percent);\n    }\n    /**\n     * Set the percent attribute.\n     * @param percent The percent.\n     */ setPercent(percent) {\n        this.attributes.set($613b909b2797b099$export$284227145ed02b04.s_percent, percent);\n    }\n}\nclass $613b909b2797b099$export$3fe97ecb6b172244 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PTpair\";\n    }\n    static{\n        /**\n     * The key to the P attribute value.\n     */ this.s_P = \"P\";\n    }\n    static{\n        /**\n     * The key to the T attribute value.\n     */ this.s_T = \"T\";\n    }\n    static{\n        /**\n     * The key to the precision attribute value.\n     */ this.s_precision = \"precision\";\n    }\n    static{\n        /**\n     * The key to the excessReactantConc attribute value.\n     */ this.s_excessReactantConc = \"excessReactantConc\";\n    }\n    static{\n        /**\n     * The key to the percentExcessReactantConc attribute value.\n     */ this.s_percentExcessReactantConc = \"percentExcessReactantConc\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */ constructor(attributes, bathGas, experimentRate, experimentalYield, experimentalEigenvalue){\n        super(attributes, $613b909b2797b099$export$3fe97ecb6b172244.tagName);\n        this.index = new Map();\n        if (bathGas != undefined) {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate != undefined) {\n            this.index.set($613b909b2797b099$export$cdeafdd1d936ed5b.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n        if (experimentalYield != undefined) {\n            this.index.set($613b909b2797b099$export$c291f4faacd745a6.tagName, this.nodes.size);\n            this.addNode(experimentalYield);\n        }\n        if (experimentalEigenvalue != undefined) {\n            this.index.set($613b909b2797b099$export$ed9dfbc127680fd1.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n    /**\n     * @returns The Pressure.\n     */ getP() {\n        //if (this !== undefined) {\n        let p = this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_P);\n        if (p !== undefined) return parseFloat(p);\n        //}\n        return NaN;\n    }\n    /**\n     * Set The Pressure\n     */ setP(p) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_P, p.toString());\n    }\n    /**\n     * @returns The Temperature.\n     */ getT() {\n        //if (this !== undefined) {\n        let t = this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_T);\n        if (t !== undefined) return parseFloat(t);\n        //}\n        return NaN;\n    }\n    /**\n     * Set The Temperature.\n     */ setT(t) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_T, t.toString());\n    }\n    /**\n     * @returns The precision attribute or undefined if there is no precision attribute.\n     */ getPrecision() {\n        return this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_precision);\n    }\n    /**\n     * Set the precision attribute.\n     * @param precision The precision.\n     */ setPrecision(precision) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_precision, precision);\n    }\n    /**\n     * @returns The bath gas.\n     */ getBathGas() {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param bathGas The bath gas.\n     */ setBathGas(bathGas) {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i != undefined) this.nodes.set(i, bathGas);\n        else {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n    /**\n     * Remove the bath gas.\n     */ removeBathGas() {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($613b909b2797b099$export$b33a132661f4be58.tagName);\n        }\n    }\n    /**\n     * @returns The experiment rate.\n     */ getExperimentalRate() {\n        let i = this.index.get($613b909b2797b099$export$cdeafdd1d936ed5b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param experimentRate The experiment rate.\n     */ setExperimentalRate(experimentRate) {\n        let i = this.index.get($613b909b2797b099$export$cdeafdd1d936ed5b.tagName);\n        if (i != undefined) this.nodes.set(i, experimentRate);\n        else {\n            this.index.set($613b909b2797b099$export$cdeafdd1d936ed5b.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n    /**\n     * Remove the experiment rate.\n     */ removeExperimentalRate() {\n        let i = this.index.get($613b909b2797b099$export$cdeafdd1d936ed5b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($613b909b2797b099$export$cdeafdd1d936ed5b.tagName);\n        }\n    }\n    /**\n     * @returns The experimental yield.\n     */ getExperimentalYield() {\n        let i = this.index.get($613b909b2797b099$export$c291f4faacd745a6.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param experimentalYield The experimental yield.\n     */ setExperimentalYield(experimentalYield) {\n        let i = this.index.get($613b909b2797b099$export$c291f4faacd745a6.tagName);\n        if (i != undefined) this.nodes.set(i, experimentalYield);\n        else {\n            this.index.set($613b909b2797b099$export$c291f4faacd745a6.tagName, this.nodes.size);\n            this.addNode(experimentalYield);\n        }\n    }\n    /**\n     * Remove the experimental yield.\n     */ removeExperimentalYield() {\n        let i = this.index.get($613b909b2797b099$export$c291f4faacd745a6.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($613b909b2797b099$export$c291f4faacd745a6.tagName);\n        }\n    }\n    /**\n     * @returns The experimental eigenvalue.\n     */ getExperimentalEigenvalue() {\n        let i = this.index.get($613b909b2797b099$export$ed9dfbc127680fd1.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param experimentalEigenvalue The experimental eigenvalue.\n     */ setExperimentalEigenvalue(experimentalEigenvalue) {\n        let i = this.index.get($613b909b2797b099$export$ed9dfbc127680fd1.tagName);\n        if (i != undefined) this.nodes.set(i, experimentalEigenvalue);\n        else {\n            this.index.set($613b909b2797b099$export$ed9dfbc127680fd1.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n    /**\n     * Remove the experimental eigenvalue.\n     */ removeExperimentalEigenvalue() {\n        let i = this.index.get($613b909b2797b099$export$ed9dfbc127680fd1.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($613b909b2797b099$export$ed9dfbc127680fd1.tagName);\n        }\n    }\n    /**\n     * @returns this.attributes.get(\"excessReactantConc\").\n     */ getExcessReactantConc() {\n        return this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_excessReactantConc);\n    }\n    /**\n     * this.attributes.set(\"excessReactantConc\", excessReactantConc).\n     */ setExcessReactantConc(excessReactantConc) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_excessReactantConc, excessReactantConc);\n    }\n    /**\n     * @returns this.attributes.get(\"percentExcessReactantConc\").\n     */ getPercentExcessReactantConc() {\n        return this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_percentExcessReactantConc);\n    }\n    /**\n     * this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc).\n     */ setPercentExcessReactantConc(percentExcessReactantConc) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_percentExcessReactantConc, percentExcessReactantConc);\n    }\n}\nclass $613b909b2797b099$export$3be0efe793283834 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PTs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param pTs The PTs.\n     */ constructor(attributes, pTpairs){\n        super(attributes, $613b909b2797b099$export$3be0efe793283834.tagName);\n        if (pTpairs != undefined) {\n            pTpairs.forEach((pTpair)=>{\n                this.addNode(pTpair);\n            });\n            this.pTpairs = pTpairs;\n        } else this.pTpairs = [];\n    }\n    /**\n     * @param i The index of the PTpair to return. \n     * @returns The PTpair at the given index or undefined if the index is out of range.\n     */ getPTpair(i) {\n        return this.pTpairs[i];\n    }\n    /**\n     * Set the PT at the given index.\n     * @param i The index.\n     * @returns The PT pairs.\n     */ setPTpair(i, pTpair) {\n        this.nodes.set(i, pTpair);\n        this.pTpairs[i] = pTpair;\n    }\n    /**\n     * Add a PTpair.\n     * @param pTPair The PTpair to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */ addPTpair(pTpair) {\n        this.addNode(pTpair);\n        this.pTpairs.push(pTpair);\n        return this.nodes.size - 1;\n    }\n    /**\n     * Remove the PT at the given index.\n     * @param i The index.\n     */ removePTpair(i) {\n        this.nodes.delete(i);\n        this.pTpairs.splice(i, 1);\n    }\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     */ setPTpairs(pTpairs) {\n        this.nodes.clear();\n        pTpairs.forEach((pTpair)=>{\n            this.addNode(pTpair);\n            this.pTpairs.push(pTpair);\n        });\n    }\n    /**\n     * Remove all PT pairs.\n     */ removePTpairs() {\n        this.nodes.clear();\n        this.pTpairs = [];\n    }\n}\nclass $613b909b2797b099$export$363c7374d425f4ad extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:conditions\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bathGases The bath gases.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */ constructor(attributes, id, bathGases, pTs){\n        super(attributes, $613b909b2797b099$export$363c7374d425f4ad.tagName);\n        this.id = id;\n        this.index = new Map();\n        this.bathGasesIndex = new Map();\n        this.bathGases = new Map();\n        if (bathGases != undefined) {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            bathGases.forEach((bathGas)=>{\n                this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n                this.addNode(bathGas);\n                this.bathGases.set(bathGas, bathGases.size);\n            });\n        }\n        if (pTs != undefined) {\n            this.index.set($613b909b2797b099$export$3be0efe793283834.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n    /**\n     * @returns The bath gases.\n     */ getBathGases() {\n        return this.bathGases;\n    }\n    /**\n     * @param bathGas The bath gas to add.\n     */ addBathGas(bathGas) {\n        if (!this.bathGases.has(bathGas)) {\n            let index = this.bathGases.size;\n            this.bathGases.set(bathGas, index);\n            this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n            this.addNode(bathGas);\n            return index;\n        } else return this.bathGases.get(bathGas);\n    }\n    /**\n     * @param bathGas The bath gas to remove.\n     */ removeBathGas(bathGas) {\n        if (this.bathGases.has(bathGas)) {\n            this.bathGases.delete(bathGas);\n            this.nodes.delete(this.bathGasesIndex.get(bathGas.value));\n        } else console.warn(\"Conditions.removeBathGas: bathGas not found to remove.\");\n    }\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */ getPTs() {\n        let i = this.index.get($613b909b2797b099$export$3be0efe793283834.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param pTs The PTs.\n     */ setPTs(pTs) {\n        let i = this.index.get($613b909b2797b099$export$3be0efe793283834.tagName);\n        if (i != undefined) this.nodes.set(i, pTs);\n        else {\n            this.index.set($613b909b2797b099$export$3be0efe793283834.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n}\n\n\n\nclass $9a96fbd0df1ae67b$export$26e33f0df9ce919d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:grainSize\";\n    }\n    /**\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$576b56ca6e34780b extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:automaticallySetMaxEne\";\n    }\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$aa73446724166cdb extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:energyAboveTheTopHill\";\n    }\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:maxTemperature\";\n    }\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$77f098867dc64198 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:modelParameters\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param grainSize The grain size.\n     * @param automaticallySetMaxEne The automatically set max energy.\n     * @param energyAboveTheTopHill The energy above the top hill.\n     * @param maxTemperature The max temperature.\n     */ constructor(attributes, grainSize, automaticallySetMaxEne, energyAboveTheTopHill, maxTemperature){\n        super(attributes, $9a96fbd0df1ae67b$export$77f098867dc64198.tagName);\n        this.index = new Map();\n        if (grainSize != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n        if (automaticallySetMaxEne != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n        if (energyAboveTheTopHill != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n        if (maxTemperature != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n    /**\n     * @returns The grain size or undefined.\n     */ getGrainSize() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param grainSize The grain size.\n     */ setGrainSize(grainSize) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName);\n        if (i) this.nodes.set(i, grainSize);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n    }\n    /**\n     * Removes the grain size.\n     */ removeGrainSize() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName);\n        }\n    }\n    /**\n     * @returns The automatically set max energy or undefined.\n     */ getAutomaticallySetMaxEne() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param automaticallySetMaxEne The automatically set max energy.\n     */ setAutomaticallySetMaxEne(automaticallySetMaxEne) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName);\n        if (i) this.nodes.set(i, automaticallySetMaxEne);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n    /**\n     * Removes the automatically set max energy.\n     */ removeAutomaticallySetMaxEne() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName);\n        }\n    }\n    /**\n     * @returns The energy above the top hill or undefined.\n     */ getEnergyAboveTheTopHill() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param energyAboveTheTopHill The energy above the top hill.\n     */ setEnergyAboveTheTopHill(energyAboveTheTopHill) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName);\n        if (i) this.nodes.set(i, energyAboveTheTopHill);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n    }\n    /**\n     * Removes the energy above the top hill.\n     */ removeEnergyAboveTheTopHill() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName);\n        }\n    }\n    /**\n     * @returns The max temperature or undefined.\n     */ getMaxTemperature() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param maxTemperature The max temperature.\n     */ setMaxTemperature(maxTemperature) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName);\n        if (i) this.nodes.set(i, maxTemperature);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n    /**\n     * Removes the max temperature.\n     */ removeMaxTemperature() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName);\n        }\n    }\n}\n\n\n\nclass $d0ae5bc6e682c29f$export$7d9247c9879133fb extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:calculateRateCoefficientsOnly\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$60b233651e162b60 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printCellDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$7e63e5104be309ff extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:printCellTransitionStateFlux\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$a915db169f144f37 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printReactionOperatorColumnSums\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$e7fff349901f700d extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainBoltzmann\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$d23243bda4dfae2b extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$55888ef4e813a34d extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainkbE\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$f8d814a406a0ff5b extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainkfE\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$3627f2b606ffd3cb extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:printTSsos\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$c5481d114fddc81c extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainedSpeciesProfile\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainTransitionStateFlux\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$8420ab6988728a65 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printReactionOperatorSize\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printSpeciesProfile\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9f7939759d8efd9f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printPhenomenologicalEvolution\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$fc99460819e23ac5 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printTunnelingCoefficients\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$2f2eaac8983031ef extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printCrossingCoefficients\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$a3d7e677521f681f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$980e5abe9a459423 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testRateConstant\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$5d7dbeba4bf49655 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:useTheSameCellNumberForAllConditions\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$6ffea14bdffd427f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:ForceMacroDetailedBalance\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9d51752a8549e2d6 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:hideInactive\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:calcMethod\";\n    }\n    static{\n        /**\n     * The possible values.\n     */ this.options = [\n            \"simpleCalc\",\n            \"gridSearch\",\n            \"fitting\",\n            \"marquardt\",\n            \"analyticalRepresentation\",\n            \"ThermodynamicTable\",\n            \"sensitivityAnalysis\",\n            \"me:simpleCalc\",\n            \"me:gridSearch\",\n            \"me:fitting\",\n            \"me:marquardt\",\n            \"me:analyticalRepresentation\",\n            \"me:ThermodynamicTable\",\n            \"me:sensitivityAnalysis\"\n        ];\n    }\n    /**\n     * @param value The value.\n     */ constructor(attributes){\n        super(attributes, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$afd374542f6f3da6 extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n     * The xsi_type.\n     */ this.xsi_type = \"me:simpleCalc\";\n    }\n    static{\n        /**\n     * The xsi_type2.\n     */ this.xsi_type2 = \"simpleCalc\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes);\n    }\n}\nclass $d0ae5bc6e682c29f$export$271191b096a55e63 extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n    * The xsi_type.\n    */ this.xsi_type = \"me:gridSearch\";\n    }\n    static{\n        /**\n     * The xsi_type2.\n     */ this.xsi_type2 = \"gridSearch\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes);\n    }\n}\nclass $d0ae5bc6e682c29f$export$830a50cd13af6e84 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:fittingIterations\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$830a50cd13af6e84.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$654b70df01671c79 extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n     * The xsi_type.\n     */ this.xsi_type = \"me:fitting\";\n    }\n    static{\n        /**\n     * The xsi_type2.\n     */ this.xsi_type2 = \"fitting\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, fittingIterations){\n        super(attributes);\n        if (fittingIterations != undefined) this.addNode(fittingIterations);\n    }\n    /**\n     * @returns The fittingIterations or undefined.\n     */ getFittingIterations() {\n        return this.nodes.get(0);\n    }\n    /**\n     * @param fittingIterations The fittingIterations.\n     */ setFittingIterations(fittingIterations) {\n        this.nodes.set(0, fittingIterations);\n    }\n    /**\n     * Remove the fittingIterations.\n     */ removeFittingIterations() {\n        this.nodes.delete(0);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9f699e98369d9591 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MarquardtIterations\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$9f699e98369d9591.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MarquardtTolerance\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$d3887b529debf19d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MarquardtDerivDelta\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$d3887b529debf19d.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$7968aa666bcf62fa extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n     * The tag name.\n     */ this.xsi_type = \"me:marquardt\";\n    }\n    static{\n        /**\n     * The tag name.\n     */ this.xsi_type2 = \"marquardt\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, marquardtIterations, marquardtTolerance, marquardtDerivDelta){\n        super(attributes);\n        this.index = new Map();\n        if (marquardtIterations != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$9f699e98369d9591.tagName, this.nodes.size);\n            this.addNode(marquardtIterations);\n        }\n        if (marquardtTolerance != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName, this.nodes.size);\n            this.addNode(marquardtTolerance);\n        }\n        if (marquardtDerivDelta != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$d3887b529debf19d.tagName, this.nodes.size);\n            this.addNode(marquardtDerivDelta);\n        }\n    }\n    /**\n     * @returns The marquardtIterations or undefined.\n     */ getMarquardtIterations() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f699e98369d9591.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param marquardtIterations The marquardtIterations.\n     */ setMarquardtIterations(marquardtIterations) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f699e98369d9591.tagName);\n        if (i != undefined) this.nodes.set(i, marquardtIterations);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$9f699e98369d9591.tagName, this.nodes.size);\n            this.addNode(marquardtIterations);\n        }\n    }\n    /**\n     * Remove the marquardtIterations.\n     */ removeMarquardtIterations() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f699e98369d9591.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$9f699e98369d9591.tagName);\n        }\n    }\n    /**\n     * @returns The marquardtTolerance or undefined.\n     */ getMarquardtTolerance() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param marquardtTolerance The marquardtTolerance.\n     */ setMarquardtTolerance(marquardtTolerance) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName);\n        if (i != undefined) this.nodes.set(i, marquardtTolerance);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName, this.nodes.size);\n            this.addNode(marquardtTolerance);\n        }\n    }\n    /**\n     * Remove the marquardtTolerance.\n     */ removeMarquardtTolerance() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627.tagName);\n        }\n    }\n    /**\n     * @returns The marquardtDerivDelta or undefined.\n     */ getMarquardtDerivDelta() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d3887b529debf19d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param marquardtDerivDelta The marquardtDerivDelta.\n     */ setMarquardtDerivDelta(marquardtDerivDelta) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d3887b529debf19d.tagName);\n        if (i != undefined) this.nodes.set(i, marquardtDerivDelta);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$d3887b529debf19d.tagName, this.nodes.size);\n            this.addNode(marquardtDerivDelta);\n        }\n    }\n    /**\n     * Remove the marquardtDerivDelta.\n     */ removeMarquardtDerivDelta() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d3887b529debf19d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$d3887b529debf19d.tagName);\n        }\n    }\n}\nclass $d0ae5bc6e682c29f$export$85eca882ff5fb66 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:useTraceWeighting\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$85eca882ff5fb66.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$93514d28bd18d75a extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:format\";\n    }\n    static{\n        /**\n     * The options.\n     */ this.options = [\n            \"cantera\",\n            \"chemkin\"\n        ];\n    }\n    static{\n        /**\n     * The rateUnits.\n     */ this.rateUnits = \"rateUnits\";\n    }\n    static{\n        /**\n     * The rateUnits options.\n     */ this.rateUnitsOptions = [\n            \"cm3mole-1s-1\",\n            \"cm3molecule-1s-1\"\n        ];\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName, value);\n    }\n    /**\n     * @returns The value of the \"rateUnits\" attribute or undefined.\n     */ getRateUnits() {\n        return this.attributes.get($d0ae5bc6e682c29f$export$93514d28bd18d75a.rateUnits);\n    }\n    /**\n     * @param rateUnits The value of the \"rateUnits\" attribute.\n     */ setRateUnits(rateUnits) {\n        this.attributes.set($d0ae5bc6e682c29f$export$93514d28bd18d75a.rateUnits, rateUnits);\n    }\n    /**\n     * Remove the \"rateUnits\" attribute.\n     */ removeRateUnits() {\n        this.attributes.delete($d0ae5bc6e682c29f$export$93514d28bd18d75a.rateUnits);\n    }\n}\nclass $d0ae5bc6e682c29f$export$be201676156f3e60 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:precision\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$be201676156f3e60.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$19d20f3642d82681 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebNumTemp\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$19d20f3642d82681.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$906be0805438fd80 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebNumConc\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$906be0805438fd80.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$6ab4fe1621c91452 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebMaxTemp\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$e9853d49316ae9ae extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebMinTemp\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$39eacc768d7e9bb extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebMaxConc\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName, value);\n    }\n    /**\n     * @returns The units.\n     */ getUnits() {\n        return this.attributes.get(\"units\");\n    }\n    /**\n     * @param units The units.\n     */ setUnits(units) {\n        this.attributes.set(\"units\", units);\n    }\n}\nclass $d0ae5bc6e682c29f$export$78194e57ce26d99a extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebMinConc\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$96094ac7e31a750e extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebTExSize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ae695595d3952700 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:chebPExSize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$ae695595d3952700.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$fe9781900d201bdf extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n     * The tag name.\n     */ this.xsi_type = \"me:analyticalRepresentation\";\n    }\n    static{\n        /**\n     * The tag name.\n     */ this.xsi_type2 = \"analyticalRepresentation\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, format, precision, chebNumTemp, chebNumConc, chebMaxTemp, chebMinTemp, chebMaxConc, chebMinConc, chebTExSize, chebPExSize){\n        super(attributes);\n        this.index = new Map();\n        if (format != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName, this.nodes.size);\n            this.addNode(format);\n        }\n        if (precision != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$be201676156f3e60.tagName, this.nodes.size);\n            this.addNode(precision);\n        }\n        if (chebNumTemp != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$19d20f3642d82681.tagName, this.nodes.size);\n            this.addNode(chebNumTemp);\n        }\n        if (chebNumConc != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$906be0805438fd80.tagName, this.nodes.size);\n            this.addNode(chebNumConc);\n        }\n        if (chebMaxTemp != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName, this.nodes.size);\n            this.addNode(chebMaxTemp);\n        }\n        if (chebMinTemp != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName, this.nodes.size);\n            this.addNode(chebMinTemp);\n        }\n        if (chebMaxConc != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName, this.nodes.size);\n            this.addNode(chebMaxConc);\n        }\n        if (chebMinConc != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName, this.nodes.size);\n            this.addNode(chebMinConc);\n        }\n        if (chebTExSize != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName, this.nodes.size);\n            this.addNode(chebTExSize);\n        }\n        if (chebPExSize != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$ae695595d3952700.tagName, this.nodes.size);\n            this.addNode(chebPExSize);\n        }\n    }\n    /**\n     * @returns The format or undefined.\n     */ getFormat() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param format The format.\n     */ setFormat(format) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName);\n        if (i != undefined) this.nodes.set(i, format);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName, this.nodes.size);\n            this.addNode(format);\n        }\n    }\n    /**\n     * Remove the format.\n     */ removeFormat() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$93514d28bd18d75a.tagName);\n        }\n    }\n    /**\n     * @returns The precision or undefined.\n     */ getPrecision() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$be201676156f3e60.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param precision The precision.\n     */ setPrecision(precision) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$be201676156f3e60.tagName);\n        if (i != undefined) this.nodes.set(i, precision);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$be201676156f3e60.tagName, this.nodes.size);\n            this.addNode(precision);\n        }\n    }\n    /**\n     * Remove the precision.\n     */ removePrecision() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$be201676156f3e60.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$be201676156f3e60.tagName);\n        }\n    }\n    /**\n     * @returns The chebNumTemp or undefined.\n     */ getChebNumTemp() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$19d20f3642d82681.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebNumTemp The chebNumTemp.\n     */ setChebNumTemp(chebNumTemp) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$19d20f3642d82681.tagName);\n        if (i != undefined) this.nodes.set(i, chebNumTemp);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$19d20f3642d82681.tagName, this.nodes.size);\n            this.addNode(chebNumTemp);\n        }\n    }\n    /**\n     * Remove the chebNumTemp.\n     */ removeChebNumTemp() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$19d20f3642d82681.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$19d20f3642d82681.tagName);\n        }\n    }\n    /**\n     * @returns The chebNumConc or undefined.\n     */ getChebNumConc() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$906be0805438fd80.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebNumConc The chebNumConc.\n     */ setChebNumConc(chebNumConc) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$906be0805438fd80.tagName);\n        if (i != undefined) this.nodes.set(i, chebNumConc);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$906be0805438fd80.tagName, this.nodes.size);\n            this.addNode(chebNumConc);\n        }\n    }\n    /**\n     * Remove the chebNumConc.\n     */ removeChebNumConc() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$906be0805438fd80.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$906be0805438fd80.tagName);\n        }\n    }\n    /**\n     * @returns The chebMaxTemp or undefined.\n     */ getChebMaxTemp() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebMaxTemp The chebMaxTemp.\n     */ setChebMaxTemp(chebMaxTemp) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName);\n        if (i != undefined) this.nodes.set(i, chebMaxTemp);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName, this.nodes.size);\n            this.addNode(chebMaxTemp);\n        }\n    }\n    /**\n     * Remove the chebMaxTemp.\n     */ removeChebMaxTemp() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$6ab4fe1621c91452.tagName);\n        }\n    }\n    /**\n     * @returns The chebMinTemp or undefined.\n     */ getChebMinTemp() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebMinTemp The chebMinTemp.\n     */ setChebMinTemp(chebMinTemp) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName);\n        if (i != undefined) this.nodes.set(i, chebMinTemp);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName, this.nodes.size);\n            this.addNode(chebMinTemp);\n        }\n    }\n    /**\n     * Remove the chebMinTemp.\n     */ removeChebMinTemp() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$e9853d49316ae9ae.tagName);\n        }\n    }\n    /**\n     * @returns The chebMaxConc or undefined.\n     */ getChebMaxConc() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebMaxConc The chebMaxConc.\n     */ setChebMaxConc(chebMaxConc) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName);\n        if (i != undefined) this.nodes.set(i, chebMaxConc);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName, this.nodes.size);\n            this.addNode(chebMaxConc);\n        }\n    }\n    /**\n     * Remove the chebMaxConc.\n     */ removeChebMaxConc() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$39eacc768d7e9bb.tagName);\n        }\n    }\n    /**\n     * @returns The chebMinConc or undefined.\n     */ getChebMinConc() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebMinConc The chebMinConc.\n     */ setChebMinConc(chebMinConc) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName);\n        if (i != undefined) this.nodes.set(i, chebMinConc);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName, this.nodes.size);\n            this.addNode(chebMinConc);\n        }\n    }\n    /**\n     * Remove the chebMinConc.\n     */ removeChebMinConc() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$78194e57ce26d99a.tagName);\n        }\n    }\n    /**\n     * @returns The chebTExSize or undefined.\n     */ getChebTExSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebTExSize The chebTExSize.\n     */ setChebTExSize(chebTExSize) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName);\n        if (i != undefined) this.nodes.set(i, chebTExSize);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName, this.nodes.size);\n            this.addNode(chebTExSize);\n        }\n    }\n    /**\n     * Remove the chebTExSize.\n     */ removeChebTExSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$96094ac7e31a750e.tagName);\n        }\n    }\n    /**\n     * @returns The chebPExSize or undefined.\n     */ getChebPExSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ae695595d3952700.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param chebPExSize The chebPExSize.\n     */ setChebPExSize(chebPExSize) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ae695595d3952700.tagName);\n        if (i != undefined) this.nodes.set(i, chebPExSize);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ae695595d3952700.tagName, this.nodes.size);\n            this.addNode(chebPExSize);\n        }\n    }\n    /**\n     * Remove the chebPExSize.\n     */ removeChebPExSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ae695595d3952700.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ae695595d3952700.tagName);\n        }\n    }\n}\nclass $d0ae5bc6e682c29f$export$7be1a36e1f74dbc7 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:Tmin\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ac2eb7df727f506d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:Tmid\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$58c8f4b7ec654137 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:Tmax\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$7b8cfe3a6a460886 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:Tstep\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$16ef3f79998b60b4 extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n     * The tag name.\n     */ this.xsi_type = \"me:ThermodynamicTable\";\n    }\n    static{\n        /**\n     * The tag name.\n     */ this.xsi_type2 = \"ThermodynamicTable\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, tmin, tmid, tmax, tstep){\n        super(attributes);\n        this.index = new Map();\n        if (tmin != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName, this.nodes.size);\n            this.addNode(tmin);\n        }\n        if (tmid != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName, this.nodes.size);\n            this.addNode(tmid);\n        }\n        if (tmax != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName, this.nodes.size);\n            this.addNode(tmax);\n        }\n        if (tstep != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$7b8cfe3a6a460886.tagName, this.nodes.size);\n            this.addNode(tstep);\n        }\n    }\n    /**\n     * @returns The tmin or undefined.\n     */ getTmin() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param tmin The tmin.\n     */ setTmin(tmin) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName);\n        if (i != undefined) this.nodes.set(i, tmin);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName, this.nodes.size);\n            this.addNode(tmin);\n        }\n    }\n    /**\n     * Remove the tmin.\n     */ removeTmin() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$7be1a36e1f74dbc7.tagName);\n        }\n    }\n    /**\n     * @returns The tmid or undefined.\n     */ getTmid() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param tmid The tmid.\n     */ setTmid(tmid) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName);\n        if (i != undefined) this.nodes.set(i, tmid);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName, this.nodes.size);\n            this.addNode(tmid);\n        }\n    }\n    /**\n     * Remove the tmid.\n     */ removeTmid() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ac2eb7df727f506d.tagName);\n        }\n    }\n    /**\n     * @returns The tmax or undefined.\n     */ getTmax() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param tmax The tmax.\n     */ setTmax(tmax) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName);\n        if (i != undefined) this.nodes.set(i, tmax);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName, this.nodes.size);\n            this.addNode(tmax);\n        }\n    }\n    /**\n     * Remove the tmax.\n     */ removeTmax() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$58c8f4b7ec654137.tagName);\n        }\n    }\n    /**\n     * @returns The tstep or undefined.\n     */ getTstep() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7b8cfe3a6a460886.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param tstep The tstep.\n     */ setTstep(tstep) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7b8cfe3a6a460886.tagName);\n        if (i != undefined) this.nodes.set(i, tstep);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$7b8cfe3a6a460886.tagName, this.nodes.size);\n            this.addNode(tstep);\n        }\n    }\n    /**\n     * Remove the tstep.\n     */ removeTstep() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7b8cfe3a6a460886.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$7b8cfe3a6a460886.tagName);\n        }\n    }\n}\nclass $d0ae5bc6e682c29f$export$37d0520a9fac7849 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:sensitivityAnalysisSamples\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9a832710e54827ea extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:sensitivityAnalysisOrder\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$9a832710e54827ea.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$b43b57458ce8fb96 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:sensitivityNumVarRedIters\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$e98aeac6c6b1df09 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:sensitivityVarRedMethod\";\n    }\n    static{\n        /**\n     * The options.\n     */ this.options = [\n            \"AdditiveControl\",\n            \"RatioControl\"\n        ];\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$a532500cc43efbef extends $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d {\n    static{\n        /**\n    * The xsi_type.\n    */ this.xsi_type = \"me:sensitivityAnalysis\";\n    }\n    static{\n        /**\n     * The xsi_type2.\n     */ this.xsi_type2 = \"sensitivityAnalysis\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, sensitivityAnalysisSamples, sensitivityAnalysisOrder, sensitivityNumVarRedIters, sensitivityVarRedMethod){\n        super(attributes);\n        this.index = new Map();\n        if (sensitivityAnalysisSamples != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisSamples);\n        }\n        if (sensitivityAnalysisOrder != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$9a832710e54827ea.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisOrder);\n        }\n        if (sensitivityNumVarRedIters != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName, this.nodes.size);\n            this.addNode(sensitivityNumVarRedIters);\n        }\n        if (sensitivityVarRedMethod != undefined) {\n            this.index.set($d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName, this.nodes.size);\n            this.addNode(sensitivityVarRedMethod);\n        }\n    }\n    /**\n     * @returns The sensitivityAnalysisSamples or undefined.\n     */ getSensitivityAnalysisSamples() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param sensitivityAnalysisSamples The sensitivityAnalysisSamples.\n     */ setSensitivityAnalysisSamples(sensitivityAnalysisSamples) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName);\n        if (i != undefined) this.nodes.set(i, sensitivityAnalysisSamples);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisSamples);\n        }\n    }\n    /**\n     * Remove the sensitivityAnalysisSamples.\n     */ removeSensitivityAnalysisSamples() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$37d0520a9fac7849.tagName);\n        }\n    }\n    /**\n     * @returns The sensitivityAnalysisOrder or undefined.\n     */ getSensitivityAnalysisOrder() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9a832710e54827ea.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param sensitivityAnalysisOrder The sensitivityAnalysisOrder.\n     */ setSensitivityAnalysisOrder(sensitivityAnalysisOrder) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9a832710e54827ea.tagName);\n        if (i != undefined) this.nodes.set(i, sensitivityAnalysisOrder);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$9a832710e54827ea.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisOrder);\n        }\n    }\n    /**\n     * Remove the sensitivityAnalysisOrder.\n     */ removeSensitivityAnalysisOrder() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9a832710e54827ea.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$9a832710e54827ea.tagName);\n        }\n    }\n    /**\n     * @returns The sensitivityNumVarRedIters or undefined.\n     */ getSensitivityNumVarRedIters() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param sensitivityNumVarRedIters The sensitivityNumVarRedIters.\n     */ setSensitivityNumVarRedIters(sensitivityNumVarRedIters) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName);\n        if (i != undefined) this.nodes.set(i, sensitivityNumVarRedIters);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName, this.nodes.size);\n            this.addNode(sensitivityNumVarRedIters);\n        }\n    }\n    /**\n     * Remove the sensitivityNumVarRedIters.\n     */ removeSensitivityNumVarRedIters() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$b43b57458ce8fb96.tagName);\n        }\n    }\n    /**\n     * @returns The sensitivityVarRedMethod or undefined.\n     */ getSensitivityVarRedMethod() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param sensitivityVarRedMethod The sensitivityVarRedMethod.\n     */ setSensitivityVarRedMethod(sensitivityVarRedMethod) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName);\n        if (i != undefined) this.nodes.set(i, sensitivityVarRedMethod);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName, this.nodes.size);\n            this.addNode(sensitivityVarRedMethod);\n        }\n    }\n    /**\n     * Remove the sensitivityVarRedMethod.\n     */ removeSensitivityVarRedMethod() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$e98aeac6c6b1df09.tagName);\n        }\n    }\n}\nclass $d0ae5bc6e682c29f$export$2453e311f702d9c7 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:eigenvalues\";\n    }\n    constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$421603058c6718db extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:shortestTimeOfInterest\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$421603058c6718db.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$b51d7314540831ed extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MaximumEvolutionTime\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$b51d7314540831ed.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$576b56ca6e34780b extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:automaticallySetMaxEne\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$159b5d3263f1049a extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:diagramEnergyOffset\";\n    }\n    /**\n      * @param attributes The attributes.\n      * @param value The value.\n      */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$1f37c7c73e401f31 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testMicroRates\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        this.tMin = parseFloat(attributes.get(\"Tmin\"));\n        this.tMax = parseFloat(attributes.get(\"Tmax\"));\n        this.tStep = parseFloat(attributes.get(\"Tstep\"));\n    }\n    /**\n     * @returns The maximum temperature.\n     */ getTmin() {\n        return this.tMin;\n    }\n    /**\n     * @param tMin The minimum temperature.\n     */ setTmin(tMin) {\n        this.tMin = tMin;\n        this.attributes?.set(\"Tmin\", tMin.toString());\n    }\n    /**\n     * @returns The maximum temperature.\n     */ getTmax() {\n        return this.tMax;\n    }\n    /**\n     * @param tMax The maximum temperature.\n     */ setTmax(tMax) {\n        this.tMax = tMax;\n        this.attributes?.set(\"Tmax\", tMax.toString());\n    }\n    /**\n     * @returns The temperature step.\n     */ getTstep() {\n        return this.tStep;\n    }\n    /**\n     * @param tStep The temperature step.\n     */ setTstep(tStep) {\n        this.tStep = tStep;\n        this.attributes?.set(\"Tstep\", tStep.toString());\n    }\n}\nclass $d0ae5bc6e682c29f$export$7a7fa4424cb20976 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:control\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, id){\n        super(attributes, $d0ae5bc6e682c29f$export$7a7fa4424cb20976.tagName);\n        this.id = id;\n        this.index = new Map();\n    }\n    /**\n     * @returns The calculateRateCoefficientsOnly or undefined.\n     */ getCalculateRateCoefficientsOnly() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param calculateRateCoefficientsOnly The calculateRateCoefficientsOnly.\n     */ setCalculateRateCoefficientsOnly(calculateRateCoefficientsOnly) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        if (i != undefined) this.nodes.set(i, calculateRateCoefficientsOnly);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName, this.nodes.size);\n            this.addNode(calculateRateCoefficientsOnly);\n        }\n    }\n    /**\n     * Remove the calculateRateCoefficientsOnly.\n     */ removeCalculateRateCoefficientsOnly() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        }\n    }\n    /**\n     * @returns The printCellDOS or undefined.\n     */ getPrintCellDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printCellDOS The printCellDOS.\n     */ setPrintCellDOS(printCellDOS) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        if (i != undefined) this.nodes.set(i, printCellDOS);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$60b233651e162b60.tagName, this.nodes.size);\n            this.addNode(printCellDOS);\n        }\n    }\n    /**\n     * Remove the printCellDOS.\n     */ removePrintCellDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        }\n    }\n    /**\n     * @returns The printCellTransitionStateFlux or undefined.\n     */ getPrintCellTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printCellTransitionStateFlux The printCellTransitionStateFlux.\n     */ setPrintCellTransitionStateFlux(printCellTransitionStateFlux) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        if (i != undefined) this.nodes.set(i, printCellTransitionStateFlux);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName, this.nodes.size);\n            this.addNode(printCellTransitionStateFlux);\n        }\n    }\n    /**\n     * Remove the printCellTransitionStateFlux.\n     */ removePrintCellTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        }\n    }\n    /**\n     * @returns The printReactionOperatorColumnSums or undefined.\n     */ getPrintReactionOperatorColumnSums() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     */ setPrintReactionOperatorColumnSums(printReactionOperatorColumnSums) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        if (i != undefined) this.nodes.set(i, printReactionOperatorColumnSums);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$a915db169f144f37.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorColumnSums);\n        }\n    }\n    /**\n     * Remove the printReactionOperatorColumnSums.\n     */ removePrintReactionOperatorColumnSums() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainBoltzmann or undefined.\n     */ getPrintGrainBoltzmann() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     */ setPrintGrainBoltzmann(printGrainBoltzmann) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainBoltzmann);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName, this.nodes.size);\n            this.addNode(printGrainBoltzmann);\n        }\n    }\n    /**\n     * Remove the printGrainBoltzmann.\n     */ removePrintGrainBoltzmann() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainDOS or undefined.\n     */ getPrintGrainDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainDOS The printGrainDOS.\n     */ setPrintGrainDOS(printGrainDOS) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainDOS);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName, this.nodes.size);\n            this.addNode(printGrainDOS);\n        }\n    }\n    /**\n     * Remove the printGrainDOS.\n     */ removePrintGrainDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainkbE or undefined.\n     */ getPrintGrainkbE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainkbE The printGrainkbE.\n     */ setPrintGrainkbE(printGrainkbE) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainkbE);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName, this.nodes.size);\n            this.addNode(printGrainkbE);\n        }\n    }\n    /**\n     * Remove the printGrainkbE.\n     */ removePrintGrainkbE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainkfE or undefined.\n     */ getPrintGrainkfE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainkfE The printGrainkfE.\n     */ setPrintGrainkfE(printGrainkfE) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainkfE);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName, this.nodes.size);\n            this.addNode(printGrainkfE);\n        }\n    }\n    /**\n     * Remove the printGrainkfE.\n     */ removePrintGrainkfE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        }\n    }\n    /**\n     * @returns The printTSsos or undefined.\n     */ getPrintTSsos() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printTSsos The printTSsos.\n     */ setPrintTSsos(printTSsos) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        if (i != undefined) this.nodes.set(i, printTSsos);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName, this.nodes.size);\n            this.addNode(printTSsos);\n        }\n    }\n    /**\n     * Remove the printTSsos.\n     */ removePrintTSsos() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainedSpeciesProfile or undefined.\n     */ getPrintGrainedSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainedSpeciesProfile The printGrainedSpeciesProfile.\n     */ setPrintGrainedSpeciesProfile(printGrainedSpeciesProfile) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainedSpeciesProfile);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName, this.nodes.size);\n            this.addNode(printGrainedSpeciesProfile);\n        }\n    }\n    /**\n     * Remove the printGrainedSpeciesProfile.\n     */ removePrintGrainedSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainTransitionStateFlux or undefined.\n     */ getPrintGrainTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainTransitionStateFlux The printGrainTransitionStateFlux.\n     */ setPrintGrainTransitionStateFlux(printGrainTransitionStateFlux) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainTransitionStateFlux);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName, this.nodes.size);\n            this.addNode(printGrainTransitionStateFlux);\n        }\n    }\n    /**\n     * Remove the printGrainTransitionStateFlux.\n     */ removePrintGrainTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        }\n    }\n    /**\n     * @returns The printReactionOperatorSize or undefined.\n     */ getPrintReactionOperatorSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printReactionOperatorSize The printReactionOperatorSize.\n     */ setPrintReactionOperatorSize(printReactionOperatorSize) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        if (i != undefined) this.nodes.set(i, printReactionOperatorSize);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorSize);\n        }\n    }\n    /**\n     * Remove the printReactionOperatorSize.\n     */ removePrintReactionOperatorSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        }\n    }\n    /**\n     * @returns The printSpeciesProfile or undefined.\n     */ getPrintSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printSpeciesProfile The printSpeciesProfile.\n     */ setPrintSpeciesProfile(printSpeciesProfile) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        if (i != undefined) this.nodes.set(i, printSpeciesProfile);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName, this.nodes.size);\n            this.addNode(printSpeciesProfile);\n        }\n    }\n    /**\n     * Remove the printSpeciesProfile.\n     */ removePrintSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        }\n    }\n    /**\n     * @returns The printPhenomenologicalEvolution or undefined.\n     */ getPrintPhenomenologicalEvolution() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printPhenomenologicalEvolution The printPhenomenologicalEvolution.\n     */ setPrintPhenomenologicalEvolution(printPhenomenologicalEvolution) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        if (i != undefined) this.nodes.set(i, printPhenomenologicalEvolution);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName, this.nodes.size);\n            this.addNode(printPhenomenologicalEvolution);\n        }\n    }\n    /**\n     * Remove the printPhenomenologicalEvolution.\n     */ removePrintPhenomenologicalEvolution() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        }\n    }\n    /**\n     * @returns The printTunnelingCoefficients or undefined.\n     */ getPrintTunnelingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printTunnelingCoefficients The printTunnelingCoefficients.\n     */ setPrintTunnelingCoefficients(printTunnelingCoefficients) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        if (i != undefined) this.nodes.set(i, printTunnelingCoefficients);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName, this.nodes.size);\n            this.addNode(printTunnelingCoefficients);\n        }\n    }\n    /**\n     * Remove the printTunnelingCoefficients.\n     */ removePrintTunnelingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        }\n    }\n    /**\n     * @returns The printCrossingCoefficients or undefined.\n     */ getPrintCrossingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printCrossingCoefficients The printCrossingCoefficients.\n     */ setPrintCrossingCoefficients(printCrossingCoefficients) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        if (i != undefined) this.nodes.set(i, printCrossingCoefficients);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName, this.nodes.size);\n            this.addNode(printCrossingCoefficients);\n        }\n    }\n    /**\n     * Remove the printCrossingCoefficients.\n     */ removePrintCrossingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        }\n    }\n    /**\n     * @returns The testDOS or undefined.\n     */ getTestDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param testDOS The testDOS.\n     */ setTestDOS(testDOS) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        if (i != undefined) this.nodes.set(i, testDOS);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName, this.nodes.size);\n            this.addNode(testDOS);\n        }\n    }\n    /**\n     * Remove the testDOS.\n     */ removeTestDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        }\n    }\n    /**\n     * @returns The testRateConstant or undefined.\n     */ getTestRateConstants() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param testRateConstant The testRateConstant.\n     */ setTestRateConstants(testRateConstant) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName);\n        if (i != undefined) this.nodes.set(i, testRateConstant);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName, this.nodes.size);\n            this.addNode(testRateConstant);\n        }\n    }\n    /**\n     * Remove the testRateConstant.\n     */ removeTestRateConstants() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName);\n        }\n    }\n    /**\n     * @returns The useTheSameCellNumberForAllConditions or undefined.\n     */ getUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param useTheSameCellNumberForAllConditions The useTheSameCellNumberForAllConditions.\n     */ setUseTheSameCellNumberForAllConditions(useTheSameCellNumberForAllConditions) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        if (i != undefined) this.nodes.set(i, useTheSameCellNumberForAllConditions);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName, this.nodes.size);\n            this.addNode(useTheSameCellNumberForAllConditions);\n        }\n    }\n    /**\n     * Remove the useTheSameCellNumberForAllConditions.\n     */ removeUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        }\n    }\n    /**\n     * @returns The hideInactive or undefined.\n     */ getHideInactive() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param hideInactive The hideInactive.\n     */ setHideInactive(hideInactive) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        if (i != undefined) this.nodes.set(i, hideInactive);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName, this.nodes.size);\n            this.addNode(hideInactive);\n        }\n    }\n    /**\n     * Remove the hideInactive.\n     */ removeHideInactive() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        }\n    }\n    /**\n     * @returns The ForceMacroDetailedBalance or undefined.\n     */ getForceMacroDetailedBalance() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param forceMacroDetailedBalance The forceMacroDetailedBalance.\n     */ setForceMacroDetailedBalance(forceMacroDetailedBalance) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        if (i != undefined) this.nodes.set(i, forceMacroDetailedBalance);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName, this.nodes.size);\n            this.addNode(forceMacroDetailedBalance);\n        }\n    }\n    /**\n     * Remove the forceMacroDetailedBalance.\n     */ removeForceMacroDetailedBalance() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        }\n    }\n    /**\n     * @returns The calcMethod or undefined.\n     */ getCalcMethod() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param calcMethod The calcMethod.\n     */ setCalcMethod(calcMethod) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        if (i != undefined) this.nodes.set(i, calcMethod);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName, this.nodes.size);\n            this.addNode(calcMethod);\n        }\n    }\n    /**\n     * Remove the calcMethod.\n     */ removeCalcMethod() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        }\n    }\n    /**\n     * @returns The eigenvalues or undefined.\n     */ getEigenvalues() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param eigenvalues The eigenvalues.\n     */ setEigenvalues(eigenvalues) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        if (i != undefined) this.nodes.set(i, eigenvalues);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName, this.nodes.size);\n            this.addNode(eigenvalues);\n        }\n    }\n    /**\n     * Remove the eigenvalues.\n     */ removeEigenvalues() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        }\n    }\n    /**\n     * @returns The shortestTimeOfInterest.\n     */ getShortestTimeOfInterest() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param shortestTimeOfInterest The shortestTimeOfInterest.\n     */ setShortestTimeOfInterest(shortestTimeOfInterest) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        if (i != undefined) this.nodes.set(i, shortestTimeOfInterest);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$421603058c6718db.tagName, this.nodes.size);\n            this.addNode(shortestTimeOfInterest);\n        }\n    }\n    /**\n     * Remove the shortestTimeOfInterest.\n     */ removeShortestTimeOfInterest() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        }\n    }\n    /**\n     * @returns The MaximumEvolutionTime.\n     */ getMaximumEvolutionTime() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param maximumEvolutionTime The MaximumEvolutionTime.\n     */ setMaximumEvolutionTime(maximumEvolutionTime) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        if (i != undefined) this.nodes.set(i, maximumEvolutionTime);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName, this.nodes.size);\n            this.addNode(maximumEvolutionTime);\n        }\n    }\n    /**\n     * Remove the MaximumEvolutionTime.\n     */ removeMaximumEvolutionTime() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        }\n    }\n    /**\n     * @returns The automaticallySetMaxEne.\n     */ getAutomaticallySetMaxEne() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param automaticallySetMaxEne The automaticallySetMaxEne.\n     */ setAutomaticallySetMaxEne(automaticallySetMaxEne) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        if (i != undefined) this.nodes.set(i, automaticallySetMaxEne);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n    /**\n     * Remove the automaticallySetMaxEne.\n     */ removeAutomaticallySetMaxEne() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        }\n    }\n    /**\n     * @returns The diagramEnergyOffset.\n     */ getDiagramEnergyOffset() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */ setDiagramEnergyOffset(diagramEnergyOffset) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        if (i != undefined) this.nodes.set(i, diagramEnergyOffset);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName, this.nodes.size);\n            this.addNode(diagramEnergyOffset);\n        }\n    }\n    /**\n     * Remove the diagramEnergyOffset.\n     */ removeDiagramEnergyOffset() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        }\n    }\n    /**\n     * @returns The testMicroRates or undefined.\n     */ getTestMicroRates() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param testMicroRates The testMicroRates.\n     */ setTestMicroRates(testMicroRates) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        if (i != undefined) this.nodes.set(i, testMicroRates);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName, this.nodes.size);\n            this.addNode(testMicroRates);\n        }\n    }\n    /**\n     * Remove the testMicroRates.\n     */ removeTestMicroRates() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        }\n    }\n}\n\n\n\n\n\n\n\nclass $762f625c179c0279$export$f99233281efd08a0 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        this.tagName = \"me:title\";\n    }\n    /**\n     * @param value \n     */ constructor(attributes, value){\n        super(attributes, $762f625c179c0279$export$f99233281efd08a0.tagName, value);\n    }\n}\nclass $762f625c179c0279$export$19d70f3647dee606 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"moleculeList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */ constructor(attributes, molecules){\n        super(attributes, $762f625c179c0279$export$19d70f3647dee606.tagName);\n        this.index = new Map();\n        if (molecules != undefined) molecules.forEach((molecule)=>{\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */ getMolecule(id) {\n        let i = this.index.get(id);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */ removeMolecule(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */ addMolecule(molecule) {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log(\"Replaced molecule with id \" + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$44466a39ca846289 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reactionList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */ constructor(attributes, reactions){\n        super(attributes, $762f625c179c0279$export$44466a39ca846289.tagName);\n        this.index = new Map();\n        if (reactions != undefined) reactions.forEach((reaction)=>{\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */ getReaction(id) {\n        let i = this.index.get(id);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */ removeReaction(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */ addReaction(reaction) {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log(\"Replaced reaction with id \" + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$3139ebae3f570365 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"conditionsList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param conditionss The conditions.\n     */ constructor(attributes, conditionss){\n        super(attributes, $762f625c179c0279$export$2be1c851e287a6b1.tagName);\n        this.index = new Map();\n        if (conditionss != undefined) conditionss.forEach((conditions)=>{\n            this.nodes.set(this.nodes.size, conditions);\n            this.index.set(conditions.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the control.\n     * @returns The conditions.\n     */ getConditions(id) {\n        let i = this.index.get(id);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Remove a control.\n     * @param id The id of the control to remove.\n     */ removeConditions(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a conditions.\n     * @param conditions The conditions.\n     */ addConditions(conditions) {\n        let index = this.index.get(conditions.id);\n        if (index != undefined) {\n            this.nodes.set(index, conditions);\n            console.log(\"Replaced conditions with id \" + conditions.id);\n        } else {\n            this.nodes.set(this.nodes.size, conditions);\n            this.index.set(conditions.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$2be1c851e287a6b1 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"controlList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param controls The controls.\n     */ constructor(attributes, controls){\n        super(attributes, $762f625c179c0279$export$2be1c851e287a6b1.tagName);\n        this.index = new Map();\n        if (controls != undefined) controls.forEach((control)=>{\n            this.nodes.set(this.nodes.size, control);\n            this.index.set(control.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the control.\n     * @returns The control.\n     */ getControl(id) {\n        let i = this.index.get(id);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Remove a control.\n     * @param id The id of the control to remove.\n     */ removeControl(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a control.\n     * @param control The control.\n     */ addControl(control) {\n        let index = this.index.get(control.id);\n        if (index !== undefined) {\n            this.nodes.set(index, control);\n            console.log(\"Replaced control with id \" + control.id);\n        } else {\n            this.nodes.set(this.nodes.size, control);\n            this.index.set(control.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$692079bb871c6039 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        this.tagName = \"me:mesmer\";\n    }\n    static{\n        /**\n     * Precision options.\n     */ this.precisionOptions = [\n            \"d\",\n            \"dd\",\n            \"qd\",\n            \"double\",\n            \"double-double\",\n            \"quad-double\"\n        ];\n    }\n    static{\n        /**\n     * Pressure units.\n     */ this.pressureUnits = [\n            \"Torr\",\n            \"PPCC\",\n            \"atm\",\n            \"mbar\",\n            \"psi\",\n            \"mols/cc\"\n        ];\n    }\n    static{\n        /**\n     * Energy units.\n     */ this.energyUnits = [\n            \"kJ/mol\",\n            \"cm-1\",\n            \"wavenumber\",\n            \"kcal/mol\",\n            \"Hartree\",\n            \"au\"\n        ];\n    }\n    static{\n        /**\n     * Frequency units.\n     */ this.frequencyUnits = [\n            \"cm-1\",\n            \"GHz\",\n            \"amuA^2\"\n        ];\n    }\n    static{\n        /**\n     * The atoms with 1 to 118 protons inclusive. (source: https://query.wikidata.org/#SELECT%20%3Felement%20%3Fsymbol%20%20%3Fprotons%0AWHERE%0A%7B%0A%20%20%3Felement%20wdt%3AP31%20wd%3AQ11344%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20wdt%3AP1086%20%3Fprotons%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20wdt%3AP246%20%3Fsymbol%20.%0A%7D%0A%0AORDER%20BY%20%3Fprotons)\n     */ this.elementTypes = [\n            \"H\",\n            \"He\",\n            \"Li\",\n            \"Be\",\n            \"B\",\n            \"C\",\n            \"N\",\n            \"O\",\n            \"F\",\n            \"Ne\",\n            \"Na\",\n            \"Mg\",\n            \"Al\",\n            \"Si\",\n            \"P\",\n            \"S\",\n            \"Cl\",\n            \"Ar\",\n            \"K\",\n            \"Ca\",\n            \"Sc\",\n            \"Ti\",\n            \"V\",\n            \"Cr\",\n            \"Mn\",\n            \"Fe\",\n            \"Co\",\n            \"Ni\",\n            \"Cu\",\n            \"Zn\",\n            \"Ga\",\n            \"Ge\",\n            \"As\",\n            \"Se\",\n            \"Br\",\n            \"Kr\",\n            \"Rb\",\n            \"Sr\",\n            \"Y\",\n            \"Zr\",\n            \"Nb\",\n            \"Mo\",\n            \"Tc\",\n            \"Ru\",\n            \"Rh\",\n            \"Pd\",\n            \"Ag\",\n            \"Cd\",\n            \"In\",\n            \"Sn\",\n            \"Sb\",\n            \"Te\",\n            \"I\",\n            \"Xe\",\n            \"Cs\",\n            \"Ba\",\n            \"La\",\n            \"Ce\",\n            \"Pr\",\n            \"Nd\",\n            \"Pm\",\n            \"Sm\",\n            \"Eu\",\n            \"Gd\",\n            \"Tb\",\n            \"Dy\",\n            \"Ho\",\n            \"Er\",\n            \"Tm\",\n            \"Yb\",\n            \"Lu\",\n            \"Hf\",\n            \"Ta\",\n            \"W\",\n            \"Re\",\n            \"Os\",\n            \"Ir\",\n            \"Pt\",\n            \"Au\",\n            \"Hg\",\n            \"Tl\",\n            \"Pb\",\n            \"Bi\",\n            \"Po\",\n            \"At\",\n            \"Rn\",\n            \"Fr\",\n            \"Ra\",\n            \"Ac\",\n            \"Th\",\n            \"Pa\",\n            \"U\",\n            \"Np\",\n            \"Pu\",\n            \"Am\",\n            \"Cm\",\n            \"Bk\",\n            \"Cf\",\n            \"Es\",\n            \"Fm\",\n            \"Md\",\n            \"No\",\n            \"Lr\",\n            \"Rf\",\n            \"Db\",\n            \"Sg\",\n            \"Bh\",\n            \"Hs\",\n            \"Mt\",\n            \"Ds\",\n            \"Rg\",\n            \"Cn\",\n            \"Nh\",\n            \"Fl\",\n            \"Mc\",\n            \"Lv\",\n            \"Ts\",\n            \"Og\"\n        ];\n    }\n    static{\n        /**\n     * Atomic mass map for atoms. The keys are element symbols, the values are the atomic mass according to a periodic table.\n     * (This is initialised in the constructor.)\n     */ this.atomMasses = new Map();\n    }\n    static{\n        /**\n     * Atomic radius map for atoms. The keys are element symbols, the values are the atomic radii according to a periodic table.\n     * (This is initialised in the constructor.)\n     */ this.atomRadii = new Map();\n    }\n    static{\n        /**\n     * Colour map for atoms. The keys are element symbols, the values are the colours the element is assigned.\n     * (This is initialised in the constructor.)\n     */ this.atomColors = new Map();\n    }\n    static{\n        /**\n     * Colour map for bonds. The keys are bond order, the values are the colours the bond order is assigned.\n     * (This is initialised in the constructor.)\n     */ this.bondColors = new Map();\n    }\n    static{\n        /**\n     * The header of the XML file.\n     */ this.header = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n    }\n    /**\n     * @param attributes The attributes.\n     * @param moleculeList The molecule list.\n     * @param reactionList The reaction list.\n     * @param conditions The conditions.\n     * @param modelParameters The model parameters.\n     * @param controls The controls.\n     */ constructor(attributes, title, moleculeList, reactionList, conditionss, modelParameters, controls){\n        super(attributes, $762f625c179c0279$export$692079bb871c6039.tagName);\n        let elements = [\n            \"H\",\n            \"O\",\n            \"C\",\n            \"N\",\n            \"Cl\",\n            \"S\",\n            \"Ph\",\n            \"Fe\"\n        ];\n        let colors = [\n            \"White\",\n            \"Red\",\n            \"DarkGrey\",\n            \"Blue\",\n            \"Green\",\n            \"Yellow\",\n            \"Orange\",\n            \"Brown\"\n        ];\n        for(let i = 0; i < elements.length; i++)$762f625c179c0279$export$692079bb871c6039.atomColors.set(elements[i], colors[i]);\n        // Atomic mass units (amu)\n        let masses = [\n            1.00784,\n            15.999,\n            12.011,\n            14.007,\n            35.453,\n            32.06,\n            77.845,\n            55.845\n        ]; // Atomic masses (see https://en.wikipedia.org/wiki/Periodic_table).\n        for(let i = 0; i < elements.length; i++)$762f625c179c0279$export$692079bb871c6039.atomMasses.set(elements[i], masses[i]);\n        // Picometers (pm),\n        let radii = [\n            37,\n            66,\n            67,\n            56,\n            99,\n            102,\n            110,\n            124\n        ]; // Calculated radii between two atoms of the same type in a molecule (https://en.wikipedia.org/wiki/Atomic_radii_of_the_elements_(data_page)).\n        for(let i = 0; i < elements.length; i++)$762f625c179c0279$export$692079bb871c6039.atomRadii.set(elements[i], radii[i]);\n        let bondOrders = [\n            1,\n            1.5,\n            2,\n            2.5,\n            3,\n            3.5,\n            4,\n            4.5,\n            5,\n            5.5,\n            6\n        ];\n        colors = [\n            \"Black\",\n            \"Red\",\n            \"DarkRed\",\n            \"Blue\",\n            \"DarkBlue\",\n            \"Green\",\n            \"DarkGreen\",\n            \"Yellow\",\n            \"DarkYellow\",\n            \"Orange\",\n            \"DarkOrange\"\n        ];\n        for(let i = 0; i < bondOrders.length; i++)$762f625c179c0279$export$692079bb871c6039.bondColors.set(bondOrders[i], colors[i]);\n        this.index = new Map();\n        if (title != undefined) {\n            this.index.set($762f625c179c0279$export$f99233281efd08a0.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (moleculeList != undefined) {\n            this.index.set($762f625c179c0279$export$19d70f3647dee606.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set($762f625c179c0279$export$44466a39ca846289.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        this.conditionsIndex = new Map();\n        if (conditionss != undefined) conditionss.forEach((conditions)=>{\n            this.index.set((0, $613b909b2797b099$export$363c7374d425f4ad).tagName + conditions.id, this.nodes.size);\n            this.conditionsIndex.set(conditions.id, this.nodes.size);\n            this.addNode(conditions);\n        });\n        if (modelParameters != undefined) {\n            this.index.set((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        this.controlIndex = new Map();\n        if (controls != undefined) controls.forEach((control)=>{\n            this.index.set((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + control.id, this.nodes.size);\n            this.controlIndex.set(control.id, this.nodes.size);\n            this.addNode(control);\n        });\n    }\n    /**\n     * @returns The title.\n     */ getTitle() {\n        let i = this.index.get($762f625c179c0279$export$f99233281efd08a0.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the title.\n     * @param title The title.\n     */ setTitle(title) {\n        let i = this.index.get($762f625c179c0279$export$f99233281efd08a0.tagName);\n        if (i != undefined) this.nodes.set(i, title);\n        else {\n            this.index.set($762f625c179c0279$export$f99233281efd08a0.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n    /**\n     * @returns The molecule list.\n     */ getMoleculeList() {\n        let i = this.index.get($762f625c179c0279$export$19d70f3647dee606.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */ setMoleculeList(moleculeList) {\n        let i = this.index.get($762f625c179c0279$export$19d70f3647dee606.tagName);\n        if (i != undefined) this.nodes.set(i, moleculeList);\n        else {\n            this.index.set($762f625c179c0279$export$19d70f3647dee606.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n    /**\n     * @returns The reaction list.\n     */ getReactionList() {\n        let i = this.index.get($762f625c179c0279$export$44466a39ca846289.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */ setReactionList(reactionList) {\n        let i = this.index.get($762f625c179c0279$export$44466a39ca846289.tagName);\n        if (i != undefined) this.nodes.set(i, reactionList);\n        else {\n            this.index.set($762f625c179c0279$export$44466a39ca846289.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n    /**\n     * Add a Conditions.\n     * @param conditions The Conditions.\n     */ addConditions(conditions) {\n        let id = (0, $613b909b2797b099$export$363c7374d425f4ad).tagName + conditions.id;\n        let i = this.index.get(id);\n        if (i != undefined) this.nodes.set(i, conditions);\n        else {\n            this.index.set(id, this.nodes.size);\n            this.conditionsIndex.set(conditions.id, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n    /**\n     * @param conditionsID The id of the conditions.\n     * @returns The conditions for the conditionsID.\n     */ getConditions(conditionsID) {\n        let i = this.conditionsIndex.get(conditionsID);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @returns The next control id.\n     */ getNextConditionsID() {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.conditionsIndex.keys()).sort((a, b)=>a - b);\n        console.log(\"sortedKeys \" + (0, $dcf293d9ee452407$export$4323cc4280d5be7)(sortedKeys));\n        sortedKeys.forEach((key)=>{\n            if (key > id) return id;\n            id++;\n        });\n        return id;\n    }\n    /**\n     * Remove a conditions.\n     * @param conditionsID The id of the conditions to remove.\n     */ removeConditions(conditionsID) {\n        let i = this.conditionsIndex.get(conditionsID);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete((0, $613b909b2797b099$export$363c7374d425f4ad).tagName + conditionsID);\n            this.conditionsIndex.delete(conditionsID);\n        }\n    }\n    /**\n     * @returns The model parameters.\n     */ getModelParameters() {\n        let i = this.index.get((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */ setModelParameters(modelParameters) {\n        let i = this.index.get((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n        if (i != undefined) this.nodes.set(i, modelParameters);\n        else {\n            this.index.set((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n    /**\n     * Add a Control.\n     * @param control The Control.\n     */ addControl(control) {\n        let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + control.id;\n        let i = this.index.get(id);\n        if (i != undefined) this.nodes.set(i, control);\n        else {\n            this.index.set(id, this.nodes.size);\n            this.controlIndex.set(control.id, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n    /**\n     * @returns The control.\n     */ getControl(controlID) {\n        let i = this.controlIndex.get(controlID);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @returns The next control id.\n     */ getNextControlID() {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.controlIndex.keys()).sort((a, b)=>a - b);\n        console.log(\"sortedKeys \" + (0, $dcf293d9ee452407$export$4323cc4280d5be7)(sortedKeys));\n        sortedKeys.forEach((key)=>{\n            if (key > id) return id;\n            id++;\n        });\n        return id;\n    }\n    /**\n     * Remove a control.\n     * @param controlID The id of the control to remove.\n     */ removeControl(controlID) {\n        let i = this.controlIndex.get(controlID);\n        console.log(\"removeControl \" + controlID + \" \" + i);\n        console.log(\"controlIndex \" + (0, $dcf293d9ee452407$export$4323cc4280d5be7)(Array.from(this.controlIndex.keys())));\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + controlID);\n            this.controlIndex.delete(controlID);\n        }\n    }\n}\n\n\n//import * as $3Dmol from '$3Dmol'; // Add import statement for $3Dmol library\n/**\n * MXG.\n */ let $22c7fca7c69edc03$var$mxg_url = \"https://github.com/agdturner/mxg-pwa\";\nlet $22c7fca7c69edc03$var$mxg_a = document.createElement(\"a\");\n$22c7fca7c69edc03$var$mxg_a.href = $22c7fca7c69edc03$var$mxg_url;\n$22c7fca7c69edc03$var$mxg_a.textContent = $22c7fca7c69edc03$var$mxg_url;\n/**\n * Example data.\n */ let $22c7fca7c69edc03$var$mxgDataExamples_url = \"https://github.com/agdturner/mxg-pwa/tree/main/data/examples\";\nlet $22c7fca7c69edc03$var$mxgDataExamples_a = document.createElement(\"a\");\n$22c7fca7c69edc03$var$mxgDataExamples_a.href = $22c7fca7c69edc03$var$mxgDataExamples_url;\n$22c7fca7c69edc03$var$mxgDataExamples_a.textContent = $22c7fca7c69edc03$var$mxgDataExamples_url;\n/**\n * MESMER.\n */ let $22c7fca7c69edc03$var$mesmer_url = \"https://sourceforge.net/projects/mesmer/\";\nlet $22c7fca7c69edc03$var$memser_a = document.createElement(\"a\");\n$22c7fca7c69edc03$var$memser_a.href = $22c7fca7c69edc03$var$mesmer_url;\n$22c7fca7c69edc03$var$memser_a.textContent = $22c7fca7c69edc03$var$mesmer_url;\n/**\n * 3DMol.\n */ let $22c7fca7c69edc03$var$t3Dmol_url = \"https://github.com/3dmol/3Dmol.js\";\nlet $22c7fca7c69edc03$var$t3Dmol_a = document.createElement(\"a\");\n$22c7fca7c69edc03$var$t3Dmol_a.href = $22c7fca7c69edc03$var$t3Dmol_url;\n$22c7fca7c69edc03$var$t3Dmol_a.textContent = $22c7fca7c69edc03$var$t3Dmol_url;\n/**\n * The font sizes for different levels of the GUI.\n */ let $22c7fca7c69edc03$var$fontSize = \"1.0em\";\n/**\n * Margins for spacing GUI components.\n */ let $22c7fca7c69edc03$var$margin0 = \"0px\";\nlet $22c7fca7c69edc03$var$margin1 = \"1px\";\nlet $22c7fca7c69edc03$var$margin2 = \"2px\";\nlet $22c7fca7c69edc03$var$margin3 = \"3px\";\nlet $22c7fca7c69edc03$var$margin5 = \"5px\";\nlet $22c7fca7c69edc03$var$margin25 = \"25px\";\nlet $22c7fca7c69edc03$var$margin50 = \"50px\";\nlet $22c7fca7c69edc03$var$margin75 = \"75px\";\nlet $22c7fca7c69edc03$var$margin100 = \"100px\";\nlet $22c7fca7c69edc03$var$margin125 = \"125px\";\nlet $22c7fca7c69edc03$var$level0 = {\n    marginLeft: $22c7fca7c69edc03$var$margin0,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin0\n};\nlet $22c7fca7c69edc03$var$level1 = {\n    marginLeft: $22c7fca7c69edc03$var$margin25,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin0\n};\nlet $22c7fca7c69edc03$var$level2 = {\n    marginLeft: $22c7fca7c69edc03$var$margin50,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin0\n};\nlet $22c7fca7c69edc03$var$level3 = {\n    marginLeft: $22c7fca7c69edc03$var$margin75,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin0\n};\nlet $22c7fca7c69edc03$var$level4 = {\n    marginLeft: $22c7fca7c69edc03$var$margin100,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin0\n};\nlet $22c7fca7c69edc03$var$level5 = {\n    marginLeft: $22c7fca7c69edc03$var$margin125,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin0\n};\nlet $22c7fca7c69edc03$var$boundary1 = {\n    marginLeft: $22c7fca7c69edc03$var$margin1,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin1\n};\n/**\n * Symbology for the GUI.\n */ // Symbols.\nlet $22c7fca7c69edc03$var$sy_downTriangle = \"\\u25BC\"; // ▼\nlet $22c7fca7c69edc03$var$sy_upTriangle = \"\\u25B2\"; // ▲\nlet $22c7fca7c69edc03$var$sy_edit = \"\\u270E\"; // ✎\nlet $22c7fca7c69edc03$var$sy_add = \"\\uFF0B\"; // ＋\nlet $22c7fca7c69edc03$var$sy_remove = \"\\u2715\"; // ✕\nlet $22c7fca7c69edc03$var$sy_refresh = \"\\u27F3\"; // ⟳\nlet $22c7fca7c69edc03$var$sy_selected = \" \\u2713\"; // ✓\nlet $22c7fca7c69edc03$var$sy_deselected = \" \\u2717\"; // ✗\n// Strings.\nlet $22c7fca7c69edc03$var$s_Add_sy_add = \"Add \" + $22c7fca7c69edc03$var$sy_add;\nlet $22c7fca7c69edc03$var$s_Add_from_spreadsheet = \"Add from spreadsheet \" + $22c7fca7c69edc03$var$sy_add;\nlet $22c7fca7c69edc03$var$s_button = \"button\";\nlet $22c7fca7c69edc03$var$s_Input = \"Input\";\nlet $22c7fca7c69edc03$var$s_optionOn = \"optionOn\";\nlet $22c7fca7c69edc03$var$s_optionOff = \"optionOff\";\nlet $22c7fca7c69edc03$var$s_Refresh_sy_refresh = \"Refresh \" + $22c7fca7c69edc03$var$sy_refresh;\nlet $22c7fca7c69edc03$var$s_Remove_sy_remove = \"Remove \" + $22c7fca7c69edc03$var$sy_remove;\nlet $22c7fca7c69edc03$var$s_Rename = \"Rename\";\nlet $22c7fca7c69edc03$var$s_Select = \"Select\";\nlet $22c7fca7c69edc03$var$s_selectOption = \"Select an option (use keys to cycle through options)...\";\n// HTML IDs\nlet $22c7fca7c69edc03$var$menuDivId = \"menu\";\nlet $22c7fca7c69edc03$var$titleDivId = \"title\";\nlet $22c7fca7c69edc03$var$moleculesDivId = \"molecules\";\nlet $22c7fca7c69edc03$var$reactionsDivId = \"reactions\";\nlet $22c7fca7c69edc03$var$conditionsDivId = \"conditions\";\nlet $22c7fca7c69edc03$var$modelParametersDivId = \"modelParameters\";\nlet $22c7fca7c69edc03$var$controlDivId = \"control\";\nlet $22c7fca7c69edc03$var$xmlDivId = \"xml\";\n// For dark/light mode.\nlet $22c7fca7c69edc03$var$dark;\n/*\nconst db = await openDB('my-db', 1, {\n    upgrade(db) {\n        db.createObjectStore('keyval');\n    },\n});\n\nlet darkModePreference = await db.get('keyval', 'darkMode');\ndark = (darkModePreference === 'true');\nconsole.log(\"dark=\" + dark);\n*/ /**\n * For mesmer.\n */ let $22c7fca7c69edc03$var$mesmer;\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */ let $22c7fca7c69edc03$var$molecules;\n/**\n * For storing the maximum molecule energy in a reaction.\n */ let $22c7fca7c69edc03$var$maxMoleculeEnergy = -Infinity;\n/**\n * For storing the minimum molecule energy in a reaction.\n */ let $22c7fca7c69edc03$var$minMoleculeEnergy = Infinity;\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */ let $22c7fca7c69edc03$var$reactions;\n/**\n * The Mesmer ids.\n */ let $22c7fca7c69edc03$var$ids = new Set();\n/**\n * Add an id to the set of ids.\n * @param parts The parts of the id.\n */ function $22c7fca7c69edc03$var$addID(...parts) {\n    let validID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(...parts);\n    if ($22c7fca7c69edc03$var$ids.has(validID)) throw new Error(validID + \" already exists!\");\n    $22c7fca7c69edc03$var$ids.add(validID);\n    return validID;\n}\n// IDs for the reactions diagram.\nlet $22c7fca7c69edc03$var$rdDivId = $22c7fca7c69edc03$var$addID(\"reactionsDiagram\");\nlet $22c7fca7c69edc03$var$rdCanvasId = $22c7fca7c69edc03$var$addID(\"reactionsDiagramCanvas\");\n//let rd_canvas_width: number = 800;\nlet $22c7fca7c69edc03$var$rdCanvasHeight = 400;\nlet $22c7fca7c69edc03$var$rd_lw = 4;\nlet $22c7fca7c69edc03$var$rd_lwc = 2;\nlet $22c7fca7c69edc03$var$rd_font = \"1em SensSerif\";\nlet $22c7fca7c69edc03$var$popWindow;\n/**\n * Once the DOM is loaded, add a load button.\n */ document.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Update the page styles based on the user's preference.\n    document.body.className = $22c7fca7c69edc03$var$dark ? \"dark-mode\" : \"light-mode\";\n    /* It is not allowed to use localStorage with a Service Worker!\n    let darkModePreference = localStorage.getItem('darkMode');\n    dark = (darkModePreference === 'true');\n    console.log(\"dark=\" + dark);\n    */ // Update the page styles based on the user's preference.\n    document.body.className = $22c7fca7c69edc03$var$dark ? \"dark-mode\" : \"light-mode\";\n    // Create a menu for the GUI.\n    let menuDiv = document.getElementById($22c7fca7c69edc03$var$menuDivId);\n    menuDiv.style.display = \"flex\";\n    menuDiv.style.justifyContent = \"center\";\n    menuDiv.style.margin = \"5px\";\n    menuDiv.style.padding = \"5px\";\n    menuDiv.style.border = \"1px solid black\";\n    menuDiv.style.backgroundColor = \"lightgrey\";\n    // Create Load button.\n    let s_Load = \"Load\";\n    let loadButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(s_Load, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(s_Load), $22c7fca7c69edc03$var$boundary1);\n    loadButton.addEventListener(\"click\", (event)=>{\n        $22c7fca7c69edc03$var$load();\n        loadButton.textContent = s_Load;\n    });\n    menuDiv.appendChild(loadButton);\n    // Create style/theme option buttons.\n    // Create button to increase the font size.\n    let s_Increase_fontsize = \"Increase fontsize\";\n    let increaseFontSizeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(s_Increase_fontsize, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(s_Increase_fontsize), $22c7fca7c69edc03$var$boundary1);\n    increaseFontSizeButton.addEventListener(\"click\", ()=>{\n        let fontSize = parseFloat(getComputedStyle(document.body).fontSize);\n        document.body.style.fontSize = fontSize + 1 + \"px\";\n        if ($22c7fca7c69edc03$var$popWindow != null) //let fontSize = parseFloat(getComputedStyle(popWindow.document.body).fontSize);\n        $22c7fca7c69edc03$var$popWindow.document.body.style.fontSize = fontSize + 1 + \"px\";\n        $22c7fca7c69edc03$var$redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(increaseFontSizeButton);\n    // Create button to increase the font size.\n    let s_Decrease_fontsize = \"Decrease fontsize\";\n    let decreaseFontSizeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(s_Decrease_fontsize, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(s_Decrease_fontsize), $22c7fca7c69edc03$var$boundary1);\n    decreaseFontSizeButton.addEventListener(\"click\", ()=>{\n        let fontSize = parseFloat(getComputedStyle(document.body).fontSize);\n        document.body.style.fontSize = fontSize - 1 + \"px\";\n        if ($22c7fca7c69edc03$var$popWindow != null) //let fontSize = parseFloat(getComputedStyle(popWindow.document.body).fontSize);\n        $22c7fca7c69edc03$var$popWindow.document.body.style.fontSize = fontSize - 1 + \"px\";\n        $22c7fca7c69edc03$var$redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(decreaseFontSizeButton);\n    // Create a light/dark mode button.\n    let s_Light_Dark_Mode = \"Light/Dark Mode\";\n    let lightDarkModeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(s_Light_Dark_Mode, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(s_Light_Dark_Mode), $22c7fca7c69edc03$var$boundary1);\n    lightDarkModeButton.addEventListener(\"click\", ()=>{\n        $22c7fca7c69edc03$var$dark = !$22c7fca7c69edc03$var$dark;\n        //localStorage.setItem('darkMode', dark ? 'true' : 'false');\n        if ($22c7fca7c69edc03$var$dark) document.body.className = \"dark-mode\";\n        else document.body.className = \"light-mode\";\n        $22c7fca7c69edc03$var$redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(lightDarkModeButton);\n    // Create Save button.\n    let s_Save = \"Save\";\n    let saveButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(s_Save, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(s_Save), $22c7fca7c69edc03$var$boundary1);\n    saveButton.addEventListener(\"click\", $22c7fca7c69edc03$var$saveXML);\n    menuDiv.appendChild(saveButton);\n    let welcomeDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)((0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(\"Welcome\"), $22c7fca7c69edc03$var$boundary1);\n    // Create text for welcome.\n    let p1 = document.createElement(\"p\");\n    welcomeDiv.appendChild(p1);\n    p1.textContent = \"Welcome to MXG - a Graphical User Interface (GUI) program to assist MEMSER users in creating, editing         and visualising MESMER data. MESMER is the Master Equation Solver for Multi Energy-well Reactions, details can be found         at: \";\n    p1.appendChild($22c7fca7c69edc03$var$memser_a);\n    p1.style.alignContent = \"center\";\n    let p2 = document.createElement(\"p\");\n    welcomeDiv.appendChild(p2);\n    p2.textContent = \"MXG development is funded by the UK Engineering and Physical Sciences Research Council (EPSRC) from January     to April 2024.\";\n    let p3 = document.createElement(\"p\");\n    welcomeDiv.appendChild(p3);\n    p3.textContent = \"The menu Load button is to be used to select a MESMER file to load (the file loaded will not be modified).         MXG reads the file and presents the data it contains so that the user can make changes and use the Save button to generate         a new MESMER file. The saved file should have the same content as was loaded except it will contain no comments or blank         lines, values will be trimmed of white space, and some numbers may be output in a standard scientific notation if they were         not already. The saved file will also reflect any changes specified using the GUI.\";\n    let p4 = document.createElement(\"p\");\n    welcomeDiv.appendChild(p4);\n    p4.textContent = \"Between the Load and Save buttons are buttons to increase or decrease the font size. In addition to changing the         text size of any text components, this will also redraw the reaction diagram so that the text rendered onto the canvas reflects         this change. It is planned to have themes selectable to provide a dark mode rendering and to support users that struggle to         distinguish between certain colours.\";\n    let p5 = document.createElement(\"p\");\n    p5.textContent += \"The development is in an alpha release phase and is not recommended for general use. A community release that         is to be supported by the MESMER community is scheduled for the end of April 2024. MXG is free and open source software based on         free and open source software. The main development GitHub repository is: \";\n    p5.appendChild($22c7fca7c69edc03$var$mxg_a);\n    welcomeDiv.appendChild(p5);\n    let p6 = document.createElement(\"p\");\n    welcomeDiv.appendChild(p6);\n    p6.textContent = \"MXG can be used online or installed locally as a Progressive Web App (PWA). A PWA is a type of application         software that should work on platforms with a standard-compliant Web browser. PWA installation varies by Web browser/device.         Some details to help with installation of the MXG PWA are in the GitHub Repository README.\";\n    let p7 = document.createElement(\"p\");\n    welcomeDiv.appendChild(p7);\n    p7.textContent = 'The MESMER file loaded is expected to contain the following child elements of the parent \"me:mesmer\"         element: \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\". If a         child element is missing or there are multiple \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", or         \"me:modelParameters\" elements, an Error is currently thrown. In the future, the loading and creation of files with         multiple \"me:conditions\" sections will be supported... If you do not have a MESMER file, then feel free to download and         use the examples: ';\n    p7.appendChild($22c7fca7c69edc03$var$mxgDataExamples_a);\n    document.body.appendChild(welcomeDiv);\n    // Create div for instructions.\n    let instructionsDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)((0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(\"Instructions\"), $22c7fca7c69edc03$var$boundary1);\n    document.body.appendChild(instructionsDiv);\n    let p8 = document.createElement(\"p\");\n    instructionsDiv.appendChild(p8);\n    p8.textContent = 'Upon loading a MESMER file, an input containing the \"me:title\" value should appear along side a label.         The value can be changed using the input. The \"me:title\" value is used to compose the filename for data saved using         the Save button. Characters that are unsuitable for filenames will be replaced with the underscore character \"_\" in         the filename.';\n    let p9 = document.createElement(\"p\");\n    instructionsDiv.appendChild(p9);\n    p9.textContent = 'The \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\" details         are presented below the \"me:title\" in a series of buttons. A canvas depicts a well diagram for the reactions. The         diagram redraws if an \"me:ZPE\" property value of a molecule a listed reaction are changed. Below all this is a text         representation of the file loaded.';\n    let p10 = document.createElement(\"p\");\n    instructionsDiv.appendChild(p10);\n    p10.textContent = 'The \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\" buttons contain         a triangular symbol which indicate a collapsed (triangle orientated with a point down: \\u25BC) or expanded (triangle with a point         up: \\u25B2) state. Actioning these buttons will either expand or collapse content that should appear or be present below the button.';\n    let p11 = document.createElement(\"p\");\n    instructionsDiv.appendChild(p11);\n    p10.textContent = \"Rendering of molecules with coordinates is provded by 3DMol.js which incorporates code from GLmol,         Three.js, and jQuery and is licensed under a BSD-3-Clause license. For more details on 3DMol.js please visit the GitHub         repository: \";\n    p10.appendChild($22c7fca7c69edc03$var$t3Dmol_a);\n});\n/**\n *  Redraw the reactions diagram.\n */ function $22c7fca7c69edc03$var$redrawReactionsDiagram() {\n    if ($22c7fca7c69edc03$var$popWindow == null) {\n        let rdCanvas = document.getElementById($22c7fca7c69edc03$var$rdCanvasId);\n        $22c7fca7c69edc03$var$drawReactionDiagram(rdCanvas, $22c7fca7c69edc03$var$dark, $22c7fca7c69edc03$var$rd_font, $22c7fca7c69edc03$var$rd_lw, $22c7fca7c69edc03$var$rd_lwc);\n    } else {\n        let c = $22c7fca7c69edc03$var$popWindow.document.getElementById($22c7fca7c69edc03$var$rdCanvasId);\n        $22c7fca7c69edc03$var$drawReactionDiagram(c, $22c7fca7c69edc03$var$dark, $22c7fca7c69edc03$var$rd_font, $22c7fca7c69edc03$var$rd_lw, $22c7fca7c69edc03$var$rd_lwc);\n    }\n}\n/**\n * Prompts the user for a MESMER XML file, initiates the parsing of the chosen file, and \n * creates a save button for saving a new XML file.\n */ function $22c7fca7c69edc03$var$load() {\n    // Before loading a new file, remove any existing content.\n    $22c7fca7c69edc03$var$ids.forEach((id)=>{\n        (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(id, $22c7fca7c69edc03$var$ids);\n    });\n    if ($22c7fca7c69edc03$var$molecules != null) $22c7fca7c69edc03$var$molecules.clear();\n    if ($22c7fca7c69edc03$var$reactions != null) $22c7fca7c69edc03$var$reactions.clear();\n    $22c7fca7c69edc03$var$maxMoleculeEnergy = -Infinity;\n    $22c7fca7c69edc03$var$minMoleculeEnergy = Infinity;\n    // Create a file input element to prompt the user to select a file.\n    let input = document.createElement(\"input\");\n    input.type = \"file\";\n    input.onchange = function() {\n        if (input.files) {\n            for(let i = 0; i < input.files.length; i++)console.log(\"inputElement.files[\" + i + \"]=\" + input.files[i]);\n            let file = input.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            let inputFilename = file.name;\n            let reader = new FileReader();\n            let chunkSize = 1048576; // 1MB\n            let start = 0;\n            let contents = \"\";\n            reader.onload = function(e) {\n                if (e.target == null) throw new Error(\"Event target is null\");\n                contents += e.target.result;\n                if (file != null) {\n                    if (start < file.size) {\n                        // Read the next chunk\n                        let blob = file.slice(start, start + chunkSize);\n                        reader.readAsText(blob);\n                        start += chunkSize;\n                    } else {\n                        // All chunks have been read\n                        contents = contents.trim();\n                        $22c7fca7c69edc03$var$displayXML(inputFilename, contents);\n                        let parser = new DOMParser();\n                        let xml = parser.parseFromString(contents, \"text/xml\");\n                        $22c7fca7c69edc03$var$parse(xml);\n                    /*\n                        // Sending to the server for validation is no longer implemented as there is currently no server.\n                        // Send XML to the server\n                        fetch('http://localhost:1234/', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'text/xml',\n                            },\n                            body: contents,\n                        })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error(`HTTP error! status: ${response.status}`);\n                                }\n                                return response.text();\n                            })\n                            .then(data => {\n                                console.log('Server response:', data);\n                            })\n                            .catch(error => {\n                                console.error('There was a problem with the fetch operation:', error);\n                            });\n                        */ }\n                }\n            };\n            // Read the first chunk\n            let blob = file.slice(start, start + chunkSize);\n            reader.readAsText(blob);\n            start += chunkSize;\n        }\n    };\n    input.click();\n}\n/**\n * Parse an XMLDocument and create the mesmer object.\n * @param xml The XML.\n */ function $22c7fca7c69edc03$var$parse(xml) {\n    console.log(\"parse: \" + xml);\n    // Process the XML.\n    let xml_mesmer = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$692079bb871c6039).tagName);\n    $22c7fca7c69edc03$var$mesmer = new (0, $762f625c179c0279$export$692079bb871c6039)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_mesmer));\n    // Title.\n    let xml_title = xml.getElementsByTagName((0, $762f625c179c0279$export$f99233281efd08a0).tagName);\n    if (xml_title.length != 1) throw new Error(\"Multiple \" + (0, $762f625c179c0279$export$f99233281efd08a0).tagName + \" tags found\");\n    else {\n        let title = xml_title[0].childNodes[0].nodeValue.trim();\n        let titleNode = new (0, $762f625c179c0279$export$f99233281efd08a0)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_title[0]), title);\n        $22c7fca7c69edc03$var$mesmer.setTitle(titleNode);\n        let titleDiv = document.getElementById($22c7fca7c69edc03$var$titleDivId);\n        let lwiId = $22c7fca7c69edc03$var$addID(\"titleDiv\");\n        // Create input element.\n        let lwi = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"text\", $22c7fca7c69edc03$var$addID(lwiId, \"Input\"), $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            let target = event.target;\n            titleNode.value = target.value;\n            console.log(titleNode.tagName + \" changed to \" + titleNode.value);\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n        }, title, (0, $762f625c179c0279$export$f99233281efd08a0).tagName);\n        lwi.id = lwiId;\n        titleDiv.appendChild(lwi);\n    }\n    // Molecules.\n    let moleculesDiv = document.getElementById($22c7fca7c69edc03$var$moleculesDivId);\n    let moleculesListDivId = $22c7fca7c69edc03$var$addID(\"moleculesList\");\n    // If the moleculesListDiv already exists, remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(moleculesListDivId, $22c7fca7c69edc03$var$ids);\n    let moleculeListDiv = $22c7fca7c69edc03$var$processMoleculeList(xml);\n    moleculeListDiv.id = moleculesListDivId;\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: moleculesDiv,\n        elementToInsertBefore: null,\n        content: moleculeListDiv,\n        buttonLabel: \"Molecules\",\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeListDiv.id, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level0,\n        contentDivId: moleculeListDiv.id\n    });\n    //mesmer.setMoleculeList(new MoleculeList(getAttributes(moleculeListDiv), Array.from(molecules.values())));\n    $22c7fca7c69edc03$var$mesmer.setMoleculeList(new (0, $762f625c179c0279$export$19d70f3647dee606)(new Map(), Array.from($22c7fca7c69edc03$var$molecules.values())));\n    // Reactions.\n    let reactionsDiv = document.getElementById($22c7fca7c69edc03$var$reactionsDivId);\n    let reactionsListDivId = $22c7fca7c69edc03$var$addID(\"reactionsList\");\n    // If the reactionsListDiv already exists, remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(reactionsListDivId, $22c7fca7c69edc03$var$ids);\n    let reactionsListDiv = $22c7fca7c69edc03$var$processReactionList(xml);\n    reactionsListDiv.id = reactionsListDivId;\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: reactionsDiv,\n        elementToInsertBefore: null,\n        content: reactionsListDiv,\n        buttonLabel: \"Reactions\",\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(reactionsListDiv.id, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level0,\n        contentDivId: reactionsListDiv.id\n    });\n    //mesmer.setReactionList(new ReactionList(getAttributes(reactionsDiv), Array.from(reactions.values())));\n    $22c7fca7c69edc03$var$mesmer.setReactionList(new (0, $762f625c179c0279$export$44466a39ca846289)(new Map(), Array.from($22c7fca7c69edc03$var$reactions.values())));\n    // Add the reactions diagram canvas.\n    // Destroy any existing reactions diagram.\n    // Check for popWindow.\n    if ($22c7fca7c69edc03$var$popWindow != null) {\n        $22c7fca7c69edc03$var$popWindow.close();\n        $22c7fca7c69edc03$var$popWindow = null;\n    }\n    // If rdDiv already exists, remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)($22c7fca7c69edc03$var$rdDivId);\n    // Create a new rdDiv and append it.\n    let rdDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)($22c7fca7c69edc03$var$rdDivId, $22c7fca7c69edc03$var$level0);\n    reactionsDiv.append(rdDiv);\n    // Create a pop diagram button in its own div.\n    let popButtonDivId = $22c7fca7c69edc03$var$addID(\"popButtonDivId\");\n    //remove(popButtonDivId);\n    let popButtonDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(popButtonDivId);\n    rdDiv.appendChild(popButtonDiv);\n    let popButtonID = $22c7fca7c69edc03$var$addID(\"popButtonId\");\n    // If the popButton already exists, remove it.\n    //remove(popButtonID);\n    let popOutText = \"Reactions Diagram: Action to pop into a new Window\";\n    let popButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(popOutText, popButtonID);\n    popButtonDiv.appendChild(popButton);\n    // If the canvas already exists, remove it.\n    //remove(rdCanvasId);\n    let rdCanvas = document.createElement(\"canvas\");\n    rdCanvas.id = $22c7fca7c69edc03$var$rdCanvasId;\n    rdDiv.appendChild(rdCanvas);\n    //rd_canvas.width = rd_canvas_width;\n    rdCanvas.height = $22c7fca7c69edc03$var$rdCanvasHeight;\n    rdCanvas.style.border = \"1px solid black\";\n    //rdCanvas.style.margin = \"1px\";\n    $22c7fca7c69edc03$var$drawReactionDiagram(rdCanvas, $22c7fca7c69edc03$var$dark, $22c7fca7c69edc03$var$rd_font, $22c7fca7c69edc03$var$rd_lw, $22c7fca7c69edc03$var$rd_lwc);\n    // Add action listener to the pop diagram button.\n    popButton.addEventListener(\"click\", ()=>{\n        if ($22c7fca7c69edc03$var$popWindow == null) {\n            let popWindowRDCanvas = document.createElement(\"canvas\");\n            popWindowRDCanvas.id = $22c7fca7c69edc03$var$rdCanvasId;\n            $22c7fca7c69edc03$var$popWindow = window.open(\"\", \"Reactions Diagram\", \"width=\" + rdCanvas.width + \", height=\" + rdCanvas.height);\n            $22c7fca7c69edc03$var$popWindow.document.body.appendChild(popWindowRDCanvas);\n            $22c7fca7c69edc03$var$drawReactionDiagram(popWindowRDCanvas, $22c7fca7c69edc03$var$dark, $22c7fca7c69edc03$var$rd_font, $22c7fca7c69edc03$var$rd_lw, $22c7fca7c69edc03$var$rd_lwc);\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)($22c7fca7c69edc03$var$rdCanvasId, $22c7fca7c69edc03$var$ids);\n            popButton.textContent = \"Reactions Diagram: Action to pop back\";\n        } else {\n            rdCanvas = document.createElement(\"canvas\");\n            rdCanvas.id = $22c7fca7c69edc03$var$rdCanvasId;\n            rdDiv.appendChild(rdCanvas);\n            $22c7fca7c69edc03$var$drawReactionDiagram(rdCanvas, $22c7fca7c69edc03$var$dark, $22c7fca7c69edc03$var$rd_font, $22c7fca7c69edc03$var$rd_lw, $22c7fca7c69edc03$var$rd_lwc);\n            $22c7fca7c69edc03$var$popWindow.close();\n            $22c7fca7c69edc03$var$popWindow = null;\n            popButton.textContent = popOutText;\n        }\n    });\n    // Add a save button to save the canvas as an image.\n    let saveButtonID = $22c7fca7c69edc03$var$addID(\"saveButton\");\n    // If the saveButton already exists, remove it.\n    //remove(saveButtonID);\n    let saveButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(\"Save To PNG Image File\", saveButtonID, $22c7fca7c69edc03$var$boundary1);\n    popButtonDiv.appendChild(saveButton);\n    saveButton.addEventListener(\"click\", ()=>{\n        let dataURL = rdCanvas.toDataURL();\n        let a = document.createElement(\"a\");\n        a.href = dataURL;\n        let title = $22c7fca7c69edc03$var$mesmer.getTitle()?.value;\n        a.download = title.replace(/[^a-z0-9]/gi, \"_\") + \"_ReactionDiagram.png\";\n        a.click();\n    });\n    // Conditions.\n    let conditionsDiv = document.getElementById($22c7fca7c69edc03$var$conditionsDivId);\n    let conditionssDivId = $22c7fca7c69edc03$var$addID($22c7fca7c69edc03$var$conditionsDivId, \"conditionss\");\n    // If the conditionssDiv already exists, remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(conditionssDivId);\n    let conditionssDiv = $22c7fca7c69edc03$var$processConditions(xml);\n    conditionssDiv.id = conditionssDivId;\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: conditionsDiv,\n        elementToInsertBefore: null,\n        content: conditionssDiv,\n        buttonLabel: \"Conditions\",\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(conditionssDiv.id, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level0,\n        contentDivId: conditionssDiv.id\n    });\n    // Model Parameters.\n    let modelParametersDiv = document.getElementById($22c7fca7c69edc03$var$modelParametersDivId);\n    let modelParametersListDivId = $22c7fca7c69edc03$var$addID(\"modelParametersList\");\n    // If the modelParametersListDiv already exists, remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(modelParametersListDivId);\n    let modelParametersListDiv = $22c7fca7c69edc03$var$processModelParameters(xml);\n    modelParametersListDiv.id = \"modelParametersList\";\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: modelParametersDiv,\n        elementToInsertBefore: null,\n        content: modelParametersListDiv,\n        buttonLabel: \"Model Parameters\",\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(modelParametersListDiv.id, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level0,\n        contentDivId: modelParametersListDiv.id\n    });\n    // Control.\n    let controlDiv = document.getElementById($22c7fca7c69edc03$var$controlDivId);\n    let controlsDivId = $22c7fca7c69edc03$var$addID($22c7fca7c69edc03$var$controlDivId, \"controls\");\n    // If the controlsDiv already exists, remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(controlsDivId);\n    let controlsDiv = $22c7fca7c69edc03$var$processControl(xml);\n    controlsDiv.id = controlsDivId;\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: controlDiv,\n        elementToInsertBefore: null,\n        content: controlsDiv,\n        buttonLabel: \"Controls\",\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(controlsDiv.id, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level0,\n        contentDivId: controlsDiv.id\n    });\n}\n/**\n * Parse XML and create HTMLDivElement for molecules.\n * @param xml The XML.\n * @returns The HTMLDivElement.\n */ function $22c7fca7c69edc03$var$processMoleculeList(xml) {\n    // Initialise molecules.\n    $22c7fca7c69edc03$var$molecules = new Map();\n    // Create div to contain the molecules list.\n    let moleculeListDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    // Get the XML \"moleculeList\" element.\n    let xml_moleculeList = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$19d70f3647dee606).tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames = new Set();\n    xml_moleculeList.childNodes.forEach(function(node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach((x)=>console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has((0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName)) throw new Error('Expecting tags with \"' + (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName + '\" tagName but there are none!');\n    // Process the XML \"molecule\" elements.\n    let xml_molecules = xml_moleculeList.getElementsByTagName((0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for(let i = 0; i < xml_molecules.length; i++){\n        let moleculeDiv = document.createElement(\"div\");\n        // Set attributes.\n        let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecules[i]);\n        // Get the molecule id.\n        let moleculeId = attributes.get((0, $7cb8c0739b32549c$export$3da9759ad07746a3).s_id);\n        if (moleculeId == undefined) throw new Error((0, $7cb8c0739b32549c$export$3da9759ad07746a3).s_id + \" is undefined\");\n        let moleculeTagNames = new Set();\n        let cns = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for(let j = 0; j < cns.length; j++){\n            let cn = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) moleculeTagNames.add(cn.nodeName);\n            else // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n            if (cn.nodeName != \"#text\") console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n        //console.log(cn.nodeName);\n        }\n        // Create molecule.\n        let molecule = new (0, $7cb8c0739b32549c$export$3da9759ad07746a3)(attributes, moleculeId);\n        $22c7fca7c69edc03$var$molecules.set(moleculeId, molecule);\n        // Atoms should be aware of any bonds they have so that if an atom is removed, then so are all bonds to the atom!\n        // Init atoms.\n        let atomArray = new (0, $7cb8c0739b32549c$export$9cea715eceba39a0)(new Map()); // This will be replaced if there is an AtomArray.\n        // There can be an individual atom not in an atom array, or an atom array.\n        let xml_atomArrays = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName);\n        if (xml_atomArrays.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        // Create a new collapsible div for the AtomArray.\n        let atomArrayDiv = $22c7fca7c69edc03$var$getCollapsibleContentDiv(moleculeId, moleculeDiv, null, (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName, (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName, $22c7fca7c69edc03$var$level2);\n        //let atomArrayDiv: HTMLDivElement = createAtomArrayDiv(moleculeId, moleculeDiv, boundary1, level2);\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms = xml_atomArray.getElementsByTagName((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n            if (xml_atoms.length < 2) throw new Error(\"Expecting 2 or more atoms in \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \", but finding \" + xml_atoms.length + \"!\");\n            atomArray = new (0, $7cb8c0739b32549c$export$9cea715eceba39a0)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atomArray));\n            molecule.setAtoms(atomArray);\n            for(let j = 0; j < xml_atoms.length; j++){\n                // Create a new Atom.\n                let atom = new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atoms[j]), molecule);\n                let atomId = atomArray.addAtom(atom);\n                //console.log(\"atomId=\" + atomId);\n                // Add the atomDiv to the atomArrayDiv.\n                let atomDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$level3);\n                atomArrayDiv.appendChild(atomDiv);\n                let inputId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeId, atomId);\n                atomDiv.appendChild((0, $2cda23d1e44619db$export$f2839682b8c07f35)(atomId, $22c7fca7c69edc03$var$boundary1));\n                // elementType.\n                $22c7fca7c69edc03$var$processElementType(inputId, atom, atomDiv, false, $22c7fca7c69edc03$var$boundary1);\n                // coordinates.\n                $22c7fca7c69edc03$var$processCoordinates(inputId, atom, atomDiv, $22c7fca7c69edc03$var$boundary1);\n                $22c7fca7c69edc03$var$addRemoveButton(atomDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$removeAtom, molecule, atomId);\n            }\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName);\n        } else {\n            let xml_atoms = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n            if (xml_atoms.length == 1) {\n                atomArray = new (0, $7cb8c0739b32549c$export$9cea715eceba39a0)(new Map());\n                atomArray.addAtom(new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atoms[0]), molecule));\n                molecule.setAtoms(atomArray);\n            } else if (xml_atoms.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \"?\");\n        }\n        atomArrayDiv.appendChild($22c7fca7c69edc03$var$getAddAtomButton(molecule, atomArrayDiv, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3));\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n        // Init bondsNode.\n        let bondArray = new (0, $7cb8c0739b32549c$export$746fba2e30d93fe6)(new Map()); // This will be replaced if there is an BondArray.=\n        // Function to be used to remove a bond.\n        let removeBond = (id)=>molecule.getBonds().removeBond(id);\n        // There can be an individual bond not in a bond array, or a bond array.\n        // There may be only 1 bond in a BondArray.\n        let xml_bondArrays = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName);\n        // Create a new collapsible div for the BondArray.\n        let bondArrayDiv = $22c7fca7c69edc03$var$getCollapsibleContentDiv(moleculeId, moleculeDiv, null, (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName, (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName, $22c7fca7c69edc03$var$level2);\n        if (xml_bondArrays.length > 0) {\n            if (xml_bondArrays.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n            let xml_bonds = xml_bondArrays[0].getElementsByTagName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n            bondArray = new (0, $7cb8c0739b32549c$export$746fba2e30d93fe6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bondArrays[0]));\n            for(let j = 0; j < xml_bonds.length; j++){\n                // Create a new Bond.\n                let bond = new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bonds[j]), molecule);\n                let bondId = bondArray.addBond(bond);\n                // Add the bondDiv to the bondArrayDiv.\n                let bondDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$level3);\n                bondArrayDiv.appendChild(bondDiv);\n                let inputId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeId, bondId);\n                bondDiv.appendChild((0, $2cda23d1e44619db$export$f2839682b8c07f35)(bondId, $22c7fca7c69edc03$var$boundary1));\n                // atomRefs2.\n                $22c7fca7c69edc03$var$processAtomRefs2(molecule, bondDiv, bond, inputId, $22c7fca7c69edc03$var$boundary1);\n                // order.\n                $22c7fca7c69edc03$var$processOrder(bondDiv, bond, inputId, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_order, $22c7fca7c69edc03$var$boundary1);\n                $22c7fca7c69edc03$var$addRemoveButton(bondDiv, $22c7fca7c69edc03$var$boundary1, removeBond, bondId);\n            }\n            molecule.setBonds(bondArray);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName);\n        } else {\n            let xml_bonds = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n            if (xml_bonds.length > 0) {\n                if (xml_bonds.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName + \"?\");\n                bondArray = new (0, $7cb8c0739b32549c$export$746fba2e30d93fe6)(new Map());\n                bondArray.addBond(new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bonds[0]), molecule));\n                molecule.setBonds(bondArray);\n            }\n        }\n        bondArrayDiv.appendChild($22c7fca7c69edc03$var$getAddBondButton(molecule, moleculeId, bondArrayDiv, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3));\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n        $22c7fca7c69edc03$var$create3DViewer(molecule, moleculeDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2);\n        // Organise PropertyList or individual Property.\n        // (There can be an individual property not in a propertyList?)\n        // If there is a PropertyList, then create a property list.\n        let xml_PLs = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n        if (xml_PLs.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \" but finding \" + xml_PLs.length + \"!\");\n        if (xml_PLs.length == 1) {\n            // Create a new collapsible div for the PropertyList.\n            let plDiv = document.createElement(\"div\");\n            let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n            (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                divToAddTo: moleculeDiv,\n                elementToInsertBefore: null,\n                content: plDiv,\n                buttonLabel: (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName,\n                buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, $22c7fca7c69edc03$var$s_button),\n                margin: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            // Create a new PropertyList.\n            let pl = new (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PLs[0]));\n            molecule.setProperties(pl);\n            let xml_Ps = xml_PLs[0].getElementsByTagName((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n            for(let j = 0; j < xml_Ps.length; j++){\n                // Create a new Property.\n                let p = $22c7fca7c69edc03$var$createProperty(xml_Ps[j], plDiv, molecule, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n                pl.setProperty(p);\n            }\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n        } else {\n            // If there is a Property on its own, then create a property on its own.\n            let xml_Ps = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n            if (xml_Ps.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \"?\");\n            // Create a new Property.\n            let p = $22c7fca7c69edc03$var$createProperty(xml_Ps[0], moleculeDiv, molecule, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2);\n            molecule.setProperties(p);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n        }\n        // Organise EnergyTransferModel.\n        let xml_ETMs = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        if (xml_ETMs.length > 0) {\n            if (xml_ETMs.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName + \" but finding \" + xml_ETMs.length + \"!\");\n            let etm = new (0, $7cb8c0739b32549c$export$499950da20810ac9)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_ETMs[0]));\n            $22c7fca7c69edc03$var$processEnergyTransferModel(etm, molecule, xml_ETMs[0], moleculeDiv, $22c7fca7c69edc03$var$margin75);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        }\n        // Organise DOSCMethod.\n        let xml_DOSCMethod = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName);\n        if (xml_DOSCMethod.length > 0) {\n            if (xml_DOSCMethod.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \" but finding \" + xml_DOSCMethod.length + \"!\");\n            let dOSCMethod = new (0, $7cb8c0739b32549c$export$bbdce6c921702068)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_DOSCMethod[0]));\n            moleculeDiv.appendChild((0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName, (0, $7cb8c0739b32549c$export$bbdce6c921702068).xsi_typeOptions, (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName, dOSCMethod.getXsiType(), molecule.id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2));\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName);\n        }\n        // Organise ExtraDOSCMethod.\n        let xml_ExtraDOSCMethod = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n        if (xml_ExtraDOSCMethod.length > 0) {\n            if (xml_ExtraDOSCMethod.length != 1) throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + xml_ExtraDOSCMethod.length);\n            let extraDOSCMethod = new (0, $7cb8c0739b32549c$export$ae98b7db6376163d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_DOSCMethod[0]));\n            // Create a new collapsible div for the ExtraDOSCMethod.\n            let extraDOSCMethodDiv = document.createElement(\"div\");\n            let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n            (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                divToAddTo: moleculeDiv,\n                elementToInsertBefore: null,\n                content: extraDOSCMethodDiv,\n                buttonLabel: (0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName,\n                buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n                margin: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            // Read bondRef.\n            let xml_bondRefs = xml_ExtraDOSCMethod[0].getElementsByTagName((0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName);\n            if (xml_bondRefs.length > 0) {\n                if (xml_bondRefs.length != 1) throw new Error(\"Expecting only 1 bondRef, but there are \" + xml_bondRefs.length);\n                let bondIds = molecule.getBonds().getBondIds();\n                let bondRef = new (0, $7cb8c0739b32549c$export$aef8e5ad5552fd72)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bondRefs[0]), (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bondRefs[0])));\n                extraDOSCMethodDiv.appendChild((0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName, bondIds, (0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName, bondRef.value, molecule.id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3));\n            }\n            // Read hinderedRotorPotential.\n            let xml_hinderedRotorPotentials = xml_ExtraDOSCMethod[0].getElementsByTagName((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName);\n            if (xml_hinderedRotorPotentials.length > 0) {\n                if (xml_hinderedRotorPotentials.length != 1) throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + xml_hinderedRotorPotentials.length);\n                let hinderedRotorPotentialAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_hinderedRotorPotentials[0]);\n                let hinderedRotorPotential = new (0, $7cb8c0739b32549c$export$9b8e857b9a081d2)(hinderedRotorPotentialAttributes);\n                // Create a new collapsible div for the HinderedRotorPotential.\n                let hinderedRotorPotentialDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$level4);\n                let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName);\n                (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                    divToAddTo: extraDOSCMethodDiv,\n                    elementToInsertBefore: null,\n                    content: hinderedRotorPotentialDiv,\n                    buttonLabel: (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName,\n                    buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n                    margin: $22c7fca7c69edc03$var$level3,\n                    contentDivId: contentDivId\n                });\n                // Format.\n                hinderedRotorPotentialDiv.appendChild((0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).s_format, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).formats, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, hinderedRotorPotential.getFormat(), contentDivId, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$boundary1));\n                // Units.\n                $22c7fca7c69edc03$var$addAnyUnits((0, $762f625c179c0279$export$692079bb871c6039).energyUnits, hinderedRotorPotentialAttributes, hinderedRotorPotentialDiv, contentDivId, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, $22c7fca7c69edc03$var$boundary1);\n                // ExpansionSize.\n                hinderedRotorPotentialDiv.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", contentDivId + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).s_expansionSize, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$boundary1, (event)=>{\n                    let target = event.target;\n                    // Check the input is a number.\n                    if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) hinderedRotorPotential.setExpansionSize(parseInt(target.value));\n                    else {\n                        // Reset the input to the current value.\n                        alert((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).s_expansionSize + \" input is not a number, resetting...\");\n                        target.value = hinderedRotorPotential.getExpansionSize().toExponential();\n                    }\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n                }, hinderedRotorPotential.getExpansionSize().toExponential(), (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).s_expansionSize));\n                // Add useSineTerms.\n                let useSineTermsLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).s_useSineTerms, $22c7fca7c69edc03$var$boundary1);\n                hinderedRotorPotentialDiv.appendChild(useSineTermsLabel);\n                let useSineTermsInputId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).s_useSineTerms);\n                let useSineTermsInput = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"checkbox\", useSineTermsInputId, $22c7fca7c69edc03$var$boundary1);\n                useSineTermsInput.checked = hinderedRotorPotential.getUseSineTerms();\n                useSineTermsInput.addEventListener(\"change\", (event)=>{\n                    let target = event.target;\n                    hinderedRotorPotential.setUseSineTerms(target.checked);\n                });\n                hinderedRotorPotentialDiv.appendChild(useSineTermsInput);\n                // Load PotentialPoints.\n                // Create a new collapsible div for the potential points.\n                let potentialPointsDiv = document.createElement(\"div\");\n                let potentialPointContentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName);\n                let potentialPointCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                    divToAddTo: hinderedRotorPotentialDiv,\n                    elementToInsertBefore: null,\n                    content: potentialPointsDiv,\n                    buttonLabel: (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName,\n                    buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(potentialPointContentDivId, $22c7fca7c69edc03$var$s_button),\n                    margin: $22c7fca7c69edc03$var$level4,\n                    contentDivId: potentialPointContentDivId\n                });\n                hinderedRotorPotentialDiv.appendChild(potentialPointCollapsibleDiv);\n                let potentialPoints = [];\n                let xml_potentialPoints = xml_hinderedRotorPotentials[0].getElementsByTagName((0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName);\n                for(let k = 0; k < xml_potentialPoints.length; k++){\n                    let potentialPoint = new (0, $7cb8c0739b32549c$export$86ca5149fcde8feb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_potentialPoints[k]));\n                    potentialPoints.push(potentialPoint);\n                    let potentialPointDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$level5);\n                    potentialPointCollapsibleDiv.appendChild(potentialPointDiv);\n                    // Process angle\n                    let angleLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)((0, $7cb8c0739b32549c$export$86ca5149fcde8feb).s_angle, $22c7fca7c69edc03$var$boundary1);\n                    potentialPointDiv.appendChild(angleLabel);\n                    let angleInputElementId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName, (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).s_angle);\n                    let angleInputElement = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", angleInputElementId, $22c7fca7c69edc03$var$boundary1);\n                    angleInputElement.addEventListener(\"change\", (event)=>{\n                        let target = event.target;\n                        // Check the input is a number.\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n                            let value = parseFloat(target.value);\n                            potentialPoint.setAngle(value);\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Angle input is not a number, resetting...\");\n                            angleInputElement.value = potentialPoint.getAngle().toExponential();\n                        }\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(angleInputElement);\n                    });\n                    angleInputElement.value = potentialPoint.getAngle().toExponential();\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(angleInputElement);\n                    potentialPointDiv.appendChild(angleInputElement);\n                    // Create a new div element for the potential.\n                    let potentialLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)((0, $7cb8c0739b32549c$export$86ca5149fcde8feb).s_potential, $22c7fca7c69edc03$var$boundary1);\n                    potentialPointDiv.appendChild(potentialLabel);\n                    let potentialInputElementId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName, (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).s_potential);\n                    let potentialInputElement = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", potentialInputElementId, $22c7fca7c69edc03$var$boundary1);\n                    potentialInputElement.addEventListener(\"change\", (event)=>{\n                        let target = event.target;\n                        // Check the input is a number.\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n                            let value = parseFloat(target.value);\n                            potentialPoint.setPotential(value);\n                            console.log(\"Set \" + (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName + \" to \" + value.toExponential());\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Potential input is not a number, resetting...\");\n                            potentialInputElement.value = potentialPoint.getPotential().toExponential();\n                        }\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(potentialInputElement);\n                    });\n                    potentialInputElement.value = potentialPoint.getPotential().toExponential();\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(potentialInputElement);\n                    potentialPointDiv.appendChild(potentialInputElement);\n                    potentialPointsDiv.appendChild(potentialPointDiv);\n                }\n                potentialPointCollapsibleDiv.appendChild(potentialPointsDiv);\n                hinderedRotorPotential.setPotentialPoints(potentialPoints);\n                extraDOSCMethod.setHinderedRotorPotential(hinderedRotorPotential);\n            }\n            // Read periodicities.\n            let xml_periodicities = xml_DOSCMethod[0].getElementsByTagName((0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName);\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                let valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_periodicities[0]));\n                let periodicity = new (0, $7cb8c0739b32549c$export$9513c16afdf7d852)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_periodicities[0]), parseFloat(valueString));\n                extraDOSCMethod.setPeriodicity(periodicity);\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                    let target = event.target;\n                    valueString = target.value;\n                    if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(valueString)) {\n                        let value = parseFloat(valueString);\n                        periodicity.value = value;\n                        extraDOSCMethod.getPeriodicity().value = value;\n                        console.log(\"Set \" + (0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName + \" to \" + value);\n                    } else {\n                        // Reset the input to the current value.\n                        alert(\"Periodicity input is not a number, resetting...\");\n                        target.value = periodicity.value.toExponential();\n                    }\n                }, valueString, (0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName);\n                extraDOSCMethodDiv.appendChild(inputDiv);\n            }\n            molecule.setExtraDOSCMethod(extraDOSCMethod);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n        }\n        // Organise ReservoirSize.\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n        let xml_ReservoirSize = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n        if (xml_ReservoirSize.length > 0) {\n            if (xml_ReservoirSize.length != 1) throw new Error(\"Expecting only 1 reservoirSize, but there are \" + xml_ReservoirSize.length);\n            let valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_ReservoirSize[0]));\n            let value = parseFloat(valueString);\n            let reservoirSizeAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_ReservoirSize[0]);\n            let reservoirSize = new (0, $7cb8c0739b32549c$export$97850fe2f2906f00)(reservoirSizeAttributes, value);\n            molecule.setReservoirSize(reservoirSize);\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2, (event)=>{\n                let target = event.target;\n                reservoirSize.value = parseFloat(target.value);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n            }, valueString, (0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n            moleculeDiv.appendChild(inputDiv);\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach((x)=>console.warn(x));\n        //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        // Create a molstar molecule visualisation\n        let molstarDiv = document.createElement(\"div\");\n        molstarDiv.id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, \"molstar\");\n        moleculeDiv.appendChild(molstarDiv);\n        let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.tagName, molecule.id);\n        let buttonId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button);\n        // Create a new collapsible div for the molecule.\n        (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            divToAddTo: moleculeListDiv,\n            elementToInsertBefore: null,\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonId: buttonId,\n            margin: $22c7fca7c69edc03$var$level1,\n            contentDivId: contentDivId\n        });\n    }\n    // Create an add molecule button.\n    let addMoleculeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, undefined, $22c7fca7c69edc03$var$level1);\n    moleculeListDiv.appendChild(addMoleculeButton);\n    addMoleculeButton.addEventListener(\"click\", ()=>{\n        // Ask the user to specify the molecule ID.\n        let moleculeId = prompt(\"Please enter the chemical formular:\", \"Kr\");\n        let molecule = new (0, $7cb8c0739b32549c$export$3da9759ad07746a3)(new Map(), moleculeId);\n        $22c7fca7c69edc03$var$molecules.set(moleculeId, molecule);\n        // Add the molecule to the BathGas select elements.\n        $22c7fca7c69edc03$var$addOptionByClassName((0, $613b909b2797b099$export$b33a132661f4be58).tagName, molecule.id);\n        let moleculeDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(moleculeId, $22c7fca7c69edc03$var$level1);\n        moleculeListDiv.insertBefore(moleculeDiv, addMoleculeButton);\n        let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.tagName, moleculeId);\n        let buttonId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button);\n        // Create a new collapsible div for the molecule.\n        let div = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            divToAddTo: moleculeListDiv,\n            elementToInsertBefore: addMoleculeButton,\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonId: buttonId,\n            margin: $22c7fca7c69edc03$var$level1,\n            contentDivId: contentDivId\n        });\n        // Add a rename button.\n        let renameButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Rename, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_Rename), $22c7fca7c69edc03$var$level1);\n        renameButton.addEventListener(\"click\", ()=>{\n            let newMoleculeId = prompt(\"Please enter the chemical formular:\");\n            if (newMoleculeId != null) {\n                let mid = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(newMoleculeId) // This ensures that all special chars are handled.\n                ;\n                // Update the BathGas select elements.\n                $22c7fca7c69edc03$var$addOptionByClassName((0, $613b909b2797b099$export$b33a132661f4be58).tagName, mid);\n                $22c7fca7c69edc03$var$removeOptionByClassName((0, $613b909b2797b099$export$b33a132661f4be58).tagName, molecule.id);\n                molecule.id = mid;\n                moleculeDiv.id = mid;\n                let button = document.getElementById(buttonId);\n                button.textContent = molecule.getLabel() + \" \" + $22c7fca7c69edc03$var$sy_upTriangle;\n                contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.tagName, mid);\n                div.id = contentDivId;\n                button.id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button);\n            }\n        });\n        moleculeDiv.appendChild(renameButton);\n        // Atoms.\n        let atomArrayDiv = $22c7fca7c69edc03$var$getCollapsibleContentDiv(moleculeId, moleculeDiv, null, (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName, (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName, $22c7fca7c69edc03$var$level1);\n        atomArrayDiv.appendChild($22c7fca7c69edc03$var$getAddAtomButton(molecule, atomArrayDiv, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2));\n        // Bonds.\n        let bondArrayDiv = $22c7fca7c69edc03$var$getCollapsibleContentDiv(moleculeId, moleculeDiv, null, (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName, (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName, $22c7fca7c69edc03$var$level1);\n        bondArrayDiv.appendChild($22c7fca7c69edc03$var$getAddBondButton(molecule, moleculeId, bondArrayDiv, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2));\n        $22c7fca7c69edc03$var$create3DViewer(molecule, moleculeDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1);\n        // Properties.\n        let propertiesDiv = $22c7fca7c69edc03$var$getCollapsibleContentDiv(moleculeId, moleculeDiv, null, (0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName, (0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName, $22c7fca7c69edc03$var$level1);\n    //propertiesDiv.appendChild(getAddPropertyButton(molecule, moleculeId!, propertiesDiv, Property.tagName, boundary1, level2, fontSize2));    \n    });\n    return moleculeListDiv;\n}\n/**\n * Creates and returns a new div which is the content expanded or collapsed by a button.\n * \n * @param moleculeId The molecule id.\n * @param divToAddTo The div to add to.\n * @param elementToInsertBefore The element to insert before.\n * @param buttonLabel The button label.\n * @param typeID The type (used to compile an id along with moleculeId).\n * @param boundary The boundary.\n * @param level The level.\n * @param buttonFontSize The button font size.\n * @returns The content div.\n */ function $22c7fca7c69edc03$var$getCollapsibleContentDiv(moleculeId, divToAddTo, elementToInsertBefore, buttonLabel, typeID, level) {\n    let div = document.createElement(\"div\");\n    let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeId, typeID);\n    let buttonId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button);\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: divToAddTo,\n        elementToInsertBefore: elementToInsertBefore,\n        content: div,\n        buttonLabel: buttonLabel,\n        buttonId: buttonId,\n        margin: level,\n        contentDivId: contentDivId\n    });\n    return div;\n}\n/**\n * Creates and returns a button for adding a new atom div to the atomArrayDiv. The atom div added\n * will have: label (atom id); (editable details); and a remove button.\n * \n * @param molecule The molecule.\n * @param atomArrayDiv The atom array div.\n * @param typeID The type incorporated into an id.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The add bond button.\n */ function $22c7fca7c69edc03$var$getAddAtomButton(molecule, atomArrayDiv, typeID, boundary, level) {\n    // Create an add atom button.\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, \"Add\" + typeID + \"Button\"), level);\n    button.addEventListener(\"click\", ()=>{\n        let attributes = new Map();\n        let atom = new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)(attributes, molecule);\n        let atomId = molecule.getAtoms().addAtom(atom);\n        let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, atomId);\n        let atomDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(id, level);\n        atomDiv.appendChild((0, $2cda23d1e44619db$export$f2839682b8c07f35)(atomId, boundary));\n        // elementType.\n        $22c7fca7c69edc03$var$processElementType(id, atom, atomDiv, true, boundary);\n        // Coordinates.\n        $22c7fca7c69edc03$var$processCoordinates(id, atom, atomDiv, boundary);\n        $22c7fca7c69edc03$var$addRemoveButton(atomDiv, boundary, $22c7fca7c69edc03$var$removeAtom, molecule, atomId);\n        atomArrayDiv.insertBefore(atomDiv, button);\n        // Get elements with Bond.s_atomRefs2 className. These select elements are to be updated to include the new atom option.\n        $22c7fca7c69edc03$var$addOptionByClassName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2, atomId);\n    });\n    return button;\n}\n// Function to be used to remove an atom.\nfunction $22c7fca7c69edc03$var$removeAtom(molecule, id) {\n    molecule.getAtoms().removeAtom(id);\n    molecule.getBonds().bonds.forEach((bond)=>{\n        let atomRefs2 = bond.getAtomRefs2();\n        let atomRefs = atomRefs2.split(\" \");\n        if (atomRefs[0] == id || atomRefs[1] == id) {\n            let bondId = bond.getId();\n            //console.log(\"Removing bond \" + bondId + \" as it references atom \" + id);\n            molecule.getBonds().removeBond(bondId);\n            // Remove any bondDiv elements with a reference to id.\n            let bondDivs = document.getElementsByClassName(id);\n            //console.log(\"bondDivs.length=\" + bondDivs.length);\n            for(let i = 0; i < bondDivs.length; i++)bondDivs[i].remove();\n        }\n    });\n    $22c7fca7c69edc03$var$removeOptionByClassName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2, id);\n}\n/**\n * @param className The className of Elements to update\n * @param optionToRemove  The option value to remove.\n */ function $22c7fca7c69edc03$var$removeOptionByClassName(className, optionToRemove) {\n    let elements = document.getElementsByClassName(className);\n    for(let i = 0; i < elements.length; i++)if (elements[i] instanceof HTMLSelectElement) {\n        let options = elements[i].options;\n        Array.from(options).forEach((option)=>{\n            if (option.value == optionToRemove) option.remove();\n        });\n    }\n}\n/**\n * @param className The className of Elements to update\n * @param optionToAdd  The option value to add.\n */ function $22c7fca7c69edc03$var$addOptionByClassName(className, optionToAdd) {\n    let elements = document.getElementsByClassName(className);\n    //console.log(\"n elements with className \" + className + \"=\" + elements.length);    \n    for(let i = 0; i < elements.length; i++){\n        let select = elements[i];\n        if (elements[i] instanceof HTMLSelectElement) {\n            let option = document.createElement(\"option\");\n            option.value = optionToAdd;\n            option.text = optionToAdd;\n            select.add(option);\n        }\n    }\n}\n/**\n * Creates and returns a button for adding a new bond div to the bondArrayDiv. The bond div added\n * will have: label (bond id); editable details (atomRefs2 and order); and, remove and refresh buttons.\n * \n * @param molecule The molecule.\n * @param bondArrayDiv The bond array div.\n * @param typeID The type incorporated into an id.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The add bond button.\n */ function $22c7fca7c69edc03$var$getAddBondButton(molecule, moleculeId, bondArrayDiv, typeID, boundary, level) {\n    // Create an add button.\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeId, \"Add\" + typeID + \"Button\"), level);\n    button.addEventListener(\"click\", ()=>{\n        let atoms = molecule.getAtoms().atoms;\n        if (atoms.size < 2) {\n            alert(\"There must be at least 2 atoms to create a bond.\");\n            return;\n        }\n        let attributes = new Map();\n        let atomRefs2 = Array.from(atoms.keys()).slice(0, 2).join(\" \");\n        attributes.set((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2, atomRefs2);\n        let bond = new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)(attributes, molecule);\n        let bondId = molecule.getBonds().addBond(bond);\n        let bondDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)((0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeId, bondId), level);\n        // Add to the classlists so that bondDivs involving particular atoms can be found.\n        Array.from(atoms.keys()).forEach((atomId)=>{\n            bondDiv.classList.add(atomId);\n        });\n        bondArrayDiv.insertBefore(bondDiv, button);\n        let inputId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(moleculeId, bondId);\n        bondDiv.appendChild((0, $2cda23d1e44619db$export$f2839682b8c07f35)(bondId, boundary));\n        // atomRefs2.\n        $22c7fca7c69edc03$var$processAtomRefs2(molecule, bondDiv, bond, inputId, boundary);\n        // order.\n        $22c7fca7c69edc03$var$processOrder(bondDiv, bond, inputId, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_order, boundary);\n        let removeBond = (id)=>molecule.getBonds().removeBond(id);\n        $22c7fca7c69edc03$var$addRemoveButton(bondDiv, boundary, removeBond, bondId);\n    });\n    bondArrayDiv.appendChild(button);\n    return button;\n}\n/**\n * For processing the atomRefs2 of a Bond.\n * \n * @param molecule The molecule.\n * @param bondDiv The bond div.\n * @param bond The bond.\n * @param inputId The input id.\n * @param margin The margin for the components.\n */ function $22c7fca7c69edc03$var$processAtomRefs2(molecule, bondDiv, bond, inputId, margin) {\n    let atomRefs2 = bond.getAtomRefs2();\n    let atomRefs = atomRefs2.split(\" \");\n    let atomRefOptions = Array.from(molecule.getAtoms().atoms.keys());\n    // alws.\n    let alws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2 + \"[0]\", atomRefOptions, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName, atomRefs[0], (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(inputId, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2, \"0\"), margin, margin);\n    let aselect = alws.querySelector(\"select\");\n    aselect.classList.add((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2);\n    aselect.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        let atomRefs2 = target.value + \" \" + atomRefs[1];\n        console.log((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2 + \" changed to \" + atomRefs2);\n        bond.setAtomRefs2(atomRefs2);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    aselect.value = atomRefs[0];\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(aselect);\n    bondDiv.appendChild(alws);\n    // blws.\n    let blws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2 + \"[1]\", atomRefOptions, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName, atomRefs[1], (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(inputId, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2, \"1\"), margin, margin);\n    let bselect = blws.querySelector(\"select\");\n    bselect.classList.add((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2);\n    bselect.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        let atomRefs2 = atomRefs[0] + \" \" + target.value;\n        console.log((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_atomRefs2 + \" changed to \" + atomRefs2);\n        bond.setAtomRefs2(atomRefs2);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    bselect.value = atomRefs[1];\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(bselect);\n    bondDiv.appendChild(blws);\n}\n/**\n * @param xml The xml element.\n * @param div The div.\n * @param molecule The molecule.\n * @param boundary The boundary.\n * @param level The level.\n */ function $22c7fca7c69edc03$var$createProperty(xml, div, molecule, boundary, level) {\n    let p = new (0, $7cb8c0739b32549c$export$41b04b3a73e7216d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml));\n    if (p.dictRef == (0, $7cb8c0739b32549c$export$95174cf0748f45cd).dictRef) $22c7fca7c69edc03$var$processProperty(p, (0, $762f625c179c0279$export$692079bb871c6039).energyUnits, molecule, xml, div, boundary, level);\n    else if (p.dictRef == (0, $7cb8c0739b32549c$export$984abe26ded13ee0).dictRef) $22c7fca7c69edc03$var$processProperty(p, (0, $762f625c179c0279$export$692079bb871c6039).frequencyUnits, molecule, xml, div, boundary, level);\n    else $22c7fca7c69edc03$var$processProperty(p, undefined, molecule, xml, div, boundary, level);\n    return p;\n}\nfunction $22c7fca7c69edc03$var$processElementType(inputId, atom, atomDiv, first, boundary) {\n    let elementType = atom.getElementType();\n    //console.log(\"Atom.s_elementType \" + elementType);\n    let selectTypes = (0, $762f625c179c0279$export$692079bb871c6039).elementTypes;\n    // Select.\n    if (elementType == undefined) {\n        elementType = $22c7fca7c69edc03$var$s_selectOption;\n        selectTypes = $22c7fca7c69edc03$var$doSelectOption((0, $762f625c179c0279$export$692079bb871c6039).elementTypes, first);\n    //console.log(\"Atom.s_elementTypes \" + arrayToString(Atom.elementTypes));\n    }\n    let lws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_elementType, selectTypes, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_elementType, elementType, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(inputId, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_elementType), boundary, boundary);\n    let select = lws.querySelector(\"select\");\n    select.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        atom.setElementType(target.value);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    select.value = elementType;\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n    $22c7fca7c69edc03$var$selectAnotherOptionEventListener(selectTypes, select);\n    atomDiv.appendChild(lws);\n    return lws;\n}\nfunction $22c7fca7c69edc03$var$doSelectOption(options, first) {\n    if (first) options.push($22c7fca7c69edc03$var$s_selectOption);\n    else {\n        // remove selectOption if present.\n        let index = options.indexOf($22c7fca7c69edc03$var$s_selectOption);\n        if (index > -1) options.splice(index, 1);\n    }\n    return options;\n}\n/**\n * Process atom coordinates.\n * @param inputId The input id.\n * @param atom The atom.\n * @param atomDiv The atom div.\n */ function $22c7fca7c69edc03$var$processCoordinates(inputId, atom, atomDiv, boundary) {\n    let x3id = inputId + \"_\" + (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_x3;\n    $22c7fca7c69edc03$var$processCoordinate(atomDiv, x3id, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_x3, atom.getX3.bind(atom), atom.setX3.bind(atom), boundary);\n    let y3id = inputId + \"_\" + (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_y3;\n    $22c7fca7c69edc03$var$processCoordinate(atomDiv, y3id, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_y3, atom.getY3.bind(atom), atom.setY3.bind(atom), boundary);\n    let z3id = inputId + \"_\" + (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_z3;\n    $22c7fca7c69edc03$var$processCoordinate(atomDiv, z3id, (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).s_z3, atom.getZ3.bind(atom), atom.setZ3.bind(atom), boundary);\n}\n/**\n * Process a coordinate.\n * @param atomDiv The atom div.\n * @param id The id for the coordinate.\n * @param coordinate The coordinate name.\n * @param getter The getter function to call on the atom.\n * @param setter The setter function to call on the atom.\n * @param boundary The boundary.\n */ function $22c7fca7c69edc03$var$processCoordinate(atomDiv, id, coordinate, getter, setter, boundary) {\n    let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, boundary);\n    atomDiv.appendChild(div);\n    let buttonTextContentSelected = coordinate + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = coordinate + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, \"Button\"), boundary);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    let inputId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, coordinate, \"Input\");\n    let value = getter();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n    } else {\n        $22c7fca7c69edc03$var$addCoordinate(div, inputId, value, setter, boundary);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        if (document.getElementById(inputId) == null) {\n            $22c7fca7c69edc03$var$addCoordinate(div, inputId, 0, setter, boundary);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove existing.\n            document.getElementById(inputId)?.remove();\n            console.log(\"Removed \" + inputId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    });\n}\n/**\n * @param div The div to add the input to.\n * @param id The id.\n * @param value The coordinate value.\n * @param setter The setter function to call on the atom.\n * @param boundary The boundary.\n * @param level The level.\n */ function $22c7fca7c69edc03$var$addCoordinate(div, id, value, setter, boundary) {\n    let valueString;\n    if (value == undefined) valueString = \"\";\n    else valueString = value.toString();\n    let input = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"text\", id, boundary);\n    input.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        setter(parseFloat(target.value));\n        console.log(\"Coordinate changed from \" + value + \" to \" + target.value);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    });\n    input.value = valueString;\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(input);\n    div.appendChild(input);\n}\n/**\n * @param div The div to append the button to.\n * @param removeFunction The function to call when the button is clicked.\n * @param args The parameters passed to the removeFunction.\n * @param margin The margin to go around the button.\n * @returns The button.\n */ function $22c7fca7c69edc03$var$addRemoveButton(div, margin, removeFunction, ...args) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Remove_sy_remove, undefined, margin);\n    div.appendChild(button);\n    button.addEventListener(\"click\", ()=>{\n        removeFunction(...args);\n        div.remove();\n    });\n    return button;\n}\n/**\n * Process an order.\n * @param bond The bond.\n * @param bondDiv The bond div.\n * @param inputId The input id.\n * @param order The order name.\n */ function $22c7fca7c69edc03$var$processOrder(bondDiv, bond, inputId, order, margin) {\n    let orderId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(inputId, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_order);\n    let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, margin);\n    bondDiv.appendChild(div);\n    let buttonTextContentSelected = order + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = order + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, undefined, margin);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    let value = bond.getOrder();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n    } else {\n        $22c7fca7c69edc03$var$addOrder(div, bond, orderId, value, margin);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        if (document.getElementById(orderId) == null) {\n            $22c7fca7c69edc03$var$addOrder(div, bond, orderId, 1, margin);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove any existing div.\n            document.getElementById(orderId)?.remove();\n            console.log(\"Removed \" + orderId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    });\n}\n/**\n * @param div The div to add the input to.\n * @param bond The bond.\n * @param id The id.\n * @param value The order value.\n * @param boundary The boundary.\n */ function $22c7fca7c69edc03$var$addOrder(div, bond, id, value, boundary) {\n    let valueString = value.toString();\n    let select = (0, $2cda23d1e44619db$export$b89bf4b169286865)((0, $7cb8c0739b32549c$export$153327fc99ac0c53).orderOptions, (0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_order, valueString, id, boundary);\n    select.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        bond.setOrder(parseFloat(target.value));\n        console.log((0, $7cb8c0739b32549c$export$153327fc99ac0c53).s_order + \" changed from \" + valueString + \" to \" + target.value);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    select.value = valueString;\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n    select.id = id;\n    div.appendChild(select);\n}\nfunction $22c7fca7c69edc03$var$create3DViewer(molecule, moleculeDiv, boundary, level) {\n    // Add a 3Dmol.js viewer.\n    // Create a new div for the viewer.\n    let viewerContainerDivID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, \"viewerContainer\");\n    let viewerContainerDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(viewerContainerDivID, level);\n    moleculeDiv.appendChild(viewerContainerDiv);\n    let viewerDivID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, \"viewer\");\n    let showAtomLabels = false;\n    let showBondLabels = false;\n    // Create the GLViewer viewer.\n    function createViewer(//cameraPosition: any, cameraOrientation: any, zoomLevel: any, \n    showAtomLabels, showBondLabels) {\n        let viewerDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(viewerDivID, boundary);\n        viewerDiv.className = \"mol-container\";\n        viewerContainerDiv.appendChild(viewerDiv);\n        let config = {\n            backgroundColor: \"grey\"\n        };\n        let viewer = $3Dmol.createViewer(viewerDiv, config);\n        // Set the viewer style to stick and ball.\n        viewer.setStyle({\n            stick: {}\n        });\n        // Create a 3Dmol viewer control to turn labels on and off.\n        molecule.getAtoms().atoms.forEach(function(atom) {\n            let et = atom.getElementType();\n            let color;\n            if (et == undefined) color = \"Purple\";\n            else color = (0, $762f625c179c0279$export$692079bb871c6039).atomColors.get(et) || \"Purple\";\n            //let am: number = Mesmer.atomMasses.get(atom.getElementType()) || 1;\n            let radius;\n            if (et == undefined) radius = 100;\n            else radius = (0, $762f625c179c0279$export$692079bb871c6039).atomRadii.get(atom.getElementType()) || 100;\n            let ax = atom.getX3() || 0;\n            let ay = atom.getY3() || 0;\n            let az = atom.getZ3() || 0;\n            //viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: 0.3 * am / 10.0, color: color });\n            viewer.addSphere({\n                center: {\n                    x: ax,\n                    y: ay,\n                    z: az\n                },\n                radius: radius / 110.0,\n                color: color\n            });\n            //viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: (radius * (am ** (1 / 3.0))) / 275.0, color: color });\n            if (showAtomLabels) viewer.addLabel(atom.getId(), {\n                position: {\n                    x: ax,\n                    y: ay,\n                    z: az\n                }\n            });\n        });\n        console.log(\"molecule.getBonds().bonds.size \" + molecule.getBonds().bonds.size);\n        molecule.getBonds().bonds.forEach(function(bond) {\n            console.log(\"bond.atomRefs2 \" + bond.getAtomRefs2());\n            let ids = bond.getAtomRefs2().split(\" \");\n            let atomArray = molecule.getAtoms();\n            let atom1 = atomArray.getAtom(ids[0]);\n            let atom2 = atomArray.getAtom(ids[1]);\n            let order = bond.getOrder() || 1;\n            let color = (0, $762f625c179c0279$export$692079bb871c6039).bondColors.get(order) || \"Purple\";\n            let a1x = atom1.getX3() || 0;\n            let a1y = atom1.getY3() || 0;\n            let a1z = atom1.getZ3() || 0;\n            let a2x = atom2.getX3() || 0;\n            let a2y = atom2.getY3() || 0;\n            let a2z = atom2.getZ3() || 0;\n            viewer.addCylinder({\n                start: {\n                    x: a1x,\n                    y: a1y,\n                    z: a1z\n                },\n                end: {\n                    x: a2x,\n                    y: a2y,\n                    z: a2z\n                },\n                radius: 0.06 * order,\n                color: color\n            });\n            if (showBondLabels) viewer.addLabel(bond.getId(), {\n                position: {\n                    x: (a1x + a2x) / 2,\n                    y: (a1y + a2y) / 2,\n                    z: (a1z + a2z) / 2\n                }\n            });\n        });\n        viewer.zoomTo();\n        viewer.render();\n        /*\n        if (cameraPosition != undefined) {\n            viewer.setCameraPosition(cameraPosition);\n        }\n        if (cameraOrientation != undefined) {\n            viewer.setCameraOrientation(cameraOrientation);\n        }\n        if (zoomLevel != undefined) {\n            viewer.zoom(zoomLevel, 2000);\n        } else {\n            viewer.zoom(0.8, 2000);\n        }\n        return viewer;\n        */ viewer.zoom(0.8, 2000);\n        return viewer;\n    }\n    // Add a redraw button.\n    let redrawButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(\"Draw/Redraw\", undefined);\n    let viewer;\n    redrawButton.addEventListener(\"click\", ()=>{\n        (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(viewerDivID, $22c7fca7c69edc03$var$ids);\n        viewer = createViewer(//undefined, undefined, undefined, \n        showAtomLabels, showBondLabels);\n    });\n    viewerContainerDiv.appendChild(redrawButton);\n    // Helper function to create a label button for hiding or showing labels on the viewer.\n    function createLabelButton(label, id, showState, updateState) {\n        let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)((showState ? \"Hide \" : \"Show \") + label, id, boundary);\n        button.addEventListener(\"click\", ()=>{\n            if (showState) {\n                button.textContent = \"Show \" + label;\n                showState = false;\n            } else {\n                button.textContent = \"Hide \" + label;\n                showState = true;\n            }\n            /*\n            let cameraPosition = viewer.getCameraPosition();\n            let cameraOrientation = viewer.getCameraOrientation();\n            let zoomLevel = viewer.getZoomLevel();\n            */ updateState(showState);\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(viewerDivID, $22c7fca7c69edc03$var$ids);\n            viewer = createViewer(//cameraPosition, cameraOrientation, zoomLevel,\n            showAtomLabels, showBondLabels);\n        });\n        return button;\n    }\n    // Atom Labels.\n    let s_Atom_Labels = \"Atom Labels\";\n    let atomLabelbutton = createLabelButton(s_Atom_Labels, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, s_Atom_Labels), showAtomLabels, (newState)=>showAtomLabels = newState);\n    viewerContainerDiv.appendChild(atomLabelbutton);\n    // Bond Labels.\n    let s_Bond_Labels = \"Bond Labels\";\n    let bondLabelbutton = createLabelButton(s_Bond_Labels, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, s_Bond_Labels), showBondLabels, (newState)=>showBondLabels = newState);\n    viewerContainerDiv.appendChild(bondLabelbutton);\n    // Add a save button to save the viewer as an image.\n    let saveButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(\"Save Image\", undefined);\n    saveButton.addEventListener(\"click\", ()=>{\n        //viewer.pngURI({ backgroundColor: 'white', download: true });\n        let canvas = viewer.pngURI();\n        let a = document.createElement(\"a\");\n        a.href = canvas;\n        a.download = \"mol.png\";\n        document.body.appendChild(a); // Append the anchor to the body.\n        a.click(); // Programmatically click the anchor to trigger the download.\n        document.body.removeChild(a); // Remove the anchor from the body after triggering the download.\n        console.log(\"Save Image\");\n    });\n    viewerContainerDiv.appendChild(saveButton);\n}\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */ function $22c7fca7c69edc03$var$displayXML(xmlFilename, xml) {\n    let xmlDiv = document.getElementById($22c7fca7c69edc03$var$xmlDivId);\n    // xmlHeading\n    let xmlHeadingId = \"xmlHeading\";\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(xmlHeadingId, $22c7fca7c69edc03$var$ids);\n    let xmlHeading = document.createElement(\"h2\");\n    xmlHeading.textContent = xmlFilename;\n    xmlDiv.appendChild(xmlHeading);\n    // xmlParagraph\n    let xmlParagraphId = \"xmlParagraph\";\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(xmlParagraphId, $22c7fca7c69edc03$var$ids);\n    let xmlPre = document.createElement(\"pre\");\n    xmlPre.textContent = xml;\n    xmlDiv.appendChild(xmlPre);\n}\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param div The molecule div.\n * @param boundary The boundary to go around components.\n * @param level The level of the component.\n */ function $22c7fca7c69edc03$var$processProperty(p, units, molecule, element, div, boundary, level) {\n    // PropertyScalar.\n    let scalarNodes = element.getElementsByTagName((0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName + \" but finding \" + scalarNodes.length + \"!\");\n        let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(scalarNodes[0]);\n        let value = parseFloat(inputString);\n        let psAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(scalarNodes[0]);\n        let ps = new (0, $7cb8c0739b32549c$export$d29b345ea2be5072)(psAttributes, value);\n        p.setProperty(ps);\n        let label = p.dictRef;\n        // Create a new div element for the input.\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", molecule.id + \"_\" + p.dictRef, $22c7fca7c69edc03$var$boundary1, level, (event)=>{\n            let target = event.target;\n            $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(ps, target);\n        }, inputString, label);\n        let inputElement = inputDiv.querySelector(\"input\");\n        //inputElement.value = inputString;\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n        inputElement.addEventListener(\"change\", (event)=>{\n            let target = event.target;\n            inputString = target.value;\n            ps = p.getProperty();\n            ps.value = parseFloat(inputString);\n            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n            if (p.dictRef == (0, $7cb8c0739b32549c$export$95174cf0748f45cd).dictRef) {\n                // Update the min and max molecule energy.\n                if (value < $22c7fca7c69edc03$var$minMoleculeEnergy) $22c7fca7c69edc03$var$minMoleculeEnergy = value;\n                if (value > $22c7fca7c69edc03$var$maxMoleculeEnergy) $22c7fca7c69edc03$var$maxMoleculeEnergy = value;\n                // Update the molecule energy diagram.\n                $22c7fca7c69edc03$var$redrawReactionsDiagram();\n            }\n        });\n        $22c7fca7c69edc03$var$addAnyUnits(units, psAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n        div.appendChild(inputDiv);\n    } else {\n        // PropertyArray.\n        let arrayNodes = element.getElementsByTagName((0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName + \" but finding \" + arrayNodes.length + \"!\");\n            let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(arrayNodes[0]);\n            let values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n            let paAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(arrayNodes[0]);\n            let pa = new (0, $7cb8c0739b32549c$export$9f93a3fdf2490572)(paAttributes, values);\n            p.setProperty(pa);\n            let label = p.dictRef;\n            // Create a new div element for the input.\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"text\", molecule.id + \"_\" + p.dictRef, boundary, level, (event)=>{\n                let target = event.target;\n                $22c7fca7c69edc03$export$819b5ff7dff3652c(pa, target);\n            }, inputString, label);\n            let inputElement = inputDiv.querySelector(\"input\");\n            inputElement.value = inputString;\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n            inputElement.addEventListener(\"change\", (event)=>{\n                let target = event.target;\n                inputString = target.value;\n                pa = p.getProperty();\n                values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n                pa.values = values;\n                console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n            });\n            $22c7fca7c69edc03$var$addAnyUnits(units, paAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n            div.appendChild(inputDiv);\n        } else {\n            // PropertyMatrix.\n            let matrixNodes = element.getElementsByTagName((0, $7cb8c0739b32549c$export$a5a2be813176eb0e).tagName);\n            if (matrixNodes.length > 0) {\n                if (matrixNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$a5a2be813176eb0e).tagName + \" but finding \" + matrixNodes.length + \"!\");\n                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(matrixNodes[0]);\n                let values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n                let pmAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(matrixNodes[0]);\n                let pm = new (0, $7cb8c0739b32549c$export$a5a2be813176eb0e)(pmAttributes, values);\n                p.setProperty(pm);\n                let label = p.dictRef;\n                // Create a new div element for the input.\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"text\", molecule.id + \"_\" + p.dictRef, boundary, level, (event)=>{\n                    let target = event.target;\n                    $22c7fca7c69edc03$export$819b5ff7dff3652c(pm, target);\n                }, inputString, label);\n                let inputElement = inputDiv.querySelector(\"input\");\n                inputElement.value = inputString;\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                inputElement.addEventListener(\"change\", (event)=>{\n                    let target = event.target;\n                    inputString = target.value;\n                    pm = p.getProperty();\n                    values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n                    pm.values = values;\n                    console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                });\n                $22c7fca7c69edc03$var$addAnyUnits(units, pmAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n                div.appendChild(inputDiv);\n            } else throw new Error(\"Expecting \" + (0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName + \", \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName + \" or \" + (0, $7cb8c0739b32549c$export$a5a2be813176eb0e).tagName + \" but finding none!\");\n        }\n    }\n}\n/**\n * If there are a choice of units, then add a new select element to display/select them.\n * @param units The possible units.\n * @param attributes The attributes.\n * @param inputDiv The input div.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n */ function $22c7fca7c69edc03$var$addAnyUnits(units, attributes, inputDiv, id, tagOrDictRef, boundary) {\n    if (units != undefined) {\n        let lws = $22c7fca7c69edc03$var$getUnitsLabelWithSelect(units, attributes, id, tagOrDictRef);\n        if (lws != undefined) inputDiv.appendChild(lws);\n    } else {\n        let attributesUnits = attributes.get(\"units\");\n        if (attributesUnits != undefined) {\n            let label = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"units \" + attributesUnits, boundary);\n            inputDiv.appendChild(label);\n        }\n    }\n}\n/**\n * @param attributes The attributes.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @returns A select element for setting the units or undefined if there is not attribute for units.\n */ function $22c7fca7c69edc03$var$getUnitsLabelWithSelect(units, attributes, id, tagOrDictRef) {\n    let psUnits = attributes.get(\"units\");\n    if (psUnits != undefined) {\n        // Get a select element for setting the units.\n        let lws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)(\"units\", units, \"units\", psUnits, id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$boundary1);\n        let select = lws.querySelector(\"select\");\n        // Set the initial value to the units.\n        select.value = psUnits;\n        // Add event listener to selectElement.\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n        select.addEventListener(\"change\", (event)=>{\n            let target = event.target;\n            attributes.set(\"units\", target.value);\n            console.log(\"Set \" + tagOrDictRef + \" units to \" + target.value);\n            (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n        });\n        return lws;\n    }\n    return undefined;\n}\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */ function $22c7fca7c69edc03$var$processEnergyTransferModel(etm, molecule, element, moleculeDiv, margin) {\n    let xml_deltaEDowns = element.getElementsByTagName((0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName);\n    if (xml_deltaEDowns.length > 0) {\n        // Create a new collapsible div for the energyTransferModel.\n        let etmDiv = document.createElement(\"div\");\n        let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(molecule.id, (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            divToAddTo: moleculeDiv,\n            elementToInsertBefore: null,\n            content: etmDiv,\n            buttonLabel: (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName,\n            buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n            margin: $22c7fca7c69edc03$var$level2,\n            contentDivId: contentDivId\n        });\n        let deltaEDowns = [];\n        for(let k = 0; k < xml_deltaEDowns.length; k++){\n            let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_deltaEDowns[k]);\n            let value = parseFloat(inputString);\n            let deltaEDownAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_deltaEDowns[k]);\n            let deltaEDown = new (0, $7cb8c0739b32549c$export$16fc56ab40b12b45)(deltaEDownAttributes, value);\n            deltaEDowns.push(deltaEDown);\n            let label = (0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName;\n            // Create a new div element for the input.\n            let id = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName + \"_\" + (0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName + \"_\" + k;\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                let target = event.target;\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(deltaEDown, target);\n                inputString = target.value;\n                deltaEDowns[k].setValue(parseFloat(inputString));\n                console.log(\"Set \" + id + \" to \" + inputString);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n            }, inputString, label);\n            etmDiv.appendChild(inputDiv);\n            let unitsLabel = document.createElement(\"label\");\n            unitsLabel.textContent = \"units cm-1\";\n            inputDiv.appendChild(unitsLabel);\n        }\n        etm.setDeltaEDowns(deltaEDowns);\n        molecule.setEnergyTransferModel(etm);\n    }\n}\nfunction $22c7fca7c69edc03$export$819b5ff7dff3652c(node, input) {\n    let inputString = input.value.trim();\n    if (inputString == \"\") {\n        alert(\"Empty input resetting...\");\n        input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \");\n        return;\n    }\n    let inputStrings = inputString.split(/\\s+/);\n    let values = [];\n    let success = true;\n    inputStrings.forEach(function(value) {\n        if (!(0, $dcf293d9ee452407$export$e90fb89750dba83f)(value)) success = false;\n        values.push(parseFloat(value));\n    });\n    if (!success) {\n        alert(\"An input is not a number, resetting...\");\n        input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \");\n        return;\n    }\n    //console.log(\"propertyArray=\" + propertyArray);\n    if (values.length == node.values.length) console.log(\"Changed \" + node.tagName + ' from: \"' + inputString + '\" to: \"' + (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \") + '\"');\n    else {\n        alert(\"Expecting \" + node.values.length + \" values for, but finding \" + values.length + \" resetting...\");\n        input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \");\n    }\n}\nfunction $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(node, input) {\n    if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(input.value)) {\n        let inputNumber = parseFloat(input.value);\n        node.value = inputNumber;\n        console.log(node.tagName + \" value set to \" + inputNumber);\n    } else {\n        alert(\"Value is not numeric, resetting...\");\n        input.value = node.value.toExponential();\n    }\n}\n/**\n * Parse XML and create HTMLDivElement for reactions.\n * @param {XMLDocument} xml The XML document.\n */ function $22c7fca7c69edc03$var$processReactionList(xml) {\n    // Initialise reactions.\n    $22c7fca7c69edc03$var$reactions = new Map();\n    // Create div to contain the reaction list.\n    let reactionListDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    // Get the XML \"reactionList\" element.\n    let xml_reactionList = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$44466a39ca846289).tagName);\n    // Check the XML \"reactionList\" element has one or more \"reaction\" elements and no other elements.\n    let reactionListTagNames = new Set();\n    xml_reactionList.childNodes.forEach(function(node) {\n        reactionListTagNames.add(node.nodeName);\n    });\n    if (reactionListTagNames.size != 1) {\n        if (!(reactionListTagNames.size == 2 && reactionListTagNames.has(\"#text\"))) {\n            console.error(\"reactionListTagNames:\");\n            reactionListTagNames.forEach((x)=>console.error(x));\n            throw new Error(\"Additional tag names in reactionList:\");\n        }\n    }\n    if (!reactionListTagNames.has((0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName)) throw new Error('Expecting tags with \"' + (0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName + '\" tagName but there are none!');\n    // Process the XML \"reaction\" elements.\n    let xml_reactions = xml_reactionList.getElementsByTagName((0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    //xml_reactions.forEach(function (xml_reaction) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for(let i = 0; i < xml_reactions.length; i++){\n        let reactionDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n        // Set attributes.\n        let reactionAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactions[i]);\n        let reactionTagNames = new Set();\n        let cns = xml_reactions[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for(let j = 0; j < cns.length; j++){\n            let cn = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!reactionTagNames.has(cn.nodeName)) reactionTagNames.add(cn.nodeName);\n            else // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n            if (cn.nodeName != \"#text\") console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n        //console.log(cn.nodeName);\n        }\n        // Create reaction.\n        let reaction = new (0, $381c11e38cac5410$export$d2ae4167a30cf6bb)(reactionAttributes);\n        $22c7fca7c69edc03$var$reactions.set(reaction.id, reaction);\n        // Reactions typically have one or more reactant and product. They may also have one or more \"me:transitionState\" and other things...\n        // Load reactants.\n        let xml_reactants = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName);\n        reactionTagNames.delete((0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName);\n        //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n        if (xml_reactants.length > 0) {\n            // Create a new div for the reactants.\n            let reactantsDiv = document.createElement(\"div\");\n            let reactants = [];\n            for(let j = 0; j < xml_reactants.length; j++){\n                let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_reactants[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                let molecule = new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule));\n                let reactant = new (0, $381c11e38cac5410$export$dcfd4302d04b7fb6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactants[j]), molecule);\n                reactants.push(reactant);\n                // Create a new div for the role.\n                let lws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)(molecule.ref + \" role\", (0, $381c11e38cac5410$export$dcfd4302d04b7fb6).roleOptions, \"Role\", molecule.role, molecule.ref, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n                lws.querySelector(\"select\")?.addEventListener(\"change\", (event)=>{\n                    let target = event.target;\n                    molecule.setRole(target.value);\n                    console.log(\"Set Role to \" + target.value);\n                    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n                });\n                reactantsDiv.appendChild(lws);\n            }\n            reaction.setReactants(reactants);\n            // Create a new collapsible div for the reactants.\n            let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(reaction.id, (0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName);\n            (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                divToAddTo: reactionDiv,\n                elementToInsertBefore: null,\n                content: reactantsDiv,\n                buttonLabel: \"Reactants\",\n                buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n                margin: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n        }\n        // Load products.\n        let xml_products = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$264ad599d7cef668).tagName);\n        reactionTagNames.delete((0, $381c11e38cac5410$export$264ad599d7cef668).tagName);\n        //console.log(\"xml_products.length=\" + xml_products.length);\n        if (xml_products.length > 0) {\n            let productsDiv = document.createElement(\"div\");\n            let products = [];\n            for(let j = 0; j < xml_products.length; j++){\n                let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_products[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                let molecule = new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule));\n                let product = new (0, $381c11e38cac5410$export$264ad599d7cef668)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_products[j]), molecule);\n                products.push(product);\n                let lws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)(molecule.ref + \" role\", (0, $381c11e38cac5410$export$264ad599d7cef668).roleOptions, molecule.role, molecule.ref, \"Role\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n                let select = lws.querySelector(\"select\");\n                select.value = molecule.role;\n                select.addEventListener(\"change\", (event)=>{\n                    let target = event.target;\n                    molecule.setRole(target.value);\n                    console.log(\"Set Role to \" + target.value);\n                    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n                });\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n                productsDiv.appendChild(lws);\n            }\n            reaction.setProducts(products);\n            // Create collapsible div for the products.\n            let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(reaction.id, (0, $381c11e38cac5410$export$264ad599d7cef668).tagName);\n            (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                divToAddTo: reactionDiv,\n                elementToInsertBefore: null,\n                content: productsDiv,\n                buttonLabel: \"Products\",\n                buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n                margin: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n        }\n        // Load tunneling.\n        let xml_tunneling = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName);\n        if (xml_tunneling.length > 0) {\n            if (xml_tunneling.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName + \" but finding \" + xml_tunneling.length + \"!\");\n            let tunneling = new (0, $381c11e38cac5410$export$c3cf6f96dac11421)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tunneling[0]));\n            reaction.setTunneling(tunneling);\n            let lws = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)((0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName, (0, $381c11e38cac5410$export$c3cf6f96dac11421).options, \"Tunneling\", tunneling.getName(), reaction.id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n            lws.querySelector(\"select\")?.addEventListener(\"change\", (event)=>{\n                let target = event.target;\n                tunneling.setName(target.value);\n                console.log(\"Set Tunneling to \" + target.value);\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n            });\n            reactionDiv.appendChild(lws);\n        }\n        // Load transition states.\n        let xml_transitionStates = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$145c1ed87b1a2216).tagName);\n        //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n        if (xml_transitionStates.length > 0) {\n            let transitionStatesDiv = document.createElement(\"div\");\n            let transitionStates = [];\n            for(let j = 0; j < xml_transitionStates.length; j++){\n                let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_transitionStates[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                let molecule = new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule));\n                let transitionState = new (0, $381c11e38cac5410$export$145c1ed87b1a2216)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_transitionStates[j]), molecule);\n                transitionStates.push(transitionState);\n                // Create a label for the Transition State.\n                let label = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(molecule.ref + \" role transitionState\", $22c7fca7c69edc03$var$level3);\n                transitionStatesDiv.appendChild(label);\n            }\n            reaction.setTransitionStates(transitionStates);\n            // Create a new collapsible div for the transition states.\n            let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(reaction.id, (0, $381c11e38cac5410$export$145c1ed87b1a2216).tagName);\n            (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                divToAddTo: reactionDiv,\n                elementToInsertBefore: null,\n                content: transitionStatesDiv,\n                buttonLabel: \"Transition States\",\n                buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n                margin: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n        }\n        // Load MCRCMethod.\n        //console.log(\"Load MCRCMethod...\");\n        let xml_MCRCMethod = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName);\n        //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n        //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n        if (xml_MCRCMethod.length > 0) {\n            if (xml_MCRCMethod.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n            else {\n                let mCRCMethodDiv = document.createElement(\"div\");\n                let mCRCMethod;\n                let mCRCMethodAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_MCRCMethod[0]);\n                let name = mCRCMethodAttributes.get(\"name\");\n                //console.log(MCRCMethod.tagName + \" name=\" + name);\n                if (name == undefined || name == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType2) {\n                    let type = mCRCMethodAttributes.get(\"xsi:type\");\n                    mCRCMethod = new (0, $381c11e38cac5410$export$191e95ebb11cc88)(mCRCMethodAttributes);\n                    //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                    if (type == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType || type == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType2) {\n                        let xml_preExponential = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName);\n                        if (xml_preExponential != null) {\n                            if (xml_preExponential[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_preExponential[0]);\n                                let value = parseFloat(inputString);\n                                let preExponentialAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_preExponential[0]);\n                                let preExponential = new (0, $381c11e38cac5410$export$38ce90ac8b004d85)(preExponentialAttributes, value);\n                                mCRCMethod.setPreExponential(preExponential);\n                                let label = (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    let target = event.target;\n                                    $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(preExponential, target);\n                                }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let target = event.target;\n                                    inputString = target.value;\n                                    preExponential.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, preExponentialAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName, (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"preExponential \" + preExponential);\n                        let xml_activationEnergy = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName);\n                        if (xml_activationEnergy != null) {\n                            if (xml_activationEnergy[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_activationEnergy[0]);\n                                let value = parseFloat(inputString);\n                                let activationEnergyAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_activationEnergy[0]);\n                                let activationEnergy = new (0, $381c11e38cac5410$export$1bdc69d2439d749d)(activationEnergyAttributes, value);\n                                mCRCMethod.setActivationEnergy(activationEnergy);\n                                let label = (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    let target = event.target;\n                                    $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(activationEnergy, target);\n                                }, inputString, label);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let target = event.target;\n                                    inputString = target.value;\n                                    activationEnergy.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, activationEnergyAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName, (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"activationEnergy \" + activationEnergy);\n                        let xml_tInfinity = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName);\n                        if (xml_tInfinity != null) {\n                            if (xml_tInfinity[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_tInfinity[0]);\n                                let value = parseFloat(inputString);\n                                let tInfinityAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tInfinity[0]);\n                                let tInfinity = new (0, $381c11e38cac5410$export$8d95dd32819bc86c)(tInfinityAttributes, value);\n                                mCRCMethod.setTInfinity(tInfinity);\n                                let label = (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    let target = event.target;\n                                    $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(tInfinity, target);\n                                }, inputString, label);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let target = event.target;\n                                    inputString = target.value;\n                                    tInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, tInfinityAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName, (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"tInfinity \" + tInfinity);\n                        let xml_nInfinity = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$d08982dd841d496f).tagName);\n                        if (xml_nInfinity != null) {\n                            if (xml_nInfinity[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_nInfinity[0]);\n                                let value = parseFloat(inputString);\n                                let nInfinityAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_nInfinity[0]);\n                                let nInfinity = new (0, $381c11e38cac5410$export$d08982dd841d496f)(nInfinityAttributes, value);\n                                mCRCMethod.setNInfinity(nInfinity);\n                                let label = (0, $381c11e38cac5410$export$d08982dd841d496f).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$d08982dd841d496f).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    let target = event.target;\n                                    $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(nInfinity, target);\n                                }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let target = event.target;\n                                    inputString = target.value;\n                                    nInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, nInfinityAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$d08982dd841d496f).tagName, (0, $381c11e38cac5410$export$d08982dd841d496f).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"nInfinity \" + nInfinity);\n                        // Create a new collapsible div for the MCRCMethod.\n                        let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(reaction.id, (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName);\n                        (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                            divToAddTo: reactionDiv,\n                            elementToInsertBefore: null,\n                            content: mCRCMethodDiv,\n                            buttonLabel: (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName,\n                            buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n                            margin: $22c7fca7c69edc03$var$level2,\n                            contentDivId: contentDivId\n                        });\n                    } else throw new Error(\"Unexpected xsi:type=\" + type);\n                } else {\n                    mCRCMethod = new (0, $381c11e38cac5410$export$6fa70ee10f356b6)(mCRCMethodAttributes);\n                    let mCRCMethodLabel = document.createElement(\"label\");\n                    mCRCMethodLabel.textContent = (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName + \": \" + mCRCMethodAttributes.get(\"name\");\n                    Object.assign(mCRCMethodLabel.style, $22c7fca7c69edc03$var$level2);\n                    mCRCMethodDiv.appendChild(mCRCMethodLabel);\n                    reactionDiv.appendChild(mCRCMethodDiv);\n                }\n                reaction.setMCRCMethod(mCRCMethod);\n            }\n        }\n        // Load excessReactantConc\n        let xml_excessReactantConc = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$284227145ed02b04).tagName);\n        if (xml_excessReactantConc.length > 0) {\n            if (xml_excessReactantConc.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n            let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_excessReactantConc[0])));\n            let excessReactantConc = new (0, $381c11e38cac5410$export$284227145ed02b04)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_excessReactantConc[0]), value);\n            reaction.setExcessReactantConc(excessReactantConc);\n            let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName;\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2, (event)=>{\n                let target = event.target;\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(excessReactantConc, target);\n            }, value.toExponential(), (0, $381c11e38cac5410$export$284227145ed02b04).tagName);\n            reactionDiv.appendChild(inputDiv);\n        }\n        // Create a new collapsible div for the reaction and append to the reactionListDiv.\n        let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName, reaction.id);\n        (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            divToAddTo: reactionListDiv,\n            elementToInsertBefore: null,\n            content: reactionDiv,\n            buttonLabel: reaction.id + \"(\" + reaction.getLabel() + \")\",\n            buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n            margin: $22c7fca7c69edc03$var$level1,\n            contentDivId: contentDivId\n        });\n    }\n    return reactionListDiv;\n}\n/**\n * Parse xml to initialise conditions.\n * @param xml The XML document.\n * @returns The conditions div.\n */ function $22c7fca7c69edc03$var$processConditions(xml) {\n    console.log((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n    // Create a div for the conditionss.\n    let conditionssDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    // Get the XML \"me:conditions\" element.\n    let xml_conditionss = xml.getElementsByTagName((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n    for(let i = 0; i < xml_conditionss.length; i++){\n        let xml_conditions = xml_conditionss[i];\n        // Create div to contain the conditions.\n        let conditionsID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, i.toString());\n        let conditionsDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(conditionsID, $22c7fca7c69edc03$var$boundary1);\n        let conditions = $22c7fca7c69edc03$var$addConditions((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_conditions), conditionsDiv, null, conditionssDiv, i);\n        let level = $22c7fca7c69edc03$var$level2;\n        let nextLevel = $22c7fca7c69edc03$var$level3;\n        $22c7fca7c69edc03$var$handleBathGases(conditions, conditionsDiv, i, xml_conditions, level, nextLevel);\n        $22c7fca7c69edc03$var$handlePTs(conditions, conditionsDiv, i, xml_conditions, level, nextLevel);\n        // Add a remove conditions button.\n        let removeButton = $22c7fca7c69edc03$var$addRemoveButton(conditionsDiv, level, $22c7fca7c69edc03$var$mesmer.removeConditions.bind($22c7fca7c69edc03$var$mesmer), i);\n        removeButton.addEventListener(\"click\", (event)=>{\n            // Remove the conditions.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(conditionsID, $22c7fca7c69edc03$var$ids);\n        });\n    }\n    // Create an add button to add a conditions.\n    $22c7fca7c69edc03$var$createAddConditionsButton(conditionssDiv, $22c7fca7c69edc03$var$level2, $22c7fca7c69edc03$var$level3);\n    return conditionssDiv;\n}\nfunction $22c7fca7c69edc03$var$handleBathGases(conditions, conditionsDiv, conditionsIndex, xml_conditions, level, nextLevel) {\n    // Bath Gases\n    let bathGasesDiv = document.createElement(\"div\");\n    conditionsDiv.appendChild(bathGasesDiv);\n    let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, conditionsIndex.toString(), (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n    // Add collapsible div.\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: conditionsDiv,\n        elementToInsertBefore: null,\n        content: bathGasesDiv,\n        buttonLabel: (0, $613b909b2797b099$export$b33a132661f4be58).tagName,\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n        margin: level,\n        contentDivId: contentDivId\n    });\n    // Add add button.\n    let addBathGasButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, undefined, nextLevel);\n    bathGasesDiv.appendChild(addBathGasButton);\n    addBathGasButton.addEventListener(\"click\", ()=>{\n        let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(new Map(), $22c7fca7c69edc03$var$s_selectOption);\n        let bathGasIndex = conditions.addBathGas(bathGas);\n        let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, nextLevel);\n        let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, conditionsIndex.toString(), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, bathGasIndex.toString());\n        let select = $22c7fca7c69edc03$var$createSelectElementBathGas(Array.from(new Set($22c7fca7c69edc03$var$molecules.keys())), bathGas, true, id);\n        select.classList.add((0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n        div.appendChild(select);\n        $22c7fca7c69edc03$var$addRemoveButton(div, $22c7fca7c69edc03$var$boundary1, (bathGas)=>{\n            bathGasesDiv.removeChild(div);\n            conditions.removeBathGas(bathGas);\n        });\n        bathGasesDiv.insertBefore(div, addBathGasButton);\n    });\n    // Process any \"bathGas\" elements that are immediate children of xml_conditions.\n    if (xml_conditions != null) {\n        let xml_bathGases = Array.from(xml_conditions.children).filter((child)=>child.tagName === (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n        if (xml_bathGases.length > 0) for(let i = 0; i < xml_bathGases.length; i++){\n            let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bathGases[i]);\n            let moleculeID = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bathGases[i]));\n            let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(attributes, moleculeID);\n            console.log(\"bathGas\" + bathGas.toString());\n            let bathGasIndex = conditions.addBathGas(bathGas);\n            let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, conditionsIndex.toString(), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, bathGasIndex.toString());\n            let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(id, nextLevel);\n            let select = $22c7fca7c69edc03$var$createSelectElementBathGas(Array.from(new Set($22c7fca7c69edc03$var$molecules.keys())), bathGas, false, id);\n            div.appendChild(select);\n            $22c7fca7c69edc03$var$addRemoveButton(div, $22c7fca7c69edc03$var$boundary1, (bathGas)=>{\n                bathGasesDiv.removeChild(div);\n                conditions.removeBathGas(bathGas);\n            });\n            bathGasesDiv.insertBefore(div, addBathGasButton);\n        }\n        else {\n            let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, nextLevel);\n            let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, conditionsIndex.toString(), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, \"0\");\n            div.appendChild($22c7fca7c69edc03$var$createSelectElementBathGas(Array.from(new Set($22c7fca7c69edc03$var$molecules.keys())), undefined, false, id));\n            $22c7fca7c69edc03$var$addRemoveButton(div, $22c7fca7c69edc03$var$boundary1, (bathGas)=>{\n                bathGasesDiv.removeChild(div);\n                conditions.removeBathGas(bathGas);\n            });\n            bathGasesDiv.insertBefore(div, addBathGasButton);\n        }\n    }\n}\n/**\n * \n * @param conditions \n * @param conditionsDiv \n * @param conditionsIndex \n * @param xml_conditions \n * @param level \n * @param nextLevel \n */ function $22c7fca7c69edc03$var$handlePTs(conditions, conditionsDiv, conditionsIndex, xml_conditions, level, nextLevel) {\n    // PTs\n    let moleculeKeys = new Set($22c7fca7c69edc03$var$molecules.keys());\n    // Create a new div for the PTs.\n    let pTsDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    conditionsDiv.appendChild(pTsDiv);\n    let pTs;\n    if (xml_conditions) {\n        let xml_PTss = xml_conditions.getElementsByTagName((0, $613b909b2797b099$export$3be0efe793283834).tagName);\n        if (xml_PTss.length > 0) {\n            if (xml_PTss.length > 1) throw new Error(\"Expecting 1 \" + (0, $613b909b2797b099$export$3be0efe793283834).tagName + \" but finding \" + xml_PTss.length + \"!\");\n            let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTss[0]);\n            let xml_PTpairs = xml_PTss[0].getElementsByTagName((0, $613b909b2797b099$export$3fe97ecb6b172244).tagName);\n            if (xml_PTpairs.length == 0) throw new Error(\"Expecting 1 or more \" + (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \" but finding 0!\");\n            else {\n                pTs = new (0, $613b909b2797b099$export$3be0efe793283834)(attributes);\n                for(let i = 0; i < xml_PTpairs.length; i++){\n                    let pTpairAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTpairs[i]);\n                    console.log(\"pTpairAttributes=\" + (0, $dcf293d9ee452407$export$dc22ec7f8e0b9ac)(pTpairAttributes));\n                    let pTpair = new (0, $613b909b2797b099$export$3fe97ecb6b172244)(pTpairAttributes);\n                    pTs.addPTpair(pTpair);\n                    // BathGas.\n                    let xml_bathGass = xml_PTpairs[i].getElementsByTagName((0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n                    if (xml_bathGass.length > 0) {\n                        if (xml_bathGass.length > 1) console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n                        pTpair.setBathGas(new (0, $613b909b2797b099$export$b33a132661f4be58)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bathGass[0]), (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bathGass[0]))));\n                    }\n                    // ExperimentRate.\n                    let xml_ers = xml_PTpairs[i].getElementsByTagName((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName);\n                    if (xml_ers.length > 0) {\n                        if (xml_ers.length > 1) console.warn(\"xml_experimentRates.length=\" + xml_ers.length);\n                        pTpair.setExperimentalRate(new (0, $613b909b2797b099$export$cdeafdd1d936ed5b)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_ers[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_ers[0])))));\n                    }\n                    // ExperimentalYield.\n                    let xml_eys = xml_PTpairs[i].getElementsByTagName((0, $613b909b2797b099$export$c291f4faacd745a6).tagName);\n                    if (xml_eys.length > 0) {\n                        if (xml_eys.length > 1) console.warn(\"xml_experimentalYields.length=\" + xml_eys.length);\n                        pTpair.setExperimentalYield(new (0, $613b909b2797b099$export$c291f4faacd745a6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_eys[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_eys[0])))));\n                    }\n                    // ExperimentalEigenvalue.\n                    let xml_ees = xml_PTpairs[i].getElementsByTagName((0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName);\n                    if (xml_ees.length > 0) {\n                        if (xml_ees.length > 1) console.warn(\"xml_experimentalEigenvalues.length=\" + xml_ees.length);\n                        pTpair.setExperimentalEigenvalue(new (0, $613b909b2797b099$export$ed9dfbc127680fd1)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_ees[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_ees[0])))));\n                    }\n                    // Create pTpairDiv.\n                    pTsDiv.append($22c7fca7c69edc03$var$createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDiv.id, conditionsIndex, i, moleculeKeys, nextLevel));\n                }\n            }\n        } else pTs = new (0, $613b909b2797b099$export$3be0efe793283834)(new Map());\n    } else pTs = new (0, $613b909b2797b099$export$3be0efe793283834)(new Map());\n    conditions.setPTs(pTs);\n    // Add collapsible div.\n    let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, conditionsIndex.toString(), (0, $613b909b2797b099$export$3be0efe793283834).tagName);\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: conditionsDiv,\n        elementToInsertBefore: null,\n        content: pTsDiv,\n        buttonLabel: (0, $613b909b2797b099$export$3be0efe793283834).tagName,\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n        margin: level,\n        contentDivId: contentDivId\n    });\n    // Create a buttons div for the add, add from spreadsheet and remove all buttons.\n    let pTsButtonsDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, nextLevel);\n    pTsDiv.appendChild(pTsButtonsDiv);\n    // Create an add button to add a new PTpair.\n    let addButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, undefined, $22c7fca7c69edc03$var$boundary1);\n    pTsButtonsDiv.appendChild(addButton);\n    // Add event listener to the addButton.\n    addButton.addEventListener(\"click\", ()=>{\n        // Create a new PTpair.\n        let pTpairAttributes = new Map();\n        pTpairAttributes.set(\"units\", \"Torr\");\n        let pTpair = new (0, $613b909b2797b099$export$3fe97ecb6b172244)(pTpairAttributes);\n        let pTpairIndex = pTs.addPTpair(pTpair);\n        console.log(\"Added new pTpair pTpairIndex=\" + pTpairIndex);\n        // Create a new div for the PTpair.\n        pTsDiv.insertBefore($22c7fca7c69edc03$var$createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDiv.id, conditionsIndex, pTpairIndex, moleculeKeys, nextLevel), pTsButtonsDiv);\n    });\n    // Create an add from spreadsheet button to add multiple PTPairs.\n    let addMultipleButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_from_spreadsheet, undefined, $22c7fca7c69edc03$var$boundary1);\n    pTsButtonsDiv.appendChild(addMultipleButton);\n    // Add event listener to the addMultipleButton.\n    addMultipleButton.addEventListener(\"click\", ()=>{\n        // Add a new text input for the user to paste the PTPairs.\n        let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, nextLevel);\n        let addFromSpreadsheetId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$3be0efe793283834).tagName, \"addFromSpreadsheet\");\n        let input = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"text\", addFromSpreadsheetId, nextLevel);\n        div.appendChild(input);\n        pTsDiv.insertBefore(div, pTsButtonsDiv);\n        // Add an event listener to the inputElement.\n        input.addEventListener(\"change\", ()=>{\n            console.log(\"inputElement.value=\" + input.value);\n            console.log(\"inputElement.value.length=\" + input.value.length);\n            if (input.value.length > 0) {\n                let pTpairsArray = input.value.split(\" \");\n                // Is there a header?\n                let index = new Map();\n                pTpairsArray[0].split(\"\t\").forEach((value, i)=>{\n                    index.set(value, i);\n                });\n                console.log(\"pTpairsArray.length=\" + pTpairsArray.length);\n                for(let i = 1; i < pTpairsArray.length; i++){\n                    let pTpairArray = pTpairsArray[i].split(\"\t\");\n                    let pIndex = index.get(\"P\");\n                    let p = parseFloat(pTpairArray[pIndex]);\n                    let unitsIndex = index.get(\"units\");\n                    let pTpairAttributes = new Map();\n                    if (index.has(\"units\")) {\n                        let units = pTpairArray[unitsIndex];\n                        pTpairAttributes.set(\"units\", units);\n                    }\n                    let pTpair = new (0, $613b909b2797b099$export$3fe97ecb6b172244)(pTpairAttributes);\n                    pTs.addPTpair(pTpair);\n                    let tIndex = index.get(\"T\");\n                    let t = parseFloat(pTpairArray[tIndex]);\n                    pTpair.setP(p);\n                    pTpair.setT(t);\n                    if (index.has((0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc)) {\n                        let excessReactantConIndex = index.get((0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc);\n                        let excessReactantConc = pTpairArray[excessReactantConIndex];\n                        pTpairAttributes.set((0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc, excessReactantConc);\n                    }\n                    if (index.has((0, $613b909b2797b099$export$3fe97ecb6b172244).s_percentExcessReactantConc)) {\n                        let percentExcessReactantConIndex = index.get((0, $613b909b2797b099$export$3fe97ecb6b172244).s_percentExcessReactantConc);\n                        let percentExcessReactantConc = pTpairArray[percentExcessReactantConIndex];\n                        pTpairAttributes.set((0, $613b909b2797b099$export$3fe97ecb6b172244).s_percentExcessReactantConc, percentExcessReactantConc);\n                    }\n                    if (index.has((0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision)) {\n                        console.log(\"index.has(PTpair.s_precision)\");\n                        let precisionIndex = index.get((0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision);\n                        let precision = pTpairArray[precisionIndex];\n                        pTpairAttributes.set((0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision, precision);\n                    //console.log(\"precision=\" + precision);\n                    }\n                    if (index.has((0, $613b909b2797b099$export$b33a132661f4be58).tagName)) {\n                        let bathGasIndex = index.get((0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n                        let bathGas = pTpairArray[bathGasIndex];\n                        pTpair.setBathGas(new (0, $613b909b2797b099$export$b33a132661f4be58)(new Map(), bathGas));\n                    }\n                    if (index.has((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName)) {\n                        let experimentalRateIndex = index.get((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName);\n                        let experimentalRate = pTpairArray[experimentalRateIndex];\n                        pTpairAttributes.set((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName, experimentalRate);\n                        pTpair.setExperimentalRate(new (0, $613b909b2797b099$export$cdeafdd1d936ed5b)(new Map(), parseFloat(experimentalRate)));\n                        // Set the attributes of the experimentalRate.\n                        // ref1.\n                        let experimentalRateRef1Index = index.get((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_ref1);\n                        let experimentalRateRef1 = pTpairArray[experimentalRateRef1Index];\n                        pTpair.getExperimentalRate()?.setRef1(experimentalRateRef1);\n                        // ref2.\n                        let experimentalRateRef2Index = index.get((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_ref2);\n                        let experimentalRateRef2 = pTpairArray[experimentalRateRef2Index];\n                        pTpair.getExperimentalRate()?.setRef2(experimentalRateRef2);\n                        // refReaction.\n                        let experimentalRateRefReactionIndex = index.get((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_refReaction);\n                        let experimentalRateRefReaction = pTpairArray[experimentalRateRefReactionIndex];\n                        pTpair.getExperimentalRate()?.setRefReaction(experimentalRateRefReaction);\n                        // error.\n                        let experimentalRateErrorIndex = index.get((0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_error);\n                        let experimentalRateError = pTpairArray[experimentalRateErrorIndex];\n                        pTpair.getExperimentalRate()?.setError(parseFloat(experimentalRateError));\n                    }\n                    if (index.has((0, $613b909b2797b099$export$c291f4faacd745a6).tagName)) {\n                        let experimentalYieldIndex = index.get((0, $613b909b2797b099$export$c291f4faacd745a6).tagName);\n                        let experimentalYield = pTpairArray[experimentalYieldIndex];\n                        pTpair.setExperimentalYield(new (0, $613b909b2797b099$export$c291f4faacd745a6)(new Map(), parseFloat(experimentalYield)));\n                        // Set the attributes of the experimentalYield.\n                        // ref.\n                        let experimentalYieldRefIndex = index.get((0, $613b909b2797b099$export$c291f4faacd745a6).tagName + \"_\" + (0, $613b909b2797b099$export$c291f4faacd745a6).s_ref);\n                        let experimentalYieldRef = pTpairArray[experimentalYieldRefIndex];\n                        pTpair.getExperimentalYield()?.setRef(experimentalYieldRef);\n                        // yieldTime.\n                        let experimentalYieldYieldTimeIndex = index.get((0, $613b909b2797b099$export$c291f4faacd745a6).tagName + \"_\" + (0, $613b909b2797b099$export$c291f4faacd745a6).s_yieldTime);\n                        let experimentalYieldYieldTime = pTpairArray[experimentalYieldYieldTimeIndex];\n                        pTpair.getExperimentalYield()?.setYieldTime(parseFloat(experimentalYieldYieldTime));\n                        // error.\n                        let experimentalYieldErrorIndex = index.get((0, $613b909b2797b099$export$c291f4faacd745a6).tagName + \"_\" + (0, $613b909b2797b099$export$c291f4faacd745a6).s_error);\n                        let experimentalYieldError = pTpairArray[experimentalYieldErrorIndex];\n                        pTpair.getExperimentalYield()?.setError(parseFloat(experimentalYieldError));\n                    }\n                    if (index.has((0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName)) {\n                        let experimentalEigenvalueIndex = index.get((0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName);\n                        let experimentalEigenvalue = pTpairArray[experimentalEigenvalueIndex];\n                        pTpair.setExperimentalEigenvalue(new (0, $613b909b2797b099$export$ed9dfbc127680fd1)(new Map(), parseFloat(experimentalEigenvalue)));\n                        // Set the attributes of the experimentalEigenvalue.\n                        // EigenvalueID.\n                        let experimentalEigenvalueEigenvalueIDIndex = index.get((0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName + \"_\" + (0, $613b909b2797b099$export$ed9dfbc127680fd1).s_EigenvalueID);\n                        let experimentalEigenvalueEigenvalueID = pTpairArray[experimentalEigenvalueEigenvalueIDIndex];\n                        pTpair.getExperimentalEigenvalue()?.setEigenvalueID(experimentalEigenvalueEigenvalueID);\n                        // error.\n                        let experimentalEigenvalueErrorIndex = index.get((0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName + \"_\" + (0, $613b909b2797b099$export$ed9dfbc127680fd1).s_error);\n                        let experimentalEigenvalueError = pTpairArray[experimentalEigenvalueErrorIndex];\n                        pTpair.getExperimentalEigenvalue()?.setError(parseFloat(experimentalEigenvalueError));\n                    }\n                    //console.log(\"pTpair=\" + pTpair);\n                    let pTpairIndex = pTs.pTpairs.length - 1;\n                    // Create a new div for the PTpair.\n                    pTsDiv.insertBefore($22c7fca7c69edc03$var$createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDiv.id, conditionsIndex, pTpairIndex, moleculeKeys, nextLevel), pTsButtonsDiv);\n                }\n                pTsDiv.removeChild(div);\n            }\n        });\n    });\n    // Add a remove all button.\n    let removeAllButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(\"Remove All\", undefined, $22c7fca7c69edc03$var$boundary1);\n    pTsButtonsDiv.appendChild(removeAllButton);\n    removeAllButton.addEventListener(\"click\", ()=>{\n        pTs.removePTpairs();\n        // Remove all elements before the pTsButtonsDiv.\n        let child = pTsDiv.firstChild;\n        while(child != null && child != pTsButtonsDiv){\n            let nextSibling = child.nextSibling;\n            pTsDiv.removeChild(child);\n            child = nextSibling;\n        }\n    });\n}\n/**\n * @param controlsDiv \n * @param level The level.\n * @returns A button.\n */ function $22c7fca7c69edc03$var$createAddConditionsButton(conditionssDiv, level, nextLevel) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, undefined, $22c7fca7c69edc03$var$level1);\n    conditionssDiv.appendChild(button);\n    button.addEventListener(\"click\", (event)=>{\n        let i = $22c7fca7c69edc03$var$mesmer.getNextConditionsID();\n        console.log(\"Add Conditions \" + i.toString());\n        let conditionsID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, i.toString());\n        let conditionsDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(conditionsID, $22c7fca7c69edc03$var$boundary1);\n        // ElementToInsert before is element after the conditions div with the previous index.\n        let elementToInsertBefore;\n        if (i > 0) {\n            let aboveElement = document.getElementById((0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, (i - 1).toString()));\n            let nextElementSibling = aboveElement.nextElementSibling;\n            // If nextElementSibling is not a child of conditionssDiv the element.\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == conditionssDiv) elementToInsertBefore = nextElementSibling;\n                else elementToInsertBefore = button;\n            } else elementToInsertBefore = button;\n        } else elementToInsertBefore = button;\n        // Add the conditions\n        let conditions = $22c7fca7c69edc03$var$addConditions(new Map(), conditionsDiv, elementToInsertBefore, conditionssDiv, i);\n        $22c7fca7c69edc03$var$handleBathGases(conditions, conditionsDiv, i, null, level, nextLevel);\n        $22c7fca7c69edc03$var$handlePTs(conditions, conditionsDiv, i, null, level, nextLevel);\n        // Add a remove conditions button.\n        let removeButton = $22c7fca7c69edc03$var$addRemoveButton(conditionsDiv, $22c7fca7c69edc03$var$level2, $22c7fca7c69edc03$var$mesmer.removeConditions.bind($22c7fca7c69edc03$var$mesmer), i);\n        removeButton.addEventListener(\"click\", (event)=>{\n            // Remove the control.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(conditionsID, $22c7fca7c69edc03$var$ids);\n        });\n    });\n    return button;\n}\n/**\n * Add and return a new conditions.\n */ function $22c7fca7c69edc03$var$addConditions(attributes, conditionsDiv, elementToInsertBefore, conditionssDiv, i) {\n    let conditions = new (0, $613b909b2797b099$export$363c7374d425f4ad)(attributes, i);\n    $22c7fca7c69edc03$var$mesmer.addConditions(conditions);\n    let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, i.toString());\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: conditionssDiv,\n        elementToInsertBefore: elementToInsertBefore,\n        content: conditionsDiv,\n        buttonLabel: \"Conditions \" + i.toString(),\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level1,\n        contentDivId: contentDivId\n    });\n    return conditions;\n}\n/**\n * @param pTs The PTs.\n * @param pTsDiv The PTs div.\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param pTIndex The index.\n * @param moleculeKeys The molecule keys.\n * @param level The level.\n */ function $22c7fca7c69edc03$var$createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDivId, conditionsIndex, pTIndex, moleculeKeys, level) {\n    let pTpairDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, level);\n    $22c7fca7c69edc03$var$addPorT(pTpairDiv, (0, $613b909b2797b099$export$3fe97ecb6b172244).s_P, pTpair.getP.bind(pTpair), pTpair.setP.bind(pTpair)); // The binding is necessary to maintain the correct \"this\".\n    $22c7fca7c69edc03$var$addAnyUnits((0, $762f625c179c0279$export$692079bb871c6039).pressureUnits, pTpair.attributes, pTpairDiv, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, $22c7fca7c69edc03$var$boundary1);\n    $22c7fca7c69edc03$var$addPorT(pTpairDiv, (0, $613b909b2797b099$export$3fe97ecb6b172244).s_T, pTpair.getT.bind(pTpair), pTpair.setT.bind(pTpair)); // The binding is necessary to maintain the correct \"this\".\n    let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(conditionsDivId, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, pTIndex.toString());\n    // ExcessReactantConc.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_excessReactantConc, getID(id, PTpair.s_excessReactantConc),\n    //    [pTpair], createExcessReactantConcInputElement);\n    //addExcessReactantConc(pTpairDiv, pTpair, pTIndex);\n    $22c7fca7c69edc03$var$addAttribute(pTpairDiv, pTpair, conditionsIndex, pTIndex, (0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc, $22c7fca7c69edc03$var$createExcessReactantConcInputElement);\n    //addAttribute(    pTpairDiv,     pTpair,    pTIndex,     PTpair.s_excessReactantConc,     createExcessReactantConcInputElement,\n    //(pTpair, attribute) => pTpair.attributes.has(attribute),    (pTpair, attribute) => null);\n    // PercentExcessReactantConc.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_percentExcessReactantConc);\n    $22c7fca7c69edc03$var$addPercentExcessReactantConc(pTpairDiv, pTpair, conditionsIndex, pTIndex);\n    // Precision.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_precision, getID(id, PTpair.s_precision),\n    //    [pTpair], createPrecisionSelectElement);\n    //addPrecision(pTpairDiv, pTpair, pTIndex);\n    $22c7fca7c69edc03$var$addAttribute(pTpairDiv, pTpair, conditionsIndex, pTIndex, (0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision, $22c7fca7c69edc03$var$createPrecisionSelectElement);\n    //addAttribute(    pTpairDiv,     pTpair,    pTIndex,     PTpair.s_precision, createPrecisionSelectElement,\n    //    (pTpair, attribute) => pTpair.attributes.has(attribute),    (pTpair, attribute) => null);\n    // BathGas.\n    //addButtonWithToggle(pTpairDiv, pTpair, BathGas.tagName, getID(id, BathGas.tagName),\n    //    [pTpair, moleculeKeys, true], createBathGasSelectElement);\n    $22c7fca7c69edc03$var$addBathGas(pTpairDiv, pTpair, conditionsIndex, pTIndex, moleculeKeys);\n    /*\n    addAttribute(pTpairDiv, pTpair, pTIndex, BathGas.tagName, createBathGasSelectElement,\n        (pTpair, attribute) => pTpair.getBathGas() !== undefined,  (pTpair, attribute) => pTpair.getBathGas(), moleculeKeys\n    );\n    */ // ExperimentalRate.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalRate.tagName, getID(id, ExperimentalRate.tagName),\n    //    [undefined, pTpair, pTIndex], addExperimentalRateDetails);\n    //addExperimentalRate(pTpairDiv, pTpair, pTIndex);\n    $22c7fca7c69edc03$var$addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, (0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName, (pTpair)=>pTpair.getExperimentalRate(), $22c7fca7c69edc03$var$createExperimentalRateDetails);\n    // ExperimentalYield.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalYield.tagName, getID(id, ExperimentalYield.tagName),\n    //    [undefined, pTpair, pTIndex], addExperimentalYieldDetails);\n    //addExperimentalYield(pTpairDiv, pTpair, pTIndex);\n    $22c7fca7c69edc03$var$addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, (0, $613b909b2797b099$export$c291f4faacd745a6).tagName, (pTpair)=>pTpair.getExperimentalYield(), $22c7fca7c69edc03$var$createExperimentalYieldDetails);\n    // ExperimentalEigenvalue.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalEigenvalue.tagName, getID(id, ExperimentalEigenvalue.tagName),\n    //   [undefined, pTpair, pTIndex], addExperimentalEigenvalueDetails);\n    //addExperimentalEigenvalue(pTpairDiv, pTpair, pTIndex);\n    $22c7fca7c69edc03$var$addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, (0, $613b909b2797b099$export$c291f4faacd745a6).tagName, (pTpair)=>pTpair.getExperimentalEigenvalue(), $22c7fca7c69edc03$var$createExperimentalEigenvalueDetails);\n    // Function to be used to remove a PTpair.\n    let removePTpair = (pTpairDiv, i, pTpair)=>{\n        pTsDiv.removeChild(pTpairDiv);\n        if (i !== undefined) pTs.removePTpair(i);\n        pTpair.removeBathGas();\n    };\n    $22c7fca7c69edc03$var$addRemoveButton(pTpairDiv, $22c7fca7c69edc03$var$boundary1, removePTpair, pTpairDiv, pTIndex, pTpair);\n    return pTpairDiv;\n}\n/**\n * @param pTpairDiv The pTpair div.\n * @param name The name (\"P\" or \"T\").\n * @param getter The getter method.\n * @param setter The setter method.\n */ function $22c7fca7c69edc03$var$addPorT(pTpairDiv, name, getter, setter) {\n    let lwi = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + name, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        let target = event.target;\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n            setter(parseFloat(target.value));\n            console.log(`Set ${name} to ${target.value}`);\n        } else {\n            alert(\"Value is not numeric, resetting...\");\n            target.value = getter().toString();\n        }\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    }, getter().toExponential(), name);\n    let input = lwi.querySelector(\"input\");\n    input.value = getter().toString();\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(input);\n    pTpairDiv.appendChild(lwi);\n}\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param conditionsIndex The conditions index.\n * @param pTIndex The pTindex.\n */ function $22c7fca7c69edc03$var$addPercentExcessReactantConc(pTpairDiv, pTpair, conditionsIndex, pTIndex) {\n    let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(conditionsIndex.toString(), pTIndex.toString(), (0, $613b909b2797b099$export$3fe97ecb6b172244).s_percentExcessReactantConc);\n    let div = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(id, $22c7fca7c69edc03$var$boundary1);\n    pTpairDiv.append(div);\n    let attribute = (0, $613b909b2797b099$export$3fe97ecb6b172244).s_percentExcessReactantConc;\n    let buttonTextContentSelected = attribute + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = attribute + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_button), $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    if (pTpair.attributes.get(attribute)?.toLowerCase() == \"true\") {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        button.textContent = buttonTextContentSelected;\n    } else {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            pTpair.attributes.set(attribute, \"true\");\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            pTpair.attributes.delete(attribute);\n        }\n    });\n}\nfunction $22c7fca7c69edc03$var$addAttribute(pTpairDiv, pTpair, conditionsIndex, pTIndex, attribute, createInputElement) {\n    let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(conditionsIndex.toString(), pTIndex.toString(), attribute);\n    let div = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(id, $22c7fca7c69edc03$var$boundary1);\n    pTpairDiv.append(div);\n    let buttonTextContentSelected = attribute + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = attribute + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_button), $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    let iid = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_Input);\n    if (pTpair.attributes.has(attribute)) {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        let input = createInputElement(iid, pTpair);\n        div.insertBefore(input, button.nextSibling);\n    } else {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            let input = createInputElement(iid, pTpair);\n            div.insertBefore(input, button.nextSibling);\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the input element.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(iid);\n        }\n    });\n}\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param i The index.\n * @param moleculeKeys The molecule keys.\n */ function $22c7fca7c69edc03$var$addBathGas(pTpairDiv, pTpair, conditionsIndex, pTIndex, moleculeKeys) {\n    let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(conditionsIndex.toString(), pTIndex.toString(), (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n    let div = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(id, $22c7fca7c69edc03$var$boundary1);\n    pTpairDiv.append(div);\n    let tagName = (0, $613b909b2797b099$export$b33a132661f4be58).tagName;\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_button), $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    let iid = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_Input);\n    let bathGas = pTpair.getBathGas();\n    if (bathGas == undefined) {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    } else {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        if (moleculeKeys.has(bathGas.value) == false) console.warn(\"moleculeKeys does not contain \" + bathGas.value);\n        div.appendChild($22c7fca7c69edc03$var$createBathGasSelectElement(iid, pTpair, bathGas, false));\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            div.appendChild($22c7fca7c69edc03$var$createBathGasSelectElement(iid, pTpair, bathGas, false));\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the select element.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(iid);\n        }\n    });\n}\nfunction $22c7fca7c69edc03$var$addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, tagName, getAttribute, createElement) {\n    let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(conditionsIndex.toString(), pTIndex.toString(), tagName);\n    let div = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(id, $22c7fca7c69edc03$var$boundary1);\n    pTpairDiv.append(div);\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_button), $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    let iid = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_Input);\n    if (getAttribute(pTpair) == undefined) {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    } else {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        div.appendChild(createElement(iid, pTpair, pTIndex));\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            div.appendChild(createElement(iid, pTpair, pTIndex));\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the element.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(iid);\n        }\n    });\n}\n/**\n * @param id The id.\n * @param pTpair The PTpair.\n * @returns A select element.\n */ function $22c7fca7c69edc03$var$createPrecisionSelectElement(id, pTpair) {\n    let value;\n    if (pTpair.attributes.has((0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision)) value = pTpair.attributes.get((0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision);\n    else value = (0, $762f625c179c0279$export$692079bb871c6039).precisionOptions[0];\n    let select = (0, $2cda23d1e44619db$export$b89bf4b169286865)((0, $762f625c179c0279$export$692079bb871c6039).precisionOptions, (0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision, value, id, $22c7fca7c69edc03$var$boundary1);\n    select.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        pTpair.setPrecision(target.value);\n        console.log(\"Set \" + (0, $613b909b2797b099$export$3fe97ecb6b172244).s_precision + \" to \" + target.value);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n    return select;\n}\n/**\n * @param id The id for the HTMLInputElement created.\n * @param pTpair The PTpair.\n * @returns An HTMLInputElement.\n */ function $22c7fca7c69edc03$var$createExcessReactantConcInputElement(id, pTpair) {\n    let input = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", id, $22c7fca7c69edc03$var$boundary1);\n    let value;\n    if (pTpair.attributes.has((0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc)) value = pTpair.attributes.get((0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc);\n    else value = NaN.toString();\n    console.log((0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc + \"=\" + value);\n    input.value = value;\n    input.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        pTpair.setExcessReactantConc(target.value);\n        console.log(\"Set \" + (0, $613b909b2797b099$export$3fe97ecb6b172244).s_excessReactantConc + \" to \" + target.value);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    });\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(input);\n    return input;\n}\n/**\n * @param pTpair The PTpair.\n * @param id The id.\n * @param bathGas The bath gas.\n * @returns A select element.\n */ function $22c7fca7c69edc03$var$createBathGasSelectElement(id, pTpair, bathGas, first) {\n    //console.log(\"createBathGasSelectElement\");\n    //console.log(\"pTpair \" + pTpair.toString());\n    let select = $22c7fca7c69edc03$var$createSelectElementBathGas(Array.from(new Set($22c7fca7c69edc03$var$molecules.keys())), bathGas, first, id);\n    select.id = id;\n    select.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        pTpair.setBathGas(new (0, $613b909b2797b099$export$b33a132661f4be58)(new Map(), target.value));\n        console.log(\"Set bathGas to \" + target.value);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n    return select;\n}\n/**\n * @param options The options.\n * @param bathGas The bath gas.\n */ function $22c7fca7c69edc03$var$createSelectElementBathGas(options, bathGas, first, id) {\n    let value;\n    if (first) options.push($22c7fca7c69edc03$var$s_selectOption);\n    else {\n        // remove selectAnotherOption if it is present.\n        let index = options.indexOf($22c7fca7c69edc03$var$s_selectOption);\n        if (index > -1) options.splice(index, 1);\n    }\n    if (bathGas == undefined) {\n        bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(new Map(), $22c7fca7c69edc03$var$s_selectOption);\n        value = $22c7fca7c69edc03$var$s_selectOption;\n    } else value = bathGas.value;\n    let select = (0, $2cda23d1e44619db$export$b89bf4b169286865)(options, (0, $613b909b2797b099$export$b33a132661f4be58).tagName, value, (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(id, $22c7fca7c69edc03$var$s_Select), $22c7fca7c69edc03$var$boundary1);\n    select.classList.add((0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n    $22c7fca7c69edc03$var$selectAnotherOptionEventListener(options, select);\n    // Add event listener to selectElement.\n    select.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        bathGas.value = target.value;\n        console.log(\"Added \" + target.value + \" as \" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    select.value = value;\n    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(select);\n    return select;\n}\nfunction $22c7fca7c69edc03$var$createExperimentalRateDetails(id, pTpair) {\n    return $22c7fca7c69edc03$var$addExperimentalDetails(pTpair, id, (pTpair)=>pTpair.getExperimentalRate(), (pTpair, value)=>pTpair.setExperimentalRate(value), (0, $613b909b2797b099$export$cdeafdd1d936ed5b), [\n        {\n            tagName: (0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName,\n            type: \"number\",\n            eventHandler: (event, target)=>$22c7fca7c69edc03$export$b1e4cbf5b56e0e21(pTpair.getExperimentalRate(), target),\n            valueGetter: ()=>pTpair.getExperimentalRate().value.toString()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_ref1,\n            type: \"text\",\n            eventHandler: (event, target)=>pTpair.getExperimentalRate()?.setRef1(target.value),\n            valueGetter: ()=>pTpair.getExperimentalRate().getRef1()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_ref2,\n            type: \"text\",\n            eventHandler: (event, target)=>pTpair.getExperimentalRate()?.setRef2(target.value),\n            valueGetter: ()=>pTpair.getExperimentalRate().getRef2()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_refReaction,\n            type: \"text\",\n            eventHandler: (event, target)=>pTpair.getExperimentalRate()?.setRefReaction(target.value),\n            valueGetter: ()=>pTpair.getExperimentalRate().getRefReaction()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$cdeafdd1d936ed5b).tagName + \"_\" + (0, $613b909b2797b099$export$cdeafdd1d936ed5b).s_error,\n            type: \"number\",\n            eventHandler: (event, target)=>pTpair.getExperimentalRate()?.setError(parseFloat(target.value)),\n            valueGetter: ()=>pTpair.getExperimentalRate().getError().toString()\n        }\n    ]);\n}\nfunction $22c7fca7c69edc03$var$createExperimentalYieldDetails(id, pTpair) {\n    return $22c7fca7c69edc03$var$addExperimentalDetails(pTpair, id, (pTpair)=>pTpair.getExperimentalYield(), (pTpair, value)=>pTpair.setExperimentalYield(value), (0, $613b909b2797b099$export$c291f4faacd745a6), [\n        {\n            tagName: (0, $613b909b2797b099$export$c291f4faacd745a6).tagName,\n            type: \"number\",\n            eventHandler: (event, target)=>$22c7fca7c69edc03$export$b1e4cbf5b56e0e21(pTpair.getExperimentalYield(), target),\n            valueGetter: ()=>pTpair.getExperimentalYield().value.toString()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$c291f4faacd745a6).tagName + \"_\" + (0, $613b909b2797b099$export$c291f4faacd745a6).s_ref,\n            type: \"text\",\n            eventHandler: (event, target)=>pTpair.getExperimentalYield()?.setRef(target.value),\n            valueGetter: ()=>pTpair.getExperimentalYield().getRef()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$c291f4faacd745a6).tagName + \"_\" + (0, $613b909b2797b099$export$c291f4faacd745a6).s_yieldTime,\n            type: \"number\",\n            eventHandler: (event, target)=>pTpair.getExperimentalYield()?.setYieldTime(parseFloat(target.value)),\n            valueGetter: ()=>pTpair.getExperimentalYield().getYieldTime().toString()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$c291f4faacd745a6).tagName + \"_\" + (0, $613b909b2797b099$export$c291f4faacd745a6).s_error,\n            type: \"number\",\n            eventHandler: (event, target)=>pTpair.getExperimentalYield()?.setError(parseFloat(target.value)),\n            valueGetter: ()=>pTpair.getExperimentalYield().getError().toString()\n        }\n    ]);\n}\nfunction $22c7fca7c69edc03$var$createExperimentalEigenvalueDetails(id, pTpair) {\n    return $22c7fca7c69edc03$var$addExperimentalDetails(pTpair, id, (pTpair)=>pTpair.getExperimentalEigenvalue(), (pTpair, value)=>pTpair.setExperimentalEigenvalue(value), (0, $613b909b2797b099$export$ed9dfbc127680fd1), [\n        {\n            tagName: (0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName,\n            type: \"number\",\n            eventHandler: (event, target)=>$22c7fca7c69edc03$export$b1e4cbf5b56e0e21(pTpair.getExperimentalEigenvalue(), target),\n            valueGetter: ()=>pTpair.getExperimentalEigenvalue().value.toString()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName + \"_\" + (0, $613b909b2797b099$export$ed9dfbc127680fd1).s_EigenvalueID,\n            type: \"text\",\n            eventHandler: (event, target)=>pTpair.getExperimentalEigenvalue()?.setEigenvalueID(target.value),\n            valueGetter: ()=>pTpair.getExperimentalEigenvalue().getEigenvalueID()\n        },\n        {\n            tagName: (0, $613b909b2797b099$export$ed9dfbc127680fd1).tagName + \"_\" + (0, $613b909b2797b099$export$ed9dfbc127680fd1).s_error,\n            type: \"number\",\n            eventHandler: (event, target)=>pTpair.getExperimentalEigenvalue()?.setError(parseFloat(target.value)),\n            valueGetter: ()=>pTpair.getExperimentalEigenvalue().getError().toString()\n        }\n    ]);\n}\n/**\n * @param pTpair The PTpair.\n * @param id The id.\n * @param getExperimental The getter.\n * @param setExperimental The setter.\n * @param ExperimentalClass The class.\n * @param details The details.\n * @returns HTMLDivElement.\n */ function $22c7fca7c69edc03$var$addExperimentalDetails(pTpair, id, getExperimental, setExperimental, ExperimentalClass, details) {\n    let div = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    div.id = id;\n    let experimental = getExperimental(pTpair);\n    if (experimental == undefined) {\n        experimental = new ExperimentalClass(new Map(), NaN);\n        setExperimental(pTpair, experimental);\n    }\n    for (let detail of details){\n        let detailId = id + \"_\" + detail.tagName;\n        div.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(detail.type, detailId, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            let target = event.target;\n            detail.eventHandler(event, target);\n            console.log(\"Set \" + detail.tagName + \" to \" + target.value);\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n        }, detail.valueGetter(), detail.label || \"\"));\n    }\n    return div;\n}\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */ function $22c7fca7c69edc03$var$processModelParameters(xml) {\n    console.log((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n    let modelParametersDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    let xml_modelParameters = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n    let modelParameters = new (0, $9a96fbd0df1ae67b$export$77f098867dc64198)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_modelParameters));\n    $22c7fca7c69edc03$var$mesmer.setModelParameters(modelParameters);\n    $22c7fca7c69edc03$var$processGrainSize(modelParameters, xml_modelParameters, modelParametersDiv);\n    $22c7fca7c69edc03$var$processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b), modelParameters.setAutomaticallySetMaxEne, modelParameters.removeAutomaticallySetMaxEne);\n    $22c7fca7c69edc03$var$processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, (0, $9a96fbd0df1ae67b$export$aa73446724166cdb), modelParameters.setEnergyAboveTheTopHill, modelParameters.removeEnergyAboveTheTopHill);\n    $22c7fca7c69edc03$var$processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e), modelParameters.setMaxTemperature, modelParameters.removeMaxTemperature);\n    return modelParametersDiv;\n}\n/**\n * @param modelParameters The model parameters.\n * @param xml_modelParameters The XML model parameters.\n * @param modelParametersDiv The model parameters div.\n */ function $22c7fca7c69edc03$var$processGrainSize(modelParameters, xml_modelParameters, modelParametersDiv) {\n    let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$level1);\n    modelParametersDiv.appendChild(div);\n    let tagName = (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName;\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let xml = xml_modelParameters.getElementsByTagName(tagName);\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(tagName, undefined, $22c7fca7c69edc03$var$boundary1);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    div.appendChild(button);\n    let id = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + tagName + \"_input\";\n    let ids = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + tagName + \"_select\";\n    let gs;\n    let valueString;\n    if (xml.length == 1) {\n        valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml[0]));\n        let value = parseFloat(valueString);\n        gs = new (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml[0]), value);\n        button.textContent = buttonTextContentSelected;\n        $22c7fca7c69edc03$var$createInputModelParameters(modelParameters, div, gs, id, ids, valueString, modelParameters.setGrainSize, (0, $762f625c179c0279$export$692079bb871c6039).energyUnits);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    } else {\n        valueString = \"\";\n        gs = new (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d)(new Map(), NaN);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", ()=>{\n        // Check if the GrainSize already exists\n        if (!modelParameters.index.has((0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName)) {\n            $22c7fca7c69edc03$var$createInputModelParameters(modelParameters, div, gs, id, ids, valueString, modelParameters.setGrainSize, (0, $762f625c179c0279$export$692079bb871c6039).energyUnits);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            valueString = gs.value.toExponential();\n            modelParameters.removeGrainSize();\n            document.getElementById(id)?.remove();\n            document.getElementById(ids)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    });\n}\n/**\n * Process numerical modelParameters.\n * @param modelParameters The ModelParameters.\n * @param modelParametersDiv The modelParameters div.\n * @param xml_modelParameters The xml modelParameters.\n */ function $22c7fca7c69edc03$var$processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, ModelParameterType, setModelParameter, removeModelParameter) {\n    let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$level1);\n    modelParametersDiv.appendChild(div);\n    let tagName = ModelParameterType.tagName;\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let xml = xml_modelParameters.getElementsByTagName(tagName);\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(tagName, undefined, $22c7fca7c69edc03$var$boundary1);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    div.appendChild(button);\n    let id = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + tagName + \"_input\";\n    let ids = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + tagName + \"_select\";\n    let mp;\n    let valueString;\n    if (xml.length == 1) {\n        valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml[0]));\n        let value = parseFloat(valueString);\n        mp = new ModelParameterType((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml[0]), value);\n        button.textContent = buttonTextContentSelected;\n        $22c7fca7c69edc03$var$createInputModelParameters(modelParameters, div, mp, id, ids, valueString, setModelParameter, undefined);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    } else {\n        valueString = \"\";\n        mp = new ModelParameterType(new Map(), NaN);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", ()=>{\n        // Check if the ModelParameter already exists\n        if (!modelParameters.index.has(tagName)) {\n            $22c7fca7c69edc03$var$createInputModelParameters(modelParameters, div, mp, id, ids, valueString, setModelParameter, undefined);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            valueString = mp.value.toExponential();\n            removeModelParameter();\n            document.getElementById(id)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    });\n}\n/**\n * @param modelParameters The model parameters.\n * @param div The div.\n * @param element The element.\n * @param id The id.\n * @param ids The id for the units select.\n * @param valueString The value string.\n * @param setElementMethod The method to set the element.\n * @param units The units.\n */ function $22c7fca7c69edc03$var$createInputModelParameters(modelParameters, div, element, id, ids, valueString, setElementMethod, units) {\n    setElementMethod.call(modelParameters, element);\n    let input = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", id, $22c7fca7c69edc03$var$boundary1);\n    input.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(element, target);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    });\n    input.value = valueString;\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(input);\n    div.appendChild(input);\n    $22c7fca7c69edc03$var$addAnyUnits(units, element.attributes, div, ids, element.constructor.tagName, $22c7fca7c69edc03$var$boundary1);\n}\n/**\n * Parses xml to initialise controls.\n * @param xml The XML document.\n * @returns The controls div.\n * \n * Tag control options:\n * me:calculateRateCoefficientsOnly\n * me:printCellDOS\n * me:printCellTransitionStateFlux\n * me:printReactionOperatorColumnSums\n * me:printGrainBoltzmann\n * me:printGrainDOS\n * me:printGrainkbE\n * me:printGrainkfE\n * me:printTSsos\n * me:printGrainedSpeciesProfile\n * me:printGrainTransitionStateFlux\n * me:printReactionOperatorSize\n * me:printSpeciesProfile\n * me:printPhenomenologicalEvolution\n * me:printTunnelingCoefficients\n * me:printCrossingCoefficients\n * me:testDOS\n * me:testRateConstants\n * me:useTheSameCellNumberForAllConditions\n * me:hideInactive\n * me:ForceMacroDetailedBalance\n * \n * TagWithAttribute control options:\n * me:testMicroRates\n * \n * StringNode control options:\n * me:calcMethod \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\"\n * \n * NumberNode control options:\n * me:eigenvalues\n * me:shortestTimeOfInterest\n * me:MaximumEvolutionTime\n * me:automaticallySetMaxEne\n * me:diagramEnergyOffset\n */ function $22c7fca7c69edc03$var$processControl(xml) {\n    console.log((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n    // Create a div for the controls.\n    let controlsDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(undefined, $22c7fca7c69edc03$var$boundary1);\n    // Get the XML \"me:control\" element.\n    let xml_controls = xml.getElementsByTagName((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n    for(let i = 0; i < xml_controls.length; i++){\n        let xml_control = xml_controls[i];\n        // Create div to contain the control.\n        let controlID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, i.toString());\n        let controlDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(controlID, $22c7fca7c69edc03$var$boundary1);\n        let control = $22c7fca7c69edc03$var$addControl((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_control), controlDiv, null, controlsDiv, i);\n        let level = $22c7fca7c69edc03$var$level2;\n        // Create a map of the on/off control options. The keys are the tag names and the values are the buttons.\n        let onOffControls = new Map();\n        $22c7fca7c69edc03$var$getControlOptionsSimple(control).forEach((option)=>{\n            $22c7fca7c69edc03$var$handleControl(control, controlDiv, i, onOffControls, xml_control, null, option.class, option.setMethod, option.removeMethod);\n        });\n        // Create a div for the on/off controls.\n        let onOffControlsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, level);\n        let orderedOnOffControls = new Map([\n            ...onOffControls.entries()\n        ].sort());\n        orderedOnOffControls.forEach((button)=>{\n            onOffControlsDiv.appendChild(button);\n        });\n        controlDiv.appendChild(onOffControlsDiv);\n        // Controls with additional things to set.\n        $22c7fca7c69edc03$var$handleTestMicroRates(control, controlDiv, null, level);\n        $22c7fca7c69edc03$var$handleCalcMethod(control, controlDiv, i, xml_control, level);\n        $22c7fca7c69edc03$var$getControlItems(control).forEach((item)=>{\n            $22c7fca7c69edc03$var$handleControl(control, controlDiv, i, onOffControls, xml_control, level, item.class, item.setMethod, item.removeMethod, true);\n        });\n        // Add a remove control button.\n        let removeButton = $22c7fca7c69edc03$var$addRemoveButton(controlDiv, $22c7fca7c69edc03$var$level2, $22c7fca7c69edc03$var$mesmer.removeControl.bind($22c7fca7c69edc03$var$mesmer), i);\n        removeButton.addEventListener(\"click\", (event)=>{\n            // Remove the control.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(controlID, $22c7fca7c69edc03$var$ids);\n        });\n    }\n    // Create an add button to add a control.\n    $22c7fca7c69edc03$var$createAddControlButton(controlsDiv, $22c7fca7c69edc03$var$level2);\n    return controlsDiv;\n}\n/**\n * @param control The control.\n * @return An array of the on/off control options.\n */ function $22c7fca7c69edc03$var$getControlOptionsSimple(control) {\n    return [\n        {\n            class: (0, $d0ae5bc6e682c29f$export$7d9247c9879133fb),\n            setMethod: control.setCalculateRateCoefficientsOnly,\n            removeMethod: control.removeCalculateRateCoefficientsOnly\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$60b233651e162b60),\n            setMethod: control.setPrintCellDOS,\n            removeMethod: control.removePrintCellDOS\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$7e63e5104be309ff),\n            setMethod: control.setPrintCellTransitionStateFlux,\n            removeMethod: control.removePrintCellTransitionStateFlux\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$a915db169f144f37),\n            setMethod: control.setPrintReactionOperatorColumnSums,\n            removeMethod: control.removePrintReactionOperatorColumnSums\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$e7fff349901f700d),\n            setMethod: control.setPrintGrainBoltzmann,\n            removeMethod: control.removePrintGrainBoltzmann\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b),\n            setMethod: control.setPrintGrainDOS,\n            removeMethod: control.removePrintGrainDOS\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$55888ef4e813a34d),\n            setMethod: control.setPrintGrainkbE,\n            removeMethod: control.removePrintGrainkbE\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b),\n            setMethod: control.setPrintGrainkfE,\n            removeMethod: control.removePrintGrainkfE\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$3627f2b606ffd3cb),\n            setMethod: control.setPrintTSsos,\n            removeMethod: control.removePrintTSsos\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$c5481d114fddc81c),\n            setMethod: control.setPrintGrainedSpeciesProfile,\n            removeMethod: control.removePrintGrainedSpeciesProfile\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab),\n            setMethod: control.setPrintGrainTransitionStateFlux,\n            removeMethod: control.removePrintGrainTransitionStateFlux\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$8420ab6988728a65),\n            setMethod: control.setPrintReactionOperatorSize,\n            removeMethod: control.removePrintReactionOperatorSize\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1),\n            setMethod: control.setPrintSpeciesProfile,\n            removeMethod: control.removePrintSpeciesProfile\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$9f7939759d8efd9f),\n            setMethod: control.setPrintPhenomenologicalEvolution,\n            removeMethod: control.removePrintPhenomenologicalEvolution\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$fc99460819e23ac5),\n            setMethod: control.setPrintTunnelingCoefficients,\n            removeMethod: control.removePrintTunnelingCoefficients\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$2f2eaac8983031ef),\n            setMethod: control.setPrintCrossingCoefficients,\n            removeMethod: control.removePrintCrossingCoefficients\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$a3d7e677521f681f),\n            setMethod: control.setTestDOS,\n            removeMethod: control.removeTestDOS\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$980e5abe9a459423),\n            setMethod: control.setTestRateConstants,\n            removeMethod: control.removeTestRateConstants\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$5d7dbeba4bf49655),\n            setMethod: control.setUseTheSameCellNumberForAllConditions,\n            removeMethod: control.removeUseTheSameCellNumberForAllConditions\n        },\n        //{ class: HideInactive, setMethod: control.setHideInactive, removeMethod: control.removeHideInactive }\n        {\n            class: (0, $d0ae5bc6e682c29f$export$6ffea14bdffd427f),\n            setMethod: control.setForceMacroDetailedBalance,\n            removeMethod: control.removeForceMacroDetailedBalance\n        }\n    ];\n}\n/**\n * @param control The control.\n * @return An array of the control items.\n */ function $22c7fca7c69edc03$var$getControlItems(control) {\n    return [\n        {\n            class: (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7),\n            setMethod: control.setEigenvalues,\n            removeMethod: control.removeEigenvalues\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$421603058c6718db),\n            setMethod: control.setShortestTimeOfInterest,\n            removeMethod: control.removeShortestTimeOfInterest\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$b51d7314540831ed),\n            setMethod: control.setMaximumEvolutionTime,\n            removeMethod: control.removeMaximumEvolutionTime\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b),\n            setMethod: control.setAutomaticallySetMaxEne,\n            removeMethod: control.removeAutomaticallySetMaxEne\n        },\n        {\n            class: (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a),\n            setMethod: control.setDiagramEnergyOffset,\n            removeMethod: control.removeDiagramEnergyOffset\n        }\n    ];\n}\n/**\n * @param controlsDiv \n * @param level The level.\n * @returns A button.\n */ function $22c7fca7c69edc03$var$createAddControlButton(controlsDiv, level) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$s_Add_sy_add, undefined, $22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(button);\n    button.addEventListener(\"click\", (event)=>{\n        let i = $22c7fca7c69edc03$var$mesmer.getNextControlID();\n        console.log(\"Add Control \" + i.toString());\n        let controlID = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, i.toString());\n        let controlDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)(controlID, $22c7fca7c69edc03$var$boundary1);\n        // ElementToInsert before is element after the control div with the previous index.\n        let elementToInsertBefore;\n        if (i > 0) {\n            let aboveElement = document.getElementById((0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, (i - 1).toString()));\n            let nextElementSibling = aboveElement.nextElementSibling;\n            // If nextElementSibling is not a child of controlsDiv the element.\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == controlsDiv) elementToInsertBefore = nextElementSibling;\n                else elementToInsertBefore = button;\n            } else elementToInsertBefore = button;\n        } else elementToInsertBefore = button;\n        // Add the control\n        let control = $22c7fca7c69edc03$var$addControl(new Map(), controlDiv, elementToInsertBefore, controlsDiv, i);\n        // Create a map of the on/off control options. The keys are the tag names and the values are the buttons.\n        let onOffControls = new Map();\n        $22c7fca7c69edc03$var$getControlOptionsSimple(control).forEach((option)=>{\n            $22c7fca7c69edc03$var$handleControl(control, controlDiv, i, onOffControls, null, null, option.class, option.setMethod, option.removeMethod);\n        });\n        // Create a div for the on/off controls.\n        let onOffControlsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, level);\n        let orderedOnOffControls = new Map([\n            ...onOffControls.entries()\n        ].sort());\n        orderedOnOffControls.forEach((button)=>{\n            onOffControlsDiv.appendChild(button);\n        });\n        controlDiv.appendChild(onOffControlsDiv);\n        // Controls with additional things to set.\n        $22c7fca7c69edc03$var$handleTestMicroRates(control, controlDiv, null, level);\n        $22c7fca7c69edc03$var$handleCalcMethod(control, controlDiv, i, null, level);\n        $22c7fca7c69edc03$var$getControlItems(control).forEach((item)=>{\n            $22c7fca7c69edc03$var$handleControl(control, controlDiv, i, onOffControls, null, level, item.class, item.setMethod, item.removeMethod, true);\n        });\n        // Add a remove control button.\n        let removeButton = $22c7fca7c69edc03$var$addRemoveButton(controlDiv, $22c7fca7c69edc03$var$level2, $22c7fca7c69edc03$var$mesmer.removeControl.bind($22c7fca7c69edc03$var$mesmer), i);\n        removeButton.addEventListener(\"click\", (event)=>{\n            // Remove the control.\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(controlID, $22c7fca7c69edc03$var$ids);\n        });\n    });\n    return button;\n}\n/**\n * Add and return a new control.\n */ function $22c7fca7c69edc03$var$addControl(attributes, controlDiv, elementToInsertBefore, controlsDiv, i) {\n    let control = new (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976)(attributes, i);\n    $22c7fca7c69edc03$var$mesmer.addControl(control);\n    let contentDivId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, i.toString());\n    (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        divToAddTo: controlsDiv,\n        elementToInsertBefore: elementToInsertBefore,\n        content: controlDiv,\n        buttonLabel: \"Control \" + i.toString(),\n        buttonId: (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(contentDivId, $22c7fca7c69edc03$var$s_button),\n        margin: $22c7fca7c69edc03$var$level1,\n        contentDivId: contentDivId\n    });\n    return control;\n}\n/**\n * @param control The control.\n * @param div The div.\n * @param obj The object.\n * @param setControlMethod The set control method. \n * @param id The id for the input.\n * @param valueString The value string.\n */ function $22c7fca7c69edc03$var$createInputControlItem(control, div, obj, setControlMethod, id, valueString) {\n    setControlMethod.call(control, obj);\n    let input = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", id, $22c7fca7c69edc03$var$boundary1);\n    input.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(obj, target);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    });\n    input.value = valueString;\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(input);\n    div.appendChild(input);\n}\n/**\n * \n * @param control The control.\n * @param controlDiv The control div.\n * @param index The index.\n * @param onOffControls The on/off controls.\n * @param xml_control The xml control.\n * @param ControlClass The control class.\n * @param setControlMethod The set control method.\n * @param removeControlMethod The remove control method.\n */ function $22c7fca7c69edc03$var$handleControl(control, controlDiv, index, onOffControls, xml_control, level, ControlClass, setControlMethod, removeControlMethod, handleInput = false) {\n    let tagName = ControlClass.tagName;\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, undefined, $22c7fca7c69edc03$var$boundary1);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    if (onOffControls) onOffControls.set(tagName, button);\n    let controlInstance;\n    let div;\n    let id;\n    if (level) {\n        div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, level);\n        controlDiv.appendChild(div);\n        div.appendChild(button);\n        id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, tagName, $22c7fca7c69edc03$var$s_Input);\n    }\n    if (xml_control) {\n        let xml = xml_control.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            if (handleInput) {\n                let valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml[0]));\n                let value = parseFloat(valueString);\n                controlInstance = new ControlClass((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml[0]), value);\n                $22c7fca7c69edc03$var$createInputControlItem(control, div, controlInstance, setControlMethod, id, valueString);\n            } else setControlMethod.call(control, controlInstance);\n            button.textContent = buttonTextContentSelected;\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        }\n    } else {\n        controlInstance = new ControlClass(new Map());\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n    }\n    button.addEventListener(\"click\", (event)=>{\n        if (!control.index.has(tagName)) {\n            if (handleInput) $22c7fca7c69edc03$var$createInputControlItem(control, div, controlInstance, setControlMethod, id, \"\");\n            else setControlMethod.call(control, controlInstance);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            if (handleInput) (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(id);\n            removeControlMethod.call(control);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    });\n}\n/**\n * @param control The control.\n * @param controlDiv The control div.\n * @param i The index.\n * @param xml_control The xml control. \n * @param level The level.\n */ function $22c7fca7c69edc03$var$handleCalcMethod(control, controlDiv, i, xml_control, level) {\n    let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, level);\n    controlDiv.appendChild(div);\n    let tagName = (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).tagName;\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(buttonTextContentDeselected, undefined, $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    // Add the div for the CalcMethod.\n    let divCmId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, tagName, i.toString());\n    let divCm = (0, $2cda23d1e44619db$export$78253536c0178a32)(divCmId, $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(divCm);\n    let options = (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).options;\n    let divCmDetailsId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(divCmId, \"details\");\n    let divCmDetailsSelectId = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(divCmDetailsId, \"select\");\n    let cm;\n    let first = true;\n    if (xml_control) {\n        let xml = xml_control.getElementsByTagName(tagName);\n        if (xml.length > 0) {\n            if (xml.length > 1) throw new Error(\"More than one CalcMethod element.\");\n            let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml[0]);\n            let xsi_type = attributes.get(\"xsi:type\");\n            cm = $22c7fca7c69edc03$var$getCalcMethod(control, divCm, xml, options, attributes, tagName, xsi_type, divCmDetailsId, divCmDetailsSelectId);\n            control.setCalcMethod(cm);\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n            button.textContent = buttonTextContentDeselected;\n        }\n    } else {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        // Check if the CalcMethod already exists\n        if (!control.index.has(tagName)) {\n            if (first) {\n                if (options[options.length - 1] != $22c7fca7c69edc03$var$s_selectOption) options.push($22c7fca7c69edc03$var$s_selectOption);\n            }\n            // Remove select.\n            //remove(divCmId);\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(divCmDetailsId);\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(divCmDetailsSelectId);\n            // Create the select element.\n            let select = $22c7fca7c69edc03$var$createSelectElementCalcMethod(control, div, options, tagName, $22c7fca7c69edc03$var$s_selectOption, divCmDetailsId, divCmDetailsSelectId);\n            divCm.appendChild(select);\n            button.textContent = buttonTextContentSelected;\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        } else if (control.getCalcMethod() != null) {\n            control.removeCalcMethod();\n            // Remove any existing div.\n            //remove(divCmId);\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(divCmDetailsId);\n            console.log(\"remove(divCmDetailsSelectId) \" + divCmDetailsSelectId);\n            console.log(\"button.textContent \" + button.textContent);\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(divCmDetailsSelectId);\n            button.textContent = buttonTextContentDeselected;\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n        }\n    });\n}\n/**\n * Process \"me:testMicroRates\".\n * @param control The control.\n * @param controlDiv The control div.\n * @param xml_control The xml control.\n * @param level The level.\n */ function $22c7fca7c69edc03$var$handleTestMicroRates(control, controlDiv, xml_control, level) {\n    let div = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, level);\n    controlDiv.appendChild(div);\n    let tagName = (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName;\n    let buttonTextContentSelected = tagName + $22c7fca7c69edc03$var$sy_selected;\n    let buttonTextContentDeselected = tagName + $22c7fca7c69edc03$var$sy_deselected;\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(tagName, undefined, $22c7fca7c69edc03$var$boundary1);\n    button.id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + tagName;\n    div.appendChild(button);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOn);\n    button.classList.add($22c7fca7c69edc03$var$s_optionOff);\n    let idTmax = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + tagName + \"_Tmax\";\n    let idTmin = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + tagName + \"_Tmin\";\n    let idTstep = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + tagName + \"_Tstep\";\n    if (xml_control) {\n        let xml = xml_control.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            $22c7fca7c69edc03$var$createTestMicroRates(control, div, xml, idTmax, idTmin, idTstep);\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n            button.textContent = buttonTextContentDeselected;\n        }\n    } else {\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener(\"click\", (event)=>{\n        // Check if the TestMicroRates already exists\n        if (!control.index.has(tagName)) {\n            $22c7fca7c69edc03$var$createTestMicroRates(control, div, null, idTmax, idTmin, idTstep);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            control.removeTestMicroRates();\n            // Remove any existing Tmax.\n            document.getElementById(idTmax)?.remove();\n            // Remove any existing Tmin.\n            document.getElementById(idTmin)?.remove();\n            // Remove any existing Tstep.\n            document.getElementById(idTstep)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOn);\n        button.classList.toggle($22c7fca7c69edc03$var$s_optionOff);\n    });\n}\n/**\n * @param control The control.\n * @param div The div.\n * @param xml_tmr The xml.\n * @param idTmax The Tmax id.\n * @param idTmin The Tmin id.\n * @param idTstep The Tstep id.\n */ function $22c7fca7c69edc03$var$createTestMicroRates(control, div, xml_tmr, idTmax, idTmin, idTstep) {\n    let attributes;\n    let tmr;\n    if (xml_tmr != null && xml_tmr.length > 0) {\n        if (xml_tmr.length > 1) throw new Error(\"More than one TestMicroRates element.\");\n        attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tmr[0]);\n        tmr = new (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31)(attributes);\n    } else {\n        attributes = new Map();\n        attributes.set(\"Tmax\", \"\");\n        attributes.set(\"Tmin\", \"\");\n        attributes.set(\"Tstep\", \"\");\n        tmr = new (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31)(attributes);\n    }\n    control.setTestMicroRates(tmr);\n    // Tmax.\n    let tMax = tmr.getTmax();\n    let tMaxlwi = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", idTmax + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        let target = event.target;\n        // Check the value is a number.\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n            tmr.setTmax(parseFloat(target.value));\n            console.log(\"Set Tmax to \" + target.value);\n        } else {\n            alert(\"Value is not numeric, resetting...\");\n            target.value = tMax.toExponential();\n        }\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    }, tMax.toExponential(), \"Tmax\");\n    tMaxlwi.id = idTmax;\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tMaxlwi.querySelector(\"input\"));\n    div.appendChild(tMaxlwi);\n    // Tmin.\n    let tMin = tmr.getTmin();\n    let tMinlwi = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", idTmin + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        let target = event.target;\n        // Check the value is a number.\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n            tmr.setTmin(parseFloat(target.value));\n            console.log(\"Set Tmin to \" + target.value);\n        } else {\n            alert(\"Value is not numeric, resetting...\");\n            target.value = tMax.toExponential();\n        }\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    }, tMin.toExponential(), \"Tmin\");\n    tMinlwi.id = idTmin;\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tMinlwi.querySelector(\"input\"));\n    div.appendChild(tMinlwi);\n    // Tstep.\n    let tStep = tmr.getTstep();\n    let tSteplwi = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", idTstep + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        let target = event.target;\n        // Check the value is a number.\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n            tmr.setTstep(parseFloat(target.value));\n            console.log(\"Set Tstep to \" + target.value);\n        } else {\n            alert(\"Value is not numeric, resetting...\");\n            target.value = tMax.toExponential();\n        }\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    }, tStep.toExponential(), \"Tstep\");\n    tSteplwi.id = idTstep;\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tSteplwi.querySelector(\"input\"));\n    div.appendChild(tSteplwi);\n}\n/**\n * Get the CalcMethod from the XML.\n * @param control The control.\n * @param divCm The div cm.\n * @param xml The xml.\n * @param options The options.\n * @param attributes The attributes.\n * @param tagName The tag name.\n * @param xsi_type The xsi:type.\n * @param divCmDetailsId The div cm details id.\n * @param divCmDetailsSelectId The div cm details select id.\n * @returns The CalcMethod.\n */ function $22c7fca7c69edc03$var$getCalcMethod(control, divCm, xml, options, attributes, tagName, xsi_type, divCmDetailsId, divCmDetailsSelectId) {\n    let cm;\n    // Create the select element.\n    let select = $22c7fca7c69edc03$var$createSelectElementCalcMethod(control, divCm, options, tagName, xsi_type, divCmDetailsId, divCmDetailsSelectId);\n    // Set the select element to the correct value.\n    select.value = xsi_type;\n    divCm.appendChild(select);\n    // Add the details div.\n    let divCmDetails = (0, $2cda23d1e44619db$export$78253536c0178a32)(undefined, $22c7fca7c69edc03$var$boundary1);\n    divCmDetails.id = divCmDetailsId;\n    divCm.appendChild(divCmDetails);\n    if (xsi_type == (0, $d0ae5bc6e682c29f$export$afd374542f6f3da6).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$afd374542f6f3da6).xsi_type2) cm = new (0, $d0ae5bc6e682c29f$export$afd374542f6f3da6)(attributes);\n    else if (xsi_type == (0, $d0ae5bc6e682c29f$export$271191b096a55e63).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$271191b096a55e63).xsi_type2) cm = new (0, $d0ae5bc6e682c29f$export$271191b096a55e63)(attributes);\n    else if (xsi_type == (0, $d0ae5bc6e682c29f$export$654b70df01671c79).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$654b70df01671c79).xsi_type2) {\n        let cmf = new (0, $d0ae5bc6e682c29f$export$654b70df01671c79)(attributes);\n        cm = cmf;\n        // FittingIterations.\n        let fi_xml = xml[0].getElementsByTagName((0, $d0ae5bc6e682c29f$export$830a50cd13af6e84).tagName);\n        if (fi_xml.length > 0) {\n            if (fi_xml.length == 1) {\n                let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(fi_xml[0])));\n                let fittingIterations = new (0, $d0ae5bc6e682c29f$export$830a50cd13af6e84)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(fi_xml[0]), value);\n                cmf.setFittingIterations(fittingIterations);\n            } else throw new Error(\"More than one FittingIterations element.\");\n        }\n        $22c7fca7c69edc03$var$processCalcMethodFitting(divCmDetails, cmf);\n    } else if (xsi_type == (0, $d0ae5bc6e682c29f$export$7968aa666bcf62fa).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$7968aa666bcf62fa).xsi_type2) {\n        let cmm = new (0, $d0ae5bc6e682c29f$export$7968aa666bcf62fa)(attributes);\n        cm = cmm;\n        function processElement(xml, ClassConstructor, setterMethod) {\n            let tagName = (0, $d0ae5bc6e682c29f$export$9f699e98369d9591).tagName;\n            let elementXml = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(elementXml[0])));\n                    let instance = new ClassConstructor((0, $6648a11f147a5c05$export$fe94072fee8a6976)(elementXml[0]), value);\n                    setterMethod(instance);\n                } else throw new Error(`More than one ${tagName} element.`);\n            }\n        }\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$9f699e98369d9591), cmm.setMarquardtIterations.bind(cmm));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627), cmm.setMarquardtTolerance.bind(cmm));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$d3887b529debf19d), cmm.setMarquardtDerivDelta.bind(cmm));\n        $22c7fca7c69edc03$var$processCalcMethodMarquardt(divCmDetails, cmm);\n    } else if (xsi_type == (0, $d0ae5bc6e682c29f$export$fe9781900d201bdf).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$fe9781900d201bdf).xsi_type2) {\n        let cmar = new (0, $d0ae5bc6e682c29f$export$fe9781900d201bdf)(attributes);\n        cm = cmar;\n        function processElement(xml, ClassConstructor, setterMethod) {\n            let tagName = ClassConstructor.tagName;\n            let elementXml = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(elementXml[0]));\n                    if (!isNaN(parseFloat(value))) value = parseFloat(value);\n                    let instance = new ClassConstructor((0, $6648a11f147a5c05$export$fe94072fee8a6976)(elementXml[0]), value);\n                    setterMethod(instance);\n                } else throw new Error(`More than one ${tagName} element.`);\n            }\n        }\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a), cmar.setFormat.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$be201676156f3e60), cmar.setPrecision.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$19d20f3642d82681), cmar.setChebNumTemp.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$906be0805438fd80), cmar.setChebNumConc.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$6ab4fe1621c91452), cmar.setChebMaxTemp.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$e9853d49316ae9ae), cmar.setChebMinTemp.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$39eacc768d7e9bb), cmar.setChebMaxConc.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$78194e57ce26d99a), cmar.setChebMinConc.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$96094ac7e31a750e), cmar.setChebTExSize.bind(cmar));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$ae695595d3952700), cmar.setChebPExSize.bind(cmar));\n        $22c7fca7c69edc03$var$processCalcMethodAnalyticalRepresentation(divCmDetails, cmar);\n    } else if (xsi_type == (0, $d0ae5bc6e682c29f$export$16ef3f79998b60b4).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$16ef3f79998b60b4).xsi_type2) {\n        let cmtt = new (0, $d0ae5bc6e682c29f$export$16ef3f79998b60b4)(attributes);\n        cm = cmtt;\n        function processElement(xml, ClassConstructor, setterMethod) {\n            let tagName = ClassConstructor.tagName;\n            let elementXml = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(elementXml[0])));\n                    let instance = new ClassConstructor((0, $6648a11f147a5c05$export$fe94072fee8a6976)(elementXml[0]), value);\n                    setterMethod(instance);\n                } else throw new Error(`More than one ${tagName} element.`);\n            }\n        }\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$7be1a36e1f74dbc7), cmtt.setTmin.bind(cmtt));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$ac2eb7df727f506d), cmtt.setTmid.bind(cmtt));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$58c8f4b7ec654137), cmtt.setTmax.bind(cmtt));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$7b8cfe3a6a460886), cmtt.setTstep.bind(cmtt));\n        $22c7fca7c69edc03$var$processCalcMethodThermodynamicTable(divCmDetails, cmtt);\n    } else if (xsi_type == (0, $d0ae5bc6e682c29f$export$a532500cc43efbef).xsi_type || xsi_type == (0, $d0ae5bc6e682c29f$export$a532500cc43efbef).xsi_type2) {\n        let cmsa = new (0, $d0ae5bc6e682c29f$export$a532500cc43efbef)(attributes);\n        cm = cmsa;\n        function processElement(xml, ClassConstructor, setterMethod) {\n            let tagName = ClassConstructor.tagName;\n            let elementXml = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(elementXml[0]));\n                    if (!isNaN(parseFloat(value))) value = parseFloat(value);\n                    let instance = new ClassConstructor((0, $6648a11f147a5c05$export$fe94072fee8a6976)(elementXml[0]), value);\n                    setterMethod(instance);\n                } else throw new Error(`More than one ${tagName} element.`);\n            }\n        }\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$37d0520a9fac7849), cmsa.setSensitivityAnalysisSamples.bind(cmsa));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$9a832710e54827ea), cmsa.setSensitivityAnalysisOrder.bind(cmsa));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$b43b57458ce8fb96), cmsa.setSensitivityNumVarRedIters.bind(cmsa));\n        processElement(xml, (0, $d0ae5bc6e682c29f$export$e98aeac6c6b1df09), cmsa.setSensitivityVarRedMethod.bind(cmsa));\n        $22c7fca7c69edc03$var$processCalcMethodSensitivityAnalysis(divCmDetails, cmsa);\n    } else throw new Error(\"Unknown xsi:type: \" + xsi_type);\n    return cm;\n}\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodFitting.\n */ function $22c7fca7c69edc03$var$processCalcMethodFitting(divCmDetails, cm) {\n    // FittingIterations.\n    let fittingIterations = cm.getFittingIterations() || new (0, $d0ae5bc6e682c29f$export$830a50cd13af6e84)(new Map(), NaN);\n    cm.setFittingIterations(fittingIterations);\n    divCmDetails.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", divCmDetails.id + \"_FittingIterations_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        let target = event.target;\n        // Check the value is a number.\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n            fittingIterations.value = parseInt(target.value);\n            console.log(\"Set FittingIterations to \" + target.value);\n        } else {\n            alert(\"Value is not numeric, resetting...\");\n            target.value = fittingIterations.value.toString();\n        }\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    }, fittingIterations.value.toString(), (0, $d0ae5bc6e682c29f$export$830a50cd13af6e84).tagName));\n}\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodMarquardt.\n */ function $22c7fca7c69edc03$var$processCalcMethodMarquardt(divCmDetails, cm) {\n    function createLabelWithInputForObject(obj, divCmDetails, boundary, level) {\n        let id = (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(divCmDetails.id, obj.tagName, \"Input\");\n        let value = obj.value.toString();\n        let labelTextContent = obj.tagName;\n        let inputHandler = (event)=>{\n            let target = event.target;\n            // Check the value is a number.\n            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n                obj.value = parseFloat(target.value);\n                console.log(\"Set \" + obj.tagName + \" to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = obj.value.toString();\n            }\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n        };\n        divCmDetails.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, boundary, level, inputHandler, value, labelTextContent));\n    }\n    // MarquardtIterations.\n    let marquardtIterations = cm.getMarquardtIterations() || new (0, $d0ae5bc6e682c29f$export$9f699e98369d9591)(new Map(), NaN);\n    cm.setMarquardtIterations(marquardtIterations);\n    createLabelWithInputForObject(marquardtIterations, divCmDetails, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0);\n    // MarquardtTolerance.\n    let marquardtTolerance = cm.getMarquardtTolerance() || new (0, $d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627)(new Map(), NaN);\n    cm.setMarquardtTolerance(marquardtTolerance);\n    createLabelWithInputForObject(marquardtTolerance, divCmDetails, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0);\n    // MarquardtDerivDelta.\n    let marquardtDerivDelta = cm.getMarquardtDerivDelta() || new (0, $d0ae5bc6e682c29f$export$d3887b529debf19d)(new Map(), NaN);\n    cm.setMarquardtDerivDelta(marquardtDerivDelta);\n    createLabelWithInputForObject(marquardtDerivDelta, divCmDetails, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0);\n}\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodAnalyticalRepresentation.\n */ function $22c7fca7c69edc03$var$processCalcMethodAnalyticalRepresentation(divCmDetails, cm) {\n    // \"me:format\".\n    let format = cm.getFormat() || new (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a)(new Map(), (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a).options[0]);\n    // value, rateUnits, \"me:precision\"\n    function processSelectElement(ClassConstructor, getter, setter, tagName, options) {\n        let element = getter() || new ClassConstructor(new Map(), options[0]);\n        setter(element);\n        let lwsElement = (0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)(tagName, options, tagName, element.value, divCmDetails.id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$boundary1);\n        lwsElement.querySelector(\"select\")?.addEventListener(\"change\", (event)=>{\n            let target = event.target;\n            element.value = target.value;\n            console.log(`Set ${tagName} to ` + target.value);\n            (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n        });\n        divCmDetails.appendChild(lwsElement);\n    }\n    processSelectElement((0, $d0ae5bc6e682c29f$export$93514d28bd18d75a), cm.getFormat.bind(cm), cm.setFormat.bind(cm), (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a).tagName, (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a).options);\n    processSelectElement((0, $d0ae5bc6e682c29f$export$93514d28bd18d75a), ()=>format.getRateUnits(), format.setRateUnits.bind(format), (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a).rateUnits, (0, $d0ae5bc6e682c29f$export$93514d28bd18d75a).rateUnitsOptions);\n    processSelectElement((0, $d0ae5bc6e682c29f$export$be201676156f3e60), cm.getPrecision.bind(cm), cm.setPrecision.bind(cm), (0, $d0ae5bc6e682c29f$export$be201676156f3e60).tagName, (0, $762f625c179c0279$export$692079bb871c6039).precisionOptions);\n    // \"me:chebNumTemp\".\n    let chebNumTemp = cm.getChebNumTemp() || new (0, $d0ae5bc6e682c29f$export$19d20f3642d82681)(new Map(), NaN);\n    cm.setChebNumTemp(chebNumTemp);\n    divCmDetails.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", divCmDetails.id + \"_ChebNumTemp_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        let target = event.target;\n        // Check the value is a number.\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n            chebNumTemp.value = parseFloat(target.value);\n            console.log(\"Set ChebNumTemp to \" + target.value);\n        } else {\n            alert(\"Value is not numeric, resetting...\");\n            target.value = NaN.toString();\n        }\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n    }, chebNumTemp.value.toString(), (0, $d0ae5bc6e682c29f$export$19d20f3642d82681).tagName));\n    // \"me:chebNumConc\", \"me:chebMaxTemp\", \"me:chebMaxTemp\", \"me:chebMinTemp\", \"me:chebMaxConc\", \"me:chebMinConc\",\n    // \"me:chebTExSize\", \"me:chebPExSize\".\n    function processElement(ClassConstructor, getter, setter, tagName) {\n        let element = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", divCmDetails.id + `_${tagName}_input`, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            let target = event.target;\n            // Check the value is a number.\n            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n                element.value = parseFloat(target.value);\n                console.log(`Set ${tagName} to ` + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = NaN.toString();\n            }\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n        }, element.value.toString(), tagName));\n    }\n    processElement((0, $d0ae5bc6e682c29f$export$906be0805438fd80), cm.getChebNumConc.bind(cm), cm.setChebNumConc.bind(cm), (0, $d0ae5bc6e682c29f$export$906be0805438fd80).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$6ab4fe1621c91452), cm.getChebMaxTemp.bind(cm), cm.setChebMaxTemp.bind(cm), (0, $d0ae5bc6e682c29f$export$6ab4fe1621c91452).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$e9853d49316ae9ae), cm.getChebMinTemp.bind(cm), cm.setChebMinTemp.bind(cm), (0, $d0ae5bc6e682c29f$export$e9853d49316ae9ae).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$39eacc768d7e9bb), cm.getChebMaxConc.bind(cm), cm.setChebMaxConc.bind(cm), (0, $d0ae5bc6e682c29f$export$39eacc768d7e9bb).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$78194e57ce26d99a), cm.getChebMinConc.bind(cm), cm.setChebMinConc.bind(cm), (0, $d0ae5bc6e682c29f$export$78194e57ce26d99a).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$96094ac7e31a750e), cm.getChebTExSize.bind(cm), cm.setChebTExSize.bind(cm), (0, $d0ae5bc6e682c29f$export$96094ac7e31a750e).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$ae695595d3952700), cm.getChebPExSize.bind(cm), cm.setChebPExSize.bind(cm), (0, $d0ae5bc6e682c29f$export$ae695595d3952700).tagName);\n}\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodThermodynamicTable.\n */ function $22c7fca7c69edc03$var$processCalcMethodThermodynamicTable(divCmDetails, cm) {\n    // \"me:Tmin\", \"me:Tmid\", \"me:Tmax, \"me:Tstep\".\n    function processElement(ClassConstructor, getter, setter, tagName) {\n        let element = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", divCmDetails.id + `_${tagName}_input`, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            let target = event.target;\n            // Check the value is a number.\n            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n                element.value = parseFloat(target.value);\n                console.log(`Set ${tagName} to ` + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = NaN.toString();\n            }\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n        }, element.value.toString(), tagName));\n    }\n    processElement((0, $d0ae5bc6e682c29f$export$7be1a36e1f74dbc7), cm.getTmin.bind(cm), cm.setTmin.bind(cm), (0, $d0ae5bc6e682c29f$export$7be1a36e1f74dbc7).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$ac2eb7df727f506d), cm.getTmid.bind(cm), cm.setTmid.bind(cm), (0, $d0ae5bc6e682c29f$export$ac2eb7df727f506d).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$58c8f4b7ec654137), cm.getTmax.bind(cm), cm.setTmax.bind(cm), (0, $d0ae5bc6e682c29f$export$58c8f4b7ec654137).tagName);\n    processElement((0, $d0ae5bc6e682c29f$export$7b8cfe3a6a460886), cm.getTstep.bind(cm), cm.setTstep.bind(cm), (0, $d0ae5bc6e682c29f$export$7b8cfe3a6a460886).tagName);\n}\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodSensitivityAnalysis.\n */ function $22c7fca7c69edc03$var$processCalcMethodSensitivityAnalysis(divCmDetails, cm) {\n    // \"me:sensitivityAnalysisSamples\", \"me:sensitivityAnalysisOrder\", \"me:sensitivityNumVarRedIters\".\n    function processNumberElement(ClassConstructor, getter, setter, tagName) {\n        let element = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild((0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(divCmDetails.id, tagName, $22c7fca7c69edc03$var$s_Input), $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            let target = event.target;\n            // Check the value is a number.\n            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(target.value)) {\n                element.value = parseFloat(target.value);\n                console.log(`Set ${tagName} to ` + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = NaN.toString();\n            }\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(target);\n        }, element.value.toString(), tagName));\n    }\n    processNumberElement((0, $d0ae5bc6e682c29f$export$37d0520a9fac7849), cm.getSensitivityAnalysisSamples.bind(cm), cm.setSensitivityAnalysisSamples.bind(cm), (0, $d0ae5bc6e682c29f$export$37d0520a9fac7849).tagName);\n    processNumberElement((0, $d0ae5bc6e682c29f$export$9a832710e54827ea), cm.getSensitivityAnalysisOrder.bind(cm), cm.setSensitivityAnalysisOrder.bind(cm), (0, $d0ae5bc6e682c29f$export$9a832710e54827ea).tagName);\n    processNumberElement((0, $d0ae5bc6e682c29f$export$b43b57458ce8fb96), cm.getSensitivityNumVarRedIters.bind(cm), cm.setSensitivityNumVarRedIters.bind(cm), (0, $d0ae5bc6e682c29f$export$b43b57458ce8fb96).tagName);\n    // \"me:sensitivityVarRedMethod\".\n    let sensitivityVarRedMethod = cm.getSensitivityVarRedMethod() || new (0, $d0ae5bc6e682c29f$export$e98aeac6c6b1df09)(new Map(), \"\");\n    cm.setSensitivityVarRedMethod(sensitivityVarRedMethod);\n    let tagName = (0, $d0ae5bc6e682c29f$export$e98aeac6c6b1df09).tagName;\n    divCmDetails.appendChild((0, $2cda23d1e44619db$export$4c3eba01cd3c5ba4)(tagName, (0, $d0ae5bc6e682c29f$export$e98aeac6c6b1df09).options, tagName, (0, $d0ae5bc6e682c29f$export$e98aeac6c6b1df09).options[0], (0, $dcf293d9ee452407$export$3205c97bcf96f7dc)(divCmDetails.id, tagName, \"select\"), $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$boundary1));\n    // Add event listener for the select element.\n    let select = divCmDetails.querySelector(\"select\");\n    select?.addEventListener(\"change\", (event)=>{\n        let target = event.target;\n        sensitivityVarRedMethod.value = target.value;\n        console.log(tagName + \" set to \" + target.value);\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n}\n/**\n * @param options The options.\n * @param select The select element.\n */ function $22c7fca7c69edc03$var$selectAnotherOptionEventListener(options, select) {\n    select.addEventListener(\"click\", (event)=>{\n        if (options[options.length - 1] == $22c7fca7c69edc03$var$s_selectOption) options.pop();\n        let lastIndex = select.options.length - 1;\n        if (select.options[lastIndex].value == $22c7fca7c69edc03$var$s_selectOption) select.remove(lastIndex);\n    });\n}\n/**\n * @param control The control.\n * @param div The div. \n * @param options The options.\n * @param tagName The tag name.\n * @param value The value.\n * @param id The id for the HTMLSelectElement.\n * @returns An HTMLSelectElement.\n */ function $22c7fca7c69edc03$var$createSelectElementCalcMethod(control, div, options, tagName, value, divCmDetailsId, divCmDetailsSelectId) {\n    let select = (0, $2cda23d1e44619db$export$b89bf4b169286865)(options, tagName, value, divCmDetailsSelectId, $22c7fca7c69edc03$var$boundary1);\n    div.appendChild(select);\n    $22c7fca7c69edc03$var$selectAnotherOptionEventListener(options, select);\n    select.addEventListener(\"change\", (event)=>{\n        // Remove any existing div.\n        let divCmDetails = document.getElementById(divCmDetailsId);\n        if (divCmDetails != null) divCmDetails.remove();\n        divCmDetails = (0, $2cda23d1e44619db$export$78253536c0178a32)(divCmDetailsId, $22c7fca7c69edc03$var$boundary1);\n        div.appendChild(divCmDetails);\n        let target = event.target;\n        let value = target.value;\n        let attributes = new Map();\n        attributes.set(\"xsi:type\", value);\n        if (value == (0, $d0ae5bc6e682c29f$export$afd374542f6f3da6).xsi_type || value == (0, $d0ae5bc6e682c29f$export$afd374542f6f3da6).xsi_type2) // \"me:simpleCalc\", \"simpleCalc\".\n        control.setCalcMethod(new (0, $d0ae5bc6e682c29f$export$afd374542f6f3da6)(attributes));\n        else if (value == (0, $d0ae5bc6e682c29f$export$271191b096a55e63).xsi_type || value == (0, $d0ae5bc6e682c29f$export$271191b096a55e63).xsi_type2) // \"me:gridSearch\", \"gridSearch\".\n        control.setCalcMethod(new (0, $d0ae5bc6e682c29f$export$271191b096a55e63)(attributes));\n        else if (value == (0, $d0ae5bc6e682c29f$export$654b70df01671c79).xsi_type || value == (0, $d0ae5bc6e682c29f$export$654b70df01671c79).xsi_type2) {\n            let cm = new (0, $d0ae5bc6e682c29f$export$654b70df01671c79)(attributes);\n            control.setCalcMethod(cm);\n            $22c7fca7c69edc03$var$processCalcMethodFitting(divCmDetails, cm);\n        } else if (value == (0, $d0ae5bc6e682c29f$export$7968aa666bcf62fa).xsi_type || value == (0, $d0ae5bc6e682c29f$export$7968aa666bcf62fa).xsi_type2) {\n            // \"me:marquardt\", \"marquardt\".\n            let cm = new (0, $d0ae5bc6e682c29f$export$7968aa666bcf62fa)(attributes);\n            control.setCalcMethod(cm);\n            $22c7fca7c69edc03$var$processCalcMethodMarquardt(divCmDetails, cm);\n        } else if (value == (0, $d0ae5bc6e682c29f$export$fe9781900d201bdf).xsi_type || value == (0, $d0ae5bc6e682c29f$export$fe9781900d201bdf).xsi_type2) {\n            // \"me:analyticalRepresentation\", \"analyticalRepresentation\".\n            let cm = new (0, $d0ae5bc6e682c29f$export$fe9781900d201bdf)(attributes);\n            control.setCalcMethod(cm);\n            $22c7fca7c69edc03$var$processCalcMethodAnalyticalRepresentation(divCmDetails, cm);\n        } else if (value == (0, $d0ae5bc6e682c29f$export$16ef3f79998b60b4).xsi_type || value == (0, $d0ae5bc6e682c29f$export$16ef3f79998b60b4).xsi_type2) {\n            // \"me:ThermodynamicTable\", \"ThermodynamicTable\".\n            let cm = new (0, $d0ae5bc6e682c29f$export$16ef3f79998b60b4)(attributes);\n            control.setCalcMethod(cm);\n            $22c7fca7c69edc03$var$processCalcMethodThermodynamicTable(divCmDetails, cm);\n        } else if (value == (0, $d0ae5bc6e682c29f$export$a532500cc43efbef).xsi_type || value == (0, $d0ae5bc6e682c29f$export$a532500cc43efbef).xsi_type2) {\n            // \"me:sensitivityAnalysis\", \"sensitivityAnalysis\".\n            let cm = new (0, $d0ae5bc6e682c29f$export$a532500cc43efbef)(new Map());\n            control.setCalcMethod(cm);\n            $22c7fca7c69edc03$var$processCalcMethodSensitivityAnalysis(divCmDetails, cm);\n        } else throw new Error(\"Unknown CalcMethod type.\");\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(target);\n    });\n    return select;\n}\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */ function $22c7fca7c69edc03$var$drawReactionDiagram(canvas, dark, font, lw, lwc) {\n    console.log(\"drawReactionDiagram\");\n    if (canvas != null) {\n        // Set foreground and background colors.\n        let foreground;\n        let background;\n        let blue;\n        let orange;\n        if (dark) {\n            foreground = \"lightgrey\";\n            background = \"darkgrey\";\n            blue = \"lightblue\";\n            orange = \"orange\";\n        } else {\n            foreground = \"darkgrey\";\n            background = \"lightgrey\";\n            blue = \"blue\";\n            orange = \"darkorange\";\n        }\n        let green = \"green\";\n        let red = \"red\";\n        const ctx = canvas.getContext(\"2d\");\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas.\n        //ctx.fillStyle = background;\n        // Make font bold.\n        ctx.font = \"bold \" + font;\n        // Get text height for font size.\n        let th = (0, $d2b4a77a4d44562c$export$c398604a09be5382)(ctx, \"Aj\", ctx.font);\n        //console.log(\"th=\" + th);\n        // Go through reactions:\n        // 1. Create sets of reactants, end products, intermediate products and transition states.\n        // 2. Create maps of orders and energies.\n        // 3. Calculate maximum energy.\n        let reactants = [];\n        let products = new Set();\n        let intProducts = new Set();\n        let transitionStates = new Set();\n        let orders = new Map();\n        let energies = new Map();\n        let i = 0;\n        let energyMin = Number.MAX_VALUE;\n        let energyMax = Number.MIN_VALUE;\n        $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n            // Get TransitionStates.\n            let reactionTransitionStates = reaction.getTransitionStates();\n            //console.log(\"reactant=\" + reactant);\n            let reactantsLabel = reaction.getReactantsLabel();\n            if (reactantsLabel != undefined) {\n                reactants.push(reactantsLabel);\n                if (products.has(reactantsLabel)) intProducts.add(reactantsLabel);\n                let energy = reaction.getReactantsEnergy($22c7fca7c69edc03$var$molecules);\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(reactantsLabel, energy);\n                if (!orders.has(reactantsLabel)) {\n                    orders.set(reactantsLabel, i);\n                    i++;\n                }\n            }\n            let productsLabel = reaction.getProductsLabel();\n            if (productsLabel != undefined) {\n                products.add(productsLabel);\n                let energy = reaction.getProductsEnergy($22c7fca7c69edc03$var$molecules);\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(productsLabel, energy);\n                if (orders.has(productsLabel)) {\n                    i--;\n                    let j = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(orders, productsLabel);\n                    // Move product to end and shift everything back.\n                    orders.forEach(function(value, key) {\n                        if (value > j) orders.set(key, value - 1);\n                    });\n                    // Insert transition states.\n                    if (reactionTransitionStates != undefined) {\n                        reactionTransitionStates.forEach(function(ts) {\n                            let ref = ts.getMolecule().ref;\n                            transitionStates.add(ref);\n                            orders.set(ref, i);\n                            energy = $22c7fca7c69edc03$var$molecules.get(ref)?.getEnergy() ?? 0;\n                            energyMin = Math.min(energyMin, energy);\n                            energyMax = Math.max(energyMax, energy);\n                            energies.set(ref, energy);\n                            i++;\n                        });\n                        orders.set(productsLabel, i);\n                        i++;\n                    }\n                } else {\n                    if (reactionTransitionStates != undefined) reactionTransitionStates.forEach(function(ts) {\n                        let ref = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = $22c7fca7c69edc03$var$molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                    orders.set(productsLabel, i);\n                    i++;\n                }\n            }\n        });\n        //console.log(\"orders=\" + mapToString(orders));\n        //console.log(\"energies=\" + mapToString(energies));\n        //console.log(\"energyMax=\" + energyMax);\n        //console.log(\"energyMin=\" + energyMin);\n        let energyRange = energyMax - energyMin;\n        //console.log(\"energyRange=\" + energyRange);\n        //console.log(\"reactants=\" + reactants);\n        //console.log(\"products=\" + products);\n        //console.log(\"transitionStates=\" + transitionStates);\n        // Create a lookup from order to label.\n        let reorders = [];\n        orders.forEach(function(value, key) {\n            reorders[value] = key;\n        });\n        //console.log(\"reorders=\" + arrayToString(reorders));\n        // Iterate through the reorders:\n        // 1. Capture coordinates for connecting lines.\n        // 2. Store maximum x.\n        let x0 = 0;\n        let y0;\n        let x1;\n        let y1;\n        let xmax = 0;\n        let tw;\n        let textSpacing = 5; // Spacing between end of line and start of text.\n        let stepSpacing = 10; // Spacing between steps.\n        let reactantsInXY = new Map();\n        let reactantsOutXY = new Map();\n        let productsInXY = new Map();\n        let productsOutXY = new Map();\n        let transitionStatesInXY = new Map();\n        let transitionStatesOutXY = new Map();\n        reorders.forEach(function(value) {\n            //console.log(\"value=\" + value + \".\");\n            //console.log(\"energies=\" + mapToString(energies));\n            let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n            let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, $22c7fca7c69edc03$var$rdCanvasHeight, energy);\n            // Get text width.\n            tw = Math.max((0, $d2b4a77a4d44562c$export$37827d046293d309)(ctx, energy.toString(), font), (0, $d2b4a77a4d44562c$export$37827d046293d309)(ctx, value, font));\n            x1 = x0 + tw + textSpacing;\n            y0 = energyRescaled + lw;\n            y1 = y0;\n            // Draw horizontal line and add label.\n            // (The drawing is now not done here but done later so labels are on top of lines, but\n            // the code is left here commented out for code comprehension.)\n            //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n            reactantsInXY.set(value, [\n                x0,\n                y0\n            ]);\n            reactantsOutXY.set(value, [\n                x1,\n                y1\n            ]);\n            if (products.has(value)) {\n                productsInXY.set(value, [\n                    x0,\n                    y0\n                ]);\n                productsOutXY.set(value, [\n                    x1,\n                    y1\n                ]);\n            }\n            if (transitionStates.has(value)) {\n                transitionStatesInXY.set(value, [\n                    x0,\n                    y0\n                ]);\n                transitionStatesOutXY.set(value, [\n                    x1,\n                    y1\n                ]);\n            }\n            x0 = x1 + stepSpacing;\n            xmax = x1;\n        });\n        // Set canvas width to maximum x.\n        canvas.width = xmax;\n        //console.log(\"canvas.width=\" + canvas.width);\n        // Set canvas height to maximum energy plus the label.\n        let canvasHeightWithBorder = $22c7fca7c69edc03$var$rdCanvasHeight + 4 * th + 2 * lw;\n        //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n        let originalCanvasHeight = $22c7fca7c69edc03$var$rdCanvasHeight;\n        // Update the canvas height.\n        canvas.height = canvasHeightWithBorder;\n        // Set the transformation matrix.\n        //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n        ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder);\n        // Go through reactions and draw connecting lines.\n        $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n            //console.log(\"id=\" + id);\n            //console.log(\"reaction=\" + reaction);\n            // Get TransitionState if there is one.\n            let reactionTransitionStates = reaction.getTransitionStates();\n            //console.log(\"reactant=\" + reactant);\n            let reactantsLabel = reaction.getReactantsLabel();\n            let productsLabel = reaction.getProductsLabel();\n            let reactantOutXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsOutXY, reactantsLabel);\n            let productInXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsInXY, productsLabel);\n            if (reactionTransitionStates.length > 0) reactionTransitionStates.forEach(function(ts) {\n                let transitionStateLabel = ts.getMolecule().ref;\n                let transitionStateInXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesInXY, transitionStateLabel);\n                (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, foreground, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0], transitionStateInXY[1]);\n                let transitionStateOutXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesOutXY, transitionStateLabel);\n                (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, foreground, lwc, transitionStateOutXY[0], transitionStateOutXY[1], productInXY[0], productInXY[1]);\n            });\n            else (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, foreground, lwc, reactantOutXY[0], reactantOutXY[1], productInXY[0], productInXY[1]);\n        });\n        // Draw horizontal lines and labels.\n        // (This is done last so that the labels are on top of the vertical lines.)\n        reactants.forEach(function(value) {\n            let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n            let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n            let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsInXY, value)[0];\n            let y = energyRescaled + lw;\n            let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsOutXY, value)[0];\n            let energyString = energy.toString();\n            (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n        products.forEach(function(value) {\n            let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n            let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n            let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsInXY, value)[0];\n            let y = energyRescaled + lw;\n            let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsOutXY, value)[0];\n            let energyString = energy.toString();\n            if (intProducts.has(value)) (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n            else (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n        transitionStates.forEach(function(value) {\n            let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n            let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n            let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesInXY, value)[0];\n            let y = energyRescaled + lw;\n            let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesOutXY, value)[0];\n            let energyString = energy.toString();\n            (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n    }\n}\n/**\n * Save to XML file.\n */ function $22c7fca7c69edc03$var$saveXML() {\n    if ($22c7fca7c69edc03$var$mesmer == null) {\n        alert(\"No Mesmer object to save.\");\n        return;\n    } else {\n        console.log(\"saveXML\");\n        const pad = \"  \";\n        // Create a Blob object from the data\n        let blob = new Blob([\n            (0, $762f625c179c0279$export$692079bb871c6039).header,\n            $22c7fca7c69edc03$var$mesmer.toXML(pad, \"\")\n        ], {\n            type: \"text/plain\"\n        });\n        // Create a new object URL for the blob\n        let url = URL.createObjectURL(blob);\n        // Create a new 'a' element\n        let a = document.createElement(\"a\");\n        // Set the href and download attributes for the 'a' element\n        a.href = url;\n        let title = $22c7fca7c69edc03$var$mesmer.getTitle()?.value;\n        a.download = title.replace(/[^a-z0-9]/gi, \"_\") + \".xml\";\n        // Append the 'a' element to the body and click it to start the download\n        document.body.appendChild(a);\n        a.click();\n        // Remove the 'a' element after the download starts\n        document.body.removeChild(a);\n    }\n}\n\n\n//# sourceMappingURL=index.c1c93bbb.js.map\n","\n//import { openDB } from 'idb';\n\nimport { get, getID, isNumeric, mapToString, rescale } from './util.js';\n\nimport {\n    getFirstElement, getFirstChildNode, getNodeValue, getInputString, getAttributes, getSingularElement,\n    NumberArrayNode, NumberNode\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property, AtomArray, BondArray,\n    PropertyList, PropertyScalar, PropertyArray, ExtraDOSCMethod, BondRef, HinderedRotorPotential,\n    PotentialPoint, Periodicity, ReservoirSize, ZPE, RotConsts, VibFreqs, PropertyMatrix\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, ReactionMolecule, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, Tunneling, TInfinity, ExcessReactantConc\n} from './reaction.js';\n\nimport { arrayToString, toNumberArray } from './util.js';\n\nimport {\n    createLabelWithInput, getCollapsibleDiv, resizeInputElement, createSelectElement,\n    resizeSelectElement, createFlexDiv, createButton, remove, createLabel, createInput, createLabelWithSelect,\n    createDiv\n} from './html.js';\n\nimport { drawLevel, drawLine, getTextHeight, getTextWidth } from './canvas.js';\n\nimport {\n    BathGas, Conditions, ExperimentalRate, ExperimentalEigenvalue, PTpair, PTs, ExperimentalYield\n} from './conditions.js';\n\nimport { EnergyAboveTheTopHill, GrainSize, MaxTemperature, ModelParameters } from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset, Eigenvalues, HideInactive, TestDOS, PrintSpeciesProfile,\n    TestMicroRates, TestRateConstant, PrintGrainDOS, PrintCellDOS, PrintReactionOperatorColumnSums,\n    PrintTunnelingCoefficients, PrintGrainkfE, PrintGrainBoltzmann, PrintGrainkbE, CalculateRateCoefficientsOnly,\n    PrintCellTransitionStateFlux, PrintTSsos, PrintGrainedSpeciesProfile, PrintGrainTransitionStateFlux,\n    PrintReactionOperatorSize, PrintPhenomenologicalEvolution, PrintCrossingCoefficients,\n    UseTheSameCellNumberForAllConditions, ForceMacroDetailedBalance, CalcMethod, ShortestTimeOfInterest,\n    MaximumEvolutionTime, AutomaticallySetMaxEne, CalcMethodMarquardt, MarquardtIterations, MarquardtTolerance,\n    MarquardtDerivDelta, CalcMethodAnalyticalRepresentation, Format, Precision, ChebNumTemp, ChebNumConc,\n    ChebMaxTemp, ChebMinTemp, ChebMaxConc, ChebMinConc, ChebTExSize, ChebPExSize, CalcMethodThermodynamicTable,\n    Tmin, Tmid, Tstep, Tmax, CalcMethodSimpleCalc, CalcMethodGridSearch, CalcMethodFitting, FittingIterations,\n    CalcMethodSensitivityAnalysis, SensitivityAnalysisSamples, SensitivityAnalysisOrder, SensitivityNumVarRedIters,\n    SensitivityVarRedMethod\n} from './control.js';\n\nimport { Mesmer, MoleculeList, ReactionList, Title } from './mesmer.js';\n\n//import * as $3Dmol from '$3Dmol'; // Add import statement for $3Dmol library\n\n/**\n * MXG.\n */\nlet mxg_url: string = \"https://github.com/agdturner/mxg-pwa\";\nlet mxg_a = document.createElement('a');\nmxg_a.href = mxg_url;\nmxg_a.textContent = mxg_url;\n\n/**\n * Example data.\n */\nlet mxgDataExamples_url: string = \"https://github.com/agdturner/mxg-pwa/tree/main/data/examples\";\nlet mxgDataExamples_a = document.createElement('a');\nmxgDataExamples_a.href = mxgDataExamples_url;\nmxgDataExamples_a.textContent = mxgDataExamples_url;\n\n/**\n * MESMER.\n */\nlet mesmer_url: string = \"https://sourceforge.net/projects/mesmer/\";\nlet memser_a = document.createElement('a');\nmemser_a.href = mesmer_url;\nmemser_a.textContent = mesmer_url;\n\n/**\n * 3DMol.\n */\nlet t3Dmol_url: string = \"https://github.com/3dmol/3Dmol.js\";\nlet t3Dmol_a = document.createElement('a');\nt3Dmol_a.href = t3Dmol_url;\nt3Dmol_a.textContent = t3Dmol_url;\n\n/**\n * The font sizes for different levels of the GUI.\n */\nlet fontSize: string = \"1.0em\";\n\n/**\n * Margins for spacing GUI components.\n */\nlet margin0: string = \"0px\";\nlet margin1: string = \"1px\";\nlet margin2: string = \"2px\";\nlet margin3: string = \"3px\";\nlet margin5: string = \"5px\";\nlet margin25: string = \"25px\";\nlet margin50: string = \"50px\";\nlet margin75: string = \"75px\";\nlet margin100: string = \"100px\";\nlet margin125: string = \"125px\";\nlet level0 = { marginLeft: margin0, marginTop: margin1, marginBottom: margin1, marginRight: margin0 };\nlet level1 = { marginLeft: margin25, marginTop: margin1, marginBottom: margin1, marginRight: margin0 };\nlet level2 = { marginLeft: margin50, marginTop: margin1, marginBottom: margin1, marginRight: margin0 };\nlet level3 = { marginLeft: margin75, marginTop: margin1, marginBottom: margin1, marginRight: margin0 };\nlet level4 = { marginLeft: margin100, marginTop: margin1, marginBottom: margin1, marginRight: margin0 };\nlet level5 = { marginLeft: margin125, marginTop: margin1, marginBottom: margin1, marginRight: margin0 };\nlet boundary1 = { marginLeft: margin1, marginTop: margin1, marginBottom: margin1, marginRight: margin1 };\n\n/**\n * Symbology for the GUI.\n */\n// Symbols.\nlet sy_downTriangle: string = \"\\u25BC\"; // ▼\nlet sy_upTriangle: string = \"\\u25B2\"; // ▲\nlet sy_edit: string = \"\\u270E\"; // ✎\nlet sy_add: string = \"\\uFF0B\"; // ＋\nlet sy_remove: string = \"\\u2715\"; // ✕\nlet sy_refresh: string = \"\\u27F3\"; // ⟳\nlet sy_selected: string = \" \\u2713\"; // ✓\nlet sy_deselected: string = \" \\u2717\"; // ✗\n\n// Strings.\nlet s_Add_sy_add: string = \"Add \" + sy_add;\nlet s_Add_from_spreadsheet: string = \"Add from spreadsheet \" + sy_add;\nlet s_button: string = \"button\";\nlet s_Input: string = \"Input\";\nlet s_optionOn = 'optionOn';\nlet s_optionOff = 'optionOff';\nlet s_Refresh_sy_refresh: string = \"Refresh \" + sy_refresh;\nlet s_Remove_sy_remove: string = \"Remove \" + sy_remove;\nlet s_Rename: string = \"Rename\";\nlet s_Select: string = \"Select\";\nlet s_selectOption: string = \"Select an option (use keys to cycle through options)...\";\n\n// HTML IDs\nlet menuDivId = 'menu';\nlet titleDivId = 'title';\nlet moleculesDivId = 'molecules';\nlet reactionsDivId = 'reactions';\nlet conditionsDivId = 'conditions';\nlet modelParametersDivId = 'modelParameters';\nlet controlDivId = 'control';\nlet xmlDivId = 'xml';\n\n// For dark/light mode.\nlet dark: boolean;\n\n/*\nconst db = await openDB('my-db', 1, {\n    upgrade(db) {\n        db.createObjectStore('keyval');\n    },\n});\n\nlet darkModePreference = await db.get('keyval', 'darkMode');\ndark = (darkModePreference === 'true');\nconsole.log(\"dark=\" + dark);\n*/\n\n/**\n * For mesmer.\n */\nlet mesmer: Mesmer;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule>;\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction>;\n\n/**\n * The Mesmer ids.\n */\nlet ids: Set<string> = new Set();\n\n/**\n * Add an id to the set of ids.\n * @param parts The parts of the id.\n */\nfunction addID(...parts: string[]): string {\n    let validID: string = getID(...parts);\n    if (ids.has(validID)) {\n        throw new Error(validID + \" already exists!\");\n    }\n    ids.add(validID);\n    return validID;\n}\n\n// IDs for the reactions diagram.\nlet rdDivId: string = addID(\"reactionsDiagram\");\nlet rdCanvasId: string = addID(\"reactionsDiagramCanvas\");\n//let rd_canvas_width: number = 800;\nlet rdCanvasHeight: number = 400;\nlet rd_lw: number = 4;\nlet rd_lwc: number = 2;\nlet rd_font: string = \"1em SensSerif\";\nlet popWindow: Window | null;\n\n/**\n * Once the DOM is loaded, add a load button.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    // Update the page styles based on the user's preference.\n    document.body.className = dark ? 'dark-mode' : 'light-mode';\n\n    /* It is not allowed to use localStorage with a Service Worker!\n    let darkModePreference = localStorage.getItem('darkMode');\n    dark = (darkModePreference === 'true');\n    console.log(\"dark=\" + dark);\n    */\n\n    // Update the page styles based on the user's preference.\n    document.body.className = dark ? 'dark-mode' : 'light-mode';\n\n    // Create a menu for the GUI.\n    let menuDiv: HTMLDivElement = document.getElementById(menuDivId) as HTMLDivElement;\n    menuDiv.style.display = 'flex';\n    menuDiv.style.justifyContent = 'center';\n    menuDiv.style.margin = '5px';\n    menuDiv.style.padding = '5px';\n    menuDiv.style.border = '1px solid black';\n    menuDiv.style.backgroundColor = 'lightgrey';\n\n    // Create Load button.\n    let s_Load: string = 'Load';\n    let loadButton = createButton(s_Load, getID(s_Load), boundary1);\n    loadButton.addEventListener('click', (event: MouseEvent) => {\n        load();\n        loadButton.textContent = s_Load;\n    });\n    menuDiv.appendChild(loadButton);\n    // Create style/theme option buttons.\n    // Create button to increase the font size.\n    let s_Increase_fontsize: string = 'Increase fontsize';\n    let increaseFontSizeButton = createButton(s_Increase_fontsize, getID(s_Increase_fontsize), boundary1);\n    increaseFontSizeButton.addEventListener('click', () => {\n        let fontSize = parseFloat(getComputedStyle(document.body).fontSize);\n        document.body.style.fontSize = (fontSize + 1) + 'px';\n        if (popWindow != null) {\n            //let fontSize = parseFloat(getComputedStyle(popWindow.document.body).fontSize);\n            popWindow.document.body.style.fontSize = (fontSize + 1) + 'px';\n        }\n        redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(increaseFontSizeButton);\n    // Create button to increase the font size.\n    let s_Decrease_fontsize: string = 'Decrease fontsize';\n    let decreaseFontSizeButton = createButton(s_Decrease_fontsize, getID(s_Decrease_fontsize), boundary1);\n    decreaseFontSizeButton.addEventListener('click', () => {\n        let fontSize = parseFloat(getComputedStyle(document.body).fontSize);\n        document.body.style.fontSize = (fontSize - 1) + 'px';\n        if (popWindow != null) {\n            //let fontSize = parseFloat(getComputedStyle(popWindow.document.body).fontSize);\n            popWindow.document.body.style.fontSize = (fontSize - 1) + 'px';\n        }\n        redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(decreaseFontSizeButton);\n    // Create a light/dark mode button.\n    let s_Light_Dark_Mode = 'Light/Dark Mode';\n    let lightDarkModeButton = createButton(s_Light_Dark_Mode, getID(s_Light_Dark_Mode), boundary1);\n    lightDarkModeButton.addEventListener('click', () => {\n        dark = !dark;\n        //localStorage.setItem('darkMode', dark ? 'true' : 'false');\n        if (dark) {\n            document.body.className = 'dark-mode';\n        } else {\n            document.body.className = 'light-mode';\n        }\n        redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(lightDarkModeButton);\n    // Create Save button.\n    let s_Save: string = 'Save';\n    let saveButton = createButton(s_Save, getID(s_Save), boundary1);\n    saveButton.addEventListener('click', saveXML);\n    menuDiv.appendChild(saveButton);\n\n    let welcomeDiv: HTMLDivElement = createDiv(getID(\"Welcome\"), boundary1);\n    // Create text for welcome.\n    let p1 = document.createElement('p');\n    welcomeDiv.appendChild(p1);\n    p1.textContent = 'Welcome to MXG - a Graphical User Interface (GUI) program to assist MEMSER users in creating, editing \\\n        and visualising MESMER data. MESMER is the Master Equation Solver for Multi Energy-well Reactions, details can be found \\\n        at: ';\n    p1.appendChild(memser_a);\n    p1.style.alignContent = 'center';\n    let p2 = document.createElement('p');\n    welcomeDiv.appendChild(p2);\n    p2.textContent = 'MXG development is funded by the UK Engineering and Physical Sciences Research Council (EPSRC) from January \\\n    to April 2024.';\n    let p3 = document.createElement('p');\n    welcomeDiv.appendChild(p3);\n    p3.textContent = 'The menu Load button is to be used to select a MESMER file to load (the file loaded will not be modified). \\\n        MXG reads the file and presents the data it contains so that the user can make changes and use the Save button to generate \\\n        a new MESMER file. The saved file should have the same content as was loaded except it will contain no comments or blank \\\n        lines, values will be trimmed of white space, and some numbers may be output in a standard scientific notation if they were \\\n        not already. The saved file will also reflect any changes specified using the GUI.';\n    let p4 = document.createElement('p');\n    welcomeDiv.appendChild(p4);\n    p4.textContent = 'Between the Load and Save buttons are buttons to increase or decrease the font size. In addition to changing the \\\n        text size of any text components, this will also redraw the reaction diagram so that the text rendered onto the canvas reflects \\\n        this change. It is planned to have themes selectable to provide a dark mode rendering and to support users that struggle to \\\n        distinguish between certain colours.';\n    let p5 = document.createElement('p');\n    p5.textContent += 'The development is in an alpha release phase and is not recommended for general use. A community release that \\\n        is to be supported by the MESMER community is scheduled for the end of April 2024. MXG is free and open source software based on \\\n        free and open source software. The main development GitHub repository is: ';\n    p5.appendChild(mxg_a);\n    welcomeDiv.appendChild(p5);\n    let p6 = document.createElement('p');\n    welcomeDiv.appendChild(p6);\n    p6.textContent = 'MXG can be used online or installed locally as a Progressive Web App (PWA). A PWA is a type of application \\\n        software that should work on platforms with a standard-compliant Web browser. PWA installation varies by Web browser/device. \\\n        Some details to help with installation of the MXG PWA are in the GitHub Repository README.';\n    let p7 = document.createElement('p');\n    welcomeDiv.appendChild(p7);\n    p7.textContent = 'The MESMER file loaded is expected to contain the following child elements of the parent \"me:mesmer\" \\\n        element: \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\". If a \\\n        child element is missing or there are multiple \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", or \\\n        \"me:modelParameters\" elements, an Error is currently thrown. In the future, the loading and creation of files with \\\n        multiple \"me:conditions\" sections will be supported... If you do not have a MESMER file, then feel free to download and \\\n        use the examples: ';\n    p7.appendChild(mxgDataExamples_a);\n    document.body.appendChild(welcomeDiv);\n    // Create div for instructions.\n    let instructionsDiv: HTMLDivElement = createDiv(getID(\"Instructions\"), boundary1);\n    document.body.appendChild(instructionsDiv);\n    let p8 = document.createElement('p');\n    instructionsDiv.appendChild(p8);\n    p8.textContent = 'Upon loading a MESMER file, an input containing the \"me:title\" value should appear along side a label. \\\n        The value can be changed using the input. The \"me:title\" value is used to compose the filename for data saved using \\\n        the Save button. Characters that are unsuitable for filenames will be replaced with the underscore character \"_\" in \\\n        the filename.';\n    let p9 = document.createElement('p');\n    instructionsDiv.appendChild(p9);\n    p9.textContent = 'The \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\" details \\\n        are presented below the \"me:title\" in a series of buttons. A canvas depicts a well diagram for the reactions. The \\\n        diagram redraws if an \"me:ZPE\" property value of a molecule a listed reaction are changed. Below all this is a text \\\n        representation of the file loaded.';\n    let p10 = document.createElement('p');\n    instructionsDiv.appendChild(p10);\n    p10.textContent = 'The \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\" buttons contain \\\n        a triangular symbol which indicate a collapsed (triangle orientated with a point down: ▼) or expanded (triangle with a point \\\n        up: ▲) state. Actioning these buttons will either expand or collapse content that should appear or be present below the button.';\n    let p11 = document.createElement('p');\n    instructionsDiv.appendChild(p11);\n    p10.textContent = 'Rendering of molecules with coordinates is provded by 3DMol.js which incorporates code from GLmol, \\\n        Three.js, and jQuery and is licensed under a BSD-3-Clause license. For more details on 3DMol.js please visit the GitHub \\\n        repository: ';\n    p10.appendChild(t3Dmol_a);\n});\n\n/**\n *  Redraw the reactions diagram.\n */\nfunction redrawReactionsDiagram() {\n    if (popWindow == null) {\n        let rdCanvas: HTMLCanvasElement = document.getElementById(rdCanvasId) as HTMLCanvasElement;\n        drawReactionDiagram(rdCanvas, dark, rd_font, rd_lw, rd_lwc);\n    } else {\n        let c: HTMLCanvasElement = popWindow.document.getElementById(rdCanvasId) as HTMLCanvasElement;\n        drawReactionDiagram(c, dark, rd_font, rd_lw, rd_lwc);\n    }\n}\n\n/**\n * Prompts the user for a MESMER XML file, initiates the parsing of the chosen file, and \n * creates a save button for saving a new XML file.\n */\nfunction load() {\n    // Before loading a new file, remove any existing content.\n    ids.forEach((id) => {\n        remove(id, ids);\n    });\n    if (molecules != null) {\n        molecules.clear();\n    }\n    if (reactions != null) {\n        reactions.clear();\n    }\n    maxMoleculeEnergy = -Infinity;\n    minMoleculeEnergy = Infinity;\n    // Create a file input element to prompt the user to select a file.\n    let input: HTMLInputElement = document.createElement('input');\n    input.type = 'file';\n    input.onchange = function () {\n        if (input.files) {\n            for (let i = 0; i < input.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + input.files[i]);\n            }\n            let file: File | null = input.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            let inputFilename: string = file.name;\n            let reader = new FileReader();\n            let chunkSize = 1024 * 1024; // 1MB\n            let start = 0;\n            let contents = '';\n            reader.onload = function (e) {\n                if (e.target == null) {\n                    throw new Error('Event target is null');\n                }\n                contents += (e.target as FileReader).result as string;\n                if (file != null) {\n                    if (start < file.size) {\n                        // Read the next chunk\n                        let blob = file.slice(start, start + chunkSize);\n                        reader.readAsText(blob);\n                        start += chunkSize;\n                    } else {\n                        // All chunks have been read\n                        contents = contents.trim();\n                        displayXML(inputFilename, contents);\n                        let parser = new DOMParser();\n                        let xml = parser.parseFromString(contents, \"text/xml\");\n                        parse(xml);\n                        /*\n                        // Sending to the server for validation is no longer implemented as there is currently no server.\n                        // Send XML to the server\n                        fetch('http://localhost:1234/', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'text/xml',\n                            },\n                            body: contents,\n                        })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error(`HTTP error! status: ${response.status}`);\n                                }\n                                return response.text();\n                            })\n                            .then(data => {\n                                console.log('Server response:', data);\n                            })\n                            .catch(error => {\n                                console.error('There was a problem with the fetch operation:', error);\n                            });\n                        */\n                    }\n                }\n            };\n            // Read the first chunk\n            let blob = file.slice(start, start + chunkSize);\n            reader.readAsText(blob);\n            start += chunkSize;\n        }\n    };\n    input.click();\n}\n\n/**\n * Parse an XMLDocument and create the mesmer object.\n * @param xml The XML.\n */\nfunction parse(xml: XMLDocument) {\n    console.log(\"parse: \" + xml);\n\n    // Process the XML.\n    let xml_mesmer: Element = getSingularElement(xml, Mesmer.tagName);\n    mesmer = new Mesmer(getAttributes(xml_mesmer));\n\n    // Title.\n    let xml_title: HTMLCollectionOf<Element> = xml.getElementsByTagName(Title.tagName) as HTMLCollectionOf<Element>;\n    if (xml_title.length != 1) {\n        throw new Error('Multiple ' + Title.tagName + ' tags found');\n    } else {\n        let title: string = (xml_title[0].childNodes[0].nodeValue as string).trim();\n        let titleNode: Title = new Title(getAttributes(xml_title[0]), title);\n        mesmer.setTitle(titleNode);\n        let titleDiv: HTMLDivElement = document.getElementById(titleDivId) as HTMLDivElement;\n        let lwiId: string = addID('titleDiv');\n        // Create input element.\n        let lwi: HTMLDivElement = createLabelWithInput(\"text\", addID(lwiId, \"Input\"), boundary1, level0,\n            (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                titleNode.value = target.value;\n                console.log(titleNode.tagName + \" changed to \" + titleNode.value);\n                resizeInputElement(target);\n            }, title, Title.tagName);\n        lwi.id = lwiId;\n        titleDiv.appendChild(lwi);\n    }\n\n    // Molecules.\n    let moleculesDiv: HTMLDivElement = document.getElementById(moleculesDivId) as HTMLDivElement;\n    let moleculesListDivId = addID('moleculesList');\n    // If the moleculesListDiv already exists, remove it.\n    remove(moleculesListDivId, ids);\n    let moleculeListDiv: HTMLDivElement = processMoleculeList(xml);\n    moleculeListDiv.id = moleculesListDivId;\n    getCollapsibleDiv({\n        divToAddTo: moleculesDiv,\n        elementToInsertBefore: null,\n        content: moleculeListDiv,\n        buttonLabel: \"Molecules\",\n        buttonId: getID(moleculeListDiv.id, s_button),\n        margin: level0,\n        contentDivId: moleculeListDiv.id\n    });\n    //mesmer.setMoleculeList(new MoleculeList(getAttributes(moleculeListDiv), Array.from(molecules.values())));\n    mesmer.setMoleculeList(new MoleculeList(new Map(), Array.from(molecules.values())));\n\n    // Reactions.\n    let reactionsDiv: HTMLDivElement = document.getElementById(reactionsDivId) as HTMLDivElement;\n    let reactionsListDivId: string = addID('reactionsList');\n    // If the reactionsListDiv already exists, remove it.\n    remove(reactionsListDivId, ids);\n    let reactionsListDiv: HTMLDivElement = processReactionList(xml);\n    reactionsListDiv.id = reactionsListDivId;\n    getCollapsibleDiv({\n        divToAddTo: reactionsDiv,\n        elementToInsertBefore: null,\n        content: reactionsListDiv,\n        buttonLabel: \"Reactions\",\n        buttonId: getID(reactionsListDiv.id, s_button),\n        margin: level0,\n        contentDivId: reactionsListDiv.id\n    });\n    //mesmer.setReactionList(new ReactionList(getAttributes(reactionsDiv), Array.from(reactions.values())));\n    mesmer.setReactionList(new ReactionList(new Map(), Array.from(reactions.values())));\n\n    // Add the reactions diagram canvas.\n    // Destroy any existing reactions diagram.\n    // Check for popWindow.\n    if (popWindow != null) {\n        popWindow.close();\n        popWindow = null;\n    }\n    // If rdDiv already exists, remove it.\n    remove(rdDivId);\n    // Create a new rdDiv and append it.\n    let rdDiv: HTMLDivElement = createDiv(rdDivId, level0);\n    reactionsDiv.append(rdDiv);\n    // Create a pop diagram button in its own div.\n    let popButtonDivId = addID('popButtonDivId');\n    //remove(popButtonDivId);\n    let popButtonDiv = createDiv(popButtonDivId);\n    rdDiv.appendChild(popButtonDiv);\n    let popButtonID = addID(\"popButtonId\");\n    // If the popButton already exists, remove it.\n    //remove(popButtonID);\n    let popOutText: string = \"Reactions Diagram: Action to pop into a new Window\";\n    let popButton: HTMLButtonElement = createButton(popOutText, popButtonID);\n    popButtonDiv.appendChild(popButton);\n    // If the canvas already exists, remove it.\n    //remove(rdCanvasId);\n    let rdCanvas: HTMLCanvasElement = document.createElement('canvas');\n    rdCanvas.id = rdCanvasId;\n    rdDiv.appendChild(rdCanvas);\n    //rd_canvas.width = rd_canvas_width;\n    rdCanvas.height = rdCanvasHeight;\n    rdCanvas.style.border = \"1px solid black\";\n    //rdCanvas.style.margin = \"1px\";\n    drawReactionDiagram(rdCanvas, dark, rd_font, rd_lw, rd_lwc);\n    // Add action listener to the pop diagram button.\n    popButton.addEventListener('click', () => {\n        if (popWindow == null) {\n            let popWindowRDCanvas: HTMLCanvasElement = document.createElement('canvas');\n            popWindowRDCanvas.id = rdCanvasId;\n            popWindow = window.open(\"\", \"Reactions Diagram\", \"width=\" + rdCanvas.width + \", height=\" + rdCanvas.height) as Window;\n            popWindow.document.body.appendChild(popWindowRDCanvas);\n            drawReactionDiagram(popWindowRDCanvas, dark, rd_font, rd_lw, rd_lwc);\n            remove(rdCanvasId, ids);\n            popButton.textContent = \"Reactions Diagram: Action to pop back\";\n        } else {\n            rdCanvas = document.createElement('canvas');\n            rdCanvas.id = rdCanvasId;\n            rdDiv.appendChild(rdCanvas);\n            drawReactionDiagram(rdCanvas, dark, rd_font, rd_lw, rd_lwc);\n            popWindow.close();\n            popWindow = null;\n            popButton.textContent = popOutText;\n        }\n    });\n    // Add a save button to save the canvas as an image.\n    let saveButtonID = addID('saveButton');\n    // If the saveButton already exists, remove it.\n    //remove(saveButtonID);\n    let saveButton: HTMLButtonElement = createButton(\"Save To PNG Image File\", saveButtonID, boundary1);\n    popButtonDiv.appendChild(saveButton);\n    saveButton.addEventListener('click', () => {\n        let dataURL = rdCanvas.toDataURL();\n        let a = document.createElement('a');\n        a.href = dataURL;\n        let title: string = mesmer.getTitle()?.value as string;\n        a.download = title.replace(/[^a-z0-9]/gi, '_') + \"_ReactionDiagram.png\";\n        a.click();\n    });\n\n    // Conditions.\n    let conditionsDiv: HTMLDivElement = document.getElementById(conditionsDivId) as HTMLDivElement;\n    let conditionssDivId: string = addID(conditionsDivId, 'conditionss');\n    // If the conditionssDiv already exists, remove it.\n    remove(conditionssDivId);\n    let conditionssDiv: HTMLDivElement = processConditions(xml);\n    conditionssDiv.id = conditionssDivId;\n    getCollapsibleDiv({\n        divToAddTo: conditionsDiv,\n        elementToInsertBefore: null,\n        content: conditionssDiv,\n        buttonLabel: \"Conditions\",\n        buttonId: getID(conditionssDiv.id, s_button),\n        margin: level0,\n        contentDivId: conditionssDiv.id\n    });\n\n    // Model Parameters.\n    let modelParametersDiv: HTMLDivElement = document.getElementById(modelParametersDivId) as HTMLDivElement;\n    let modelParametersListDivId: string = addID('modelParametersList');\n    // If the modelParametersListDiv already exists, remove it.\n    remove(modelParametersListDivId);\n    let modelParametersListDiv: HTMLDivElement = processModelParameters(xml);\n    modelParametersListDiv.id = 'modelParametersList';\n    getCollapsibleDiv({\n        divToAddTo: modelParametersDiv,\n        elementToInsertBefore: null,\n        content: modelParametersListDiv,\n        buttonLabel: \"Model Parameters\",\n        buttonId: getID(modelParametersListDiv.id, s_button),\n        margin: level0,\n        contentDivId: modelParametersListDiv.id\n    });\n\n    // Control.\n    let controlDiv: HTMLDivElement = document.getElementById(controlDivId) as HTMLDivElement;\n    let controlsDivId: string = addID(controlDivId, 'controls');\n    // If the controlsDiv already exists, remove it.\n    remove(controlsDivId);\n    let controlsDiv: HTMLDivElement = processControl(xml);\n    controlsDiv.id = controlsDivId;\n    getCollapsibleDiv({\n        divToAddTo: controlDiv,\n        elementToInsertBefore: null,\n        content: controlsDiv,\n        buttonLabel: \"Controls\",\n        buttonId: getID(controlsDiv.id, s_button),\n        margin: level0,\n        contentDivId: controlsDiv.id\n    });\n}\n\n/**\n * Parse XML and create HTMLDivElement for molecules.\n * @param xml The XML.\n * @returns The HTMLDivElement.\n */\nfunction processMoleculeList(xml: XMLDocument): HTMLDivElement {\n    // Initialise molecules.\n    molecules = new Map();\n    // Create div to contain the molecules list.\n    let moleculeListDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"moleculeList\" element.\n    let xml_moleculeList: Element = getSingularElement(xml, MoleculeList.tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(Molecule.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"molecule\" elements.\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName(Molecule.tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        let moleculeDiv: HTMLDivElement = document.createElement(\"div\");\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n        // Get the molecule id.\n        let moleculeId: string | undefined = attributes.get(Molecule.s_id);\n        if (moleculeId == undefined) {\n            throw new Error(Molecule.s_id + ' is undefined');\n        }\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n\n        // Create molecule.\n        let molecule = new Molecule(attributes, moleculeId);\n        molecules.set(moleculeId, molecule);\n        // Atoms should be aware of any bonds they have so that if an atom is removed, then so are all bonds to the atom!\n\n\n\n        // Init atoms.\n        let atomArray: AtomArray = new AtomArray(new Map()); // This will be replaced if there is an AtomArray.\n\n        // There can be an individual atom not in an atom array, or an atom array.\n        let xml_atomArrays: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(AtomArray.tagName);\n        if (xml_atomArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + AtomArray.tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        }\n        // Create a new collapsible div for the AtomArray.\n        let atomArrayDiv: HTMLDivElement = getCollapsibleContentDiv(moleculeId, moleculeDiv, null, AtomArray.tagName, AtomArray.tagName,\n            level2);\n        //let atomArrayDiv: HTMLDivElement = createAtomArrayDiv(moleculeId, moleculeDiv, boundary1, level2);\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms: HTMLCollectionOf<Element> = xml_atomArray.getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length < 2) {\n                throw new Error(\"Expecting 2 or more atoms in \" + AtomArray.tagName + \", but finding \" + xml_atoms.length + \"!\");\n            }\n            atomArray = new AtomArray(getAttributes(xml_atomArray));\n            molecule.setAtoms(atomArray);\n            for (let j = 0; j < xml_atoms.length; j++) {\n                // Create a new Atom.\n                let atom: Atom = new Atom(getAttributes(xml_atoms[j]), molecule);\n                let atomId: string = atomArray.addAtom(atom);\n                //console.log(\"atomId=\" + atomId);\n                // Add the atomDiv to the atomArrayDiv.\n                let atomDiv: HTMLDivElement = createFlexDiv(undefined, level3);\n                atomArrayDiv.appendChild(atomDiv);\n                let inputId: string = getID(moleculeId, atomId);\n                atomDiv.appendChild(createLabel(atomId, boundary1));\n                // elementType.\n                processElementType(inputId, atom, atomDiv, false, boundary1);\n                // coordinates.\n                processCoordinates(inputId, atom, atomDiv, boundary1);\n                addRemoveButton(atomDiv, boundary1, removeAtom, molecule, atomId);\n            }\n            moleculeTagNames.delete(AtomArray.tagName);\n        } else {\n            let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length == 1) {\n                atomArray = new AtomArray(new Map());\n                atomArray.addAtom(new Atom(getAttributes(xml_atoms[0]), molecule));\n                molecule.setAtoms(atomArray);\n            } else if (xml_atoms.length > 1) {\n                throw new Error(\"Expecting 1 \" + Atom.tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + AtomArray.tagName + \"?\");\n            }\n        }\n        atomArrayDiv.appendChild(getAddAtomButton(molecule, atomArrayDiv, Atom.tagName, boundary1, level3));\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete(Atom.tagName);\n\n        // Init bondsNode.\n        let bondArray: BondArray = new BondArray(new Map()); // This will be replaced if there is an BondArray.=\n        // Function to be used to remove a bond.\n        let removeBond = (id: string) => molecule.getBonds().removeBond(id);\n        // There can be an individual bond not in a bond array, or a bond array.\n        // There may be only 1 bond in a BondArray.\n        let xml_bondArrays: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(BondArray.tagName);\n        // Create a new collapsible div for the BondArray.\n        let bondArrayDiv: HTMLDivElement = getCollapsibleContentDiv(moleculeId, moleculeDiv, null, BondArray.tagName, BondArray.tagName,\n            level2);\n        if (xml_bondArrays.length > 0) {\n            if (xml_bondArrays.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + BondArray.tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n            }\n            let xml_bonds: HTMLCollectionOf<Element> = xml_bondArrays[0].getElementsByTagName(Bond.tagName);\n            bondArray = new BondArray(getAttributes(xml_bondArrays[0]));\n            for (let j = 0; j < xml_bonds.length; j++) {\n                // Create a new Bond.\n                let bond: Bond = new Bond(getAttributes(xml_bonds[j]), molecule);\n                let bondId: string = bondArray.addBond(bond);\n                // Add the bondDiv to the bondArrayDiv.\n                let bondDiv: HTMLDivElement = createFlexDiv(undefined, level3);\n                bondArrayDiv.appendChild(bondDiv);\n                let inputId: string = getID(moleculeId, bondId);\n                bondDiv.appendChild(createLabel(bondId, boundary1));\n                // atomRefs2.\n                processAtomRefs2(molecule, bondDiv, bond, inputId, boundary1);\n                // order.\n                processOrder(bondDiv, bond, inputId, Bond.s_order, boundary1);\n                addRemoveButton(bondDiv, boundary1, removeBond, bondId);\n            }\n            molecule.setBonds(bondArray);\n            moleculeTagNames.delete(BondArray.tagName);\n        } else {\n            let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Bond.tagName);\n            if (xml_bonds.length > 0) {\n                if (xml_bonds.length > 1) {\n                    throw new Error(\"Expecting 1 \" + Bond.tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + BondArray.tagName + \"?\");\n                }\n                bondArray = new BondArray(new Map());\n                bondArray.addBond(new Bond(getAttributes(xml_bonds[0]), molecule));\n                molecule.setBonds(bondArray);\n            }\n        }\n        bondArrayDiv.appendChild(getAddBondButton(molecule, moleculeId, bondArrayDiv, Bond.tagName, boundary1, level3));\n        moleculeTagNames.delete(Bond.tagName);\n\n\n        create3DViewer(molecule, moleculeDiv, boundary1, level2);\n\n\n\n        // Organise PropertyList or individual Property.\n        // (There can be an individual property not in a propertyList?)\n        // If there is a PropertyList, then create a property list.\n        let xml_PLs: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(PropertyList.tagName);\n        if (xml_PLs.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_PLs.length + \"!\");\n        }\n        if (xml_PLs.length == 1) {\n            // Create a new collapsible div for the PropertyList.\n            let plDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let contentDivId: string = getID(molecule.id, PropertyList.tagName);\n            getCollapsibleDiv({\n                divToAddTo: moleculeDiv,\n                elementToInsertBefore: null,\n                content: plDiv,\n                buttonLabel: PropertyList.tagName,\n                buttonId: getID(molecule.id, s_button),\n                margin: level2,\n                contentDivId: contentDivId\n            });\n            // Create a new PropertyList.\n            let pl: PropertyList = new PropertyList(getAttributes(xml_PLs[0]));\n            molecule.setProperties(pl);\n            let xml_Ps: HTMLCollectionOf<Element> = xml_PLs[0].getElementsByTagName(Property.tagName);\n            for (let j = 0; j < xml_Ps.length; j++) {\n                // Create a new Property.\n                let p: Property = createProperty(xml_Ps[j], plDiv, molecule, boundary1, level3);\n                pl.setProperty(p);\n            }\n            moleculeTagNames.delete(PropertyList.tagName);\n        } else {\n            // If there is a Property on its own, then create a property on its own.\n            let xml_Ps: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Property.tagName);\n            if (xml_Ps.length != 1) {\n                throw new Error(\"Expecting 1 \" + Property.tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + PropertyList.tagName + \"?\");\n            }\n            // Create a new Property.\n            let p: Property = createProperty(xml_Ps[0], moleculeDiv, molecule, boundary1, level2);\n            molecule.setProperties(p);\n            moleculeTagNames.delete(Property.tagName);\n        }\n        // Organise EnergyTransferModel.\n        let xml_ETMs: HTMLCollectionOf<Element> | null = xml_molecules[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (xml_ETMs.length > 0) {\n            if (xml_ETMs.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + EnergyTransferModel.tagName + \" but finding \" + xml_ETMs.length + \"!\");\n            }\n            let etm = new EnergyTransferModel(getAttributes(xml_ETMs[0]));\n            processEnergyTransferModel(etm, molecule, xml_ETMs[0], moleculeDiv, margin75);\n            moleculeTagNames.delete(EnergyTransferModel.tagName);\n        }\n        // Organise DOSCMethod.\n        let xml_DOSCMethod: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(DOSCMethod.tagName);\n        if (xml_DOSCMethod.length > 0) {\n            if (xml_DOSCMethod.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + DOSCMethod.tagName + \" but finding \" + xml_DOSCMethod.length + \"!\");\n            }\n            let dOSCMethod = new DOSCMethod(getAttributes(xml_DOSCMethod[0]));\n            moleculeDiv.appendChild(\n                createLabelWithSelect(DOSCMethod.tagName, DOSCMethod.xsi_typeOptions, DOSCMethod.tagName,\n                    dOSCMethod.getXsiType(), molecule.id, boundary1, level2));\n            moleculeTagNames.delete(DOSCMethod.tagName);\n        }\n        // Organise ExtraDOSCMethod.\n        let xml_ExtraDOSCMethod = xml_molecules[i].getElementsByTagName(ExtraDOSCMethod.tagName);\n        if (xml_ExtraDOSCMethod.length > 0) {\n            if (xml_ExtraDOSCMethod.length != 1) {\n                throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + xml_ExtraDOSCMethod.length);\n            }\n            let extraDOSCMethod: ExtraDOSCMethod = new ExtraDOSCMethod(getAttributes(xml_DOSCMethod[0]));\n            // Create a new collapsible div for the ExtraDOSCMethod.\n            let extraDOSCMethodDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let contentDivId: string = getID(molecule.id, ExtraDOSCMethod.tagName);\n            getCollapsibleDiv({\n                divToAddTo: moleculeDiv,\n                elementToInsertBefore: null,\n                content: extraDOSCMethodDiv,\n                buttonLabel: ExtraDOSCMethod.tagName,\n                buttonId: getID(contentDivId, s_button),\n                margin: level2,\n                contentDivId: contentDivId\n            });\n            // Read bondRef.\n            let xml_bondRefs: HTMLCollectionOf<Element> = xml_ExtraDOSCMethod[0].getElementsByTagName(BondRef.tagName);\n            if (xml_bondRefs.length > 0) {\n                if (xml_bondRefs.length != 1) {\n                    throw new Error(\"Expecting only 1 bondRef, but there are \" + xml_bondRefs.length);\n                }\n                let bondIds: string[] = (molecule.getBonds() as BondArray).getBondIds();\n                let bondRef: BondRef = new BondRef(getAttributes(xml_bondRefs[0]), getNodeValue(getFirstChildNode(xml_bondRefs[0])));\n                extraDOSCMethodDiv.appendChild(createLabelWithSelect(BondRef.tagName, bondIds, BondRef.tagName,\n                    bondRef.value, molecule.id, boundary1, level3));\n            }\n            // Read hinderedRotorPotential.\n            let xml_hinderedRotorPotentials: HTMLCollectionOf<Element> = xml_ExtraDOSCMethod[0].getElementsByTagName(HinderedRotorPotential.tagName);\n            if (xml_hinderedRotorPotentials.length > 0) {\n                if (xml_hinderedRotorPotentials.length != 1) {\n                    throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + xml_hinderedRotorPotentials.length);\n                }\n                let hinderedRotorPotentialAttributes: Map<string, string> = getAttributes(xml_hinderedRotorPotentials[0]);\n                let hinderedRotorPotential: HinderedRotorPotential = new HinderedRotorPotential(hinderedRotorPotentialAttributes);\n                // Create a new collapsible div for the HinderedRotorPotential.\n                let hinderedRotorPotentialDiv: HTMLDivElement = createFlexDiv(undefined, level4);\n                let contentDivId: string = getID(molecule.id, DOSCMethod.tagName, HinderedRotorPotential.tagName);\n                getCollapsibleDiv({\n                    divToAddTo: extraDOSCMethodDiv,\n                    elementToInsertBefore: null,\n                    content: hinderedRotorPotentialDiv,\n                    buttonLabel: HinderedRotorPotential.tagName,\n                    buttonId: getID(contentDivId, s_button),\n                    margin: level3,\n                    contentDivId: contentDivId\n                });\n                // Format.\n                hinderedRotorPotentialDiv.appendChild(createLabelWithSelect(HinderedRotorPotential.s_format,\n                    HinderedRotorPotential.formats, HinderedRotorPotential.tagName, hinderedRotorPotential.getFormat(),\n                    contentDivId, boundary1, boundary1));\n                // Units.\n                addAnyUnits(Mesmer.energyUnits, hinderedRotorPotentialAttributes, hinderedRotorPotentialDiv,\n                    contentDivId, HinderedRotorPotential.tagName, boundary1);\n                // ExpansionSize.\n                hinderedRotorPotentialDiv.appendChild(createLabelWithInput(\"number\",\n                    contentDivId + \"_\" + HinderedRotorPotential.s_expansionSize, boundary1, boundary1, (event: Event) => {\n                        let target = event.target as HTMLInputElement;\n                        // Check the input is a number.\n                        if (isNumeric(target.value)) {\n                            hinderedRotorPotential.setExpansionSize(parseInt(target.value));\n                        } else {\n                            // Reset the input to the current value.\n                            alert(HinderedRotorPotential.s_expansionSize + \" input is not a number, resetting...\");\n                            target.value = hinderedRotorPotential.getExpansionSize().toExponential();\n                        }\n                        resizeInputElement(target);\n                    }, hinderedRotorPotential.getExpansionSize().toExponential(), HinderedRotorPotential.s_expansionSize));\n\n                // Add useSineTerms.\n                let useSineTermsLabel: HTMLLabelElement = createLabel(HinderedRotorPotential.s_useSineTerms, boundary1);\n                hinderedRotorPotentialDiv.appendChild(useSineTermsLabel);\n                let useSineTermsInputId: string = getID(molecule.id, DOSCMethod.tagName, HinderedRotorPotential.tagName, HinderedRotorPotential.s_useSineTerms);\n                let useSineTermsInput: HTMLInputElement = createInput(\"checkbox\", useSineTermsInputId, boundary1);\n                useSineTermsInput.checked = hinderedRotorPotential.getUseSineTerms();\n                useSineTermsInput.addEventListener('change', (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    hinderedRotorPotential.setUseSineTerms(target.checked);\n                });\n                hinderedRotorPotentialDiv.appendChild(useSineTermsInput);\n                // Load PotentialPoints.\n                // Create a new collapsible div for the potential points.\n                let potentialPointsDiv: HTMLDivElement = document.createElement(\"div\");\n                let potentialPointContentDivId: string = getID(molecule.id, DOSCMethod.tagName, HinderedRotorPotential.tagName, PotentialPoint.tagName);\n                let potentialPointCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                    divToAddTo: hinderedRotorPotentialDiv,\n                    elementToInsertBefore: null,\n                    content: potentialPointsDiv,\n                    buttonLabel: PotentialPoint.tagName,\n                    buttonId: getID(potentialPointContentDivId, s_button),\n                    margin: level4,\n                    contentDivId: potentialPointContentDivId\n                });\n                hinderedRotorPotentialDiv.appendChild(potentialPointCollapsibleDiv);\n                let potentialPoints: PotentialPoint[] = [];\n                let xml_potentialPoints: HTMLCollectionOf<Element> = xml_hinderedRotorPotentials[0].getElementsByTagName(PotentialPoint.tagName);\n                for (let k = 0; k < xml_potentialPoints.length; k++) {\n                    let potentialPoint: PotentialPoint = new PotentialPoint(getAttributes(xml_potentialPoints[k]));\n                    potentialPoints.push(potentialPoint);\n                    let potentialPointDiv: HTMLDivElement = createFlexDiv(undefined, level5);\n                    potentialPointCollapsibleDiv.appendChild(potentialPointDiv);\n                    // Process angle\n                    let angleLabel: HTMLLabelElement = createLabel(PotentialPoint.s_angle, boundary1);\n                    potentialPointDiv.appendChild(angleLabel);\n                    let angleInputElementId: string = getID(molecule.id, PotentialPoint.tagName, PotentialPoint.s_angle);\n                    let angleInputElement: HTMLInputElement = createInput(\"number\", angleInputElementId, boundary1);\n                    angleInputElement.addEventListener('change', (event: Event) => {\n                        let target = event.target as HTMLInputElement;\n                        // Check the input is a number.\n                        if (isNumeric(target.value)) {\n                            let value: number = parseFloat(target.value);\n                            potentialPoint.setAngle(value);\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Angle input is not a number, resetting...\");\n                            angleInputElement.value = potentialPoint.getAngle().toExponential();\n                        }\n                        resizeInputElement(angleInputElement);\n                    });\n                    angleInputElement.value = potentialPoint.getAngle().toExponential();\n                    resizeInputElement(angleInputElement);\n                    potentialPointDiv.appendChild(angleInputElement);\n                    // Create a new div element for the potential.\n                    let potentialLabel: HTMLLabelElement = createLabel(PotentialPoint.s_potential, boundary1);\n                    potentialPointDiv.appendChild(potentialLabel);\n                    let potentialInputElementId = getID(molecule.id, PotentialPoint.tagName, PotentialPoint.s_potential);\n                    let potentialInputElement: HTMLInputElement = createInput(\"number\", potentialInputElementId, boundary1);\n                    potentialInputElement.addEventListener('change', (event: Event) => {\n                        let target = event.target as HTMLInputElement;\n                        // Check the input is a number.\n                        if (isNumeric(target.value)) {\n                            let value: number = parseFloat(target.value);\n                            potentialPoint.setPotential(value);\n                            console.log(\"Set \" + PotentialPoint.tagName + \" to \" + value.toExponential());\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Potential input is not a number, resetting...\");\n                            potentialInputElement.value = potentialPoint.getPotential().toExponential();\n                        }\n                        resizeInputElement(potentialInputElement);\n                    });\n                    potentialInputElement.value = potentialPoint.getPotential().toExponential();\n                    resizeInputElement(potentialInputElement);\n                    potentialPointDiv.appendChild(potentialInputElement);\n                    potentialPointsDiv.appendChild(potentialPointDiv);\n                }\n                potentialPointCollapsibleDiv.appendChild(potentialPointsDiv);\n                hinderedRotorPotential.setPotentialPoints(potentialPoints);\n                extraDOSCMethod.setHinderedRotorPotential(hinderedRotorPotential);\n            }\n\n            // Read periodicities.\n            let xml_periodicities: HTMLCollectionOf<Element> = xml_DOSCMethod[0].getElementsByTagName(Periodicity.tagName);\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) {\n                    throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                }\n                let valueString: string = getNodeValue(getFirstChildNode(xml_periodicities[0]));\n                let periodicity: Periodicity = new Periodicity(getAttributes(xml_periodicities[0]), parseFloat(valueString));\n                extraDOSCMethod.setPeriodicity(periodicity);\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + Periodicity.tagName,\n                    boundary1, level3, (event: Event) => {\n                        let target = event.target as HTMLInputElement;\n                        valueString = target.value;\n                        if (isNumeric(valueString)) {\n                            let value: number = parseFloat(valueString);\n                            periodicity.value = value;\n                            (extraDOSCMethod.getPeriodicity() as Periodicity).value = value;\n                            console.log(\"Set \" + Periodicity.tagName + \" to \" + value);\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Periodicity input is not a number, resetting...\");\n                            target.value = periodicity.value.toExponential();\n                        }\n                    }, valueString, Periodicity.tagName);\n                extraDOSCMethodDiv.appendChild(inputDiv);\n            }\n            molecule.setExtraDOSCMethod(extraDOSCMethod);\n            moleculeTagNames.delete(ExtraDOSCMethod.tagName);\n        }\n\n        // Organise ReservoirSize.\n        moleculeTagNames.delete(ReservoirSize.tagName);\n        let xml_ReservoirSize = xml_molecules[i].getElementsByTagName(ReservoirSize.tagName);\n        if (xml_ReservoirSize.length > 0) {\n            if (xml_ReservoirSize.length != 1) {\n                throw new Error(\"Expecting only 1 reservoirSize, but there are \" + xml_ReservoirSize.length);\n            }\n            let valueString: string = getNodeValue(getFirstChildNode(xml_ReservoirSize[0]));\n            let value: number = parseFloat(valueString);\n            let reservoirSizeAttributes: Map<string, string> = getAttributes(xml_ReservoirSize[0]);\n            let reservoirSize: ReservoirSize = new ReservoirSize(reservoirSizeAttributes, value);\n            molecule.setReservoirSize(reservoirSize);\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + ReservoirSize.tagName,\n                boundary1, level2, (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    reservoirSize.value = parseFloat(target.value);\n                    resizeInputElement(target);\n                }, valueString, ReservoirSize.tagName);\n            moleculeDiv.appendChild(inputDiv);\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.warn(x));\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        // Create a molstar molecule visualisation\n        let molstarDiv: HTMLDivElement = document.createElement(\"div\");\n        molstarDiv.id = getID(molecule.id, \"molstar\");\n        moleculeDiv.appendChild(molstarDiv);\n\n        let contentDivId: string = getID(molecule.tagName, molecule.id);\n        let buttonId: string = getID(contentDivId, s_button);\n\n        // Create a new collapsible div for the molecule.\n        getCollapsibleDiv({\n            divToAddTo: moleculeListDiv,\n            elementToInsertBefore: null,\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonId: buttonId,\n            margin: level1,\n            contentDivId: contentDivId\n        });\n    }\n    // Create an add molecule button.\n    let addMoleculeButton: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    moleculeListDiv.appendChild(addMoleculeButton);\n    addMoleculeButton.addEventListener('click', () => {\n        // Ask the user to specify the molecule ID.\n        let moleculeId: string | null = prompt(\"Please enter the chemical formular:\", \"Kr\");\n        let molecule: Molecule = new Molecule(new Map(), moleculeId!);\n        molecules.set(moleculeId!, molecule);\n        // Add the molecule to the BathGas select elements.\n        addOptionByClassName(BathGas.tagName, molecule.id);\n        let moleculeDiv: HTMLDivElement = createDiv(moleculeId!, level1);\n        moleculeListDiv.insertBefore(moleculeDiv, addMoleculeButton);\n        let contentDivId = getID(molecule.tagName, moleculeId!);\n        let buttonId = getID(contentDivId, s_button);\n        // Create a new collapsible div for the molecule.\n        let div = getCollapsibleDiv({\n            divToAddTo: moleculeListDiv,\n            elementToInsertBefore: addMoleculeButton,\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonId: buttonId,\n            margin: level1,\n            contentDivId: contentDivId\n        });\n        // Add a rename button.\n        let renameButton: HTMLButtonElement = createButton(s_Rename, getID(contentDivId, s_Rename), level1);\n        renameButton.addEventListener('click', () => {\n            let newMoleculeId: string | null = prompt(\"Please enter the chemical formular:\");\n            if (newMoleculeId != null) {\n                let mid: string = getID(newMoleculeId) // This ensures that all special chars are handled.\n                // Update the BathGas select elements.\n                addOptionByClassName(BathGas.tagName, mid);\n                removeOptionByClassName(BathGas.tagName, molecule.id);\n                molecule.id = mid;\n                moleculeDiv.id = mid;\n                let button: HTMLButtonElement = document.getElementById(buttonId) as HTMLButtonElement;\n                button.textContent = molecule.getLabel() + \" \" + sy_upTriangle;\n                contentDivId = getID(molecule.tagName, mid);\n                div.id = contentDivId;\n                button.id = getID(contentDivId, s_button);\n            }\n        });\n        moleculeDiv.appendChild(renameButton);\n        // Atoms.\n        let atomArrayDiv: HTMLDivElement = getCollapsibleContentDiv(moleculeId!, moleculeDiv, null, AtomArray.tagName, AtomArray.tagName,\n            level1);\n        atomArrayDiv.appendChild(getAddAtomButton(molecule, atomArrayDiv, Atom.tagName, boundary1, level2));\n        // Bonds.\n        let bondArrayDiv: HTMLDivElement = getCollapsibleContentDiv(moleculeId!, moleculeDiv, null, BondArray.tagName, BondArray.tagName,\n            level1);\n        bondArrayDiv.appendChild(getAddBondButton(molecule, moleculeId!, bondArrayDiv, Bond.tagName, boundary1, level2));\n\n        create3DViewer(molecule, moleculeDiv, boundary1, level1);\n\n        // Properties.\n        let propertiesDiv: HTMLDivElement = getCollapsibleContentDiv(moleculeId!, moleculeDiv, null, Property.tagName, Property.tagName,\n            level1);\n        //propertiesDiv.appendChild(getAddPropertyButton(molecule, moleculeId!, propertiesDiv, Property.tagName, boundary1, level2, fontSize2));    \n\n\n    });\n    return moleculeListDiv;\n}\n\n/**\n * Creates and returns a new div which is the content expanded or collapsed by a button.\n * \n * @param moleculeId The molecule id.\n * @param divToAddTo The div to add to.\n * @param elementToInsertBefore The element to insert before.\n * @param buttonLabel The button label.\n * @param typeID The type (used to compile an id along with moleculeId).\n * @param boundary The boundary.\n * @param level The level.\n * @param buttonFontSize The button font size.\n * @returns The content div.\n */\nfunction getCollapsibleContentDiv(moleculeId: string, divToAddTo: HTMLDivElement, elementToInsertBefore: HTMLElement | null,\n    buttonLabel: string, typeID: string,\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement(\"div\");\n    \n    let contentDivId: string = getID(moleculeId, typeID);\n    let buttonId: string = getID(contentDivId, s_button);\n\n    getCollapsibleDiv({\n        divToAddTo: divToAddTo,\n        elementToInsertBefore: elementToInsertBefore,\n        content: div,\n        buttonLabel: buttonLabel,\n        buttonId: buttonId,\n        margin: level,\n        contentDivId: contentDivId\n    });\n    return div;\n}\n\n/**\n * Creates and returns a button for adding a new atom div to the atomArrayDiv. The atom div added\n * will have: label (atom id); (editable details); and a remove button.\n * \n * @param molecule The molecule.\n * @param atomArrayDiv The atom array div.\n * @param typeID The type incorporated into an id.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The add bond button.\n */\nfunction getAddAtomButton(molecule: Molecule, atomArrayDiv: HTMLDivElement, typeID: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLButtonElement {\n    // Create an add atom button.\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, getID(molecule.id, \"Add\" + typeID + \"Button\"), level);\n    button.addEventListener('click', () => {\n        let attributes: Map<string, string> = new Map();\n        let atom: Atom = new Atom(attributes, molecule);\n        let atomId: string = molecule.getAtoms().addAtom(atom);\n        let id: string = getID(molecule.id, atomId);\n        let atomDiv: HTMLDivElement = createFlexDiv(id, level);\n        atomDiv.appendChild(createLabel(atomId, boundary));\n        // elementType.\n        processElementType(id, atom, atomDiv, true, boundary);\n        // Coordinates.\n        processCoordinates(id, atom, atomDiv, boundary);\n        addRemoveButton(atomDiv, boundary, removeAtom, molecule, atomId);\n        atomArrayDiv.insertBefore(atomDiv, button);\n        // Get elements with Bond.s_atomRefs2 className. These select elements are to be updated to include the new atom option.\n        addOptionByClassName(Bond.s_atomRefs2, atomId);\n    });\n    return button;\n}\n\n// Function to be used to remove an atom.\nfunction removeAtom(molecule: Molecule, id: string) {\n    molecule.getAtoms().removeAtom(id);\n    molecule.getBonds().bonds.forEach((bond) => {\n        let atomRefs2: string = bond.getAtomRefs2();\n        let atomRefs: string[] = atomRefs2.split(\" \");\n        if (atomRefs[0] == id || atomRefs[1] == id) {\n            let bondId = bond.getId()!;\n            //console.log(\"Removing bond \" + bondId + \" as it references atom \" + id);\n            molecule.getBonds().removeBond(bondId);\n            // Remove any bondDiv elements with a reference to id.\n            let bondDivs: HTMLCollectionOf<Element> = document.getElementsByClassName(id);\n            //console.log(\"bondDivs.length=\" + bondDivs.length);\n            for (let i = 0; i < bondDivs.length; i++) {\n                bondDivs[i].remove();\n            }\n\n        }\n    });\n    removeOptionByClassName(Bond.s_atomRefs2, id);\n}\n\n\n/**\n * @param className The className of Elements to update\n * @param optionToRemove  The option value to remove.\n */\nfunction removeOptionByClassName(className: string, optionToRemove: string): void {\n    let elements: HTMLCollectionOf<Element> = document.getElementsByClassName(className);\n    for (let i = 0; i < elements.length; i++) {\n        if (elements[i] instanceof HTMLSelectElement) {\n            let options: HTMLOptionsCollection = (elements[i] as HTMLSelectElement).options;\n            Array.from(options).forEach((option) => {\n                if (option.value == optionToRemove) {\n                    option.remove();\n                }\n            });\n        }\n    }\n}\n\n/**\n * @param className The className of Elements to update\n * @param optionToAdd  The option value to add.\n */\nfunction addOptionByClassName(className: string, optionToAdd: string): void {\n    let elements: HTMLCollectionOf<Element> = document.getElementsByClassName(className);\n    //console.log(\"n elements with className \" + className + \"=\" + elements.length);    \n    for (let i = 0; i < elements.length; i++) {\n        let select: HTMLSelectElement = elements[i] as HTMLSelectElement;\n        if (elements[i] instanceof HTMLSelectElement) {\n            let option: HTMLOptionElement = document.createElement('option');\n            option.value = optionToAdd;\n            option.text = optionToAdd;\n            select.add(option);\n        }\n    }\n}\n\n\n/**\n * Creates and returns a button for adding a new bond div to the bondArrayDiv. The bond div added\n * will have: label (bond id); editable details (atomRefs2 and order); and, remove and refresh buttons.\n * \n * @param molecule The molecule.\n * @param bondArrayDiv The bond array div.\n * @param typeID The type incorporated into an id.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The add bond button.\n */\nfunction getAddBondButton(molecule: Molecule, moleculeId: string, bondArrayDiv: HTMLDivElement, typeID: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLButtonElement {\n    // Create an add button.\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, getID(moleculeId, \"Add\" + typeID + \"Button\"), level);\n    button.addEventListener('click', () => {\n        let atoms: Map<string, Atom> = molecule.getAtoms().atoms;\n        if (atoms.size < 2) {\n            alert(\"There must be at least 2 atoms to create a bond.\");\n            return;\n        }\n        let attributes: Map<string, string> = new Map();\n        let atomRefs2: string = Array.from(atoms.keys()).slice(0, 2).join(\" \");\n        attributes.set(Bond.s_atomRefs2, atomRefs2);\n        let bond: Bond = new Bond(attributes, molecule);\n        let bondId: string = molecule.getBonds().addBond(bond);\n        let bondDiv: HTMLDivElement = createFlexDiv(getID(moleculeId, bondId), level);\n        // Add to the classlists so that bondDivs involving particular atoms can be found.\n        Array.from(atoms.keys()).forEach((atomId: string) => {\n            bondDiv.classList.add(atomId);\n        });\n        bondArrayDiv.insertBefore(bondDiv, button);\n        let inputId: string = getID(moleculeId, bondId);\n        bondDiv.appendChild(createLabel(bondId, boundary));\n        // atomRefs2.\n        processAtomRefs2(molecule, bondDiv, bond, inputId, boundary);\n        // order.\n        processOrder(bondDiv, bond, inputId, Bond.s_order, boundary);\n        let removeBond = (id: string) => molecule.getBonds().removeBond(id);\n        addRemoveButton(bondDiv, boundary, removeBond, bondId);\n    });\n    bondArrayDiv.appendChild(button);\n    return button;\n}\n\n/**\n * For processing the atomRefs2 of a Bond.\n * \n * @param molecule The molecule.\n * @param bondDiv The bond div.\n * @param bond The bond.\n * @param inputId The input id.\n * @param margin The margin for the components.\n */\nfunction processAtomRefs2(molecule: Molecule, bondDiv: HTMLDivElement, bond: Bond, inputId: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let atomRefs2: string | undefined = bond.getAtomRefs2();\n    let atomRefs: string[] = atomRefs2.split(\" \");\n    let atomRefOptions: string[] = Array.from((molecule.getAtoms() as AtomArray).atoms.keys());\n    // alws.\n    let alws: HTMLDivElement = createLabelWithSelect(Bond.s_atomRefs2 + \"[0]\", atomRefOptions, Atom.tagName, atomRefs[0],\n        getID(inputId, Bond.s_atomRefs2, \"0\"), margin, margin);\n    let aselect: HTMLSelectElement = alws.querySelector('select') as HTMLSelectElement;\n    aselect.classList.add(Bond.s_atomRefs2);\n    aselect.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        let atomRefs2: string = target.value + \" \" + atomRefs[1];\n        console.log(Bond.s_atomRefs2 + \" changed to \" + atomRefs2);\n        bond.setAtomRefs2(atomRefs2);\n        resizeSelectElement(target);\n    });\n    aselect.value = atomRefs[0];\n    resizeSelectElement(aselect);\n    bondDiv.appendChild(alws);\n    // blws.\n    let blws: HTMLDivElement = createLabelWithSelect(Bond.s_atomRefs2 + \"[1]\", atomRefOptions, Atom.tagName, atomRefs[1],\n        getID(inputId, Bond.s_atomRefs2, \"1\"), margin, margin);\n    let bselect: HTMLSelectElement = blws.querySelector('select') as HTMLSelectElement;\n    bselect.classList.add(Bond.s_atomRefs2);\n    bselect.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        let atomRefs2: string = atomRefs[0] + \" \" + target.value;\n        console.log(Bond.s_atomRefs2 + \" changed to \" + atomRefs2);\n        bond.setAtomRefs2(atomRefs2);\n        resizeSelectElement(target);\n    });\n    bselect.value = atomRefs[1];\n    resizeSelectElement(bselect);\n    bondDiv.appendChild(blws);\n}\n\n/**\n * @param xml The xml element.\n * @param div The div.\n * @param molecule The molecule.\n * @param boundary The boundary.\n * @param level The level.\n */\nfunction createProperty(xml: Element, div: HTMLDivElement, molecule: Molecule,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): Property {\n    let p: Property = new Property(getAttributes(xml));\n    if (p.dictRef == ZPE.dictRef) {\n        processProperty(p, Mesmer.energyUnits, molecule, xml, div, boundary, level);\n    } else if (p.dictRef == RotConsts.dictRef) {\n        processProperty(p, Mesmer.frequencyUnits, molecule, xml, div, boundary, level);\n    } else {\n        processProperty(p, undefined, molecule, xml, div, boundary, level);\n    }\n    return p;\n}\n\n\n\nfunction processElementType(inputId: string, atom: Atom, atomDiv: HTMLDivElement, first: boolean,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let elementType: string | undefined = atom.getElementType();\n    //console.log(\"Atom.s_elementType \" + elementType);\n    let selectTypes: string[] = Mesmer.elementTypes;\n    // Select.\n    if (elementType == undefined) {\n        elementType = s_selectOption;\n        selectTypes = doSelectOption(Mesmer.elementTypes, first);\n        //console.log(\"Atom.s_elementTypes \" + arrayToString(Atom.elementTypes));\n    }\n    let lws: HTMLDivElement = createLabelWithSelect(Atom.s_elementType, selectTypes, Atom.s_elementType,\n        elementType!, getID(inputId, Atom.s_elementType), boundary, boundary);\n    let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        atom.setElementType(target.value);\n        resizeSelectElement(target);\n    });\n    select.value = elementType;\n    resizeSelectElement(select);\n    selectAnotherOptionEventListener(selectTypes, select);\n    atomDiv.appendChild(lws);\n    return lws;\n}\n\nfunction doSelectOption(options: string[], first: boolean): string[] {\n    if (first) {\n        options.push(s_selectOption);\n    } else {\n        // remove selectOption if present.\n        let index = options.indexOf(s_selectOption);\n        if (index > -1) {\n            options.splice(index, 1);\n        }\n    }\n    return options;\n}\n\n\n/**\n * Process atom coordinates.\n * @param inputId The input id.\n * @param atom The atom.\n * @param atomDiv The atom div.\n */\nfunction processCoordinates(inputId: string, atom: Atom, atomDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    let x3id: string = inputId + \"_\" + Atom.s_x3;\n    processCoordinate(atomDiv, x3id, Atom.s_x3, atom.getX3.bind(atom), atom.setX3.bind(atom), boundary);\n    let y3id: string = inputId + \"_\" + Atom.s_y3;\n    processCoordinate(atomDiv, y3id, Atom.s_y3, atom.getY3.bind(atom), atom.setY3.bind(atom), boundary);\n    let z3id: string = inputId + \"_\" + Atom.s_z3;\n    processCoordinate(atomDiv, z3id, Atom.s_z3, atom.getZ3.bind(atom), atom.setZ3.bind(atom), boundary);\n}\n\n/**\n * Process a coordinate.\n * @param atomDiv The atom div.\n * @param id The id for the coordinate.\n * @param coordinate The coordinate name.\n * @param getter The getter function to call on the atom.\n * @param setter The setter function to call on the atom.\n * @param boundary The boundary.\n */\nfunction processCoordinate(atomDiv: HTMLDivElement, id: string, coordinate: string,\n    getter: () => number | undefined, setter: (value: number) => void,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    let div: HTMLDivElement = createFlexDiv(undefined, boundary);\n    atomDiv.appendChild(div);\n    let buttonTextContentSelected: string = coordinate + sy_selected;\n    let buttonTextContentDeselected: string = coordinate + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, getID(id, \"Button\"), boundary);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let inputId: string = getID(id, coordinate, \"Input\")\n    let value: number | undefined = getter();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addCoordinate(div, inputId, value, setter, boundary);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(inputId) == null) {\n            addCoordinate(div, inputId, 0, setter, boundary);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove existing.\n            document.getElementById(inputId)?.remove();\n            console.log(\"Removed \" + inputId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param div The div to add the input to.\n * @param id The id.\n * @param value The coordinate value.\n * @param setter The setter function to call on the atom.\n * @param boundary The boundary.\n * @param level The level.\n */\nfunction addCoordinate(div: HTMLDivElement, id: string, value: number | undefined,\n    setter: (value: number) => void,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string;\n    if (value == undefined) {\n        valueString = \"\";\n    } else {\n        valueString = value.toString();\n    }\n    let input: HTMLInputElement = createInput(\"text\", id, boundary);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setter(parseFloat(target.value));\n        console.log(\"Coordinate changed from \" + value + \" to \" + target.value);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    div.appendChild(input);\n}\n\n/**\n * @param div The div to append the button to.\n * @param removeFunction The function to call when the button is clicked.\n * @param args The parameters passed to the removeFunction.\n * @param margin The margin to go around the button.\n * @returns The button.\n */\nfunction addRemoveButton(div: HTMLDivElement,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    removeFunction: (...args: any[]) => void, ...args: any[]): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Remove_sy_remove, undefined, margin);\n    div.appendChild(button);\n    button.addEventListener('click', () => {\n        removeFunction(...args);\n        div.remove();\n    });\n    return button;\n}\n\n/**\n * Process an order.\n * @param bond The bond.\n * @param bondDiv The bond div.\n * @param inputId The input id.\n * @param order The order name.\n */\nfunction processOrder(bondDiv: HTMLDivElement, bond: Bond, inputId: string, order: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    let orderId: string = getID(inputId, Bond.s_order);\n    let div: HTMLDivElement = createFlexDiv(undefined, margin);\n    bondDiv.appendChild(div);\n    let buttonTextContentSelected: string = order + sy_selected;\n    let buttonTextContentDeselected: string = order + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, margin);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let value: number | undefined = bond.getOrder();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addOrder(div, bond, orderId, value, margin);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(orderId) == null) {\n            addOrder(div, bond, orderId, 1, margin);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove any existing div.\n            document.getElementById(orderId)?.remove();\n            console.log(\"Removed \" + orderId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param div The div to add the input to.\n * @param bond The bond.\n * @param id The id.\n * @param value The order value.\n * @param boundary The boundary.\n */\nfunction addOrder(div: HTMLDivElement, bond: Bond, id: string, value: number,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string = value.toString();\n    let select: HTMLSelectElement = createSelectElement(Bond.orderOptions, Bond.s_order, valueString, id, boundary);\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        bond.setOrder(parseFloat(target.value));\n        console.log(Bond.s_order + \" changed from \" + valueString + \" to \" + target.value);\n        resizeSelectElement(target);\n    });\n    select.value = valueString;\n    resizeSelectElement(select);\n    select.id = id;\n    div.appendChild(select);\n}\n\n\nfunction create3DViewer(molecule: Molecule, moleculeDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    // Add a 3Dmol.js viewer.\n    // Create a new div for the viewer.\n    let viewerContainerDivID: string = getID(molecule.id, \"viewerContainer\");\n    let viewerContainerDiv: HTMLDivElement = createDiv(viewerContainerDivID, level);\n    moleculeDiv.appendChild(viewerContainerDiv);\n\n\n\n    let viewerDivID: string = getID(molecule.id, \"viewer\");\n    let showAtomLabels: boolean = false;\n    let showBondLabels: boolean = false;\n    // Create the GLViewer viewer.\n    function createViewer(\n        //cameraPosition: any, cameraOrientation: any, zoomLevel: any, \n        showAtomLabels: boolean, showBondLabels: boolean) : any {\n\n\n        let viewerDiv: HTMLDivElement = createDiv(viewerDivID, boundary);\n        viewerDiv.className = \"mol-container\";\n        viewerContainerDiv.appendChild(viewerDiv);\n        let config = { backgroundColor: 'grey' };\n        let viewer = $3Dmol.createViewer(viewerDiv, config);\n        // Set the viewer style to stick and ball.\n        viewer.setStyle({ stick: {} });\n        // Create a 3Dmol viewer control to turn labels on and off.\n        molecule.getAtoms().atoms.forEach(function (atom) {\n            let et: string | undefined = atom.getElementType();\n            let color: string;\n            if (et == undefined) {\n                color = 'Purple';\n            } else {\n                color = Mesmer.atomColors.get(et) || 'Purple';\n            }\n            //let am: number = Mesmer.atomMasses.get(atom.getElementType()) || 1;\n            let radius: number;\n            if (et == undefined) {\n                radius = 100;\n            } else {\n                radius = Mesmer.atomRadii.get(atom.getElementType()!) || 100;\n            }\n            let ax: number = atom.getX3() || 0;\n            let ay: number = atom.getY3() || 0;\n            let az: number = atom.getZ3() || 0;\n            //viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: 0.3 * am / 10.0, color: color });\n            viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: radius / 110.0, color: color });\n            //viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: (radius * (am ** (1 / 3.0))) / 275.0, color: color });\n            if (showAtomLabels) {\n                viewer.addLabel(atom.getId(), { position: { x: ax, y: ay, z: az } });\n            }\n        });\n        console.log(\"molecule.getBonds().bonds.size \" + molecule.getBonds().bonds.size);\n        molecule.getBonds().bonds.forEach(function (bond) {\n            console.log(\"bond.atomRefs2 \" + bond.getAtomRefs2());\n            let ids: string[] = bond.getAtomRefs2().split(\" \");\n            let atomArray: AtomArray = molecule.getAtoms();\n            let atom1: Atom = atomArray.getAtom(ids[0]) as Atom;\n            let atom2: Atom = atomArray.getAtom(ids[1]) as Atom;\n            let order: number = bond.getOrder() || 1;\n            let color: string = Mesmer.bondColors.get(order) || 'Purple';\n\n            let a1x: number = atom1.getX3() || 0;\n            let a1y: number = atom1.getY3() || 0;\n            let a1z: number = atom1.getZ3() || 0;\n\n            let a2x: number = atom2.getX3() || 0;\n            let a2y: number = atom2.getY3() || 0;\n            let a2z: number = atom2.getZ3() || 0;\n            viewer.addCylinder({ start: { x: a1x, y: a1y, z: a1z }, end: { x: a2x, y: a2y, z: a2z }, radius: 0.06 * order, color: color });\n            if (showBondLabels) {\n                viewer.addLabel(bond.getId()!, { position: { x: (a1x + a2x) / 2, y: (a1y + a2y) / 2, z: (a1z + a2z) / 2 } });\n            }\n        });\n        viewer.zoomTo();\n        viewer.render();\n        /*\n        if (cameraPosition != undefined) {\n            viewer.setCameraPosition(cameraPosition);\n        }\n        if (cameraOrientation != undefined) {\n            viewer.setCameraOrientation(cameraOrientation);\n        }\n        if (zoomLevel != undefined) {\n            viewer.zoom(zoomLevel, 2000);\n        } else {\n            viewer.zoom(0.8, 2000);\n        }\n        return viewer;\n        */\n        viewer.zoom(0.8, 2000);\n\n        return viewer;\n\n    }\n    // Add a redraw button.\n    let redrawButton: HTMLButtonElement = createButton(\"Draw/Redraw\", undefined);\n    let viewer: any;\n    redrawButton.addEventListener('click', () => {\n        remove(viewerDivID, ids);\n        viewer = createViewer(\n            //undefined, undefined, undefined, \n            showAtomLabels, showBondLabels);\n    });\n    viewerContainerDiv.appendChild(redrawButton);\n    // Helper function to create a label button for hiding or showing labels on the viewer.\n    function createLabelButton(label: string, id: string, showState: boolean, updateState: (newState: boolean) => void) {\n        let button = createButton((showState ? \"Hide \" : \"Show \") + label, id, boundary);\n        button.addEventListener('click', () => {\n            if (showState) {\n                button.textContent = \"Show \" + label;\n                showState = false;\n            } else {\n                button.textContent = \"Hide \" + label;\n                showState = true;\n            }\n            /*\n            let cameraPosition = viewer.getCameraPosition();\n            let cameraOrientation = viewer.getCameraOrientation();\n            let zoomLevel = viewer.getZoomLevel();\n            */\n            updateState(showState);\n            remove(viewerDivID, ids);\n            viewer = createViewer(\n                //cameraPosition, cameraOrientation, zoomLevel,\n                showAtomLabels, showBondLabels);\n        });\n        return button;\n    }\n    // Atom Labels.\n    let s_Atom_Labels: string = \"Atom Labels\";\n    let atomLabelbutton = createLabelButton(s_Atom_Labels, getID(molecule.id, s_Atom_Labels), showAtomLabels,\n        newState => showAtomLabels = newState);\n    viewerContainerDiv.appendChild(atomLabelbutton);\n    // Bond Labels.\n    let s_Bond_Labels: string = \"Bond Labels\";\n    let bondLabelbutton = createLabelButton(s_Bond_Labels, getID(molecule.id, s_Bond_Labels), showBondLabels,\n        newState => showBondLabels = newState);\n    viewerContainerDiv.appendChild(bondLabelbutton);\n    // Add a save button to save the viewer as an image.\n    let saveButton: HTMLButtonElement = createButton(\"Save Image\", undefined);\n    saveButton.addEventListener('click', () => {\n        //viewer.pngURI({ backgroundColor: 'white', download: true });\n        let canvas = viewer.pngURI();\n        let a = document.createElement('a');\n        a.href = canvas;\n        a.download = 'mol.png';\n        document.body.appendChild(a); // Append the anchor to the body.\n    a.click(); // Programmatically click the anchor to trigger the download.\n    document.body.removeChild(a); // Remove the anchor from the body after triggering the download.\n    console.log('Save Image');\n    });\n    viewerContainerDiv.appendChild(saveButton);\n}\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xmlFilename: string, xml: string) {\n    let xmlDiv: HTMLDivElement = document.getElementById(xmlDivId) as HTMLDivElement;\n    // xmlHeading\n    let xmlHeadingId: string = \"xmlHeading\";\n    remove(xmlHeadingId, ids);\n    let xmlHeading: HTMLHeadingElement = document.createElement(\"h2\");\n    xmlHeading.textContent = xmlFilename;\n    xmlDiv.appendChild(xmlHeading);\n    // xmlParagraph\n    let xmlParagraphId: string = \"xmlParagraph\";\n    remove(xmlParagraphId, ids);\n    let xmlPre: HTMLPreElement = document.createElement(\"pre\");\n    xmlPre.textContent = xml;\n    xmlDiv.appendChild(xmlPre);\n}\n\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param div The molecule div.\n * @param boundary The boundary to go around components.\n * @param level The level of the component.\n */\nfunction processProperty(p: Property, units: string[] | undefined, molecule: Molecule, element: Element, div: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    // PropertyScalar.\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalar.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalar.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let value: number = parseFloat(inputString);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        let ps: PropertyScalar = new PropertyScalar(psAttributes, value);\n        p.setProperty(ps);\n        let label: string = p.dictRef;\n        // Create a new div element for the input.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + p.dictRef,\n            boundary1, level, (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                setNumberNode(ps, target);\n            }, inputString, label);\n        let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n        //inputElement.value = inputString;\n        resizeInputElement(inputElement);\n        inputElement.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            inputString = target.value;\n            ps = p.getProperty() as PropertyScalar;\n            ps.value = parseFloat(inputString);\n            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n            resizeInputElement(inputElement);\n            if (p.dictRef == ZPE.dictRef) {\n                // Update the min and max molecule energy.\n                if (value < minMoleculeEnergy) {\n                    minMoleculeEnergy = value;\n                }\n                if (value > maxMoleculeEnergy) {\n                    maxMoleculeEnergy = value;\n                }\n                // Update the molecule energy diagram.\n                redrawReactionsDiagram();\n            }\n        });\n        addAnyUnits(units, psAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n        div.appendChild(inputDiv);\n    } else {\n        // PropertyArray.\n        let arrayNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyArray.tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) {\n                throw new Error(\"Expecting 1 \" + PropertyArray.tagName + \" but finding \" + arrayNodes.length + \"!\");\n            }\n            let inputString: string = getInputString(arrayNodes[0]);\n            let values: number[] = toNumberArray(inputString.split(/\\s+/));\n            let paAttributes: Map<string, string> = getAttributes(arrayNodes[0]);\n            let pa: PropertyArray = new PropertyArray(paAttributes, values);\n            p.setProperty(pa);\n            let label: string = p.dictRef;\n            // Create a new div element for the input.\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"text\", molecule.id + \"_\" + p.dictRef,\n                boundary, level, (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberArrayNode(pa, target);\n                }, inputString, label);\n            let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n            inputElement.value = inputString;\n            resizeInputElement(inputElement);\n            inputElement.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                inputString = target.value;\n                pa = p.getProperty() as PropertyArray;\n                values = toNumberArray(inputString.split(/\\s+/));\n                pa.values = values;\n                console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                resizeInputElement(inputElement);\n            });\n            addAnyUnits(units, paAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n            div.appendChild(inputDiv);\n        } else {\n            // PropertyMatrix.\n            let matrixNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyMatrix.tagName);\n            if (matrixNodes.length > 0) {\n                if (matrixNodes.length != 1) {\n                    throw new Error(\"Expecting 1 \" + PropertyMatrix.tagName + \" but finding \" + matrixNodes.length + \"!\");\n                }\n                let inputString: string = getInputString(matrixNodes[0]);\n                let values: number[] = toNumberArray(inputString.split(/\\s+/));\n                let pmAttributes: Map<string, string> = getAttributes(matrixNodes[0]);\n                let pm: PropertyMatrix = new PropertyMatrix(pmAttributes, values);\n                p.setProperty(pm);\n                let label: string = p.dictRef;\n                // Create a new div element for the input.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"text\", molecule.id + \"_\" + p.dictRef,\n                    boundary, level, (event: Event) => {\n                        let target = event.target as HTMLInputElement;\n                        setNumberArrayNode(pm, target);\n                    }, inputString, label);\n                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                inputElement.value = inputString;\n                resizeInputElement(inputElement);\n                inputElement.addEventListener('change', (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    inputString = target.value;\n                    pm = p.getProperty() as PropertyMatrix;\n                    values = toNumberArray(inputString.split(/\\s+/));\n                    pm.values = values;\n                    console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                    resizeInputElement(inputElement);\n                });\n                addAnyUnits(units, pmAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n                div.appendChild(inputDiv);\n            } else {\n                throw new Error(\"Expecting \" + PropertyScalar.tagName + \", \" + PropertyArray.tagName + \" or \"\n                    + PropertyMatrix.tagName + \" but finding none!\");\n            }\n        }\n    }\n}\n\n/**\n * If there are a choice of units, then add a new select element to display/select them.\n * @param units The possible units.\n * @param attributes The attributes.\n * @param inputDiv The input div.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n */\nfunction addAnyUnits(units: string[] | undefined, attributes: Map<string, string>, inputDiv: HTMLDivElement,\n    id: string, tagOrDictRef: string, boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    if (units != undefined) {\n        let lws: HTMLDivElement | undefined = getUnitsLabelWithSelect(units, attributes, id, tagOrDictRef);\n        if (lws != undefined) {\n            inputDiv.appendChild(lws);\n        }\n    } else {\n        let attributesUnits: string | undefined = attributes.get(\"units\");\n        if (attributesUnits != undefined) {\n            let label: HTMLLabelElement = createLabel(\"units \" + attributesUnits, boundary);\n            inputDiv.appendChild(label);\n        }\n    }\n}\n\n/**\n * @param attributes The attributes.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @returns A select element for setting the units or undefined if there is not attribute for units.\n */\nfunction getUnitsLabelWithSelect(units: string[], attributes: Map<string, string>, id: string, tagOrDictRef: string): HTMLDivElement | undefined {\n    let psUnits: string | undefined = attributes.get(\"units\");\n    if (psUnits != undefined) {\n        // Get a select element for setting the units.\n        let lws: HTMLDivElement = createLabelWithSelect(\"units\", units, \"units\", psUnits, id, boundary1, boundary1);\n        let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n        // Set the initial value to the units.\n        select.value = psUnits;\n        // Add event listener to selectElement.\n        resizeSelectElement(select);\n        select.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            attributes.set(\"units\", target.value);\n            console.log(\"Set \" + tagOrDictRef + \" units to \" + target.value);\n            resizeSelectElement(target);\n        });\n        return lws;\n    }\n    return undefined;\n}\n\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */\nfunction processEnergyTransferModel(etm: EnergyTransferModel, molecule: Molecule, element: Element, moleculeDiv: HTMLDivElement, margin: string) {\n    let xml_deltaEDowns: HTMLCollectionOf<Element> = element.getElementsByTagName(DeltaEDown.tagName);\n    if (xml_deltaEDowns.length > 0) {\n        // Create a new collapsible div for the energyTransferModel.\n        let etmDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n        let contentDivId: string = getID(molecule.id, EnergyTransferModel.tagName);\n        getCollapsibleDiv({\n            divToAddTo: moleculeDiv,\n            elementToInsertBefore: null,\n            content: etmDiv,\n            buttonLabel: EnergyTransferModel.tagName,\n            buttonId: getID(contentDivId, s_button),\n            margin: level2,\n            contentDivId: contentDivId\n        });\n        let deltaEDowns: DeltaEDown[] = [];\n        for (let k = 0; k < xml_deltaEDowns.length; k++) {\n            let inputString: string = getInputString(xml_deltaEDowns[k]);\n            let value: number = parseFloat(inputString);\n            let deltaEDownAttributes: Map<string, string> = getAttributes(xml_deltaEDowns[k]);\n            let deltaEDown: DeltaEDown = new DeltaEDown(deltaEDownAttributes, value);\n            deltaEDowns.push(deltaEDown);\n            let label: string = DeltaEDown.tagName;\n            // Create a new div element for the input.\n            let id = molecule.id + \"_\" + EnergyTransferModel.tagName + \"_\" + DeltaEDown.tagName + \"_\" + k;\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(deltaEDown, target);\n                    inputString = target.value;\n                    deltaEDowns[k].setValue(parseFloat(inputString));\n                    console.log(\"Set \" + id + \" to \" + inputString);\n                    resizeInputElement(target);\n                }, inputString, label);\n            etmDiv.appendChild(inputDiv);\n            let unitsLabel: HTMLLabelElement = document.createElement('label');\n            unitsLabel.textContent = \"units cm-1\";\n            inputDiv.appendChild(unitsLabel);\n        }\n        etm.setDeltaEDowns(deltaEDowns);\n        molecule.setEnergyTransferModel(etm);\n    }\n}\n\n/**\n * Set a molecule property array when the input value is changed.\n * @param node The NumberArayNode.\n * @param input The input element.\n */\nexport function setNumberArrayNode(node: NumberArrayNode, input: HTMLInputElement): void {\n    let inputString: string = input.value.trim();\n    if (inputString == \"\") {\n        alert(\"Empty input resetting...\");\n        input.value = arrayToString(node.values, \" \");\n        return;\n    }\n    let inputStrings: string[] = inputString.split(/\\s+/);\n    let values: number[] = [];\n    let success: boolean = true;\n    inputStrings.forEach(function (value) {\n        if (!isNumeric(value)) {\n            success = false;\n        }\n        values.push(parseFloat(value));\n    });\n    if (!success) {\n        alert(\"An input is not a number, resetting...\");\n        input.value = arrayToString(node.values, \" \");\n        return;\n    }\n    //console.log(\"propertyArray=\" + propertyArray);\n    if (values.length == node.values.length) {\n        console.log(\"Changed \" + node.tagName + \" from: \\\"\" + inputString + \"\\\" to: \\\"\" + arrayToString(node.values, \" \") + \"\\\"\");\n        //console.log(\"molecule=\" + molecule);\n    } else {\n        alert(\"Expecting \" + node.values.length + \" values for, but finding \" + values.length + \" resetting...\");\n        input.value = arrayToString(node.values, \" \");\n    }\n}\n\n/**\n * Set a molecule number node when the input value is changed.\n * @param node The number node.\n * @param input The input element.\n */\nexport function setNumberNode(node: NumberNode, input: HTMLInputElement): void {\n    if (isNumeric(input.value)) {\n        let inputNumber: number = parseFloat(input.value);\n        node.value = inputNumber;\n        console.log(node.tagName + \" value set to \" + inputNumber);\n    } else {\n        alert(\"Value is not numeric, resetting...\");\n        input.value = node.value.toExponential();\n    }\n}\n\n/**\n * Parse XML and create HTMLDivElement for reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction processReactionList(xml: XMLDocument): HTMLDivElement {\n    // Initialise reactions.\n    reactions = new Map();\n    // Create div to contain the reaction list.\n    let reactionListDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"reactionList\" element.\n    let xml_reactionList: Element = getSingularElement(xml, ReactionList.tagName);\n    // Check the XML \"reactionList\" element has one or more \"reaction\" elements and no other elements.\n    let reactionListTagNames: Set<string> = new Set();\n    xml_reactionList.childNodes.forEach(function (node) {\n        reactionListTagNames.add(node.nodeName);\n    });\n    if (reactionListTagNames.size != 1) {\n        if (!(reactionListTagNames.size == 2 && reactionListTagNames.has(\"#text\"))) {\n            console.error(\"reactionListTagNames:\");\n            reactionListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in reactionList:\");\n        }\n    }\n    if (!reactionListTagNames.has(Reaction.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Reaction.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"reaction\" elements.\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    //xml_reactions.forEach(function (xml_reaction) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_reactions.length; i++) {\n        let reactionDiv: HTMLDivElement = createDiv(undefined, boundary1);\n        // Set attributes.\n        let reactionAttributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_reactions[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!reactionTagNames.has(cn.nodeName)) {\n                reactionTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n\n        // Create reaction.\n        let reaction = new Reaction(reactionAttributes);\n        reactions.set(reaction.id, reaction);\n\n        // Reactions typically have one or more reactant and product. They may also have one or more \"me:transitionState\" and other things...\n        // Load reactants.\n        let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n        reactionTagNames.delete(Reactant.tagName);\n        //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n        if (xml_reactants.length > 0) {\n            // Create a new div for the reactants.\n            let reactantsDiv: HTMLDivElement = document.createElement(\"div\");\n            let reactants: Reactant[] = [];\n            for (let j = 0; j < xml_reactants.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let reactant: Reactant = new Reactant(getAttributes(xml_reactants[j]), molecule);\n                reactants.push(reactant);\n                // Create a new div for the role.\n                let lws: HTMLDivElement = createLabelWithSelect(molecule.ref + \" role\", Reactant.roleOptions, \"Role\",\n                    molecule.role, molecule.ref, boundary1, level3);\n                lws.querySelector('select')?.addEventListener('change', (event: Event) => {\n                    let target = event.target as HTMLSelectElement;\n                    molecule.setRole(target.value);\n                    console.log(\"Set Role to \" + target.value);\n                    resizeSelectElement(target);\n                });\n                reactantsDiv.appendChild(lws);\n            }\n            reaction.setReactants(reactants);\n            // Create a new collapsible div for the reactants.\n            let contentDivId: string = getID(reaction.id, Reactant.tagName);\n            getCollapsibleDiv({\n                divToAddTo: reactionDiv,\n                elementToInsertBefore: null,\n                content: reactantsDiv,\n                buttonLabel: \"Reactants\",\n                buttonId: getID(contentDivId, s_button),\n                margin: level2,\n                contentDivId: contentDivId\n            });\n        }\n        // Load products.\n        let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n        reactionTagNames.delete(Product.tagName);\n        //console.log(\"xml_products.length=\" + xml_products.length);\n        if (xml_products.length > 0) {\n            let productsDiv: HTMLDivElement = document.createElement(\"div\");\n            let products: Product[] = [];\n            for (let j = 0; j < xml_products.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_products[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let product: Product = new Product(getAttributes(xml_products[j]), molecule);\n                products.push(product);\n                let lws: HTMLDivElement = createLabelWithSelect(molecule.ref + \" role\", Product.roleOptions, molecule.role,\n                    molecule.ref, \"Role\", boundary1, level3);\n                let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n                select.value = molecule.role;\n                select.addEventListener('change', (event: Event) => {\n                    let target = event.target as HTMLSelectElement;\n                    molecule.setRole(target.value);\n                    console.log(\"Set Role to \" + target.value);\n                    resizeSelectElement(target);\n                });\n                resizeSelectElement(select);\n                productsDiv.appendChild(lws);\n            }\n            reaction.setProducts(products);\n            // Create collapsible div for the products.\n            let contentDivId: string = getID(reaction.id, Product.tagName);\n            getCollapsibleDiv({\n                divToAddTo: reactionDiv,\n                elementToInsertBefore: null,\n                content: productsDiv,\n                buttonLabel: \"Products\",\n                buttonId: getID(contentDivId, s_button),\n                margin: level2,\n                contentDivId: contentDivId\n            });\n        }\n        // Load tunneling.\n        let xml_tunneling = xml_reactions[i].getElementsByTagName(Tunneling.tagName);\n        if (xml_tunneling.length > 0) {\n            if (xml_tunneling.length > 1) {\n                throw new Error(\"Expecting 1 \" + Tunneling.tagName + \" but finding \" + xml_tunneling.length + \"!\");\n            }\n            let tunneling: Tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            reaction.setTunneling(tunneling);\n            let lws: HTMLDivElement = createLabelWithSelect(Tunneling.tagName, Tunneling.options, \"Tunneling\", tunneling.getName(),\n                reaction.id, boundary1, level3);\n            lws.querySelector('select')?.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLSelectElement;\n                tunneling.setName(target.value);\n                console.log(\"Set Tunneling to \" + target.value);\n                resizeSelectElement(target);\n            });\n            reactionDiv.appendChild(lws);\n        }\n        // Load transition states.\n        let xml_transitionStates: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(TransitionState.tagName);\n        //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n        if (xml_transitionStates.length > 0) {\n            let transitionStatesDiv: HTMLDivElement = document.createElement(\"div\");\n            let transitionStates: TransitionState[] = [];\n            for (let j = 0; j < xml_transitionStates.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_transitionStates[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let transitionState: TransitionState = new TransitionState(getAttributes(xml_transitionStates[j]), molecule);\n                transitionStates.push(transitionState);\n                // Create a label for the Transition State.\n                let label: HTMLLabelElement = createLabel(molecule.ref + \" role transitionState\", level3);\n                transitionStatesDiv.appendChild(label);\n            }\n            reaction.setTransitionStates(transitionStates);\n            // Create a new collapsible div for the transition states.\n            let contentDivId: string = getID(reaction.id, TransitionState.tagName);\n            getCollapsibleDiv({\n                divToAddTo: reactionDiv,\n                elementToInsertBefore: null,\n                content: transitionStatesDiv,\n                buttonLabel: \"Transition States\",\n                buttonId: getID(contentDivId, s_button),\n                margin: level2,\n                contentDivId: contentDivId\n            });\n        }\n        // Load MCRCMethod.\n        //console.log(\"Load MCRCMethod...\");\n        let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n        //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n        //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n        if (xml_MCRCMethod.length > 0) {\n            if (xml_MCRCMethod.length > 1) {\n                throw new Error(\"Expecting 1 \" + MCRCMethod.tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n            } else {\n                let mCRCMethodDiv: HTMLDivElement = document.createElement(\"div\");\n                let mCRCMethod: MCRCMethod;\n                let mCRCMethodAttributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                let name: string | undefined = mCRCMethodAttributes.get(\"name\");\n                //console.log(MCRCMethod.tagName + \" name=\" + name);\n                if (name == undefined || name == MesmerILT.xsiType2) {\n                    let type: string = mCRCMethodAttributes.get(\"xsi:type\") as string;\n                    mCRCMethod = new MesmerILT(mCRCMethodAttributes);\n                    //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                    if (type == MesmerILT.xsiType || type == MesmerILT.xsiType2) {\n                        let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                        if (xml_preExponential != null) {\n                            if (xml_preExponential[0] != null) {\n                                let inputString: string = getInputString(xml_preExponential[0]);\n                                let value: number = parseFloat(inputString);\n                                let preExponentialAttributes: Map<string, string> = getAttributes(xml_preExponential[0]);\n                                let preExponential: PreExponential = new PreExponential(preExponentialAttributes, value);\n                                (mCRCMethod as MesmerILT).setPreExponential(preExponential);\n                                let label: string = PreExponential.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + PreExponential.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(preExponential, target);\n                                    }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    preExponential.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, preExponentialAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + PreExponential.tagName,\n                                    PreExponential.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"preExponential \" + preExponential);\n                        let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                        if (xml_activationEnergy != null) {\n                            if (xml_activationEnergy[0] != null) {\n                                let inputString: string = getInputString(xml_activationEnergy[0]);\n                                let value: number = parseFloat(inputString);\n                                let activationEnergyAttributes: Map<string, string> = getAttributes(xml_activationEnergy[0]);\n                                let activationEnergy: ActivationEnergy = new ActivationEnergy(activationEnergyAttributes, value);\n                                (mCRCMethod as MesmerILT).setActivationEnergy(activationEnergy);\n                                let label: string = ActivationEnergy.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + ActivationEnergy.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(activationEnergy, target);\n                                    }, inputString, label);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    activationEnergy.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, activationEnergyAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + ActivationEnergy.tagName,\n                                    ActivationEnergy.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"activationEnergy \" + activationEnergy);\n                        let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(TInfinity.tagName);\n                        if (xml_tInfinity != null) {\n                            if (xml_tInfinity[0] != null) {\n                                let inputString: string = getInputString(xml_tInfinity[0]);\n                                let value: number = parseFloat(inputString);\n                                let tInfinityAttributes: Map<string, string> = getAttributes(xml_tInfinity[0]);\n                                let tInfinity: TInfinity = new TInfinity(tInfinityAttributes, value);\n                                (mCRCMethod as MesmerILT).setTInfinity(tInfinity);\n                                let label: string = TInfinity.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + TInfinity.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(tInfinity, target);\n                                    }, inputString, label);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    tInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, tInfinityAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + TInfinity.tagName,\n                                    TInfinity.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"tInfinity \" + tInfinity);\n                        let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(NInfinity.tagName);\n                        if (xml_nInfinity != null) {\n                            if (xml_nInfinity[0] != null) {\n                                let inputString: string = getInputString(xml_nInfinity[0]);\n                                let value: number = parseFloat(inputString);\n                                let nInfinityAttributes: Map<string, string> = getAttributes(xml_nInfinity[0]);\n                                let nInfinity: NInfinity = new NInfinity(nInfinityAttributes, value);\n                                (mCRCMethod as MesmerILT).setNInfinity(nInfinity);\n                                let label: string = NInfinity.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + NInfinity.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(nInfinity, target);\n                                    }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    nInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, nInfinityAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + NInfinity.tagName, NInfinity.tagName,\n                                    boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"nInfinity \" + nInfinity);\n                        // Create a new collapsible div for the MCRCMethod.\n                        let contentDivId: string = getID(reaction.id, MCRCMethod.tagName);\n                        getCollapsibleDiv({\n                            divToAddTo: reactionDiv,\n                            elementToInsertBefore: null,\n                            content: mCRCMethodDiv,\n                            buttonLabel: MCRCMethod.tagName,\n                            buttonId: getID(contentDivId, s_button),\n                            margin: level2,\n                            contentDivId: contentDivId\n                        });\n                    } else {\n                        throw new Error(\"Unexpected xsi:type=\" + type);\n                    }\n                } else {\n                    mCRCMethod = new MCRCMethod(mCRCMethodAttributes);\n                    let mCRCMethodLabel: HTMLLabelElement = document.createElement('label');\n                    mCRCMethodLabel.textContent = MCRCMethod.tagName + \": \" + mCRCMethodAttributes.get(\"name\") as string;\n                    Object.assign(mCRCMethodLabel.style, level2);\n                    mCRCMethodDiv.appendChild(mCRCMethodLabel);\n                    reactionDiv.appendChild(mCRCMethodDiv);\n                }\n                reaction.setMCRCMethod(mCRCMethod);\n            }\n        }\n\n        // Load excessReactantConc\n        let xml_excessReactantConc = xml_reactions[i].getElementsByTagName(ExcessReactantConc.tagName);\n        if (xml_excessReactantConc.length > 0) {\n            if (xml_excessReactantConc.length > 1) {\n                throw new Error(\"Expecting 1 \" + ExcessReactantConc.tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n            }\n            let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_excessReactantConc[0])));\n            let excessReactantConc: ExcessReactantConc = new ExcessReactantConc(getAttributes(xml_excessReactantConc[0]), value);\n            reaction.setExcessReactantConc(excessReactantConc);\n            let id = reaction.id + \"_\" + ExcessReactantConc.tagName;\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level2,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(excessReactantConc, target);\n                }, value.toExponential(), ExcessReactantConc.tagName);\n            reactionDiv.appendChild(inputDiv);\n        }\n\n        // Create a new collapsible div for the reaction and append to the reactionListDiv.\n        let contentDivId: string = getID(Reaction.tagName, reaction.id);\n        getCollapsibleDiv({\n            divToAddTo: reactionListDiv,\n            elementToInsertBefore: null,\n            content: reactionDiv,\n            buttonLabel: reaction.id + \"(\" + reaction.getLabel() + \")\",\n            buttonId: getID(contentDivId, s_button),\n            margin: level1,\n            contentDivId: contentDivId\n        });\n\n    }\n    return reactionListDiv;\n}\n\n/**\n * Parse xml to initialise conditions.\n * @param xml The XML document.\n * @returns The conditions div.\n */\nfunction processConditions(xml: XMLDocument): HTMLDivElement {\n    console.log(Conditions.tagName);\n    // Create a div for the conditionss.\n    let conditionssDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"me:conditions\" element.\n    let xml_conditionss: HTMLCollectionOf<Element> = xml.getElementsByTagName(Conditions.tagName);\n    for (let i = 0; i < xml_conditionss.length; i++) {\n        let xml_conditions: Element = xml_conditionss[i];\n        // Create div to contain the conditions.\n        let conditionsID: string = getID(Conditions.tagName, i.toString());\n        let conditionsDiv: HTMLDivElement = createDiv(conditionsID, boundary1);\n        let conditions: Conditions = addConditions(getAttributes(xml_conditions), conditionsDiv, null, conditionssDiv, i);\n        let level = level2;\n        let nextLevel = level3;\n        handleBathGases(conditions, conditionsDiv, i, xml_conditions, level, nextLevel);\n        handlePTs(conditions, conditionsDiv, i, xml_conditions, level, nextLevel);\n        // Add a remove conditions button.\n        let removeButton: HTMLButtonElement = addRemoveButton(conditionsDiv, level, mesmer.removeConditions.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the conditions.\n            remove(conditionsID, ids);\n        });\n    }\n    // Create an add button to add a conditions.\n    createAddConditionsButton(conditionssDiv, level2, level3);\n    return conditionssDiv;\n}\n\n\nfunction handleBathGases(conditions: Conditions, conditionsDiv: HTMLDivElement, conditionsIndex: number, xml_conditions: Element | null,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string },\n    nextLevel: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): void {\n\n    // Bath Gases\n    let bathGasesDiv: HTMLDivElement = document.createElement(\"div\");\n    conditionsDiv.appendChild(bathGasesDiv);\n    let contentDivId: string = getID(Conditions.tagName, conditionsIndex.toString(), BathGas.tagName);\n    // Add collapsible div.\n    getCollapsibleDiv({\n        divToAddTo: conditionsDiv,\n        elementToInsertBefore: null,\n        content: bathGasesDiv,\n        buttonLabel: BathGas.tagName,\n        buttonId: getID(contentDivId, s_button),\n        margin: level,\n        contentDivId: contentDivId\n    });\n\n    // Add add button.\n    let addBathGasButton: HTMLButtonElement = createButton(s_Add_sy_add, undefined, nextLevel);\n    bathGasesDiv.appendChild(addBathGasButton);\n    addBathGasButton.addEventListener('click', () => {\n        let bathGas: BathGas = new BathGas(new Map(), s_selectOption);\n        let bathGasIndex = conditions.addBathGas(bathGas);\n        let div: HTMLDivElement = createFlexDiv(undefined, nextLevel);\n        let id: string = getID(Conditions.tagName, conditionsIndex.toString(), BathGas.tagName, bathGasIndex.toString());\n        let select: HTMLSelectElement = createSelectElementBathGas(Array.from(new Set(molecules.keys())), bathGas, true, id);\n        select.classList.add(BathGas.tagName);\n        div.appendChild(select);\n        addRemoveButton(div, boundary1, (bathGas) => {\n            bathGasesDiv.removeChild(div);\n            conditions.removeBathGas(bathGas);\n        });\n        bathGasesDiv.insertBefore(div, addBathGasButton);\n    });\n\n    // Process any \"bathGas\" elements that are immediate children of xml_conditions.\n    if (xml_conditions != null) {\n        let xml_bathGases: Element[] = Array.from(xml_conditions.children).filter(child => child.tagName === BathGas.tagName);\n        if (xml_bathGases.length > 0) {\n            for (let i = 0; i < xml_bathGases.length; i++) {\n                let attributes: Map<string, string> = getAttributes(xml_bathGases[i]);\n                let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGases[i]));\n                let bathGas: BathGas = new BathGas(attributes, moleculeID);\n                console.log(\"bathGas\" + bathGas.toString());\n                let bathGasIndex = conditions.addBathGas(bathGas);\n                let id: string = getID(Conditions.tagName, conditionsIndex.toString(), BathGas.tagName, bathGasIndex.toString());\n                let div: HTMLDivElement = createFlexDiv(id, nextLevel);\n                let select: HTMLSelectElement = createSelectElementBathGas(Array.from(new Set(molecules.keys())), bathGas, false, id);\n                div.appendChild(select);\n                addRemoveButton(div, boundary1, (bathGas) => {\n                    bathGasesDiv.removeChild(div);\n                    conditions.removeBathGas(bathGas);\n                });\n                bathGasesDiv.insertBefore(div, addBathGasButton);\n            }\n        } else {\n            let div: HTMLDivElement = createFlexDiv(undefined, nextLevel);\n            let id: string = getID(Conditions.tagName, conditionsIndex.toString(), BathGas.tagName, \"0\");\n            div.appendChild(createSelectElementBathGas(Array.from(new Set(molecules.keys())), undefined, false, id));\n            addRemoveButton(div, boundary1, (bathGas) => {\n                bathGasesDiv.removeChild(div);\n                conditions.removeBathGas(bathGas);\n            });\n            bathGasesDiv.insertBefore(div, addBathGasButton);\n        }\n    }\n}\n\n/**\n * \n * @param conditions \n * @param conditionsDiv \n * @param conditionsIndex \n * @param xml_conditions \n * @param level \n * @param nextLevel \n */\nfunction handlePTs(conditions: Conditions, conditionsDiv: HTMLDivElement, conditionsIndex: number, xml_conditions: Element | null,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string },\n    nextLevel: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): void {\n    // PTs\n    let moleculeKeys: Set<string> = new Set(molecules.keys());\n    // Create a new div for the PTs.\n    let pTsDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    conditionsDiv.appendChild(pTsDiv);\n    let pTs: PTs;\n    if (xml_conditions) {\n        let xml_PTss: HTMLCollectionOf<Element> = xml_conditions.getElementsByTagName(PTs.tagName);\n        if (xml_PTss.length > 0) {\n            if (xml_PTss.length > 1) {\n                throw new Error(\"Expecting 1 \" + PTs.tagName + \" but finding \" + xml_PTss.length + \"!\");\n            }\n            let attributes: Map<string, string> = getAttributes(xml_PTss[0]);\n            let xml_PTpairs: HTMLCollectionOf<Element> = xml_PTss[0].getElementsByTagName(PTpair.tagName);\n            if (xml_PTpairs.length == 0) {\n                throw new Error(\"Expecting 1 or more \" + PTpair.tagName + \" but finding 0!\");\n            } else {\n                pTs = new PTs(attributes);\n                for (let i = 0; i < xml_PTpairs.length; i++) {\n                    let pTpairAttributes: Map<string, string> = getAttributes(xml_PTpairs[i]);\n                    console.log(\"pTpairAttributes=\" + mapToString(pTpairAttributes));\n                    let pTpair = new PTpair(pTpairAttributes);\n                    pTs.addPTpair(pTpair);\n                    // BathGas.\n                    let xml_bathGass: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(BathGas.tagName);\n                    if (xml_bathGass.length > 0) {\n                        if (xml_bathGass.length > 1) {\n                            console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n                        }\n                        pTpair.setBathGas(new BathGas(getAttributes(xml_bathGass[0]),\n                            getNodeValue(getFirstChildNode(xml_bathGass[0]))));\n                    }\n                    // ExperimentRate.\n                    let xml_ers: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(ExperimentalRate.tagName);\n                    if (xml_ers.length > 0) {\n                        if (xml_ers.length > 1) {\n                            console.warn(\"xml_experimentRates.length=\" + xml_ers.length);\n                        }\n                        pTpair.setExperimentalRate(new ExperimentalRate(getAttributes(xml_ers[0]),\n                            parseFloat(getNodeValue(getFirstChildNode(xml_ers[0])))));\n                    }\n                    // ExperimentalYield.\n                    let xml_eys: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(ExperimentalYield.tagName);\n                    if (xml_eys.length > 0) {\n                        if (xml_eys.length > 1) {\n                            console.warn(\"xml_experimentalYields.length=\" + xml_eys.length);\n                        }\n                        pTpair.setExperimentalYield(new ExperimentalYield(getAttributes(xml_eys[0]),\n                            parseFloat(getNodeValue(getFirstChildNode(xml_eys[0])))));\n                    }\n                    // ExperimentalEigenvalue.\n                    let xml_ees: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(ExperimentalEigenvalue.tagName);\n                    if (xml_ees.length > 0) {\n                        if (xml_ees.length > 1) {\n                            console.warn(\"xml_experimentalEigenvalues.length=\" + xml_ees.length);\n                        }\n                        pTpair.setExperimentalEigenvalue(new ExperimentalEigenvalue(getAttributes(xml_ees[0]),\n                            parseFloat(getNodeValue(getFirstChildNode(xml_ees[0])))));\n                    }\n                    // Create pTpairDiv.\n                    pTsDiv.append(createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDiv.id, conditionsIndex, i, moleculeKeys, nextLevel));\n                }\n            }\n        } else {\n            pTs = new PTs(new Map());\n        }\n    } else {\n        pTs = new PTs(new Map());\n    }\n    conditions.setPTs(pTs);\n    // Add collapsible div.\n    let contentDivId: string = getID(Conditions.tagName, conditionsIndex.toString(), PTs.tagName);\n    getCollapsibleDiv({\n        divToAddTo: conditionsDiv,\n        elementToInsertBefore: null,\n        content: pTsDiv,\n        buttonLabel: PTs.tagName,\n        buttonId: getID(contentDivId, s_button),\n        margin: level,\n        contentDivId: contentDivId\n    });\n    // Create a buttons div for the add, add from spreadsheet and remove all buttons.\n    let pTsButtonsDiv = createDiv(undefined, nextLevel);\n    pTsDiv.appendChild(pTsButtonsDiv);\n    // Create an add button to add a new PTpair.\n    let addButton: HTMLButtonElement = createButton(s_Add_sy_add, undefined, boundary1);\n    pTsButtonsDiv.appendChild(addButton);\n    // Add event listener to the addButton.\n    addButton.addEventListener('click', () => {\n        // Create a new PTpair.\n        let pTpairAttributes: Map<string, string> = new Map();\n        pTpairAttributes.set(\"units\", \"Torr\");\n        let pTpair: PTpair = new PTpair(pTpairAttributes);\n        let pTpairIndex: number = pTs.addPTpair(pTpair);\n        console.log(\"Added new pTpair pTpairIndex=\" + pTpairIndex);\n        // Create a new div for the PTpair.\n        pTsDiv.insertBefore(createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDiv.id, conditionsIndex, pTpairIndex, moleculeKeys, nextLevel), pTsButtonsDiv);\n    });\n    // Create an add from spreadsheet button to add multiple PTPairs.\n    let addMultipleButton: HTMLButtonElement = createButton(s_Add_from_spreadsheet, undefined, boundary1);\n    pTsButtonsDiv.appendChild(addMultipleButton);\n    // Add event listener to the addMultipleButton.\n    addMultipleButton.addEventListener('click', () => {\n        // Add a new text input for the user to paste the PTPairs.\n        let div: HTMLDivElement = createFlexDiv(undefined, nextLevel);\n        let addFromSpreadsheetId = getID(PTs.tagName, \"addFromSpreadsheet\");\n        let input: HTMLInputElement = createInput(\"text\", addFromSpreadsheetId, nextLevel);\n        div.appendChild(input);\n        pTsDiv.insertBefore(div, pTsButtonsDiv);\n        // Add an event listener to the inputElement.\n        input.addEventListener('change', () => {\n            console.log(\"inputElement.value=\" + input.value);\n            console.log(\"inputElement.value.length=\" + input.value.length);\n            if (input.value.length > 0) {\n                let pTpairsArray: string[] = input.value.split(\" \");\n                // Is there a header?\n                let index: Map<string, number> = new Map();\n                pTpairsArray[0].split(\"\\t\").forEach((value, i) => {\n                    index.set(value, i);\n                });\n                console.log(\"pTpairsArray.length=\" + pTpairsArray.length);\n                for (let i = 1; i < pTpairsArray.length; i++) {\n                    let pTpairArray: string[] = pTpairsArray[i].split(\"\\t\");\n                    let pIndex: number = index.get(\"P\") as number;\n                    let p: number = parseFloat(pTpairArray[pIndex]);\n                    let unitsIndex: number = index.get(\"units\") as number;\n                    let pTpairAttributes: Map<string, string> = new Map();\n                    if (index.has(\"units\")) {\n                        let units: string = pTpairArray[unitsIndex];\n                        pTpairAttributes.set(\"units\", units);\n                    }\n                    let pTpair: PTpair = new PTpair(pTpairAttributes);\n                    pTs.addPTpair(pTpair);\n                    let tIndex: number = index.get(\"T\") as number;\n                    let t: number = parseFloat(pTpairArray[tIndex]);\n                    pTpair.setP(p);\n                    pTpair.setT(t);\n                    if (index.has(PTpair.s_excessReactantConc)) {\n                        let excessReactantConIndex: number = index.get(PTpair.s_excessReactantConc) as number;\n                        let excessReactantConc: string = pTpairArray[excessReactantConIndex];\n                        pTpairAttributes.set(PTpair.s_excessReactantConc, excessReactantConc);\n                    }\n                    if (index.has(PTpair.s_percentExcessReactantConc)) {\n                        let percentExcessReactantConIndex: number = index.get(PTpair.s_percentExcessReactantConc) as number;\n                        let percentExcessReactantConc: string = pTpairArray[percentExcessReactantConIndex];\n                        pTpairAttributes.set(PTpair.s_percentExcessReactantConc, percentExcessReactantConc);\n                    }\n                    if (index.has(PTpair.s_precision)) {\n                        console.log(\"index.has(PTpair.s_precision)\");\n                        let precisionIndex: number = index.get(PTpair.s_precision) as number;\n                        let precision: string = pTpairArray[precisionIndex];\n                        pTpairAttributes.set(PTpair.s_precision, precision);\n                        //console.log(\"precision=\" + precision);\n                    }\n                    if (index.has(BathGas.tagName)) {\n                        let bathGasIndex: number = index.get(BathGas.tagName) as number;\n                        let bathGas: string = pTpairArray[bathGasIndex];\n                        pTpair.setBathGas(new BathGas(new Map(), bathGas));\n                    }\n                    if (index.has(ExperimentalRate.tagName)) {\n                        let experimentalRateIndex: number = index.get(ExperimentalRate.tagName) as number;\n                        let experimentalRate: string = pTpairArray[experimentalRateIndex];\n                        pTpairAttributes.set(ExperimentalRate.tagName, experimentalRate);\n                        pTpair.setExperimentalRate(new ExperimentalRate(new Map(), parseFloat(experimentalRate)));\n                        // Set the attributes of the experimentalRate.\n                        // ref1.\n                        let experimentalRateRef1Index = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref1) as number;\n                        let experimentalRateRef1 = pTpairArray[experimentalRateRef1Index];\n                        pTpair.getExperimentalRate()?.setRef1(experimentalRateRef1);\n                        // ref2.\n                        let experimentalRateRef2Index = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref2) as number;\n                        let experimentalRateRef2 = pTpairArray[experimentalRateRef2Index];\n                        pTpair.getExperimentalRate()?.setRef2(experimentalRateRef2);\n                        // refReaction.\n                        let experimentalRateRefReactionIndex = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_refReaction) as number;\n                        let experimentalRateRefReaction = pTpairArray[experimentalRateRefReactionIndex];\n                        pTpair.getExperimentalRate()?.setRefReaction(experimentalRateRefReaction);\n                        // error.\n                        let experimentalRateErrorIndex = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_error) as number;\n                        let experimentalRateError = pTpairArray[experimentalRateErrorIndex];\n                        pTpair.getExperimentalRate()?.setError(parseFloat(experimentalRateError));\n                    }\n                    if (index.has(ExperimentalYield.tagName)) {\n                        let experimentalYieldIndex: number = index.get(ExperimentalYield.tagName) as number;\n                        let experimentalYield: string = pTpairArray[experimentalYieldIndex];\n                        pTpair.setExperimentalYield(new ExperimentalYield(new Map(), parseFloat(experimentalYield)));\n                        // Set the attributes of the experimentalYield.\n                        // ref.\n                        let experimentalYieldRefIndex = index.get(ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_ref) as number;\n                        let experimentalYieldRef = pTpairArray[experimentalYieldRefIndex];\n                        pTpair.getExperimentalYield()?.setRef(experimentalYieldRef);\n                        // yieldTime.\n                        let experimentalYieldYieldTimeIndex = index.get(ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_yieldTime) as number;\n                        let experimentalYieldYieldTime = pTpairArray[experimentalYieldYieldTimeIndex];\n                        pTpair.getExperimentalYield()?.setYieldTime(parseFloat(experimentalYieldYieldTime));\n                        // error.\n                        let experimentalYieldErrorIndex = index.get(ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_error) as number;\n                        let experimentalYieldError = pTpairArray[experimentalYieldErrorIndex];\n                        pTpair.getExperimentalYield()?.setError(parseFloat(experimentalYieldError));\n                    }\n                    if (index.has(ExperimentalEigenvalue.tagName)) {\n                        let experimentalEigenvalueIndex: number = index.get(ExperimentalEigenvalue.tagName) as number;\n                        let experimentalEigenvalue: string = pTpairArray[experimentalEigenvalueIndex];\n                        pTpair.setExperimentalEigenvalue(new ExperimentalEigenvalue(new Map(), parseFloat(experimentalEigenvalue)));\n                        // Set the attributes of the experimentalEigenvalue.\n                        // EigenvalueID.\n                        let experimentalEigenvalueEigenvalueIDIndex = index.get(ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_EigenvalueID) as number;\n                        let experimentalEigenvalueEigenvalueID = pTpairArray[experimentalEigenvalueEigenvalueIDIndex];\n                        pTpair.getExperimentalEigenvalue()?.setEigenvalueID(experimentalEigenvalueEigenvalueID);\n                        // error.\n                        let experimentalEigenvalueErrorIndex = index.get(ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_error) as number;\n                        let experimentalEigenvalueError = pTpairArray[experimentalEigenvalueErrorIndex];\n                        pTpair.getExperimentalEigenvalue()?.setError(parseFloat(experimentalEigenvalueError));\n                    }\n                    //console.log(\"pTpair=\" + pTpair);\n                    let pTpairIndex: number = pTs.pTpairs.length - 1;\n                    // Create a new div for the PTpair.\n                    pTsDiv.insertBefore(createPTpairDiv(pTs, pTsDiv, pTpair, conditionsDiv.id, conditionsIndex, pTpairIndex, moleculeKeys, nextLevel), pTsButtonsDiv);\n                }\n                pTsDiv.removeChild(div);\n            }\n        });\n    });\n    // Add a remove all button.\n    let removeAllButton: HTMLButtonElement = createButton(\"Remove All\", undefined, boundary1);\n    pTsButtonsDiv.appendChild(removeAllButton);\n    removeAllButton.addEventListener('click', () => {\n        pTs.removePTpairs();\n        // Remove all elements before the pTsButtonsDiv.\n        let child: Node | null = pTsDiv.firstChild;\n        while (child != null && child != pTsButtonsDiv) {\n            let nextSibling: Node | null = child.nextSibling;\n            pTsDiv.removeChild(child);\n            child = nextSibling;\n        }\n    });\n}\n\n/**\n * @param controlsDiv \n * @param level The level.\n * @returns A button.\n */\nfunction createAddConditionsButton(conditionssDiv: HTMLDivElement,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string },\n    nextLevel: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    conditionssDiv.appendChild(button);\n    button.addEventListener('click', (event: MouseEvent) => {\n        let i: number = mesmer.getNextConditionsID();\n        console.log(\"Add Conditions \" + i.toString());\n        let conditionsID: string = getID(Conditions.tagName, i.toString());\n        let conditionsDiv: HTMLDivElement = createDiv(conditionsID, boundary1);\n        // ElementToInsert before is element after the conditions div with the previous index.\n        let elementToInsertBefore: Element | null;\n        if (i > 0) {\n            let aboveElement = document.getElementById(getID(Conditions.tagName, (i - 1).toString())) as Element;\n            let nextElementSibling: Element | null = aboveElement.nextElementSibling;\n            // If nextElementSibling is not a child of conditionssDiv the element.\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == conditionssDiv) {\n                    elementToInsertBefore = nextElementSibling;\n                } else {\n                    elementToInsertBefore = button;\n                }\n            } else {\n                elementToInsertBefore = button;\n            }\n        } else {\n            elementToInsertBefore = button;\n        }\n        // Add the conditions\n        let conditions: Conditions = addConditions(new Map(), conditionsDiv, elementToInsertBefore, conditionssDiv, i);\n        handleBathGases(conditions, conditionsDiv, i, null, level, nextLevel);\n        handlePTs(conditions, conditionsDiv, i, null, level, nextLevel);\n        // Add a remove conditions button.\n        let removeButton: HTMLButtonElement = addRemoveButton(conditionsDiv, level2, mesmer.removeConditions.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the control.\n            remove(conditionsID, ids);\n        });\n    });\n    return button;\n}\n\n/**\n * Add and return a new conditions.\n */\nfunction addConditions(attributes: Map<string, string>, conditionsDiv: HTMLDivElement, elementToInsertBefore: Element | null,\n    conditionssDiv: HTMLDivElement, i: number): Conditions {\n    let conditions: Conditions = new Conditions(attributes, i);\n    mesmer.addConditions(conditions);\n    let contentDivId: string = getID(Conditions.tagName, i.toString());\n    getCollapsibleDiv({\n        divToAddTo: conditionssDiv,\n        elementToInsertBefore: elementToInsertBefore,\n        content: conditionsDiv,\n        buttonLabel: \"Conditions \" + i.toString(),\n        buttonId: getID(contentDivId, s_button),\n        margin: level1,\n        contentDivId: contentDivId\n    });\n    return conditions;\n}\n\n/**\n * @param pTs The PTs.\n * @param pTsDiv The PTs div.\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param pTIndex The index.\n * @param moleculeKeys The molecule keys.\n * @param level The level.\n */\nfunction createPTpairDiv(pTs: PTs, pTsDiv: HTMLDivElement, pTpair: PTpair, conditionsDivId: string, conditionsIndex: number, pTIndex: number,\n    moleculeKeys: Set<string>,\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let pTpairDiv: HTMLDivElement = createFlexDiv(undefined, level);\n    addPorT(pTpairDiv, PTpair.s_P, pTpair.getP.bind(pTpair), pTpair.setP.bind(pTpair)); // The binding is necessary to maintain the correct \"this\".\n    addAnyUnits(Mesmer.pressureUnits, pTpair.attributes, pTpairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n    addPorT(pTpairDiv, PTpair.s_T, pTpair.getT.bind(pTpair), pTpair.setT.bind(pTpair)); // The binding is necessary to maintain the correct \"this\".\n    let id: string = getID(conditionsDivId, PTpair.tagName, pTIndex.toString());\n\n    // ExcessReactantConc.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_excessReactantConc, getID(id, PTpair.s_excessReactantConc),\n    //    [pTpair], createExcessReactantConcInputElement);\n    //addExcessReactantConc(pTpairDiv, pTpair, pTIndex);\n    addAttribute(pTpairDiv, pTpair, conditionsIndex, pTIndex, PTpair.s_excessReactantConc, createExcessReactantConcInputElement);\n    //addAttribute(    pTpairDiv,     pTpair,    pTIndex,     PTpair.s_excessReactantConc,     createExcessReactantConcInputElement,\n    //(pTpair, attribute) => pTpair.attributes.has(attribute),    (pTpair, attribute) => null);\n\n    // PercentExcessReactantConc.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_percentExcessReactantConc);\n    addPercentExcessReactantConc(pTpairDiv, pTpair, conditionsIndex, pTIndex);\n\n    // Precision.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_precision, getID(id, PTpair.s_precision),\n    //    [pTpair], createPrecisionSelectElement);\n    //addPrecision(pTpairDiv, pTpair, pTIndex);\n    addAttribute(pTpairDiv, pTpair, conditionsIndex, pTIndex, PTpair.s_precision, createPrecisionSelectElement);\n    //addAttribute(    pTpairDiv,     pTpair,    pTIndex,     PTpair.s_precision, createPrecisionSelectElement,\n    //    (pTpair, attribute) => pTpair.attributes.has(attribute),    (pTpair, attribute) => null);\n\n\n    // BathGas.\n    //addButtonWithToggle(pTpairDiv, pTpair, BathGas.tagName, getID(id, BathGas.tagName),\n    //    [pTpair, moleculeKeys, true], createBathGasSelectElement);\n    addBathGas(pTpairDiv, pTpair, conditionsIndex, pTIndex, moleculeKeys);\n    /*\n    addAttribute(pTpairDiv, pTpair, pTIndex, BathGas.tagName, createBathGasSelectElement,\n        (pTpair, attribute) => pTpair.getBathGas() !== undefined,  (pTpair, attribute) => pTpair.getBathGas(), moleculeKeys\n    );\n    */\n\n    // ExperimentalRate.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalRate.tagName, getID(id, ExperimentalRate.tagName),\n    //    [undefined, pTpair, pTIndex], addExperimentalRateDetails);\n    //addExperimentalRate(pTpairDiv, pTpair, pTIndex);\n    addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, ExperimentalRate.tagName,\n        (pTpair) => pTpair.getExperimentalRate(), createExperimentalRateDetails);\n\n    // ExperimentalYield.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalYield.tagName, getID(id, ExperimentalYield.tagName),\n    //    [undefined, pTpair, pTIndex], addExperimentalYieldDetails);\n    //addExperimentalYield(pTpairDiv, pTpair, pTIndex);\n    addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, ExperimentalYield.tagName,\n        (pTpair) => pTpair.getExperimentalYield(), createExperimentalYieldDetails\n    );\n\n    // ExperimentalEigenvalue.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalEigenvalue.tagName, getID(id, ExperimentalEigenvalue.tagName),\n    //   [undefined, pTpair, pTIndex], addExperimentalEigenvalueDetails);\n    //addExperimentalEigenvalue(pTpairDiv, pTpair, pTIndex);\n    addExperimentalElement(pTpairDiv, pTpair, conditionsIndex, pTIndex, ExperimentalYield.tagName,\n        (pTpair) => pTpair.getExperimentalEigenvalue(), createExperimentalEigenvalueDetails\n    );\n\n    // Function to be used to remove a PTpair.\n    let removePTpair: (pTpairDiv: HTMLDivElement, i: number | undefined, pTpair: PTpair) => void = (pTpairDiv, i, pTpair) => {\n        pTsDiv.removeChild(pTpairDiv);\n        if (i !== undefined) {\n            pTs.removePTpair(i);\n        }\n        pTpair.removeBathGas();\n    };\n    addRemoveButton(pTpairDiv, boundary1, removePTpair, pTpairDiv, pTIndex, pTpair);\n    return pTpairDiv;\n}\n\n/**\n * @param pTpairDiv The pTpair div.\n * @param name The name (\"P\" or \"T\").\n * @param getter The getter method.\n * @param setter The setter method.\n */\nfunction addPorT(pTpairDiv: HTMLDivElement, name: string, getter: () => number, setter: (value: number) => void): void {\n    let lwi: HTMLDivElement = createLabelWithInput(\"number\", PTpair.tagName + \"_\" + name,\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            if (isNumeric(target.value)) {\n                setter(parseFloat(target.value));\n                console.log(`Set ${name} to ${target.value}`);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = getter().toString();\n            }\n            resizeInputElement(target);\n        }, getter().toExponential(), name);\n    let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n    input.value = getter().toString();\n    resizeInputElement(input);\n    pTpairDiv.appendChild(lwi);\n}\n\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param conditionsIndex The conditions index.\n * @param pTIndex The pTindex.\n */\nfunction addPercentExcessReactantConc(pTpairDiv: HTMLDivElement, pTpair: PTpair, conditionsIndex: number, pTIndex: number): void {\n    let id: string = getID(conditionsIndex.toString(), pTIndex.toString(), PTpair.s_percentExcessReactantConc);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.append(div);\n    let attribute: string = PTpair.s_percentExcessReactantConc;\n    let buttonTextContentSelected: string = attribute + sy_selected;\n    let buttonTextContentDeselected: string = attribute + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, getID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    if (pTpair.attributes.get(attribute)?.toLowerCase() == \"true\") {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            pTpair.attributes.set(attribute, \"true\");\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            pTpair.attributes.delete(attribute);\n        }\n    });\n}\n\nfunction addAttribute(pTpairDiv: HTMLDivElement, pTpair: PTpair, conditionsIndex: number, pTIndex: number, attribute: string,\n    createInputElement: (id: string, pTpair: PTpair) => HTMLInputElement | HTMLSelectElement): void {\n    let id: string = getID(conditionsIndex.toString(), pTIndex.toString(), attribute);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.append(div);\n    let buttonTextContentSelected: string = attribute + sy_selected;\n    let buttonTextContentDeselected: string = attribute + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, getID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let iid = getID(id, s_Input);\n    if (pTpair.attributes.has(attribute)) {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        let input = createInputElement(iid, pTpair);\n        div.insertBefore(input, button.nextSibling);\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            let input = createInputElement(iid, pTpair);\n            div.insertBefore(input, button.nextSibling);\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the input element.\n            remove(iid);\n        }\n    });\n}\n\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param i The index.\n * @param moleculeKeys The molecule keys.\n */\nfunction addBathGas(pTpairDiv: HTMLDivElement, pTpair: PTpair, conditionsIndex: number, pTIndex: number, moleculeKeys: Set<string>): void {\n    let id: string = getID(conditionsIndex.toString(), pTIndex.toString(), BathGas.tagName);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.append(div);\n    let tagName: string = BathGas.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, getID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let iid = getID(id, s_Input);\n    let bathGas: BathGas | undefined = pTpair.getBathGas();\n    if (bathGas == undefined) {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    } else {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        if (moleculeKeys.has(bathGas.value) == false) {\n            console.warn(\"moleculeKeys does not contain \" + bathGas.value);\n        }\n        div.appendChild(createBathGasSelectElement(iid, pTpair, bathGas, false));\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            div.appendChild(createBathGasSelectElement(iid, pTpair, bathGas, false));\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the select element.\n            remove(iid);\n        }\n    });\n}\n\nfunction addExperimentalElement(\n    pTpairDiv: HTMLDivElement,\n    pTpair: PTpair,\n    conditionsIndex: number, pTIndex: number,\n    tagName: string,\n    getAttribute: (pTpair: PTpair) => any,\n    createElement: (id: string, pTpair: PTpair, i: number) => HTMLElement\n): void {\n    let id: string = getID(conditionsIndex.toString(), pTIndex.toString(), tagName);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.append(div);\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, getID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let iid = getID(id, s_Input);\n    if (getAttribute(pTpair) == undefined) {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    } else {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        div.appendChild(createElement(iid, pTpair, pTIndex));\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            div.appendChild(createElement(iid, pTpair, pTIndex));\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the element.\n            remove(iid);\n        }\n    });\n}\n\n/**\n * @param id The id.\n * @param pTpair The PTpair.\n * @returns A select element.\n */\nfunction createPrecisionSelectElement(id: string, pTpair: PTpair): HTMLSelectElement {\n    let value: string;\n    if (pTpair.attributes.has(PTpair.s_precision)) {\n        value = pTpair.attributes.get(PTpair.s_precision) as string;\n    } else {\n        value = Mesmer.precisionOptions[0];\n    }\n    let select: HTMLSelectElement = createSelectElement(Mesmer.precisionOptions, PTpair.s_precision, value, id, boundary1);\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        pTpair.setPrecision(target.value);\n        console.log(\"Set \" + PTpair.s_precision + \" to \" + target.value);\n        resizeSelectElement(target);\n    });\n    resizeSelectElement(select);\n    return select;\n}\n\n/**\n * @param id The id for the HTMLInputElement created.\n * @param pTpair The PTpair.\n * @returns An HTMLInputElement.\n */\nfunction createExcessReactantConcInputElement(id: string, pTpair: PTpair): HTMLInputElement {\n    let input: HTMLInputElement = createInput(\"number\", id, boundary1);\n    let value: string;\n    if (pTpair.attributes.has(PTpair.s_excessReactantConc)) {\n        value = pTpair.attributes.get(PTpair.s_excessReactantConc) as string;\n    } else {\n        value = NaN.toString();\n    }\n    console.log(PTpair.s_excessReactantConc + \"=\" + value);\n    input.value = value;\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        pTpair.setExcessReactantConc(target.value);\n        console.log(\"Set \" + PTpair.s_excessReactantConc + \" to \" + target.value);\n        resizeInputElement(target);\n    });\n    resizeInputElement(input);\n    return input;\n}\n\n/**\n * @param pTpair The PTpair.\n * @param id The id.\n * @param bathGas The bath gas.\n * @returns A select element.\n */\nfunction createBathGasSelectElement(id: string, pTpair: PTpair, bathGas: BathGas | undefined, first: boolean): HTMLSelectElement {\n    //console.log(\"createBathGasSelectElement\");\n    //console.log(\"pTpair \" + pTpair.toString());\n    let select: HTMLSelectElement = createSelectElementBathGas(Array.from(new Set(molecules.keys())), bathGas, first, id);\n    select.id = id;\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        pTpair.setBathGas(new BathGas(new Map(), target.value));\n        console.log(\"Set bathGas to \" + target.value);\n        resizeSelectElement(target);\n    });\n    resizeSelectElement(select);\n    return select;\n}\n\n/**\n * @param options The options.\n * @param bathGas The bath gas.\n */\nfunction createSelectElementBathGas(options: string[], bathGas: BathGas | undefined, first: boolean, id: string): HTMLSelectElement {\n    let value: string;\n    if (first) {\n        options.push(s_selectOption);\n    } else {\n        // remove selectAnotherOption if it is present.\n        let index = options.indexOf(s_selectOption);\n        if (index > -1) {\n            options.splice(index, 1);\n        }\n    }\n    if (bathGas == undefined) {\n        bathGas = new BathGas(new Map(), s_selectOption);\n        value = s_selectOption;\n    } else {\n        value = bathGas.value;\n    }\n    let select: HTMLSelectElement = createSelectElement(options, BathGas.tagName, value, getID(id, s_Select), boundary1);\n    select.classList.add(BathGas.tagName);\n    selectAnotherOptionEventListener(options, select);\n    // Add event listener to selectElement.\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        (bathGas as BathGas).value = target.value;\n        console.log(\"Added \" + target.value + \" as \" + BathGas.tagName);\n        resizeSelectElement(target);\n    });\n    select.value = value;\n    resizeSelectElement(select);\n    return select;\n}\n\nfunction createExperimentalRateDetails(id: string, pTpair: PTpair): HTMLDivElement {\n    return addExperimentalDetails(\n        pTpair,\n        id,\n        pTpair => pTpair.getExperimentalRate(),\n        (pTpair, value) => pTpair.setExperimentalRate(value),\n        ExperimentalRate,\n        [\n            {\n                tagName: ExperimentalRate.tagName, type: \"number\",\n                eventHandler: (event, target) => setNumberNode(pTpair.getExperimentalRate() as ExperimentalRate, target),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).value.toString()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref1, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setRef1(target.value),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getRef1()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref2, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setRef2(target.value),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getRef2()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_refReaction, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setRefReaction(target.value),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getRefReaction()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_error, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setError(parseFloat(target.value)),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getError().toString()\n            }\n        ]\n    );\n}\n\nfunction createExperimentalYieldDetails(id: string, pTpair: PTpair): HTMLDivElement {\n    return addExperimentalDetails(\n        pTpair,\n        id,\n        pTpair => pTpair.getExperimentalYield(),\n        (pTpair, value) => pTpair.setExperimentalYield(value),\n        ExperimentalYield,\n        [\n            {\n                tagName: ExperimentalYield.tagName, type: \"number\",\n                eventHandler: (event, target) => setNumberNode(pTpair.getExperimentalYield() as ExperimentalYield, target),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).value.toString()\n            },\n            {\n                tagName: ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_ref, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalYield()?.setRef(target.value),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).getRef()\n            },\n            {\n                tagName: ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_yieldTime, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalYield()?.setYieldTime(parseFloat(target.value)),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).getYieldTime().toString()\n            },\n            {\n                tagName: ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_error, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalYield()?.setError(parseFloat(target.value)),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).getError().toString()\n            }\n        ]\n    );\n}\n\nfunction createExperimentalEigenvalueDetails(id: string, pTpair: PTpair): HTMLDivElement {\n    return addExperimentalDetails(\n        pTpair,\n        id,\n        pTpair => pTpair.getExperimentalEigenvalue(),\n        (pTpair, value) => pTpair.setExperimentalEigenvalue(value),\n        ExperimentalEigenvalue,\n        [\n            {\n                tagName: ExperimentalEigenvalue.tagName, type: \"number\",\n                eventHandler: (event, target) => setNumberNode(pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue, target),\n                valueGetter: () => (pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue).value.toString()\n            },\n            {\n                tagName: ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_EigenvalueID, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalEigenvalue()?.setEigenvalueID(target.value),\n                valueGetter: () => (pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue).getEigenvalueID()\n            },\n            {\n                tagName: ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_error, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalEigenvalue()?.setError(parseFloat(target.value)),\n                valueGetter: () => (pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue).getError().toString()\n            }\n        ]\n    );\n}\n/**\n * @param pTpair The PTpair.\n * @param id The id.\n * @param getExperimental The getter.\n * @param setExperimental The setter.\n * @param ExperimentalClass The class.\n * @param details The details.\n * @returns HTMLDivElement.\n */\nfunction addExperimentalDetails<T extends ExperimentalRate | ExperimentalYield | ExperimentalEigenvalue>(\n    pTpair: PTpair,\n    id: string,\n    getExperimental: (pTpair: PTpair) => T | undefined,\n    setExperimental: (pTpair: PTpair, value: T) => void,\n    ExperimentalClass: { new(attributes: Map<string, any>, value: number): T },\n    details: {\n        tagName: string, type: string, eventHandler: (event: Event, target: HTMLInputElement) => void,\n        valueGetter: () => string, label?: string\n    }[]): HTMLDivElement {\n    let div = createDiv(undefined, boundary1);\n    div.id = id;\n    let experimental: T | undefined = getExperimental(pTpair);\n    if (experimental == undefined) {\n        experimental = new ExperimentalClass(new Map(), NaN);\n        setExperimental(pTpair, experimental);\n    }\n    for (let detail of details) {\n        let detailId = id + \"_\" + detail.tagName;\n        div.appendChild(createLabelWithInput(detail.type, detailId, boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            detail.eventHandler(event, target);\n            console.log(\"Set \" + detail.tagName + \" to \" + target.value);\n            resizeInputElement(target);\n        }, detail.valueGetter(), detail.label || \"\"));\n    }\n    return div;\n}\n\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */\nfunction processModelParameters(xml: XMLDocument): HTMLDivElement {\n    console.log(ModelParameters.tagName);\n    let modelParametersDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    let xml_modelParameters: Element = getSingularElement(xml, ModelParameters.tagName);\n    let modelParameters: ModelParameters = new ModelParameters(getAttributes(xml_modelParameters));\n    mesmer.setModelParameters(modelParameters);\n    processGrainSize(modelParameters, xml_modelParameters, modelParametersDiv);\n    processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, AutomaticallySetMaxEne,\n        modelParameters.setAutomaticallySetMaxEne, modelParameters.removeAutomaticallySetMaxEne);\n    processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, EnergyAboveTheTopHill,\n        modelParameters.setEnergyAboveTheTopHill, modelParameters.removeEnergyAboveTheTopHill);\n    processModelParametersN(modelParameters, xml_modelParameters, modelParametersDiv, MaxTemperature,\n        modelParameters.setMaxTemperature, modelParameters.removeMaxTemperature);\n    return modelParametersDiv;\n}\n\n/**\n * @param modelParameters The model parameters.\n * @param xml_modelParameters The XML model parameters.\n * @param modelParametersDiv The model parameters div.\n */\nfunction processGrainSize(modelParameters: ModelParameters, xml_modelParameters: Element, modelParametersDiv: HTMLDivElement) {\n    let div: HTMLDivElement = createFlexDiv(undefined, level1);\n    modelParametersDiv.appendChild(div);\n    let tagName: string = GrainSize.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let xml: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(tagName);\n    let button = createButton(tagName, undefined, boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    div.appendChild(button);\n    let id = ModelParameters.tagName + \"_\" + tagName + \"_input\";\n    let ids = ModelParameters.tagName + \"_\" + tagName + \"_select\";\n    let gs: GrainSize;\n    let valueString: string;\n    if (xml.length == 1) {\n        valueString = getNodeValue(getFirstChildNode(xml[0]));\n        let value: number = parseFloat(valueString);\n        gs = new GrainSize(getAttributes(xml[0]), value);\n        button.textContent = buttonTextContentSelected;\n        createInputModelParameters(modelParameters, div, gs, id, ids, valueString, modelParameters.setGrainSize, Mesmer.energyUnits);\n        button.classList.toggle(s_optionOff);\n    } else {\n        valueString = \"\";\n        gs = new GrainSize(new Map(), NaN);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', () => {\n        // Check if the GrainSize already exists\n        if (!modelParameters.index.has(GrainSize.tagName)) {\n            createInputModelParameters(modelParameters, div, gs, id, ids, valueString, modelParameters.setGrainSize, Mesmer.energyUnits);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            valueString = gs.value.toExponential();\n            modelParameters.removeGrainSize();\n            document.getElementById(id)?.remove();\n            document.getElementById(ids)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * Process numerical modelParameters.\n * @param modelParameters The ModelParameters.\n * @param modelParametersDiv The modelParameters div.\n * @param xml_modelParameters The xml modelParameters.\n */\nfunction processModelParametersN<T extends { new(attributes: Map<string, string>, value: number): any; tagName: string }>(\n    modelParameters: ModelParameters, xml_modelParameters: Element, modelParametersDiv: HTMLDivElement, ModelParameterType: T,\n    setModelParameter: (mp: InstanceType<T>) => void, removeModelParameter: () => void): void {\n    let div: HTMLDivElement = createFlexDiv(undefined, level1);\n    modelParametersDiv.appendChild(div);\n    let tagName: string = ModelParameterType.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let xml: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(tagName);\n    let button = createButton(tagName, undefined, boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    div.appendChild(button);\n    let id = ModelParameters.tagName + \"_\" + tagName + \"_input\";\n    let ids = ModelParameters.tagName + \"_\" + tagName + \"_select\";\n    let mp: InstanceType<T>;\n    let valueString: string;\n    if (xml.length == 1) {\n        valueString = getNodeValue(getFirstChildNode(xml[0]));\n        let value: number = parseFloat(valueString);\n        mp = new ModelParameterType(getAttributes(xml[0]), value);\n        button.textContent = buttonTextContentSelected;\n        createInputModelParameters(modelParameters, div, mp, id, ids, valueString, setModelParameter, undefined);\n        button.classList.toggle(s_optionOff);\n    } else {\n        valueString = \"\";\n        mp = new ModelParameterType(new Map(), NaN);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', () => {\n        // Check if the ModelParameter already exists\n        if (!modelParameters.index.has(tagName)) {\n            createInputModelParameters(modelParameters, div, mp, id, ids, valueString, setModelParameter, undefined);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            valueString = mp.value.toExponential();\n            removeModelParameter();\n            document.getElementById(id)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param modelParameters The model parameters.\n * @param div The div.\n * @param element The element.\n * @param id The id.\n * @param ids The id for the units select.\n * @param valueString The value string.\n * @param setElementMethod The method to set the element.\n * @param units The units.\n */\nfunction createInputModelParameters(modelParameters: ModelParameters, div: HTMLDivElement, element: any,\n    id: string, ids: string, valueString: string, setElementMethod: (value: any) => void, units: any): void {\n    setElementMethod.call(modelParameters, element);\n    let input: HTMLInputElement = createInput(\"number\", id, boundary1);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setNumberNode(element, target);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    div.appendChild(input);\n    addAnyUnits(units, element.attributes, div, ids, element.constructor.tagName, boundary1);\n}\n\n/**\n * Parses xml to initialise controls.\n * @param xml The XML document.\n * @returns The controls div.\n * \n * Tag control options:\n * me:calculateRateCoefficientsOnly\n * me:printCellDOS\n * me:printCellTransitionStateFlux\n * me:printReactionOperatorColumnSums\n * me:printGrainBoltzmann\n * me:printGrainDOS\n * me:printGrainkbE\n * me:printGrainkfE\n * me:printTSsos\n * me:printGrainedSpeciesProfile\n * me:printGrainTransitionStateFlux\n * me:printReactionOperatorSize\n * me:printSpeciesProfile\n * me:printPhenomenologicalEvolution\n * me:printTunnelingCoefficients\n * me:printCrossingCoefficients\n * me:testDOS\n * me:testRateConstants\n * me:useTheSameCellNumberForAllConditions\n * me:hideInactive\n * me:ForceMacroDetailedBalance\n * \n * TagWithAttribute control options:\n * me:testMicroRates\n * \n * StringNode control options:\n * me:calcMethod \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\"\n * \n * NumberNode control options:\n * me:eigenvalues\n * me:shortestTimeOfInterest\n * me:MaximumEvolutionTime\n * me:automaticallySetMaxEne\n * me:diagramEnergyOffset\n */\nfunction processControl(xml: XMLDocument): HTMLDivElement {\n    console.log(Control.tagName);\n    // Create a div for the controls.\n    let controlsDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"me:control\" element.\n    let xml_controls: HTMLCollectionOf<Element> = xml.getElementsByTagName(Control.tagName);\n    for (let i = 0; i < xml_controls.length; i++) {\n        let xml_control: Element = xml_controls[i];\n        // Create div to contain the control.\n        let controlID: string = getID(Control.tagName, i.toString());\n        let controlDiv: HTMLDivElement = createDiv(controlID, boundary1);\n        let control: Control = addControl(getAttributes(xml_control), controlDiv, null, controlsDiv, i);\n        let level = level2;\n        // Create a map of the on/off control options. The keys are the tag names and the values are the buttons.\n        let onOffControls: Map<string, HTMLButtonElement> = new Map();\n        getControlOptionsSimple(control).forEach(option => {\n            handleControl(control, controlDiv, i, onOffControls, xml_control, null, option.class, option.setMethod, option.removeMethod);\n        });\n        // Create a div for the on/off controls.\n        let onOffControlsDiv: HTMLDivElement = createFlexDiv(undefined, level);\n        let orderedOnOffControls = new Map([...onOffControls.entries()].sort());\n        orderedOnOffControls.forEach((button: HTMLButtonElement) => {\n            onOffControlsDiv.appendChild(button);\n        });\n        controlDiv.appendChild(onOffControlsDiv);\n        // Controls with additional things to set.\n        handleTestMicroRates(control, controlDiv, null, level);\n        handleCalcMethod(control, controlDiv, i, xml_control, level);\n        getControlItems(control).forEach(item => {\n            handleControl(control, controlDiv, i, onOffControls, xml_control, level, item.class, item.setMethod, item.removeMethod, true);\n        });\n        // Add a remove control button.\n        let removeButton: HTMLButtonElement = addRemoveButton(controlDiv, level2, mesmer.removeControl.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the control.\n            remove(controlID, ids);\n        });\n    }\n    // Create an add button to add a control.\n    createAddControlButton(controlsDiv, level2);\n    return controlsDiv;\n}\n\n/**\n * @param control The control.\n * @return An array of the on/off control options.\n */\nfunction getControlOptionsSimple(control: Control): { class: any, setMethod: (value: any) => void, removeMethod: () => void }[] {\n    return [\n        { class: CalculateRateCoefficientsOnly, setMethod: control.setCalculateRateCoefficientsOnly, removeMethod: control.removeCalculateRateCoefficientsOnly },\n        { class: PrintCellDOS, setMethod: control.setPrintCellDOS, removeMethod: control.removePrintCellDOS },\n        { class: PrintCellTransitionStateFlux, setMethod: control.setPrintCellTransitionStateFlux, removeMethod: control.removePrintCellTransitionStateFlux },\n        { class: PrintReactionOperatorColumnSums, setMethod: control.setPrintReactionOperatorColumnSums, removeMethod: control.removePrintReactionOperatorColumnSums },\n        { class: PrintGrainBoltzmann, setMethod: control.setPrintGrainBoltzmann, removeMethod: control.removePrintGrainBoltzmann },\n        { class: PrintGrainDOS, setMethod: control.setPrintGrainDOS, removeMethod: control.removePrintGrainDOS },\n        { class: PrintGrainkbE, setMethod: control.setPrintGrainkbE, removeMethod: control.removePrintGrainkbE },\n        { class: PrintGrainkfE, setMethod: control.setPrintGrainkfE, removeMethod: control.removePrintGrainkfE },\n        { class: PrintTSsos, setMethod: control.setPrintTSsos, removeMethod: control.removePrintTSsos },\n        { class: PrintGrainedSpeciesProfile, setMethod: control.setPrintGrainedSpeciesProfile, removeMethod: control.removePrintGrainedSpeciesProfile },\n        { class: PrintGrainTransitionStateFlux, setMethod: control.setPrintGrainTransitionStateFlux, removeMethod: control.removePrintGrainTransitionStateFlux },\n        { class: PrintReactionOperatorSize, setMethod: control.setPrintReactionOperatorSize, removeMethod: control.removePrintReactionOperatorSize },\n        { class: PrintSpeciesProfile, setMethod: control.setPrintSpeciesProfile, removeMethod: control.removePrintSpeciesProfile },\n        { class: PrintPhenomenologicalEvolution, setMethod: control.setPrintPhenomenologicalEvolution, removeMethod: control.removePrintPhenomenologicalEvolution },\n        { class: PrintTunnelingCoefficients, setMethod: control.setPrintTunnelingCoefficients, removeMethod: control.removePrintTunnelingCoefficients },\n        { class: PrintCrossingCoefficients, setMethod: control.setPrintCrossingCoefficients, removeMethod: control.removePrintCrossingCoefficients },\n        { class: TestDOS, setMethod: control.setTestDOS, removeMethod: control.removeTestDOS },\n        { class: TestRateConstant, setMethod: control.setTestRateConstants, removeMethod: control.removeTestRateConstants },\n        { class: UseTheSameCellNumberForAllConditions, setMethod: control.setUseTheSameCellNumberForAllConditions, removeMethod: control.removeUseTheSameCellNumberForAllConditions },\n        //{ class: HideInactive, setMethod: control.setHideInactive, removeMethod: control.removeHideInactive }\n        { class: ForceMacroDetailedBalance, setMethod: control.setForceMacroDetailedBalance, removeMethod: control.removeForceMacroDetailedBalance },\n    ];\n}\n\n/**\n * @param control The control.\n * @return An array of the control items.\n */\n\nfunction getControlItems(control: Control): { class: any, setMethod: (value: any) => void, removeMethod: () => void }[] {\n    return [\n        { class: Eigenvalues, setMethod: control.setEigenvalues, removeMethod: control.removeEigenvalues },\n        { class: ShortestTimeOfInterest, setMethod: control.setShortestTimeOfInterest, removeMethod: control.removeShortestTimeOfInterest },\n        { class: MaximumEvolutionTime, setMethod: control.setMaximumEvolutionTime, removeMethod: control.removeMaximumEvolutionTime },\n        { class: AutomaticallySetMaxEne, setMethod: control.setAutomaticallySetMaxEne, removeMethod: control.removeAutomaticallySetMaxEne },\n        { class: DiagramEnergyOffset, setMethod: control.setDiagramEnergyOffset, removeMethod: control.removeDiagramEnergyOffset },\n    ];\n}\n\n/**\n * @param controlsDiv \n * @param level The level.\n * @returns A button.\n */\nfunction createAddControlButton(controlsDiv: HTMLDivElement,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    controlsDiv.appendChild(button);\n    button.addEventListener('click', (event: MouseEvent) => {\n        let i: number = mesmer.getNextControlID();\n        console.log(\"Add Control \" + i.toString());\n        let controlID: string = getID(Control.tagName, i.toString());\n        let controlDiv: HTMLDivElement = createDiv(controlID, boundary1);\n        // ElementToInsert before is element after the control div with the previous index.\n        let elementToInsertBefore: Element | null;\n        if (i > 0) {\n            let aboveElement = document.getElementById(getID(Control.tagName, (i - 1).toString())) as Element;\n            let nextElementSibling: Element | null = aboveElement.nextElementSibling;\n            // If nextElementSibling is not a child of controlsDiv the element.\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == controlsDiv) {\n                    elementToInsertBefore = nextElementSibling;\n                } else {\n                    elementToInsertBefore = button;\n                }\n            } else {\n                elementToInsertBefore = button;\n            }\n        } else {\n            elementToInsertBefore = button;\n        }\n        // Add the control\n        let control: Control = addControl(new Map(), controlDiv, elementToInsertBefore, controlsDiv, i);\n        // Create a map of the on/off control options. The keys are the tag names and the values are the buttons.\n        let onOffControls: Map<string, HTMLButtonElement> = new Map();\n        getControlOptionsSimple(control).forEach(option => {\n            handleControl(control, controlDiv, i, onOffControls, null, null, option.class, option.setMethod, option.removeMethod);\n        });\n        // Create a div for the on/off controls.\n        let onOffControlsDiv: HTMLDivElement = createFlexDiv(undefined, level);\n        let orderedOnOffControls = new Map([...onOffControls.entries()].sort());\n        orderedOnOffControls.forEach((button: HTMLButtonElement) => {\n            onOffControlsDiv.appendChild(button);\n        });\n        controlDiv.appendChild(onOffControlsDiv);\n        // Controls with additional things to set.\n        handleTestMicroRates(control, controlDiv, null, level);\n        handleCalcMethod(control, controlDiv, i, null, level);\n        getControlItems(control).forEach(item => {\n            handleControl(control, controlDiv, i, onOffControls, null, level, item.class, item.setMethod, item.removeMethod, true);\n        });\n        // Add a remove control button.\n        let removeButton: HTMLButtonElement = addRemoveButton(controlDiv, level2, mesmer.removeControl.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the control.\n            remove(controlID, ids);\n        });\n    });\n    return button;\n}\n\n/**\n * Add and return a new control.\n */\nfunction addControl(attributes: Map<string, string>, controlDiv: HTMLDivElement, elementToInsertBefore: Element | null,\n    controlsDiv: HTMLDivElement, i: number): Control {\n    let control: Control = new Control(attributes, i);\n    mesmer.addControl(control);\n    let contentDivId: string = getID(Control.tagName, i.toString());\n    getCollapsibleDiv({\n        divToAddTo: controlsDiv,\n        elementToInsertBefore: elementToInsertBefore,\n        content: controlDiv,\n        buttonLabel: \"Control \" + i.toString(),\n        buttonId: getID(contentDivId, s_button),\n        margin: level1,\n        contentDivId: contentDivId\n    });\n    return control;\n}\n\n/**\n * @param control The control.\n * @param div The div.\n * @param obj The object.\n * @param setControlMethod The set control method. \n * @param id The id for the input.\n * @param valueString The value string.\n */\nfunction createInputControlItem(control: Control, div: HTMLDivElement, obj: any,\n    setControlMethod: (value: any) => void, id: string, valueString: string) {\n    setControlMethod.call(control, obj);\n    let input: HTMLInputElement = createInput(\"number\", id, boundary1);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setNumberNode(obj, target);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    div.appendChild(input);\n}\n\n/**\n * \n * @param control The control.\n * @param controlDiv The control div.\n * @param index The index.\n * @param onOffControls The on/off controls.\n * @param xml_control The xml control.\n * @param ControlClass The control class.\n * @param setControlMethod The set control method.\n * @param removeControlMethod The remove control method.\n */\nfunction handleControl(control: Control, controlDiv: HTMLDivElement, index: number, onOffControls: Map<string, HTMLButtonElement> | null,\n    xml_control: Element | null, level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string } | null,\n    ControlClass: any, setControlMethod: (value: any) => void, removeControlMethod: () => void, handleInput: boolean = false): void {\n    let tagName: string = ControlClass.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    if (onOffControls) {\n        onOffControls.set(tagName, button);\n    }\n    let controlInstance: any;\n    let div: HTMLDivElement;\n    let id: string;\n\n    if (level) {\n        div = createFlexDiv(undefined, level);\n        controlDiv.appendChild(div);\n        div.appendChild(button);\n        id = getID(Control.tagName, tagName, s_Input);\n    }\n\n    if (xml_control) {\n        let xml: HTMLCollectionOf<Element> = xml_control!.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            if (handleInput) {\n                let valueString = getNodeValue(getFirstChildNode(xml[0]));\n                let value: number = parseFloat(valueString);\n                controlInstance = new ControlClass(getAttributes(xml[0]), value);\n                createInputControlItem(control, div!, controlInstance, setControlMethod, id!, valueString);\n            } else {\n                setControlMethod.call(control, controlInstance);\n            }\n            button.textContent = buttonTextContentSelected;\n            button.classList.toggle(s_optionOff);\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            button.classList.toggle(s_optionOn);\n        }\n    } else {\n        controlInstance = new ControlClass(new Map());\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (!control.index.has(tagName)) {\n            if (handleInput) {\n                createInputControlItem(control, div!, controlInstance, setControlMethod, id!, \"\");\n            } else {\n                setControlMethod.call(control, controlInstance);\n            }\n            button.textContent = buttonTextContentSelected;\n        } else {\n            if (handleInput) {\n                remove(id!);\n            }\n            removeControlMethod.call(control);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param control The control.\n * @param controlDiv The control div.\n * @param i The index.\n * @param xml_control The xml control. \n * @param level The level.\n */\nfunction handleCalcMethod(control: Control, controlDiv: HTMLDivElement, i: number, xml_control: Element | null,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): void {\n    let div: HTMLDivElement = createFlexDiv(undefined, level);\n    controlDiv.appendChild(div);\n    let tagName: string = CalcMethod.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    // Add the div for the CalcMethod.\n    let divCmId = getID(Control.tagName, tagName, i.toString());\n    let divCm: HTMLDivElement = createFlexDiv(divCmId, boundary1);\n    div.appendChild(divCm);\n    let options: string[] = CalcMethod.options;\n    let divCmDetailsId = getID(divCmId, \"details\");\n    let divCmDetailsSelectId = getID(divCmDetailsId, \"select\");\n    let cm: CalcMethod;\n    let first: boolean = true;\n\n    if (xml_control) {\n        let xml: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(tagName);\n        if (xml.length > 0) {\n            if (xml.length > 1) {\n                throw new Error(\"More than one CalcMethod element.\");\n            }\n            let attributes: Map<string, string> = getAttributes(xml[0]);\n            let xsi_type: string = attributes.get(\"xsi:type\") as string;\n            cm = getCalcMethod(control, divCm, xml, options, attributes, tagName, xsi_type, divCmDetailsId, divCmDetailsSelectId);\n            control.setCalcMethod(cm);\n            button.classList.toggle(s_optionOff);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            button.classList.toggle(s_optionOn);\n            button.textContent = buttonTextContentDeselected;\n        }\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        // Check if the CalcMethod already exists\n        if (!control.index.has(tagName)) {\n            if (first) {\n                if (options[options.length - 1] != s_selectOption) {\n                    options.push(s_selectOption);\n                }\n            }\n            // Remove select.\n            //remove(divCmId);\n            remove(divCmDetailsId);\n            remove(divCmDetailsSelectId);\n            // Create the select element.\n            let select: HTMLSelectElement = createSelectElementCalcMethod(control, div, options, tagName, s_selectOption, divCmDetailsId, divCmDetailsSelectId);\n            divCm.appendChild(select);\n            button.textContent = buttonTextContentSelected;\n            button.classList.toggle(s_optionOn)\n            button.classList.toggle(s_optionOff);\n        } else {\n            if (control.getCalcMethod() != null) {\n                control.removeCalcMethod();\n                // Remove any existing div.\n                //remove(divCmId);\n                remove(divCmDetailsId);\n                console.log(\"remove(divCmDetailsSelectId) \" + divCmDetailsSelectId);\n                console.log(\"button.textContent \" + button.textContent);\n                remove(divCmDetailsSelectId);\n                button.textContent = buttonTextContentDeselected;\n                button.classList.toggle(s_optionOn)\n                button.classList.toggle(s_optionOff);\n            }\n        }\n    });\n}\n\n/**\n * Process \"me:testMicroRates\".\n * @param control The control.\n * @param controlDiv The control div.\n * @param xml_control The xml control.\n * @param level The level.\n */\nfunction handleTestMicroRates(control: Control, controlDiv: HTMLDivElement, xml_control: Element | null,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): void {\n    let div: HTMLDivElement = createFlexDiv(undefined, level);\n    controlDiv.appendChild(div);\n    let tagName: string = TestMicroRates.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(tagName, undefined, boundary1);\n    button.id = Control.tagName + \"_\" + tagName;\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let idTmax = Control.tagName + \"_\" + tagName + \"_Tmax\";\n    let idTmin = Control.tagName + \"_\" + tagName + \"_Tmin\";\n    let idTstep = Control.tagName + \"_\" + tagName + \"_Tstep\";\n    if (xml_control) {\n        let xml: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            createTestMicroRates(control, div, xml, idTmax, idTmin, idTstep);\n            button.classList.toggle(s_optionOff);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            button.classList.toggle(s_optionOn);\n            button.textContent = buttonTextContentDeselected;\n        }\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        // Check if the TestMicroRates already exists\n        if (!control.index.has(tagName)) {\n            createTestMicroRates(control, div, null, idTmax, idTmin, idTstep);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            control.removeTestMicroRates();\n            // Remove any existing Tmax.\n            document.getElementById(idTmax)?.remove();\n            // Remove any existing Tmin.\n            document.getElementById(idTmin)?.remove();\n            // Remove any existing Tstep.\n            document.getElementById(idTstep)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param control The control.\n * @param div The div.\n * @param xml_tmr The xml.\n * @param idTmax The Tmax id.\n * @param idTmin The Tmin id.\n * @param idTstep The Tstep id.\n */\nfunction createTestMicroRates(control: Control, div: HTMLDivElement, xml_tmr: HTMLCollectionOf<Element> | null,\n    idTmax: string, idTmin: string, idTstep: string): void {\n    let attributes: Map<string, string>;\n    let tmr: TestMicroRates;\n    if (xml_tmr != null && xml_tmr.length > 0) {\n        if (xml_tmr.length > 1) {\n            throw new Error(\"More than one TestMicroRates element.\");\n        }\n        attributes = getAttributes(xml_tmr[0]);\n        tmr = new TestMicroRates(attributes);\n    } else {\n        attributes = new Map<string, string>();\n        attributes.set(\"Tmax\", \"\");\n        attributes.set(\"Tmin\", \"\");\n        attributes.set(\"Tstep\", \"\");\n        tmr = new TestMicroRates(attributes);\n    }\n    control.setTestMicroRates(tmr);\n    // Tmax.\n    let tMax: number = tmr.getTmax();\n    let tMaxlwi: HTMLDivElement = createLabelWithInput(\"number\", idTmax + \"_input\",\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                tmr.setTmax(parseFloat(target.value));\n                console.log(\"Set Tmax to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = tMax.toExponential();\n            }\n            resizeInputElement(target);\n        }, tMax.toExponential(), \"Tmax\");\n    tMaxlwi.id = idTmax;\n    resizeInputElement(tMaxlwi.querySelector('input') as HTMLInputElement);\n    div.appendChild(tMaxlwi);\n    // Tmin.\n    let tMin: number = tmr.getTmin();\n    let tMinlwi: HTMLDivElement = createLabelWithInput(\"number\", idTmin + \"_input\",\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                tmr.setTmin(parseFloat(target.value));\n                console.log(\"Set Tmin to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = tMax.toExponential();\n            }\n            resizeInputElement(target);\n        }, tMin.toExponential(), \"Tmin\");\n    tMinlwi.id = idTmin;\n    resizeInputElement(tMinlwi.querySelector('input') as HTMLInputElement);\n    div.appendChild(tMinlwi);\n    // Tstep.\n    let tStep: number = tmr.getTstep();\n    let tSteplwi: HTMLDivElement = createLabelWithInput(\"number\", idTstep + \"_input\",\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                tmr.setTstep(parseFloat(target.value));\n                console.log(\"Set Tstep to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = tMax.toExponential();\n            }\n            resizeInputElement(target);\n        }, tStep.toExponential(), \"Tstep\");\n    tSteplwi.id = idTstep;\n    resizeInputElement(tSteplwi.querySelector('input') as HTMLInputElement);\n    div.appendChild(tSteplwi);\n}\n\n/**\n * Get the CalcMethod from the XML.\n * @param control The control.\n * @param divCm The div cm.\n * @param xml The xml.\n * @param options The options.\n * @param attributes The attributes.\n * @param tagName The tag name.\n * @param xsi_type The xsi:type.\n * @param divCmDetailsId The div cm details id.\n * @param divCmDetailsSelectId The div cm details select id.\n * @returns The CalcMethod.\n */\nfunction getCalcMethod(control: Control, divCm: HTMLDivElement, xml: HTMLCollectionOf<Element>, options: string[],\n    attributes: Map<string, string>, tagName: string, xsi_type: string,\n    divCmDetailsId: string, divCmDetailsSelectId: string): CalcMethod {\n    let cm: CalcMethod;\n    // Create the select element.\n    let select: HTMLSelectElement = createSelectElementCalcMethod(control, divCm, options, tagName, xsi_type, divCmDetailsId,\n        divCmDetailsSelectId);\n    // Set the select element to the correct value.\n    select.value = xsi_type;\n    divCm.appendChild(select);\n    // Add the details div.\n    let divCmDetails: HTMLDivElement = createFlexDiv(undefined, boundary1);\n    divCmDetails.id = divCmDetailsId;\n    divCm.appendChild(divCmDetails);\n    if (xsi_type == CalcMethodSimpleCalc.xsi_type || xsi_type == CalcMethodSimpleCalc.xsi_type2) {\n        cm = new CalcMethodSimpleCalc(attributes);\n    } else if (xsi_type == CalcMethodGridSearch.xsi_type || xsi_type == CalcMethodGridSearch.xsi_type2) {\n        cm = new CalcMethodGridSearch(attributes);\n    } else if (xsi_type == CalcMethodFitting.xsi_type || xsi_type == CalcMethodFitting.xsi_type2) {\n        let cmf: CalcMethodFitting = new CalcMethodFitting(attributes);\n        cm = cmf;\n        // FittingIterations.\n        let fi_xml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(FittingIterations.tagName);\n        if (fi_xml.length > 0) {\n            if (fi_xml.length == 1) {\n                let value: number = parseFloat(getNodeValue(getFirstChildNode(fi_xml[0])));\n                let fittingIterations: FittingIterations = new FittingIterations(getAttributes(fi_xml[0]), value);\n                cmf.setFittingIterations(fittingIterations);\n            } else {\n                throw new Error(\"More than one FittingIterations element.\");\n            }\n        }\n        processCalcMethodFitting(divCmDetails, cmf);\n    } else if (xsi_type == CalcMethodMarquardt.xsi_type || xsi_type == CalcMethodMarquardt.xsi_type2) {\n        let cmm: CalcMethodMarquardt = new CalcMethodMarquardt(attributes);\n        cm = cmm;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = MarquardtIterations.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: number = parseFloat(getNodeValue(getFirstChildNode(elementXml[0])));\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, MarquardtIterations, cmm.setMarquardtIterations.bind(cmm));\n        processElement(xml, MarquardtTolerance, cmm.setMarquardtTolerance.bind(cmm));\n        processElement(xml, MarquardtDerivDelta, cmm.setMarquardtDerivDelta.bind(cmm));\n        processCalcMethodMarquardt(divCmDetails, cmm);\n    } else if (xsi_type == CalcMethodAnalyticalRepresentation.xsi_type || xsi_type == CalcMethodAnalyticalRepresentation.xsi_type2) {\n        let cmar: CalcMethodAnalyticalRepresentation = new CalcMethodAnalyticalRepresentation(attributes);\n        cm = cmar;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = ClassConstructor.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: any = getNodeValue(getFirstChildNode(elementXml[0]));\n                    if (!isNaN(parseFloat(value))) {\n                        value = parseFloat(value);\n                    }\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, Format, cmar.setFormat.bind(cmar));\n        processElement(xml, Precision, cmar.setPrecision.bind(cmar));\n        processElement(xml, ChebNumTemp, cmar.setChebNumTemp.bind(cmar));\n        processElement(xml, ChebNumConc, cmar.setChebNumConc.bind(cmar));\n        processElement(xml, ChebMaxTemp, cmar.setChebMaxTemp.bind(cmar));\n        processElement(xml, ChebMinTemp, cmar.setChebMinTemp.bind(cmar));\n        processElement(xml, ChebMaxConc, cmar.setChebMaxConc.bind(cmar));\n        processElement(xml, ChebMinConc, cmar.setChebMinConc.bind(cmar));\n        processElement(xml, ChebTExSize, cmar.setChebTExSize.bind(cmar));\n        processElement(xml, ChebPExSize, cmar.setChebPExSize.bind(cmar));\n        processCalcMethodAnalyticalRepresentation(divCmDetails, cmar);\n    } else if (xsi_type == CalcMethodThermodynamicTable.xsi_type || xsi_type == CalcMethodThermodynamicTable.xsi_type2) {\n        let cmtt: CalcMethodThermodynamicTable = new CalcMethodThermodynamicTable(attributes);\n        cm = cmtt;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = ClassConstructor.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: number = parseFloat(getNodeValue(getFirstChildNode(elementXml[0])));\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, Tmin, cmtt.setTmin.bind(cmtt));\n        processElement(xml, Tmid, cmtt.setTmid.bind(cmtt));\n        processElement(xml, Tmax, cmtt.setTmax.bind(cmtt));\n        processElement(xml, Tstep, cmtt.setTstep.bind(cmtt));\n        processCalcMethodThermodynamicTable(divCmDetails, cmtt);\n    } else if (xsi_type == CalcMethodSensitivityAnalysis.xsi_type || xsi_type == CalcMethodSensitivityAnalysis.xsi_type2) {\n        let cmsa: CalcMethodSensitivityAnalysis = new CalcMethodSensitivityAnalysis(attributes);\n        cm = cmsa;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = ClassConstructor.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: any = getNodeValue(getFirstChildNode(elementXml[0]));\n                    if (!isNaN(parseFloat(value))) {\n                        value = parseFloat(value);\n                    }\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, SensitivityAnalysisSamples, cmsa.setSensitivityAnalysisSamples.bind(cmsa));\n        processElement(xml, SensitivityAnalysisOrder, cmsa.setSensitivityAnalysisOrder.bind(cmsa));\n        processElement(xml, SensitivityNumVarRedIters, cmsa.setSensitivityNumVarRedIters.bind(cmsa));\n        processElement(xml, SensitivityVarRedMethod, cmsa.setSensitivityVarRedMethod.bind(cmsa));\n        processCalcMethodSensitivityAnalysis(divCmDetails, cmsa);\n    } else {\n        throw new Error(\"Unknown xsi:type: \" + xsi_type);\n    }\n    return cm;\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodFitting.\n */\nfunction processCalcMethodFitting(divCmDetails: HTMLDivElement, cm: CalcMethodFitting) {\n    // FittingIterations.\n    let fittingIterations: MarquardtIterations = cm.getFittingIterations() || new FittingIterations(new Map(), NaN);\n    cm.setFittingIterations(fittingIterations);\n    divCmDetails.appendChild(createLabelWithInput(\"number\", divCmDetails.id + \"_FittingIterations_input\", boundary1, level0,\n        (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                fittingIterations.value = parseInt(target.value);\n                console.log(\"Set FittingIterations to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = fittingIterations.value.toString();\n            }\n            resizeInputElement(target);\n        }, fittingIterations.value.toString(), FittingIterations.tagName));\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodMarquardt.\n */\nfunction processCalcMethodMarquardt(divCmDetails: HTMLDivElement, cm: CalcMethodMarquardt) {\n    function createLabelWithInputForObject(obj: { value: number, tagName: string }, divCmDetails: HTMLElement,\n        boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n        level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n        let id = getID(divCmDetails.id, obj.tagName, \"Input\");\n        let value = obj.value.toString();\n        let labelTextContent = obj.tagName;\n        let inputHandler = (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                obj.value = parseFloat(target.value);\n                console.log(\"Set \" + obj.tagName + \" to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = obj.value.toString();\n            }\n            resizeInputElement(target);\n        };\n        divCmDetails.appendChild(createLabelWithInput(\"number\", id, boundary, level, inputHandler, value, labelTextContent));\n    }\n    // MarquardtIterations.\n    let marquardtIterations: MarquardtIterations = cm.getMarquardtIterations() || new MarquardtIterations(new Map(), NaN);\n    cm.setMarquardtIterations(marquardtIterations);\n    createLabelWithInputForObject(marquardtIterations, divCmDetails, boundary1, level0);\n    // MarquardtTolerance.\n    let marquardtTolerance: MarquardtTolerance = cm.getMarquardtTolerance() || new MarquardtTolerance(new Map(), NaN);\n    cm.setMarquardtTolerance(marquardtTolerance);\n    createLabelWithInputForObject(marquardtTolerance, divCmDetails, boundary1, level0);\n    // MarquardtDerivDelta.\n    let marquardtDerivDelta: MarquardtDerivDelta = cm.getMarquardtDerivDelta() || new MarquardtDerivDelta(new Map(), NaN);\n    cm.setMarquardtDerivDelta(marquardtDerivDelta);\n    createLabelWithInputForObject(marquardtDerivDelta, divCmDetails, boundary1, level0);\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodAnalyticalRepresentation.\n */\nfunction processCalcMethodAnalyticalRepresentation(divCmDetails: HTMLDivElement, cm: CalcMethodAnalyticalRepresentation) {\n    // \"me:format\".\n    let format: Format = cm.getFormat() || new Format(new Map(), Format.options[0]);\n    // value, rateUnits, \"me:precision\"\n    function processSelectElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string, options: string[]) {\n        let element: any = getter() || new ClassConstructor(new Map(), options[0]);\n        setter(element);\n        let lwsElement: HTMLDivElement = createLabelWithSelect(tagName, options, tagName, element.value,\n            divCmDetails.id, boundary1, boundary1);\n        lwsElement.querySelector('select')?.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            element.value = target.value;\n            console.log(`Set ${tagName} to ` + target.value);\n            resizeSelectElement(target);\n        });\n        divCmDetails.appendChild(lwsElement);\n    }\n    processSelectElement(Format, cm.getFormat.bind(cm), cm.setFormat.bind(cm), Format.tagName, Format.options);\n    processSelectElement(Format, () => format.getRateUnits(), format.setRateUnits.bind(format), Format.rateUnits, Format.rateUnitsOptions);\n    processSelectElement(Precision, cm.getPrecision.bind(cm), cm.setPrecision.bind(cm), Precision.tagName, Mesmer.precisionOptions);\n    // \"me:chebNumTemp\".\n    let chebNumTemp: ChebNumTemp = cm.getChebNumTemp() || new ChebNumTemp(new Map(), NaN);\n    cm.setChebNumTemp(chebNumTemp);\n    divCmDetails.appendChild(createLabelWithInput(\"number\", divCmDetails.id + \"_ChebNumTemp_input\", boundary1, level0,\n        (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                chebNumTemp.value = parseFloat(target.value);\n                console.log(\"Set ChebNumTemp to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = NaN.toString();\n            }\n            resizeInputElement(target);\n        }, chebNumTemp.value.toString(), ChebNumTemp.tagName));\n    // \"me:chebNumConc\", \"me:chebMaxTemp\", \"me:chebMaxTemp\", \"me:chebMinTemp\", \"me:chebMaxConc\", \"me:chebMinConc\",\n    // \"me:chebTExSize\", \"me:chebPExSize\".\n    function processElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string) {\n        let element: any = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild(createLabelWithInput(\"number\", divCmDetails.id + `_${tagName}_input`, boundary1, level0,\n            (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                // Check the value is a number.\n                if (isNumeric(target.value)) {\n                    element.value = parseFloat(target.value);\n                    console.log(`Set ${tagName} to ` + target.value);\n                } else {\n                    alert(\"Value is not numeric, resetting...\");\n                    target.value = NaN.toString();\n                }\n                resizeInputElement(target);\n            }, element.value.toString(), tagName));\n    }\n    processElement(ChebNumConc, cm.getChebNumConc.bind(cm), cm.setChebNumConc.bind(cm), ChebNumConc.tagName);\n    processElement(ChebMaxTemp, cm.getChebMaxTemp.bind(cm), cm.setChebMaxTemp.bind(cm), ChebMaxTemp.tagName);\n    processElement(ChebMinTemp, cm.getChebMinTemp.bind(cm), cm.setChebMinTemp.bind(cm), ChebMinTemp.tagName);\n    processElement(ChebMaxConc, cm.getChebMaxConc.bind(cm), cm.setChebMaxConc.bind(cm), ChebMaxConc.tagName);\n    processElement(ChebMinConc, cm.getChebMinConc.bind(cm), cm.setChebMinConc.bind(cm), ChebMinConc.tagName);\n    processElement(ChebTExSize, cm.getChebTExSize.bind(cm), cm.setChebTExSize.bind(cm), ChebTExSize.tagName);\n    processElement(ChebPExSize, cm.getChebPExSize.bind(cm), cm.setChebPExSize.bind(cm), ChebPExSize.tagName);\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodThermodynamicTable.\n */\nfunction processCalcMethodThermodynamicTable(divCmDetails: HTMLDivElement, cm: CalcMethodThermodynamicTable) {\n    // \"me:Tmin\", \"me:Tmid\", \"me:Tmax, \"me:Tstep\".\n    function processElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string) {\n        let element: any = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild(createLabelWithInput(\"number\", divCmDetails.id + `_${tagName}_input`, boundary1, level0,\n            (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                // Check the value is a number.\n                if (isNumeric(target.value)) {\n                    element.value = parseFloat(target.value);\n                    console.log(`Set ${tagName} to ` + target.value);\n                } else {\n                    alert(\"Value is not numeric, resetting...\");\n                    target.value = NaN.toString();\n                }\n                resizeInputElement(target);\n            }, element.value.toString(), tagName));\n    }\n    processElement(Tmin, cm.getTmin.bind(cm), cm.setTmin.bind(cm), Tmin.tagName);\n    processElement(Tmid, cm.getTmid.bind(cm), cm.setTmid.bind(cm), Tmid.tagName);\n    processElement(Tmax, cm.getTmax.bind(cm), cm.setTmax.bind(cm), Tmax.tagName);\n    processElement(Tstep, cm.getTstep.bind(cm), cm.setTstep.bind(cm), Tstep.tagName);\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodSensitivityAnalysis.\n */\nfunction processCalcMethodSensitivityAnalysis(divCmDetails: HTMLDivElement, cm: CalcMethodSensitivityAnalysis) {\n    // \"me:sensitivityAnalysisSamples\", \"me:sensitivityAnalysisOrder\", \"me:sensitivityNumVarRedIters\".\n    function processNumberElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string) {\n        let element: any = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild(createLabelWithInput(\"number\", getID(divCmDetails.id, tagName, s_Input), boundary1, level0,\n            (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                // Check the value is a number.\n                if (isNumeric(target.value)) {\n                    element.value = parseFloat(target.value);\n                    console.log(`Set ${tagName} to ` + target.value);\n                } else {\n                    alert(\"Value is not numeric, resetting...\");\n                    target.value = NaN.toString();\n                }\n                resizeInputElement(target);\n            }, element.value.toString(), tagName));\n    }\n    processNumberElement(SensitivityAnalysisSamples, cm.getSensitivityAnalysisSamples.bind(cm), cm.setSensitivityAnalysisSamples.bind(cm), SensitivityAnalysisSamples.tagName);\n    processNumberElement(SensitivityAnalysisOrder, cm.getSensitivityAnalysisOrder.bind(cm), cm.setSensitivityAnalysisOrder.bind(cm), SensitivityAnalysisOrder.tagName);\n    processNumberElement(SensitivityNumVarRedIters, cm.getSensitivityNumVarRedIters.bind(cm), cm.setSensitivityNumVarRedIters.bind(cm), SensitivityNumVarRedIters.tagName);\n    // \"me:sensitivityVarRedMethod\".\n    let sensitivityVarRedMethod: SensitivityVarRedMethod = cm.getSensitivityVarRedMethod() || new SensitivityVarRedMethod(new Map(), \"\");\n    cm.setSensitivityVarRedMethod(sensitivityVarRedMethod);\n    let tagName: string = SensitivityVarRedMethod.tagName;\n    divCmDetails.appendChild(createLabelWithSelect(tagName, SensitivityVarRedMethod.options, tagName, SensitivityVarRedMethod.options[0],\n        getID(divCmDetails.id, tagName, 'select'), boundary1, boundary1));\n    // Add event listener for the select element.\n    let select: HTMLSelectElement = divCmDetails.querySelector('select') as HTMLSelectElement;\n    select?.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        sensitivityVarRedMethod.value = target.value;\n        console.log(tagName + \" set to \" + target.value);\n        resizeSelectElement(target);\n    });\n}\n\n/**\n * @param options The options.\n * @param select The select element.\n */\nfunction selectAnotherOptionEventListener(options: string[], select: HTMLSelectElement) {\n    select.addEventListener('click', (event: MouseEvent) => {\n        if (options[options.length - 1] == s_selectOption) {\n            options.pop();\n        }\n        let lastIndex: number = select.options.length - 1;\n        if (select.options[lastIndex].value == s_selectOption) {\n            select.remove(lastIndex);\n        }\n    });\n}\n\n/**\n * @param control The control.\n * @param div The div. \n * @param options The options.\n * @param tagName The tag name.\n * @param value The value.\n * @param id The id for the HTMLSelectElement.\n * @returns An HTMLSelectElement.\n */\nfunction createSelectElementCalcMethod(control: Control, div: HTMLDivElement, options: string[],\n    tagName: string, value: string, divCmDetailsId: string, divCmDetailsSelectId: string): HTMLSelectElement {\n    let select: HTMLSelectElement = createSelectElement(options, tagName, value, divCmDetailsSelectId, boundary1);\n    div.appendChild(select);\n    selectAnotherOptionEventListener(options, select);\n    select.addEventListener('change', (event: Event) => {\n        // Remove any existing div.\n        let divCmDetails: HTMLDivElement = document.getElementById(divCmDetailsId) as HTMLDivElement;\n        if (divCmDetails != null) {\n            divCmDetails.remove();\n        }\n        divCmDetails = createFlexDiv(divCmDetailsId, boundary1);\n        div.appendChild(divCmDetails);\n        let target = event.target as HTMLSelectElement;\n        let value: string = target.value;\n        let attributes: Map<string, string> = new Map();\n        attributes.set(\"xsi:type\", value);\n        if (value == CalcMethodSimpleCalc.xsi_type || value == CalcMethodSimpleCalc.xsi_type2) {\n            // \"me:simpleCalc\", \"simpleCalc\".\n            control.setCalcMethod(new CalcMethodSimpleCalc(attributes));\n        } else if (value == CalcMethodGridSearch.xsi_type || value == CalcMethodGridSearch.xsi_type2) {\n            // \"me:gridSearch\", \"gridSearch\".\n            control.setCalcMethod(new CalcMethodGridSearch(attributes));\n        } else if (value == CalcMethodFitting.xsi_type || value == CalcMethodFitting.xsi_type2) {\n            let cm: CalcMethodFitting = new CalcMethodFitting(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodFitting(divCmDetails, cm);\n        } else if (value == CalcMethodMarquardt.xsi_type || value == CalcMethodMarquardt.xsi_type2) {\n            // \"me:marquardt\", \"marquardt\".\n            let cm: CalcMethodMarquardt = new CalcMethodMarquardt(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodMarquardt(divCmDetails, cm);\n        } else if (value == CalcMethodAnalyticalRepresentation.xsi_type || value == CalcMethodAnalyticalRepresentation.xsi_type2) {\n            // \"me:analyticalRepresentation\", \"analyticalRepresentation\".\n            let cm: CalcMethodAnalyticalRepresentation = new CalcMethodAnalyticalRepresentation(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodAnalyticalRepresentation(divCmDetails, cm);\n        } else if (value == CalcMethodThermodynamicTable.xsi_type || value == CalcMethodThermodynamicTable.xsi_type2) {\n            // \"me:ThermodynamicTable\", \"ThermodynamicTable\".\n            let cm: CalcMethodThermodynamicTable = new CalcMethodThermodynamicTable(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodThermodynamicTable(divCmDetails, cm);\n        } else if (value == CalcMethodSensitivityAnalysis.xsi_type || value == CalcMethodSensitivityAnalysis.xsi_type2) {\n            // \"me:sensitivityAnalysis\", \"sensitivityAnalysis\".\n            let cm: CalcMethodSensitivityAnalysis = new CalcMethodSensitivityAnalysis(new Map());\n            control.setCalcMethod(cm);\n            processCalcMethodSensitivityAnalysis(divCmDetails, cm);\n        } else {\n            throw new Error(\"Unknown CalcMethod type.\");\n        }\n        resizeSelectElement(target);\n    });\n    return select;\n}\n\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement | null, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    if (canvas != null) {\n        // Set foreground and background colors.\n        let foreground: string;\n        let background: string;\n        let blue: string;\n        let orange: string;\n        if (dark) {\n            foreground = \"lightgrey\";\n            background = \"darkgrey\";\n            blue = \"lightblue\";\n            orange = \"orange\";\n        } else {\n            foreground = \"darkgrey\";\n            background = \"lightgrey\";\n            blue = \"blue\";\n            orange = \"darkorange\";\n        }\n        let green = \"green\";\n        let red = \"red\";\n        const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas.\n        //ctx.fillStyle = background;\n        // Make font bold.\n        ctx.font = \"bold \" + font;\n        // Get text height for font size.\n        let th = getTextHeight(ctx, \"Aj\", ctx.font);\n        //console.log(\"th=\" + th);\n        // Go through reactions:\n        // 1. Create sets of reactants, end products, intermediate products and transition states.\n        // 2. Create maps of orders and energies.\n        // 3. Calculate maximum energy.\n        let reactants: string[] = [];\n        let products: Set<string> = new Set();\n        let intProducts: Set<string> = new Set();\n        let transitionStates: Set<string> = new Set();\n        let orders: Map<string, number> = new Map();\n        let energies: Map<string, number> = new Map();\n        let i: number = 0;\n        let energyMin: number = Number.MAX_VALUE;\n        let energyMax: number = Number.MIN_VALUE;\n        reactions.forEach(function (reaction, id) {\n            // Get TransitionStates.\n            let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n            //console.log(\"reactant=\" + reactant);\n            let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n            if (reactantsLabel != undefined) {\n                reactants.push(reactantsLabel);\n                if (products.has(reactantsLabel)) {\n                    intProducts.add(reactantsLabel);\n                }\n                let energy: number = reaction.getReactantsEnergy(molecules);\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(reactantsLabel, energy);\n                if (!orders.has(reactantsLabel)) {\n                    orders.set(reactantsLabel, i);\n                    i++;\n                }\n            }\n            let productsLabel: string | undefined = reaction.getProductsLabel();\n            if (productsLabel != undefined) {\n                products.add(productsLabel);\n                let energy = reaction.getProductsEnergy(molecules);\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(productsLabel, energy);\n                if (orders.has(productsLabel)) {\n                    i--;\n                    let j: number = get(orders, productsLabel);\n                    // Move product to end and shift everything back.\n                    orders.forEach(function (value, key) {\n                        if (value > j) {\n                            orders.set(key, value - 1);\n                        }\n                    });\n                    // Insert transition states.\n                    if (reactionTransitionStates != undefined) {\n                        reactionTransitionStates.forEach(function (ts) {\n                            let ref: string = ts.getMolecule().ref;\n                            transitionStates.add(ref);\n                            orders.set(ref, i);\n                            energy = molecules.get(ref)?.getEnergy() ?? 0;\n                            energyMin = Math.min(energyMin, energy);\n                            energyMax = Math.max(energyMax, energy);\n                            energies.set(ref, energy);\n                            i++;\n                        });\n                        orders.set(productsLabel, i);\n                        i++\n                    }\n                } else {\n                    if (reactionTransitionStates != undefined) {\n                        reactionTransitionStates.forEach(function (ts) {\n                            let ref: string = ts.getMolecule().ref;\n                            transitionStates.add(ref);\n                            orders.set(ref, i);\n                            energy = molecules.get(ref)?.getEnergy() ?? 0;\n                            energyMin = Math.min(energyMin, energy);\n                            energyMax = Math.max(energyMax, energy);\n                            energies.set(ref, energy);\n                            i++;\n                        });\n                    }\n                    orders.set(productsLabel, i);\n                    i++;\n                }\n            }\n        });\n        //console.log(\"orders=\" + mapToString(orders));\n        //console.log(\"energies=\" + mapToString(energies));\n        //console.log(\"energyMax=\" + energyMax);\n        //console.log(\"energyMin=\" + energyMin);\n        let energyRange: number = energyMax - energyMin;\n        //console.log(\"energyRange=\" + energyRange);\n        //console.log(\"reactants=\" + reactants);\n        //console.log(\"products=\" + products);\n        //console.log(\"transitionStates=\" + transitionStates);\n        // Create a lookup from order to label.\n        let reorders: string[] = [];\n        orders.forEach(function (value, key) {\n            reorders[value] = key;\n        });\n        //console.log(\"reorders=\" + arrayToString(reorders));\n        // Iterate through the reorders:\n        // 1. Capture coordinates for connecting lines.\n        // 2. Store maximum x.\n        let x0: number = 0;\n        let y0: number;\n        let x1: number;\n        let y1: number;\n        let xmax: number = 0;\n        let tw: number;\n        let textSpacing: number = 5; // Spacing between end of line and start of text.\n        let stepSpacing: number = 10; // Spacing between steps.\n        let reactantsInXY: Map<string, number[]> = new Map();\n        let reactantsOutXY: Map<string, number[]> = new Map();\n        let productsInXY: Map<string, number[]> = new Map();\n        let productsOutXY: Map<string, number[]> = new Map();\n        let transitionStatesInXY: Map<string, number[]> = new Map();\n        let transitionStatesOutXY: Map<string, number[]> = new Map();\n        reorders.forEach(function (value) {\n            //console.log(\"value=\" + value + \".\");\n            //console.log(\"energies=\" + mapToString(energies));\n            let energy: number = get(energies, value);\n            let energyRescaled: number = rescale(energyMin, energyRange, 0, rdCanvasHeight, energy);\n            // Get text width.\n            tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n            x1 = x0 + tw + textSpacing;\n            y0 = energyRescaled + lw;\n            y1 = y0;\n            // Draw horizontal line and add label.\n            // (The drawing is now not done here but done later so labels are on top of lines, but\n            // the code is left here commented out for code comprehension.)\n            //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n            reactantsInXY.set(value, [x0, y0]);\n            reactantsOutXY.set(value, [x1, y1]);\n            if (products.has(value)) {\n                productsInXY.set(value, [x0, y0]);\n                productsOutXY.set(value, [x1, y1]);\n            }\n            if (transitionStates.has(value)) {\n                transitionStatesInXY.set(value, [x0, y0]);\n                transitionStatesOutXY.set(value, [x1, y1]);\n            }\n            x0 = x1 + stepSpacing;\n            xmax = x1;\n        });\n        // Set canvas width to maximum x.\n        canvas.width = xmax;\n        //console.log(\"canvas.width=\" + canvas.width);\n        // Set canvas height to maximum energy plus the label.\n        let canvasHeightWithBorder = rdCanvasHeight + (4 * th) + (2 * lw);\n        //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n        let originalCanvasHeight = rdCanvasHeight;\n        // Update the canvas height.\n        canvas.height = canvasHeightWithBorder;\n        // Set the transformation matrix.\n        //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n        ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n        // Go through reactions and draw connecting lines.\n        reactions.forEach(function (reaction, id) {\n            //console.log(\"id=\" + id);\n            //console.log(\"reaction=\" + reaction);\n            // Get TransitionState if there is one.\n            let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n            //console.log(\"reactant=\" + reactant);\n            let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n            let productsLabel: string | undefined = reaction.getProductsLabel();\n            let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n            let productInXY: number[] = get(productsInXY, productsLabel);\n            if (reactionTransitionStates.length > 0) {\n                reactionTransitionStates.forEach(function (ts) {\n                    let transitionStateLabel: string = ts.getMolecule().ref;\n                    let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n                    drawLine(ctx, foreground, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                        transitionStateInXY[1]);\n                    let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n                    drawLine(ctx, foreground, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                        productInXY[0], productInXY[1]);\n                });\n            } else {\n                drawLine(ctx, foreground, lwc, reactantOutXY[0], reactantOutXY[1],\n                    productInXY[0], productInXY[1]);\n            }\n        });\n        // Draw horizontal lines and labels.\n        // (This is done last so that the labels are on top of the vertical lines.)\n        reactants.forEach(function (value) {\n            let energy: number = get(energies, value);\n            let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n            let x0: number = get(reactantsInXY, value)[0];\n            let y: number = energyRescaled + lw;\n            let x1: number = get(reactantsOutXY, value)[0];\n            let energyString: string = energy.toString();\n            drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n        products.forEach(function (value) {\n            let energy: number = get(energies, value);\n            let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n            let x0: number = get(productsInXY, value)[0];\n            let y: number = energyRescaled + lw;\n            let x1: number = get(productsOutXY, value)[0];\n            let energyString: string = energy.toString();\n            if (intProducts.has(value)) {\n                drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n            } else {\n                drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n            }\n        });\n        transitionStates.forEach(function (value) {\n            let energy: number = get(energies, value);\n            let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n            let x0: number = get(transitionStatesInXY, value)[0];\n            let y: number = energyRescaled + lw;\n            let x1: number = get(transitionStatesOutXY, value)[0];\n            let energyString: string = energy.toString();\n            drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n    }\n}\n\n/**\n * Save to XML file.\n */\nfunction saveXML() {\n    if (mesmer == null) {\n        alert(\"No Mesmer object to save.\");\n        return;\n    } else {\n        console.log(\"saveXML\");\n        const pad: string = \"  \";\n        // Create a Blob object from the data\n        let blob = new Blob([Mesmer.header, mesmer.toXML(pad, \"\")],\n            { type: \"text/plain\" });\n        // Create a new object URL for the blob\n        let url = URL.createObjectURL(blob);\n        // Create a new 'a' element\n        let a = document.createElement(\"a\");\n        // Set the href and download attributes for the 'a' element\n        a.href = url;\n        let title: string = mesmer.getTitle()?.value as string;\n        a.download = title.replace(/[^a-z0-9]/gi, '_') + \".xml\";\n        // Append the 'a' element to the body and click it to start the download\n        document.body.appendChild(a);\n        a.click();\n        // Remove the 'a' element after the download starts\n        document.body.removeChild(a);\n    }\n}","/**\n * Get the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * For getting a valid HTML id. HTML id attribute values must contain at least one character and must not \n * contain any space characters. They also cannot start with a digit, two hyphens, or a hyphen followed by\n * a digit.\n * @param parts The parts of the ID.\n * @return A string ID composed of the parts joined by the delimiter.\n */\nexport function getID(...parts: string[]): string {\n    let id = parts.join(\"-\");\n    // Replace any character that is not a letter (upper or lower case), a digit, a hyphen, or an underscore \n    // with an underscore. \n    let validId = id.replace(/[^a-zA-Z-_0-9]/g, '_');\n    // If the first character is a digit, two hyphens, or a hyphen followed by a digit, add an underscore to \n    // the beginning of the ID.\n    if (/^[0-9]|^--|-^[0-9]/.test(validId)) {\n        validId = '_' + validId;\n    }\n    return validId;\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @param delimiter The (optional) delimiter.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>, delimiter?: string): string {\n    if (map == null) {\n        return \"\";\n    }\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} set The set to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function setToString(set: Set<any>, delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(set).map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (isNumeric(s[i])) {\n            r.push(parseFloat(s[i]));\n        //} else {\n        //    throw new Error(`toNumberArray: ${s[i]} is not a number`);\n        }\n    }\n    return r;\n}\n\n/**\n * @param s The string to check.\n * @returns true iff s is a number.\n */\nexport function isNumeric(s: string) : boolean {\n    if (s === \"\") {\n      return false;\n    }\n    return !isNaN(Number(s))\n}","import {\n    getSelfClosingTag\n} from \"./html\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param element The xml element to search in.\n * @returns The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a Node throwing an Error if this is null.\n * @param node The node to get the nodeValue of.\n * @returns The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: Node): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * For convenience and to cope with when there is no node value as there is a blank.\n * @param e The Element\n * @returns The node value of the first child or \"\".\n */\nexport function getInputString(e: Element) {\n    let s: string;\n    let firstChildNode = getFirstChildNode(e);\n    if (firstChildNode) {\n        s = getNodeValue(firstChildNode).trim();\n    } else {\n        s = \"\";\n    }\n    return s;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(undefined, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }\n}\n\n/**\n * A class for representing A Tag with attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        if (this.attributes) {\n            this.attributes.forEach((value, key) => {\n                r += `${key}(${value}), `;\n            });\n        }\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n        for (let [k, v] of this.attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: number;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: number) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        let stringValue = this.value.toString().trim();\n        let c : number;\n        if (this.value < 0) {\n            c = 7;\n        } else {\n            c = 6;\n        }\n        if (stringValue.length > c) {\n            stringValue = this.value.toExponential().trim();\n        }\n        return getTag(stringValue, this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, tagName: string, values: number[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter != undefined) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): void {\n        this.nodes.set(this.nodes.size, node);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    override toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        if (this.nodes.size > 0) {\n\n            let i: number = 0;\n\n            this.nodes.forEach((v) => {\n                if (v == undefined) {\n                    console.warn(\"Node \" + i.toString() + \" is undefined this.nodes.size = \" + this.nodes.size);\n                } else {\n                    if (v instanceof NodeWithNodes) {\n                        s += (v as NodeWithNodes).toXML(pad, padding1);\n                    } else if (v instanceof TagWithAttributes) {\n                        s += (v as TagWithAttributes).toXML(padding1);\n                    } else {\n                        s += (v as Tag).toXML(padding1);\n                    }\n                }\n            });\n            return getTag(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s: string = getSelfClosingTag(this.attributes, this.tagName);\n            if (padding != undefined) {\n                return \"\\n\" + padding + s;\n            }\n            return s;\n        }\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param element The element to get the attributes of.\n * @returns The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param xml The XML document or element.\n * @param tagName The tag name.\n * @returns The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}","/**\n * Remove an element with the given id.\n * @param id The id of the element to remove.\n * @param ids The set of ids to remove the id from.\n */\nexport function remove(id: string, ids?: Set<string>) {\n    let e: HTMLElement | null = document.getElementById(id);\n    if (e != null) {\n        e.remove();\n    }\n    if (ids != undefined) {\n        ids.delete(id);\n    }\n}\n\n/**\n * Create a collapsible div.\n * @param divToAppendTo The div to append to.\n * @param content The content to be collapsible.\n * @param buttonLabel The label for the button.\n * @param buttonFontSize The font size for the button.\n * @param margin The margin for the button.\n * @param contentDivId The id for the content div.\n * @returns A div with collapsible content.\n */\nexport function getCollapsibleDiv(\n    { divToAddTo: divToAppendTo, elementToInsertBefore, content, buttonLabel, buttonId,\n        margin: margin = { marginLeft: '', marginTop: '', marginBottom: '', marginRight: '' },\n        contentDivId = '',\n        contentDivClassName = '' }:\n        {\n            divToAddTo: HTMLDivElement,\n            elementToInsertBefore: Element | null,\n            content: HTMLElement,\n            buttonLabel: string,\n            buttonId: string,\n            buttonFontSize?: string,\n            margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n            contentDivId?: string,\n            contentDivClassName?: string\n        }): HTMLDivElement {\n    let div: HTMLDivElement = createDiv(contentDivId);\n    div.className = contentDivClassName;\n    //let button: HTMLButtonElement = document.createElement('button');\n    //button.id = contentDivId + 'Button';\n    //button.innerText = `${buttonLabel} ▼`;\n    let button: HTMLButtonElement = createButton(`${buttonLabel} ▼`, buttonId, margin);\n    button.className = 'collapsible';\n    button.addEventListener('click', function () {\n        //button.innerText = button.innerText.includes('▼')\n        //    ? `${buttonLabel} ▲`\n        //    : `${buttonLabel} ▼`;\n        //button.textContent = button.textContent!.includes('▼') ? '▲' : '▼';\n        let parts = button.textContent!.split(' ');\n        parts[parts.length - 1] = parts[parts.length - 1] === '▼' ? '▲' : '▼';\n        button.textContent = parts.join(' ');\n    });\n    div.appendChild(button);\n    div.appendChild(content);\n    if (elementToInsertBefore != null) {\n        divToAppendTo.insertBefore(div, elementToInsertBefore);\n    } else {\n        divToAppendTo.appendChild(div);\n    }\n    setCollapsibleEventListener(button);\n    return div;\n}\n\n/**\n * For setting the event listener for a collapsible element.\n * @param e The element to add the event listener to.\n */\nfunction setCollapsibleEventListener(e: Element): void {\n    // Remove any existing event listener.\n    e.removeEventListener(\"click\", toggleCollapsible);\n    // Add new event listener.\n    e.addEventListener(\"click\", toggleCollapsible);\n}\n\n/**\n * For toggling the collapsible content.\n */\nfunction toggleCollapsible(this: HTMLElement): void {\n    this.classList.toggle(\"active\");\n    let nes: Element | null = this.nextElementSibling;\n    if (nes != null) {\n        if (nes instanceof HTMLDivElement) {\n            if (nes.style.display === \"block\") {\n                nes.style.display = \"none\";\n            } else {\n                nes.style.display = \"block\";\n            }\n        } else {\n            console.log(\"toggleCollapsible: nextElementSibling is not an HTMLDivElement\");\n        }\n    } else {\n        console.log(\"toggleCollapsible: nextElementSibling is null\");\n    }\n}\n\n/**\n * Create and return HTMLDivElement that contains an HTMLLabelElement and a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLSelectElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @param func The function called on a change to the input.\n * @param value The value of the input.\n * @param labelTextContent The label text.\n * @returns A HTMLDivElement that contains a HTMLLabelElement and a HTMLInputElement.\n */\nexport function createLabelWithInput(type: string, id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    func: (event: Event) => any, value: string, labelTextContent: string): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, divMargin);\n    let input: HTMLInputElement = createInputWithFunction(type, id, componentMargin, func, value);\n    let label: HTMLLabelElement = createLabel(labelTextContent, componentMargin);\n    label.htmlFor = id;\n    div.appendChild(label);\n    div.appendChild(input);\n    return div;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param margin The margin for the HTMLInputElement.\n * @param func The function called on a change to the input.\n * @returns A HTMLInputElement.\n */\nexport function createInputWithFunction(type: string, id: string, \n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    func: (event: Event) => any, value: string): HTMLInputElement {\n    let input: HTMLInputElement = createInput(type, id, margin);\n    input.onchange = func;\n    input.value = value;\n    resizeInputElement(input);\n    return input;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\", \"checkbox\").\n * @param id The id of the input.\n * @param margin The margin for the HTMLInputElement.\n * @returns A HTMLInputElement.\n */\nexport function createInput(type: string, id: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string })\n    : HTMLInputElement {\n    let input: HTMLInputElement = document.createElement('input');\n    input.type = type;\n    input.id = id;\n    Object.assign(input.style, margin);\n    input.style.fontSize = '1em'; // Set the font size with a relative unit.\n    input.classList.add('auto-width');\n    return input;\n}\n\n/**\n * Create a self closing tag.\n * @param attributes The attributes.\n * @param tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | undefined, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}\n\n/**\n * For resizing an HTMLInputElement to the width of what it contains.\n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeInputElement(input: HTMLInputElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 4;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}\n\n/**\n * For resizing an HTMLSelectElement to the width of what it contains.\n * \n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeSelectElement(input: HTMLSelectElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 6;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}\n\n/**\n * Create and return an HTMLSelectElement.\n * \n * @param options The options.\n * @param name The name for the select.\n * @param id id + \"_\" + name will be the select element ID.\n * @param margin The margin for the HTMLSelectElement.\n * @returns An HTMLSelectElement.\n */\nexport function createSelectElement(options: string[] | Set<string>, name: string, value: string, id: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLSelectElement {\n    let select: HTMLSelectElement = document.createElement('select');\n    options.forEach(option => {\n        select.name = name;\n        select.id = id;\n        let optionElement: HTMLOptionElement = document.createElement('option');\n        optionElement.value = option;\n        optionElement.text = option;\n        select.appendChild(optionElement);\n    });\n    select.value = value;\n    select.style.fontSize = '1em'; // Set the font size with a relative unit.\n    select.classList.add('auto-width');\n    resizeSelectElement(select);\n    Object.assign(select.style, margin);\n    return select;\n}\n\n/**\n * Create and return an HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n * \n * @param textContent The text content of the label.\n * @param options The options for the HTMLSelectElement.\n * @param name The name for the HTMLSelectElement.\n * @param value The value for the HTMLSelectElement.\n * @param id The id for the select.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLSelectElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @returns A HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n */\nexport function createLabelWithSelect(textContent: string, options: string[] | Set<string>,\n    name: string, value: string, id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, divMargin);\n    let label: HTMLLabelElement = createLabel(textContent, componentMargin);\n    label.htmlFor = id;\n    div.appendChild(label);\n    div.appendChild(createSelectElement(options, name, value, id, componentMargin));\n    return div;\n}\n\n/**\n * Create and return an HTMLButtonElement.\n * \n * @param textContent The text content of the HTMLButtonElement.\n * @param id The id of the button.\n * @param margin The margin to go around the HTMLButtonElement.\n * @returns An HTMLButtonElement with the textContent and specified margin.\n */\nexport function createButton(textContent: string, id?: string,\n    boundary?: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLButtonElement {\n    let button: HTMLButtonElement = document.createElement('button');\n    button.textContent = textContent;\n    if (id != undefined) {\n        button.id = id;\n    }\n    if (boundary != undefined) {\n        Object.assign(button.style, boundary);\n    }\n    button.style.fontSize = '1em'; // Set the font size with a relative unit.\n    return button;\n}\n\n/**\n * Create and return an HTMLDivElement containing an HTMLLabelElement and a HTMLButtonElement.\n * @param labeltext The text content of the label.\n * @param textContent The text content of the button.\n * @param id The id of the button.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLButtonElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @returns An HTMLDivElement with the level margin containing an HTMLLabelElement and a HTMLButtonElement.\n */\nexport function createLabelWithButton(labeltext: string, textContent: string, id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, divMargin);\n    let label: HTMLLabelElement = createLabel(labeltext, componentMargin);\n    label.htmlFor = id;\n    Object.assign(label.style, componentMargin);\n    div.appendChild(label);\n    div.appendChild(createButton(textContent, id, componentMargin));\n    return div;\n}\n\n/**\n * Create and return HTMLDivElement.\n * @param id The id of the HTMLDivElement.\n * @param margin The margin for the HTMLDivElement.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createDiv(id?: string,\n    margin?: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement(\"div\");\n    if (id != undefined) {\n        div.id = id;\n    }\n    if (margin != undefined) {\n        Object.assign(div.style, margin);\n    }\n    return div;\n}\n\n/**\n * Create and return HTMLDivElement style.display = 'flex' and style.flexWrap = 'wrap'.\n *\n * @param id The id of the HTMLDivElement.\n * @param margin The margin for the HTMLDivElement.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createFlexDiv(id?: string,\n    margin?: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createDiv(id, margin);\n    div.style.display = 'flex';\n    div.style.flexWrap = 'wrap';\n    return div;\n}\n\n/**\n * Create and return HTMLLabelElement.\n *\n * @param textContent The text content of the HTMLLabelElement.\n * @param margin The margin to go around the HTMLLabelElement.\n * @param fontsize The font size for the label.\n * @returns An HTMLLabelElement with specified boundary.\n */\nexport function createLabel(textContent: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLLabelElement {\n    let label: HTMLLabelElement = document.createElement(\"label\");\n    Object.assign(label.style, margin);\n    label.textContent = textContent;\n    label.style.fontSize = '1em'; // Set the font size with a relative unit.\n    return label;\n}","import { RangeNode } from './range.js';\nimport { get } from './util.js';\nimport {\n    TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode, StringNode\n} from './xml.js';\n\n\n/**\n * Atom data.\n * The examples can be used to compile this.\n * It is likely that only a small subset of atoms in the periodic table are of interest...\n */\n\n/**\n * Molecule data.\n * The examples can be used to compile this.\n * It would be good to use, have, provide ways of sharing and to be able to specify/edit molecules...\n * This would include data about atoms, bonds, molecule properties and other things...\n */\n\n/**\n * Atom attributes may include:\n * \"elementType\" - the element type of the atom. This should be a known element types.\n * \"id\"\n * \"x3\", \"y3\", \"z3\" - coordinates used to depict a molecule containing the atom.\n * \"spinMultiplicity\" - the spin multiplicity of the atom.\n * In the XML, an \"atom\" node is typically a child of an \"atomArray\" parent node.\n * If there is only one atom, it may be a child of a \"molecule\" parent node.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * The key for the id attribute.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The key for the elementType attribute.\n     */\n    static readonly s_elementType: string = \"elementType\";\n\n    /**\n     * The key for the x3 attribute.\n     */\n    static readonly s_x3: string = \"x3\";\n\n    /**\n     * The key for the y3 attribute.\n     */\n    static readonly s_y3: string = \"y3\";\n\n    /**\n     * The key for the z3 attribute.\n     */\n    static readonly s_z3: string = \"z3\";\n\n    /**\n     * A reference to any molecule that the atom is a part of.\n     */\n    molecule: Molecule;\n\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, Atom.tagName);\n        this.molecule = molecule;\n    }\n\n    /**\n     * @returns True if the atom has coordinates.\n     */\n    hasCoordinates(): boolean {\n        if (this.attributes.get(Atom.s_x3) != undefined &&\n            this.attributes.get(Atom.s_y3) != undefined &&\n            this.attributes.get(Atom.s_z3) != undefined) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * @returns The id.\n     */\n    getId(): string | undefined {\n        return this.attributes.get(Atom.s_id);\n    }\n\n    /**\n     * @param id The id.\n     */\n    setId(id: string): void {\n        this.attributes.set(Atom.s_id, id);\n    }\n\n    /**\n     * @returns The element type.\n     */\n    getElementType(): string | undefined {\n        return this.attributes.get(Atom.s_elementType);\n    }\n\n    /**\n     * @param elementType The element type.\n     */\n    setElementType(elementType: string): void {\n        this.attributes.set(Atom.s_elementType, elementType);\n    }\n\n    /**\n     * @returns The x3 attribute value as a number or undefined.\n     */\n    getX3(): number | undefined {\n        let x3: string | undefined = this.attributes.get(Atom.s_x3);\n        if (x3 != undefined) {\n            return parseFloat(x3);\n        }\n    }\n\n    /**\n     * @param x3 The x3 attribute value.\n     */\n    setX3(x3: number): void {\n        this.attributes.set(Atom.s_x3, x3.toString());\n    }\n\n    /**\n     * Removes the x3 attribute.\n     */\n    removeX3(): void {\n        this.attributes.delete(Atom.s_x3);\n    }\n\n    /**\n     * @returns The y3 attribute value as a number or undefined.\n     */\n    getY3(): number | undefined {\n        let y3: string | undefined = this.attributes.get(Atom.s_y3);\n        if (y3 != undefined) {\n            return parseFloat(y3);\n        }\n    }\n\n    /**\n     * @param y3 The y3 attribute value.\n     */\n    setY3(y3: number): void {\n        this.attributes.set(Atom.s_y3, y3.toString());\n    }\n\n    /**\n     * Removes the y3 attribute.\n     */\n    removeY3(): void {\n        this.attributes.delete(Atom.s_y3);\n    }\n\n    /**\n     * @returns The z3 attribute value as a number or undefined.\n     */\n    getZ3(): number | undefined {\n        let z3: string | undefined = this.attributes.get(Atom.s_z3);\n        if (z3 != undefined) {\n            return parseFloat(z3);\n        }\n    }\n\n    /**\n     * @param z3 The z3 attribute value.\n     */\n    setZ3(z3: number): void {\n        this.attributes.set(\"z3\", z3.toString());\n    }\n\n    /**\n     * Removes the x3 attribute.\n     */\n    removeZ3(): void {\n        this.attributes.delete(\"z3\");\n    }\n}\n\n/**\n * A class for representing an atomArray.\n * There are no attributes.\n * In the XML, an \"atomArray\" node is a child of a \"molecule\" parent node and has \"atom\" node children.\n */\nexport class AtomArray extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"atomArray\";\n\n    /**\n     * The atoms stored in a lookup from id to atom.\n     */\n    atoms: Map<string, Atom>;\n\n    /**\n     * The index. The keys are the atom ids and the values are the index of the atom in the nodes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The reverse index. The keys are the index of the atom in the nodes and the values are the atom ids.\n     */\n    reverseIndex: Map<number, string>;\n\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */\n    constructor(attributes: Map<string, string>, atoms?: Map<string, Atom>) {\n        super(attributes, AtomArray.tagName);\n        this.index = new Map();\n        this.reverseIndex = new Map();\n        if (atoms == undefined) {\n            this.atoms = new Map();\n        } else {\n            this.atoms = atoms;\n            atoms.forEach((atom, id) => {\n                this.index.set(id, this.nodes.size);\n                this.reverseIndex.set(this.nodes.size, id);\n                this.nodes.set(this.nodes.size, atom);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the atom to get.\n     * @returns The atom with the given id.\n     */\n    getAtom(id: string): Atom | undefined {\n        return this.atoms.get(id);\n    }\n\n    /**\n     * @param atom The atom to add.\n     * @returns The id of the atom.\n     */\n    addAtom(atom: Atom): string {\n        //console.log('Adding atom...');\n        let id: string | undefined = atom.getId();\n        if (id == undefined) {\n            id = this.getNextAtomID();\n            atom.setId(id);\n        } else {\n            if (this.atoms.has(id)) {\n                let newID: string = this.getNextAtomID();\n                console.warn('Atom with id ' + id + ' already exists, adding with id ' + newID);\n                atom.setId(newID);\n                id = newID;\n            }\n        }\n        //console.log('Atom id: ' + id);\n        this.index.set(id, this.nodes.size);\n        this.reverseIndex.set(this.nodes.size, id);\n        this.nodes.set(this.nodes.size, atom);\n        this.atoms.set(id, atom);\n        /*\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.reverseIndex.keys() ' + Array.from(this.reverseIndex.keys()));\n        console.log('this.reverseIndex.values() ' + Array.from(this.reverseIndex.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n        return id;\n    }\n\n    /**\n     * @returns The atomId.\n     */\n    getNextAtomID(): string {\n        let i: number = 1;\n        let id: string = \"a\" + i.toString();\n        if (this.atoms.has(id)) {\n            while (this.atoms.has(id)) {\n                i++;\n                id = \"a\" + i.toString();\n            }\n        }\n        return id;\n    }\n\n    /**\n     * @param id The id of the atom to remove.\n     */\n    removeAtom(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            throw new Error('Atom with id ' + id + ' does not exist!');\n        }\n        console.log('Removing atom with id ' + id);\n        this.atoms.delete(id);\n        //this.index.delete(id);\n        //this.nodes.delete(i);\n        this.deleteNodeAndReindex(i, id);\n        /*\n        console.log('i ' + i);\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n    }\n\n    /**\n     * @param i The index of the atom to remove.\n     * @param id The id of the atom to remove.\n     */\n    deleteNodeAndReindex(i: number, id: string): void {\n        this.nodes.delete(i);\n        this.index.delete(id);\n        this.reverseIndex.delete(i);\n        let newNodes = new Map<number, Atom>();\n        let newIndex = new Map<string, number>();\n        let newReverseIndex = new Map<number, string>();\n        this.index.forEach((value, key) => {\n            if (value > i) {\n                newNodes.set(value - 1, this.nodes.get(value) as Atom);\n                newIndex.set(key, value - 1);\n                newReverseIndex.set(value - 1, key);\n            } else {\n                newNodes.set(value, this.nodes.get(value) as Atom);\n                newIndex.set(key, value);\n                newReverseIndex.set(value, key);\n            }\n        });\n        this.nodes = newNodes;\n        this.index = newIndex;\n        this.reverseIndex = newReverseIndex;\n    }\n}\n\n/**\n * An atomic bond between two atoms in a molecule.\n * Instances must have the following attributes:\n * \"atomRefs2\" - a space separated list of two atom ids.\n * The attributes may include:\n * \"id\" - a unique identifier for the bond.\n * \"order\" - the order of the bond. Generally: order = (the number of bonding electrons) - ((the number of non-bonding electrons) / 2).\n * In the XML, a \"bond\" node is typically a child of a \"bondArray\" parent node.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * The key for the atomRefs2 attribute.\n     */\n    static readonly s_atomRefs2: string = \"atomRefs2\";\n\n    /**\n     * The key for the id attribute.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The key for the order attribute.\n     */\n    static readonly s_order: string = \"order\";\n\n    /**\n     * The order options.\n     */\n    static readonly orderOptions: string[] = [\"1\", \"1.5\", \"2\", \"2.5\", \"3\", \"3.5\", \"4\", \"4.5\", \"5\", \"5.5\", \"6\"];\n\n    /**\n     * A reference to the molecule that the bond is a part of.\n     */\n    molecule: Molecule;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, Bond.tagName);\n        this.molecule = molecule;\n    }\n\n    /**\n     * @returns The atomRefs2.\n     */\n    getAtomRefs2(): string {\n        let atomRefs2: string | undefined = this.attributes.get(Bond.s_atomRefs2);\n        \n        let atomRefs: string[] = atomRefs2?.split(\" \") || [];\n        if (atomRefs2 == undefined) {\n            return \"a1 a1\";\n        }\n        return atomRefs2;\n    }\n\n    /**\n     * @param atomRefs2 The atomRefs2 to set.\n     */\n    setAtomRefs2(atomRefs2: string): void {\n        this.attributes.set(Bond.s_atomRefs2, atomRefs2);\n    }\n\n    /**\n     * @returns The id.\n     */\n    getId(): string | undefined {\n        return this.attributes.get(Bond.s_id);\n    }\n\n    /**\n     * @param id The id to set the attribute value referred to by \"id\".\n     */\n    setId(id: string): void {\n        this.attributes.set(Bond.s_id, id);\n    }\n\n    /**\n     * @returns The attribute value referred to by \"order\" as a number or undefined.\n     */\n    getOrder(): number | undefined {\n        let order: string | undefined = this.attributes.get(Bond.s_order);\n        if (order != undefined) {\n            return parseFloat(order);\n        }\n    }\n\n    /**\n     * @param order The order to set the attribute value referred to by \"order\".\n     */\n    setOrder(order: number): void {\n        this.attributes.set(Bond.s_order, order.toString());\n    }\n\n}\n\n/**\n * There can be no attributes.\n * In the XML, a \"bondArray\" node is typically a child of a \"molecule\" parent node and has \"bond\" node children.\n */\nexport class BondArray extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bondArray\";\n\n    /**\n     * The bonds stored in a lookup from id to bond.\n     */\n    bonds: Map<string, Bond>;\n\n    /**\n     * The index. The keys are the bond ids and the values are the index of the bond in the nodes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The reverse index. The keys are the index of the bond in the nodes and the values are the bond ids.\n     */\n    reverseIndex: Map<number, string>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bonds The bonds.\n     */\n    constructor(attributes: Map<string, string>, bonds?: Map<string, Bond>) {\n        super(attributes, BondArray.tagName);\n        this.index = new Map();\n        this.reverseIndex = new Map();\n        if (bonds == undefined) {\n            this.bonds = new Map();\n        } else {\n            this.bonds = bonds;\n            bonds.forEach((bond, id) => {\n                this.index.set(id, this.nodes.size);\n                this.reverseIndex.set(this.nodes.size, id);\n                this.nodes.set(this.nodes.size, bond);\n            });\n        }\n    }\n\n    /**\n     * @returns The bond ids.\n     */\n    getBondIds(): string[] {\n        return Array.from(this.bonds.keys());\n    }\n\n    /**\n     * @param id The id of the bond to get.\n     * @returns The bond with the given id.\n     */\n    getBond(id: string): Bond | undefined {\n        return this.bonds.get(id);\n    }\n\n    /**\n     * Adds a bond to the array.\n     * @param bond The bond to add.\n     */\n    addBond(bond: Bond): string {\n        //console.log('Add ' + bond.tagName + '...');\n        let id: string | undefined = bond.getId();\n        if (id == undefined) {\n            id = this.getNextBondID();\n            bond.setId(id);\n        } else {\n            if (this.bonds.has(id)) {\n                let newID: string = this.getNextBondID();\n                console.log('Bond with id ' + id + ' already exists, adding with id ' + newID);\n                bond.setId(newID);\n                id = newID;\n            }\n        }\n        //console.log('Bond id: ' + id);\n        this.index.set(id, this.nodes.size);\n        this.reverseIndex.set(this.nodes.size, id);\n        this.nodes.set(this.nodes.size, bond);\n        this.bonds.set(id, bond);\n        /*\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.reverseIndex.keys() ' + Array.from(this.reverseIndex.keys()));\n        console.log('this.reverseIndex.values() ' + Array.from(this.reverseIndex.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n        return id;\n    }\n\n    /**\n     * @returns The atomId.\n     */\n    getNextBondID(): string {\n        let i: number = 1;\n        let id: string = \"b\" + i.toString();\n        while (this.bonds.has(id)) {\n            i++;\n            id = \"b\" + i.toString();\n        }\n        return id;\n    }\n\n    /**\n     * @param id The id of the atom to remove.\n     */\n    removeBond(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            throw new Error('Bond with id ' + id + ' does not exist!');\n        }\n        console.log('Removing bond with id ' + id);\n        this.bonds.delete(id);\n        //this.index.delete(id);\n        //this.nodes.delete(i);\n        this.deleteNodeAndReindex(i, id);\n        /*\n        console.log('i ' + i);\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n    }\n\n    /**\n     * @param i The index of the bond to remove.\n     * @param id The id of the bond to remove.\n     */\n    deleteNodeAndReindex(i: number, id: string): void {\n        this.nodes.delete(i);\n        this.index.delete(id);\n        this.reverseIndex.delete(i);\n        let newNodes = new Map<number, Bond>();\n        let newIndex = new Map<string, number>();\n        let newReverseIndex = new Map<number, string>();\n        this.index.forEach((value, key) => {\n            if (value > i) {\n                newNodes.set(value - 1, this.nodes.get(value) as Bond);\n                newIndex.set(key, value - 1);\n                newReverseIndex.set(value - 1, key);\n            } else {\n                newNodes.set(value, this.nodes.get(value) as Bond);\n                newIndex.set(key, value);\n                newReverseIndex.set(value, key);\n            }\n        });\n        this.nodes = newNodes;\n        this.index = newIndex;\n        this.reverseIndex = newReverseIndex;\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, a \"scalar\" node is a child of a \"property\" node.\n */\nexport class PropertyScalar extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PropertyScalar.tagName, value);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyScalar.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    //console.log('Units are not the same, changing units...');\n                    this.attributes.set(PropertyScalar.s_units, units);\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyArray extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"array\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyArray.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set(PropertyArray.s_units, units);\n                    console.log('Units changed from ' + existingUnits + ' to ' + units);\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes may contain:\n * \"rows\"\n * \"matrixType\" with known values [quareSymmetricLT].\n * \"units\" with known values [Hartree/Bohr2].\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyMatrix extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"matrix\";\n\n    /**\n     * The key for the rows attribute.\n     */\n    static readonly s_rows: string = \"rows\";\n\n    /**\n     * The key for the matrixType attribute.\n     */\n    static readonly s_matrixType: string = \"matrixType\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyArray.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set(PropertyArray.s_units, units);\n                    console.log('Units changed from ' + existingUnits + ' to ' + units);\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes must contain \"dictRef\" which is a dictionary reference for a type of property.\n * In the XML, a \"property\" node has a \"propertyList\" parent and either a \"scalar\" or \"array\" or another type of child not yet implemented (there could be a \"matrix\" type).\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * The key for the dictRef attribute.\n     */\n    static readonly s_dictRef: string = \"dictRef\";\n\n    /**\n     * The dictRef.\n     */\n    dictRef: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property?: PropertyScalar | PropertyArray | PropertyMatrix) {\n        super(attributes, Property.tagName);\n        let dictRef: string | undefined = attributes.get(Property.s_dictRef);\n        if (dictRef == undefined) {\n            throw new Error(Property.s_dictRef + ' is undefined!');\n        }\n        this.dictRef = dictRef;\n        if (property) {\n            this.nodes.set(0, property);\n        }\n    }\n\n    /**\n     * @returns The property.\n     */\n    getProperty(): PropertyScalar | PropertyArray | PropertyMatrix {\n        return this.nodes.get(0) as PropertyScalar | PropertyArray | PropertyMatrix;\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: PropertyScalar | PropertyArray | PropertyMatrix): void {\n        this.nodes.set(0, property);\n    }\n\n}\n\n/**\n * The Zero Potential Energy.\n * The child \"scalar\" node should have a \"units\" attribute (Mesmer.energyUnits).\n */\nexport class ZPE extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:ZPE\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of Mesmer.energyUnits.\n     */\n    setUnits(units: string): void {\n        this.getProperty().updateUnits(units);\n    }\n}\n\n/**\n * \"me:frequenciesScaleFactor\" property.\n */\nexport class FrequenciesScaleFactor extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:frequenciesScaleFactor\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The vibration frequencies.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class VibFreqs extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:vibFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The rotation constants.\n * The child \"array\" node should have a \"units\" attribute with options [\"cm-1\", \"GHz\", \"amuA^2\"]\n */\nexport class RotConsts extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:rotConsts\";\n\n    /**\n     * The units.\n     */\n    static readonly unitOptions: string[] = [\"cm-1\", \"GHz\", \"amuA^2\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Molecular Weight.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[amu]).\n */\nexport class MW extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:MW\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:imFreqs\"\n */\nexport class ImFreqs extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:imFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * In the XML, a \"propertyList\" node is a child node of a \"molecule\" node and has one or more \"property\" child node.\n * There can be no attributes.\n */\nexport class PropertyList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"propertyList\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */\n    constructor(attributes: Map<string, string>, properties?: Property[]) {\n        super(attributes, PropertyList.tagName);\n        this.index = new Map();\n        if (properties != undefined) {\n            properties.forEach(property => {\n                this.nodes.set(this.nodes.size, property);\n                this.index.set(property.dictRef, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let i: number | undefined = this.index.get(dictRef);\n        if (i != undefined) {\n            return this.nodes.get(i) as Property;\n        } else {\n            throw new Error('Property ' + dictRef + ' does not exist');\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let i: number | undefined = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log('Property ' + property.dictRef + ' already exists, updating...');\n            this.nodes.set(i, property);\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include:\n * \"bathGas\";\n * and other attributes of a RangeNode.\n */\nexport class DeltaEDown extends RangeNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * The key for the bathGas attribute.\n     */\n    static readonly s_bathGas: string = \"bathGas\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */\n    getBathGas(): string | undefined {\n        return this.attributes.get(DeltaEDown.s_bathGas);\n    }\n\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */\n    setBathGas(bathGas: string): void {\n        this.attributes.set(DeltaEDown.s_bathGas, bathGas);\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown2\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include:\n * \"bathGas\";\n * and other attributes of a RangeNode.\n */\nexport class DeltaEDown2 extends DeltaEDown {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown2\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, value);\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDownLinEne\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include:\n * \"referenceTemperature\";\n * and other attributes of a RangeNode.\n */\nexport class DeltaEDownTExponent extends RangeNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDownTExponent\"\n\n    /**\n     * The referenceTemperature attribute key.\n     */\n    static readonly s_referenceTemperature: string = \"referenceTemperature\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DeltaEDownTExponent.tagName, value);\n    }\n\n    /**\n     * @returns The referenceTemperature.\n     */\n    getReferenceTemperature(): number | undefined {\n        return parseFloat(get(this.attributes, DeltaEDownTExponent.s_referenceTemperature));\n    }\n\n    /**\n     * @param referenceTemperature The referenceTemperature.\n     */\n    setReferenceTemperature(referenceTemperature: number): void {\n        this.attributes.set(DeltaEDownTExponent.s_referenceTemperature, referenceTemperature.toString());\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDownLinEne\" node is a child node of a \"me:energyTransferModel\" node.\n */\nexport class DeltaEDownLinEne extends RangeNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDownLinEne\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DeltaEDownLinEne.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:energyTransferModel\" node is a child node of a \"molecule\" node.\n * The attributes are expected to include:\n * \"xsi:type\" with expected values [\"me:ExponentialDown\", \"me:BiExponentialDown\"].\n * It may have:\n * One or multiple child nodes of the following types:\n * \"me:deltaEDown\"\n * \"me:deltaEDown2\" (for \"me:BiExponentialDown\")\n * \"me:deltaEDownTExponent\"\n * \"me:deltaEDownLinEne\"\n * \"me:deltaEDownTActivation\"\n * Examples:\n * <moleculeList>\n *   <molecule id=\"Isomer1\">\n *     <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *       <me:deltaEDown units=\"cm-1\" lower=\"100\" upper=\"400\" stepsize=\"10\">174</me:deltaEDown>\n *     </me:energyTransferModel>\n *   </molecule>\n *   <molecule id=\"Isomer2\">\n *     <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *       <me:deltaEDown units=\"cm-1\" derivedFrom=\"Isomer1:deltaEDown\">174</me:deltaEDown>\n *     </me:energyTransferModel>\n *   </molecule>\n * </moleculeList>\n * <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *   <me:deltaEDown units=\"cm-1\" lower=\"140.0\" upper=\"220.\" stepsize=\"10.0\">210.0</me:deltaEDown>\n *   <me:deltaEDownTExponent lower=\"0.0\" upper=\"1.0\" stepsize=\"0.01\">0.6</me:deltaEDownTExponent>\n *   <me:deltaEDownLinEne lower=\"1.e-06\" upper=\"1.0\" stepsize=\"1.e-06\">0.0006</me:deltaEDownLinEne>\n * </me:energyTransferModel>\n * <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *   <me:deltaEDown bathGas=\"Ar\" units=\"cm-1\" lower=\"20\" upper=\"400\" stepsize=\"10.0\">47.9654</me:deltaEDown>\n *   <me:deltaEDownTExponent bathGas=\"Ar\" referenceTemperature=\"298\" lower=\"0\" upper=\"2\" stepsize=\"0.02\" >1.37982</me:deltaEDownTExponent>\n *   <me:deltaEDownTActivation bathGas=\"Ar\" units=\"K-1\" lower=\"-1.0\" upper=\"1.0\" stepsize=\"1e-5\" >-7.95961e-05 </me:deltaEDownTActivation>\n * </me:energyTransferModel>\n * <me:energyTransferModel xsi:type=\"me:BiExponentialDown\">\n *  <me:deltaEDown units=\"cm-1\">210.0</me:deltaEDown>\n *  <me:deltaEDown2 units=\"cm-1\">500.0</me:deltaEDown2>\n *  <me:ratio>0.5</me:ratio>\n * </me:energyTransferModel>\n */\nexport class EnergyTransferModel extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns?: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        if (deltaEDowns != undefined) {\n            deltaEDowns.forEach(deltaEDown => {\n                this.nodes.set(this.nodes.size, deltaEDown);\n            });\n        }\n    }\n\n    /**\n     * @returns The DeltaEDowns.\n     */\n    getDeltaEDowns(): DeltaEDown[] {\n        let deltaEDowns: DeltaEDown[] = [];\n        this.nodes.forEach(node => {\n            if (node instanceof DeltaEDown) {\n                deltaEDowns.push(node);\n            }\n        });\n        return deltaEDowns;\n    }\n\n    /**\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    setDeltaEDowns(deltaEDowns: DeltaEDown[]): void {\n        this.nodes.clear();\n        deltaEDowns.forEach(deltaEDown => {\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */\n    getDeltaEDown(index: number): DeltaEDown {\n        if (index < 0 || index >= this.nodes.size) {\n            throw new Error('index out of range');\n        }\n        return this.nodes.get(index) as DeltaEDown;\n    }\n\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */\n    setDeltaEDown(index: number, deltaEDown: DeltaEDown): void {\n        this.nodes.set(index, deltaEDown);\n    }\n\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */\n    addDeltaEDown(deltaEDown: DeltaEDown): number {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\n\n/**\n * In the XML, a \"me:DOSCMethod\" node is a child node of a \"molecule\" node.\n * The attributes are expected to include either \"xsi:type\" or \"name\" - expected values include [\"ClassicalRotors\", \n * \"QMRotors\", \"me:ClassicalRotors\", \"me:QMRotors\"].\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    /**\n     * The options for the \"xsi:type\" or \"name\" attribute value.\n     */\n    static readonly xsi_typeOptions: string[] = [\"ClassicalRotors\", \"QMRotors\", \"me:ClassicalRotors\", \"me:QMRotors\"];\n\n    /**\n     * The key for the \"xsi:type\" attribute value.\n     */\n    static readonly s_xsi_type = \"xsi:type\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n        if (attributes.get(DOSCMethod.s_xsi_type) == undefined) {\n            let name: string | undefined = attributes.get(\"name\");\n            if (name == undefined) {\n                throw new Error('Neither xsi:type or name are defined.');\n            } else {\n                attributes.set(DOSCMethod.s_xsi_type, name);\n            }\n        }\n    }\n\n    /**\n     * @returns The xsi:type.\n     */\n    getXsiType(): string {\n        return this.attributes.get(DOSCMethod.s_xsi_type) as string;\n    }\n\n    /**\n     * @param xsiType The xsi:type.\n     */\n    setXsiType(xsiType: string): void {\n        this.attributes.set(DOSCMethod.s_xsi_type, xsiType);\n    }\n}\n\n/**\n * In the XML, a \"me:bondRef\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class BondRef extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bondRef\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.tagName, bondRef);\n    }\n}\n\n/**\n * In the XML, a \"me:PotentialPoint\" node is a child node of a \"me:HinderedRotorPotential\" node.\n * The attributes must include \"angle\" and \"potential\".\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PotentialPoint\";\n\n    /**\n     * The key angle attribute.\n     */\n    static readonly s_angle: string = \"angle\";\n\n    /**\n     * The key potential attribute.\n     */\n    static readonly s_potential: string = \"potential\";\n\n    /**\n     * The angle stored for convenience, this is also an attribute.\n     */\n    angle: number;\n\n    /**\n     * The potential stored for convenience, this is also an attribute.\n     */\n    potential: number;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.tagName);\n        let angle: string | undefined = attributes.get(PotentialPoint.s_angle);\n        if (angle == undefined) {\n            throw new Error(PotentialPoint.s_potential + ' is undefined!');\n        }\n        this.angle = parseFloat(angle);\n        let potential: string | undefined = attributes.get(PotentialPoint.s_potential);\n        if (potential == undefined) {\n            throw new Error(PotentialPoint.s_potential + ' is undefined!');\n        }\n        this.potential = parseFloat(potential);\n    }\n\n    /**\n     * @returns The angle.\n     */\n    getAngle(): number {\n        return this.angle;\n    }\n\n    /**\n     * @param angle The angle of the PotentialPoint.\n     */\n    setAngle(angle: number): void {\n        this.angle = angle;\n        this.attributes.set(PotentialPoint.s_angle, angle.toString());\n    }\n\n    /**\n     * @returns The potential.\n     */\n    getPotential(): number {\n        return this.potential;\n    }\n\n    /**\n     * @param potential The potential of the PotentialPoint.\n     */\n    setPotential(potential: number): void {\n        this.potential = potential;\n        this.attributes.set(PotentialPoint.s_potential, potential.toString());\n    }\n\n}\n\n/**\n * In the XML, a \"me:HinderedRotorPotential\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n * It may have one or more \"me:PotentialPoint\" child nodes.\n * The attributes must include \"format\" (with a value from [\"numerical\", \"analytical\"]) and \"units\" (Mesmer.energyUnits).\n */\nexport class HinderedRotorPotential extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:HinderedRotorPotential\";\n\n    /**\n     * The permitted formats.\n     */\n    static readonly formats: Set<string> = new Set([\"numerical\", \"analytical\"]);\n\n    /**\n     * The key for the format attribute value.\n     */\n    static readonly s_format: string = \"format\";\n\n    /**\n     * The key for the units attribute value.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The key for the expansionSize attribute value.\n     */\n    static readonly s_expansionSize: string = \"expansionSize\";\n\n    /**\n     * The key for the useSineTerms attribute value.\n     */\n    static readonly s_useSineTerms: string = \"useSineTerms\";\n\n    /**\n     * The format stored for convenience, this is also an attribute.\n     */\n    format: string;\n\n    /**\n     * The units stored for convenience, this is also an attribute.\n     */\n    units: string;\n\n    /**\n     * The expansionSize stored for convenience, this is also an attribute.\n     */\n    expansionSize: number;\n\n    /**\n     * The useSineTerms stored for convenience, this is also an attribute.\n     */\n    useSineTerms: boolean;\n\n    /**\n     * @param attributes The attributes.\n     * @param potentialPoints The PotentialPoints.\n     */\n    constructor(attributes: Map<string, string>, potentialPoints?: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.tagName);\n        let format: string | undefined = attributes.get(HinderedRotorPotential.s_format);\n        if (format == undefined) {\n            throw new Error(HinderedRotorPotential.s_format + ' is undefined!');\n        }\n        this.format = format;\n        let units: string | undefined = attributes.get(HinderedRotorPotential.s_units);\n        if (units == undefined) {\n            throw new Error(HinderedRotorPotential.s_units + ' is undefined!');\n        }\n        this.units = units;\n        if (potentialPoints != undefined) {\n            potentialPoints.forEach(p => {\n                this.nodes.set(this.nodes.size, p);\n            });\n        }\n        let expansionSize: string | undefined = attributes.get(HinderedRotorPotential.s_expansionSize);\n        if (expansionSize == undefined) {\n            throw new Error(HinderedRotorPotential.s_expansionSize + ' is undefined!');\n        }\n        this.expansionSize = parseFloat(expansionSize);\n        let useSineTerms: string | undefined = attributes.get(HinderedRotorPotential.s_useSineTerms);\n        if (useSineTerms == undefined) {\n            this.useSineTerms = false;\n            //throw new Error(HinderedRotorPotential.s_useSineTerms + ' is undefined!');\n        } else {\n            this.useSineTerms = true;\n        }\n        //this.useSineTerms = (useSineTerms == \"yes\");\n    }\n\n    /**\n     * @returns The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    getFormat(): string {\n        return this.format;\n    }\n\n    /**\n     * @param format The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    setFormat(format: string): void {\n        this.format = format;\n        this.attributes.set(HinderedRotorPotential.s_format, format);\n    }\n\n    /**\n     * @returns The units of the HinderedRotorPotential.\n     * Should be one of Mesmer.energyUnits.\n     */\n    getUnits(): string {\n        return this.units;\n    }\n\n    /**\n     * @param units The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */\n    setUnits(units: string): void {\n        this.units = units;\n        this.attributes.set(HinderedRotorPotential.s_units, units);\n    }\n\n    /**\n     * @returns The expansionSize of the HinderedRotorPotential.\n     */\n    getExpansionSize(): number {\n        return this.expansionSize;\n    }\n\n    /**\n     * @param expansionSize The expansionSize of the HinderedRotorPotential.\n     */\n    setExpansionSize(expansionSize: number): void {\n        this.expansionSize = expansionSize;\n        this.attributes.set(HinderedRotorPotential.s_expansionSize, expansionSize.toString());\n    }\n\n    /**\n     * @returns The useSineTerms of the HinderedRotorPotential.\n     */\n    getUseSineTerms(): boolean {\n        return this.useSineTerms;\n    }\n\n    /**\n     * @param useSineTerms The useSineTerms of the HinderedRotorPotential.\n     */\n    setUseSineTerms(useSineTerms: boolean): void {\n        this.useSineTerms = useSineTerms;\n        this.attributes.set(HinderedRotorPotential.s_useSineTerms, useSineTerms ? \"yes\" : \"no\");\n    }\n\n    /**\n     * @returns The potential point with the given index.\n     */\n    getPotentialPoint(i: number): PotentialPoint {\n        return this.nodes.get(i) as PotentialPoint;\n    }\n\n    /**\n     * Set the potential point at the given index.\n     * @param i The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */\n    setPotentialPoint(i: number, p: PotentialPoint): void {\n        this.nodes.set(i, p);\n    }\n\n    /**\n     * Sets the potential points.\n     * @param potentialPoints The potential points.\n     */\n    setPotentialPoints(potentialPoints: PotentialPoint[]): void {\n        this.nodes.clear();\n        potentialPoints.forEach(p => {\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */\n    addPotentialPoint(p: PotentialPoint): number {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @param i The index of the potential point to remove.\n     */\n    removePotentialPoint(i: number): void {\n        this.nodes.delete(i);\n    }\n}\n\n/**\n * In the XML, a \"me:periodicity\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class Periodicity extends NumberNode {\n\n    static readonly tagName: string = \"me:periodicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Periodicity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:ExtraDOSCMethod\" node is a child node of a \"molecule\" node.\n */\nexport class ExtraDOSCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */\n    constructor(attributes: Map<string, string>, bondRef?: BondRef,\n        hinderedRotorPotential?: HinderedRotorPotential,\n        periodicity?: Periodicity) {\n        super(attributes, ExtraDOSCMethod.tagName);\n        this.index = new Map();\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The bondRef.\n     */\n    getBondRef(): BondRef | undefined {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BondRef;\n        }\n    }\n\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */\n    setBondRef(bondRef: BondRef) {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bondRef);\n        } else {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */\n    getHinderedRotorPotential(): HinderedRotorPotential | undefined {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HinderedRotorPotential;\n        }\n    }\n\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */\n    setHinderedRotorPotential(hinderedRotorPotential: HinderedRotorPotential) {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hinderedRotorPotential);\n        } else {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The periodicity of the molecule.\n     */\n    getPeriodicity(): Periodicity | undefined {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Periodicity;\n        }\n    }\n\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */\n    setPeriodicity(periodicity: Periodicity) {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, periodicity);\n        } else {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n}\n\n/**\n * The attributes may include \"units\".\n * In the XML, a \"me:reservoirSize\" node is a child node of a \"molecule\" node.\n */\nexport class ReservoirSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:reservoirSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ReservoirSize.tagName, value);\n    }\n}\n\n\n/**\n * The attributes may include \"description\" and \"active\" (and possibly others).\n * In the XML, a \"molecule\" node is a child node of a \"moleculeList\" node.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The key for the id attribute value.\n     */\n    static readonly s_id = \"id\";\n\n    /**\n     * The key for the description attribute value.\n     */\n    static readonly s_description = \"description\";\n\n    /**\n     * The key for the active attribute value.\n     */\n    static readonly s_active = \"active\";\n\n    /**\n     * The index. The keys are the tag names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    // The molecule ID.\n    id: string;\n\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. This will also include an \"id\".\n     * Additional attributes may include: \"description\" and \"active\" (and possibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        id: string,\n        //atoms?: Atom | AtomArray,\n        atoms?: AtomArray,\n        //bonds?: Bond | BondArray,\n        bonds?: BondArray,\n        properties?: PropertyList | Property,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod,\n        extraDOSCMethod?: ExtraDOSCMethod,\n        reservoirSize?: ReservoirSize) {\n        super(attributes, Molecule.tagName);\n        this.index = new Map();\n        this.id = id;\n        let i: number = 0;\n        // Atoms\n        if (!atoms) {\n            atoms = new AtomArray(new Map());\n        }\n        this.nodes.set(i, atoms);\n        this.index.set(AtomArray.tagName, i);\n        i++;\n        // Bonds\n        if (!bonds) {\n            bonds = new BondArray(new Map());\n        }\n        this.nodes.set(i, bonds);\n        this.index.set(BondArray.tagName, i);\n        i++;\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set(PropertyList.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set(EnergyTransferModel.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set(DOSCMethod.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set(ExtraDOSCMethod.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set(ReservoirSize.tagName, i);\n        }\n    }\n\n    /**\n     * Get the description or the id of the molecule.\n     * @returns The description of the molecule, or the id if it is not set.\n     */\n    getDescription(): string {\n        let description: string | undefined = this.attributes.get(Molecule.s_description);\n        if (description != undefined) {\n            return description;\n        }\n        return this.id;\n    }\n\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */\n    setDescription(description: string): void {\n        this.attributes.set(Molecule.s_description, description);\n    }\n\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(Molecule.s_active);\n        if (active != undefined) {\n            if (active == \"true\") {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */\n    setActive(active: boolean): void {\n        this.attributes.set(Molecule.s_active, active.toString());\n    }\n\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */\n    getLabel(): string {\n        let label: string = this.id;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            label += \" (\" + description + \")\";\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active) {\n            label += \" (\" + Molecule.s_active + \")\";\n        }\n        return label;\n    }\n\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */\n    getAttributesAsString(): string {\n        return Array.from(this.attributes, ([key, value]) => `${key}=\\\"${value}\\\"`).join(', ');\n    }\n\n    /**\n     * @returns The properties of the molecule.\n     */\n    getProperties(): PropertyList | Property | undefined {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            i = this.index.get(Property.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as Property;\n            }\n        } else {\n            return this.nodes.get(i) as PropertyList;\n        }\n    }\n\n    /**\n     * @param properties The properties.\n     */\n    setProperties(properties: PropertyList | Property) {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            this.index.set(PropertyList.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else {\n            this.nodes.set(i, properties);\n        }\n    }\n\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                //console.log('PropertyList');\n                return properties.getProperty(dictRef);\n            } else {\n                //console.log('Property');\n                return properties;\n            }\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                properties.setProperty(property);\n            } else {\n                this.setProperties(properties);\n            }\n        } else {\n            this.setProperties(property);\n        }\n    }\n\n    /**\n     * @param atomId The id of the atom.\n     * @returns The atom for the given atomId.\n     */\n    getAtom(atomId: string): Atom | undefined {\n        return this.getAtoms().getAtom(atomId);\n    }\n\n    /**\n     * @returns The atoms of the molecule.\n     */\n    getAtoms(): AtomArray {\n        let i: number = this.index.get(AtomArray.tagName) as number;\n        return this.nodes.get(i) as AtomArray;\n    }\n\n    /**\n     * @param atoms The atoms.\n     */\n    setAtoms(atoms: AtomArray) {\n        this.index.set(AtomArray.tagName, this.nodes.size);\n        this.nodes.set(this.nodes.size, atoms);\n    }\n\n    /**\n     * @param bondId The id of the bond.\n     * @returns The bond for the given bondId.\n     */\n    getBond(bondId: string): Bond | undefined {\n        return this.getBonds().getBond(bondId);\n    }\n\n    /**\n     * @returns The bonds of the molecule.\n     */\n    getBonds(): BondArray {\n        let i: number = this.index.get(BondArray.tagName) as number;\n        return this.nodes.get(i) as BondArray;\n    }\n\n    /**\n     * @param bonds The bonds.\n     */\n    setBonds(bonds: BondArray) {\n        this.index.set(BondArray.tagName, this.nodes.size);\n        this.nodes.set(this.nodes.size, bonds);\n    }\n\n    /**\n     * @returns The energy transfer model of the molecule.\n     */\n    getEnergyTransferModel(): EnergyTransferModel | undefined {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as EnergyTransferModel;\n        }\n    }\n\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */\n    setEnergyTransferModel(energyTransferModel: EnergyTransferModel) {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            this.index.set(EnergyTransferModel.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else {\n            this.nodes.set(i, energyTransferModel);\n        }\n    }\n\n    /**\n     * @returns The DOSC method of the molecule.\n     */\n    getDOSCMethod(): DOSCMethod | undefined {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DOSCMethod;\n        }\n    }\n\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */\n    setDOSCMethod(dOSCMethod: DOSCMethod) {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(DOSCMethod.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else {\n            this.nodes.set(i, dOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */\n    getExtraDOSCMethod(): ExtraDOSCMethod | undefined {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ExtraDOSCMethod;\n        }\n    }\n\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */\n    setExtraDOSCMethod(extraDOSCMethod: ExtraDOSCMethod) {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(ExtraDOSCMethod.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else {\n            this.nodes.set(i, extraDOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The reservoir size of the molecule.\n     */\n    getReservoirSize(): ReservoirSize | undefined {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ReservoirSize;\n        }\n    }\n\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */\n    setReservoirSize(reservoirSize: ReservoirSize) {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            this.index.set(ReservoirSize.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else {\n            this.nodes.set(i, reservoirSize);\n        }\n    }\n\n    /**\n     * Get the ZPE value of the molecule.\n     */\n    getEnergy(): number {\n        let p: Property | undefined = this.getProperty(ZPE.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error(ZPE.dictRef + ' property not found!');\n            //return 0;\n        }\n        return (p.getProperty() as PropertyScalar).value;\n    }\n}","import { NumberNode } from \"./xml\";\n\n/**\n * An abstract class for a range.\n * The attributes may include:\n * \"units\"\n * \"lower\"\n * \"upper\"\n * \"stepsize\"\n */\nexport abstract class RangeNode extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string;\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The key for the lower attribute.\n     */\n    static readonly s_lower: string = \"lower\";\n\n    /**\n     * The key for the upper attribute.\n     */\n    static readonly s_upper: string = \"upper\";\n\n    /**\n     * The key for the stepsize attribute.\n     */\n    static readonly s_stepsize: string = \"stepsize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: number) {\n        super(attributes, tagName, value);\n    }\n\n    /**\n     * @param value The value of the Range.\n     */\n    setValue(value: number): void {\n        this.value = value;\n    }\n\n    /**\n     * @returns The units of the Range.\n     */\n    getUnits(): string | undefined {\n        return this.attributes.get(RangeNode.s_units);\n    }\n\n    /**\n     * @param units The units of the Range.\n     */\n    setUnits(units: string): void {\n        this.attributes.set(RangeNode.s_units, units);\n    }\n\n    /**\n     * Remove the units attribute.\n     */\n    removeUnits(): void {\n        this.attributes.delete(RangeNode.s_units);\n    }\n\n    /**\n     * @returns The lower of the Range.\n     */\n    getLower(): number | undefined {\n        let lower: string | undefined = this.attributes.get(RangeNode.s_lower);\n        if (lower != undefined) {\n            return parseFloat(lower);\n        }\n    }\n\n    /**\n     * @param lower The lower of the Range.\n     */\n    setLower(lower: number): void {\n        this.attributes.set(RangeNode.s_lower, lower.toString());\n    }\n\n    /**\n     * Remove the lower attribute.\n     */\n    removeLower(): void {\n        this.attributes.delete(RangeNode.s_lower);\n    }\n\n    /**\n     * @returns The upper of the Range.\n     */\n    getUpper(): number | undefined {\n        let upper: string | undefined = this.attributes.get(RangeNode.s_upper);\n        if (upper != undefined) {\n            return parseFloat(upper);\n        }\n    }\n\n    /**\n     * @param upper The upper of the Range.\n     */\n    setUpper(upper: number): void {\n        this.attributes.set(RangeNode.s_upper, upper.toString());\n    }\n\n    /**\n     * Remove the upper attribute.\n     */\n    removeUpper(): void {\n        this.attributes.delete(RangeNode.s_upper);\n    }\n\n    /**\n     * @returns The stepsize of the Range.\n     */\n    getStepsize(): number | undefined {\n        let stepsize: string | undefined = this.attributes.get(RangeNode.s_stepsize);\n        if (stepsize != undefined) {\n            return parseFloat(stepsize);\n        }\n    }\n\n    /**\n     * @param stepsize The stepsize of the Range.\n     */\n    setStepsize(stepsize: number): void {\n        this.attributes.set(RangeNode.s_stepsize, stepsize.toString());\n    }\n\n    /**\n     * Remove the stepsize attribute.\n     */\n    removeStepsize(): void {\n        this.attributes.delete(RangeNode.s_stepsize);\n    }\n}","import {\n    Molecule, ZPE\n} from './molecule.js';\n\nimport {\n    TagWithAttributes, NodeWithNodes, NumberNode, Tag, NumberArrayNode, StringNode\n} from './xml.js';\n\n/**\n * A reference to a molecule, not to be confused with a Molecule.\n * The attribute \"ref\" is the same as a Molecule ID for a molecule in the XML \"moleculeList\".\n * The attribute \"role\" is the role of the molecule in the reaction. Expected values are:\n * [\"deficientReactant\", \"excessReactant\", \"modelled\", \"transitionState\", \"sink\"], but this may depend on whether the molecule is a reactant, product or transition state.\n * In the XML, a \"molecule\" node is a child of a \"reactant\", \"product\" or \"me:transitionState\" node.\n */\nexport class ReactionMolecule extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The ref attribute.\n     */\n    ref: string;\n\n    /**\n     * The role attribute.\n     */\n    role: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, ReactionMolecule.tagName);\n        this.ref = attributes.get(\"ref\") as string;\n        this.role = attributes.get(\"role\") as string;\n    }\n\n    /**\n     * @param role The role of the molecule in the reaction.\n     */\n    setRole(role: string): void {\n        this.role = role;\n    }\n\n}\n\n/**\n * A molecule that reacts in a reaction.\n * In the XML, a \"reactant\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Reactant extends NodeWithNodes {\n    \n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * The role options.\n     */\n    static readonly roleOptions: string[] = [\"deficientReactant\", \"excessReactant\", \"modelled\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Reactant.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * A molecule produced in a reaction.\n * In the XML, a \"product\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Product extends NodeWithNodes {\n    \n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * The role options.\n     */\n    static readonly roleOptions: string[] = [\"modelled\", \"sink\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Product.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n\n}\n\n/**\n * A molecule that is a transition state in a reaction.\n * In the XML, a \"me:transitionState\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class TransitionState extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, TransitionState.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * In the XML, a \"me:preExponential\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:activationEnergy\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:TInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:nInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * Extended classes indicate how microcanonical rate constant is to be treated.\n * In the XML, a \"me:MCRCMethod\" node is a child of a \"reaction\" node.\n * A simple MCRCMethod has an attribute name=\"RRKM\".\n * There are extended classed representing more complicated MCRCMethods:\n * \"me:MesmerILT\"\n * \"LandauZenerCrossing\"\n * \"ZhuNakamuraCrossing\"\n * \"me:CanonicalRateCoefficient\"\n * \"DefinedSumOfStates\"\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * The Inverse Laplace Transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The xsiType.\n     */\n    static readonly xsiType: string = \"me:MesmerILT\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsiType2: string = \"MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */\n    constructor(attributes: Map<string, string>, preExponential?: PreExponential,\n        activationEnergy?: ActivationEnergy, tInfinity?: TInfinity, nInfinity?: NInfinity) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(PreExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(ActivationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(TInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(NInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    /**\n     * @param preExponential The pre-exponential factor.\n     */\n    setPreExponential(preExponential: PreExponential): void {\n        let i = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            this.index.set(PreExponential.tagName, this.nodes.size);\n            this.addNode(preExponential);\n        } else {\n            this.nodes.set(i, preExponential);\n        }\n    }\n\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    /**\n     * @param activationEnergy The activation energy.\n     */\n    setActivationEnergy(activationEnergy: ActivationEnergy): void {\n        let i = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            this.index.set(ActivationEnergy.tagName, this.nodes.size);\n            this.addNode(activationEnergy);\n        } else {\n            this.nodes.set(i, activationEnergy);\n        }\n    }\n\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    /**\n     * @param tInfinity The TInfinity.\n     */\n    setTInfinity(tInfinity: TInfinity): void {\n        let i = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(TInfinity.tagName, this.nodes.size);\n            this.addNode(tInfinity);\n        } else {\n            this.nodes.set(i, tInfinity);\n        }\n    }\n\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n\n    /**\n     * @param nInfinity The NInfinity.\n     */\n    setNInfinity(nInfinity: NInfinity): void {\n        let i = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(NInfinity.tagName, this.nodes.size);\n            this.addNode(nInfinity);\n        } else {\n            this.nodes.set(i, nInfinity);\n        }\n    }\n}\n\n/**\n * In the XML, the \"me:tunneling\" node is a child of a \"reaction\" node.\n * The \"name\" attribute is one of: [Eckart, WKB].\n */\nexport class Tunneling extends TagWithAttributes {\n    \n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * The options.\n     */\n    static readonly options: string[] = [\"Eckart\", \"WKB\"];\n\n    /**\n     * The key to the name attribute value.\n     */\n    static readonly s_name: string = \"name\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n\n    /**\n     * @returns The name of the tunneling method.\n     */\n    getName(): string {\n        return this.attributes.get(Tunneling.s_name) as string;\n    }\n\n    /**\n     * @param The name of the tunneling method.\n     */\n    setName(name: string): void {\n        this.attributes.set(Tunneling.s_name, name);\n    }\n}\n\n/**\n * In the XML, the \"me:excessReactantConc\" node is a child of a \"reaction\" node.\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n}\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The key to the id attribute value.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The index for the nodes.\n     * The key is the type of node.\n     * The value is the index of the node in the nodes array or if there are multiple nodes of this type, \n     * the value is a Map where the key of the map is the dictRef of the Node and the value is the respective node index for that specific thing.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The reactants index.\n     * The key is the ref of the reactant.\n     * The value is the index of the reactant in the nodes array.\n     */\n    reactantsIndex: Map<string, number>;\n\n    /**\n     * The products index.\n     * The key is the ref of the product.\n     * The value is the index of the product in the nodes array.\n     */\n    productsIndex: Map<string, number>;\n\n    /**\n     * The transition states index.\n     * The key is the ref of the transition state.\n     * The value is the index of the transition state in the nodes array.\n     */\n    transitionStatesIndex: Map<string, number>;\n\n    /**\n     * The id of the reaction.\n     */\n    id: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */\n    constructor(attributes: Map<string, string>,\n        reactants?: Reactant[], products?: Product[], tunneling?: Tunneling,\n        transitionStates?: TransitionState[], mCRCMethod?: MCRCMethod,\n        excessReactantConc?: ExcessReactantConc) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map();\n        this.reactantsIndex = new Map();\n        this.productsIndex = new Map();\n        this.transitionStatesIndex = new Map();\n        let id: string | undefined = attributes.get(Reaction.s_id);\n        if (id == undefined) {\n            throw new Error(Reaction.s_id + ' is undefined!');\n        }\n        this.id = id;\n        if (reactants != undefined) {\n            reactants.forEach(reactant => {\n                this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n                this.addNode(reactant);\n            });\n            this.index.set(Reactant.tagName, this.reactantsIndex);\n        }\n        if (products != undefined) {\n            products.forEach(product => {\n                this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n                this.addNode(product);\n            });\n            this.index.set(Product.tagName, this.productsIndex);\n        }\n        if (tunneling != undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach(transitionState => {\n                this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n                this.addNode(transitionState);\n            });\n            this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n\n    /**\n     * Add a node to the index.\n     */\n    addToIndex(tagName: string, node: NodeWithNodes): void {\n        let v: Map<string, number> | number | undefined = this.index.get(tagName);\n        if (v == undefined) {\n            this.index.set(tagName, this.nodes.size);\n        } else if (v instanceof Map) {\n            (v as Map<string, number>).set(node.tagName, this.nodes.size);\n        } else {\n            let map: Map<string, number> = new Map<string, number>();\n            map.set((this.nodes.get(v) as ReactionMolecule).ref, v as number);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n\n    /**\n     * @returns The reactants.\n     */\n    getReactants(): Reactant[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Reactant.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Reactant);\n        } else {\n            return [this.nodes.get(i) as Reactant];\n        }\n    }\n\n    /**\n     * Set the reactants.\n     */\n    setReactants(reactants: Reactant[]): void {\n        reactants.forEach(reactant => {\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n            this.addNode(reactant);\n        });\n        this.index.set(Reactant.tagName, this.reactantsIndex);\n    }\n\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */\n    getReactant(ref: string): Reactant {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Reactant;\n    }\n\n    /**\n     * @param reactant The reactant to add.\n     */\n    addReactant(reactant: Reactant): void {\n        this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n        this.addNode(reactant);\n    }\n\n    /**\n     * @param ref The ref of the reactant to remove.\n     */\n    removeReactant(ref: string): void {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.reactantsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The products.\n     */\n    getProducts(): Product[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Product.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Product);\n        } else {\n            return [this.nodes.get(i) as Product];\n        }\n    }\n\n    /**\n     * Set the products.\n     */\n    setProducts(products: Product[]): void {\n        products.forEach(product => {\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n            this.addNode(product);\n        });\n        this.index.set(Product.tagName, this.productsIndex);\n    }\n\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */\n    getProduct(ref: string): Product {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Product;\n    }\n\n    /**\n     * @param product The product to add.\n     */\n    addProduct(product: Product): void {\n        this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n        this.addNode(product);\n    }\n\n    /**\n     * @param ref The ref of the product to remove.\n     */\n    removeProduct(ref: string): void {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.productsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */\n    getTunneling(): Tunneling | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as Tunneling;\n    }\n\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */\n    setTunneling(tunneling: Tunneling): void {\n        let i = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, tunneling);\n            }\n        }\n    }\n\n    /**\n     * @returns The transition states.\n     */\n    getTransitionStates(): TransitionState[] {\n        let i: Map<string, number> | number | undefined = this.index.get(TransitionState.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as TransitionState);\n        } else {\n            return [this.nodes.get(i) as TransitionState];\n        }\n    }\n\n    /**\n     * Set the transition states.\n     */\n    setTransitionStates(transitionStates: TransitionState[]): void {\n        transitionStates.forEach(transitionState => {\n            this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n            this.addNode(transitionState);\n        });\n        this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n    }\n\n    /**\n     * @returns A particular TransitionState.\n     * @param ref The ref of the transition state to return.\n     * @returns The transition state at the given index.\n     */\n    getTransitionState(ref: string): TransitionState {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition state with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as TransitionState;\n    }\n\n    /**\n     * @param transitionState The transition state to add.\n     */\n    addTransitionState(transitionState: TransitionState): void {\n        this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n        this.addNode(transitionState);\n    }\n\n    /**\n     * @param ref The ref of the transition state to remove.\n     */\n    removeTransitionState(ref: string): void {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition State with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.transitionStatesIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as MCRCMethod;\n    }\n\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */\n    setMCRCMethod(mCRCMethod: MCRCMethod): void {\n        let i = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, mCRCMethod);\n            }\n        }\n    }\n\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */\n    getExcessReactantConc(): ExcessReactantConc | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as ExcessReactantConc;\n    }\n\n    /**\n     * Set the excess reactant concentration or create it if it is undefined.\n     */\n    setExcessReactantConc(excessReactantConc: ExcessReactantConc): void {\n        let i = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"ExcessReactantConc is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, excessReactantConc);\n            }\n        }\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return this.getReactants().map(reactant => reactant.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return this.getProducts().map(product => product.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */\n    getReactantsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map(reactant => {\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map(product => {\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */\n    get(tagName: string, dictRef: string): NodeWithNodes | TagWithAttributes | Tag | undefined {\n        if (this.index.has(tagName)) {\n            let i: number | Map<string, number> | undefined = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex: number | undefined = i.get(dictRef);\n                    if (nodeIndex != undefined) {\n                        return this.nodes.get(nodeIndex);\n                    }\n                } else {\n                    return this.nodes.get(i);\n                }\n            }\n        }\n    }\n\n}","/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param x1 The end x-coordinate of the line.\n * @param y1 The end y-coordinate of the line.\n * @param font The font to use.\n * @param th The height of the text in pixels.\n * @param label The label.\n * @param energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string,\n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param ctx The context to use.\n * @param text The text to get the start x-coordinate of.\n * @paramfont The font to use.  \n * @param x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param x1 The start x-coordinate of the line.\n * @param y1 The start y-coordinate of the line.\n * @param x2 The end x-coordinate of the line.\n * @param y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param ctx The context to use.\n * @param text The text to write.\n * @param font The font to use.\n * @param colour The colour of the text.\n * @param x The horizontal position of the text.\n * @param y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param ctx The context to use.\n * @param text The text to get the height of.\n * @param font The font to use.\n * @returns The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param ctx The context to use.\n * @param text The text to get the width of.\n * @param font The font to use.\n * @returns The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    NodeWithNodes, NumberNode, StringNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:bathGas\".\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     */\n    constructor(attributes: Map<string, string>, moleculeID: string) {\n        super(attributes, BathGas.tagName, moleculeID);\n    }\n}\n\n/**\n * A class for \"me:experimentalRate\".\n * The attributes should include:\n * \"ref1\" string\n * \"ref2\" string\n * \"refReaction\" string\n * \"error\".\n */\nexport class ExperimentalRate extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentalRate\";\n\n    /**\n     * The key to the ref1 attribute value.\n     */\n    static readonly s_ref1: string = \"ref1\";\n\n    /**\n     * The key to the ref2 attribute value.\n     */\n    static readonly s_ref2: string = \"ref2\";\n\n    /**\n     * The key to the refReaction attribute value.\n     */\n    static readonly s_refReaction: string = \"refReaction\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentalRate.tagName, value);\n        /*\n        if (!this.attributes.has(ExperimentalRate.s_ref1)) {\n            console.error(\"ExperimentalRate.constructor: ref1 attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_ref2)) {\n            console.error(\"ExperimentalRate.constructor: ref2 attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_refReaction)) {\n            console.error(\"ExperimentalRate.constructor: refReaction attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_error)) {\n            console.error(\"ExperimentalRate.constructor: error attribute is missing.\");\n        }\n        */\n    }\n\n    /**\n     * @returns The ref1 attribute or undefined if there is no ref1 attribute.\n     */\n    getRef1(): string {\n        return this.attributes.get(ExperimentalRate.s_ref1) as string;\n    }\n\n    /**\n     * Set the ref1 attribute.\n     * @param ref1 The ref1.\n     */\n    setRef1(ref1: string) {\n        this.attributes.set(ExperimentalRate.s_ref1, ref1);\n    }\n\n    /**\n     * @returns The ref2 attribute or undefined if there is no ref2 attribute.\n     */\n    getRef2(): string {\n        return this.attributes.get(ExperimentalRate.s_ref2) as string;\n    }\n\n    /**\n     * Set the ref2 attribute.\n     * @param ref2 The ref2.\n     */\n    setRef2(ref2: string) {\n        this.attributes.set(ExperimentalRate.s_ref2, ref2);\n    }\n\n    /**\n     * @returns The refReaction attribute or undefined if there is no refReaction attribute.\n     */\n    getRefReaction(): string {\n        return this.attributes.get(ExperimentalRate.s_refReaction) as string;\n    }\n\n    /**\n     * Set the refReaction attribute.\n     * @param refReaction The refReaction.\n     */\n    setRefReaction(refReaction: string) {\n        this.attributes.set(ExperimentalRate.s_refReaction, refReaction);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number {\n        return parseFloat(this.attributes.get(ExperimentalRate.s_error) as string);\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        this.attributes.set(ExperimentalRate.s_error, error.toString());\n    }\n}\n\n/**\n * A class for \"me:experimentalYield\".\n * The attributes should include:\n * \"ref\" string\n * \"error\" number\n * \"yieldTime\" number.\n */\nexport class ExperimentalYield extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentalYield\";\n\n    /**\n     * The key to the ref attribute value.\n     */\n    static readonly s_ref: string = \"ref\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * The key to the yieldTime attribute value.\n     */\n    static readonly s_yieldTime: string = \"yieldTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentalYield.tagName, value);\n    }\n\n    /**\n     * @returns The ref attribute or undefined if there is no ref attribute.\n     */\n    getRef(): string {\n        return this.attributes.get(ExperimentalYield.s_ref) as string;\n    }\n\n    /**\n     * Set the ref attribute.\n     * @param ref The ref.\n     */\n    setRef(ref: string) {\n        this.attributes.set(ExperimentalYield.s_ref, ref);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number {\n        return parseFloat(this.attributes.get(ExperimentalYield.s_error) as string);\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        this.attributes.set(ExperimentalYield.s_error, error.toString());\n    }\n\n    /**\n     * @returns The yieldTime attribute or undefined if there is no yieldTime attribute.\n     */\n    getYieldTime(): number {\n        return parseFloat(this.attributes.get(ExperimentalYield.s_yieldTime) as string);\n    }\n\n    /**\n     * Set the yieldTime attribute.\n     * @param yieldTime The yieldTime.\n     */\n    setYieldTime(yieldTime: number) {\n        this.attributes.set(ExperimentalYield.s_yieldTime, yieldTime.toString());\n    }\n}\n\n/**\n * A class for \"me:experimentalEigenvalue\".\n * The attributes should include:\n * EigenvalueID:string\n * error: number\n */\nexport class ExperimentalEigenvalue extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:experimentalEigenvalue\";\n\n    /**\n     * The key to the EigenvalueID attribute value.\n     */\n    static readonly s_EigenvalueID = \"EigenvalueID\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentalEigenvalue.tagName, value);\n        /*\n        if (!this.attributes.has(ExperimentalEigenvalue.s_EigenvalueID)) {\n            console.error(\"ExperimentalEigenvalue.constructor: EigenvalueID attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalEigenvalue.s_error)) {\n            console.error(\"ExperimentalEigenvalue.constructor: error attribute is missing.\");\n        }\n        */\n    }\n\n    /**\n     * @returns The EigenvalueID attribute.\n     */\n    getEigenvalueID(): string {\n        return this.attributes.get(ExperimentalEigenvalue.s_EigenvalueID) as string;\n    }\n\n    /**\n     * Set the EigenvalueID attribute.\n     * @param EigenvalueID The EigenvalueID.\n     */\n    setEigenvalueID(EigenvalueID: string) {\n        this.attributes.set(ExperimentalEigenvalue.s_EigenvalueID, EigenvalueID);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number {\n        return parseFloat(this.attributes.get(ExperimentalEigenvalue.s_error) as string);\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        this.attributes.set(ExperimentalEigenvalue.s_error, error.toString());\n    }\n\n}\n\n/**\n * A class for \"me:excessReactantConc\".\n * The attributes may include:\n * percent: string (\"true\" or \"false\")\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * The key to the percent attribute value.\n     */\n    static readonly s_percent: string = \"percent\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n\n    /**\n     * @returns The percent attribute or undefined if there is no percent attribute.\n     */\n    getPercent(): string | undefined {\n        return this.attributes.get(ExcessReactantConc.s_percent);\n    }\n\n    /**\n     * Set the percent attribute.\n     * @param percent The percent.\n     */\n    setPercent(percent: string) {\n        this.attributes.set(ExcessReactantConc.s_percent, percent);\n    }\n}\n\n/**\n * A class for representing a Pressure and Temperature pair with optional additional things: BathGas and ExperimentRate.\n * Can there be multiple BathGases and ExperimentRates?\n * The attributes include:\n * units: string\n * P: number\n * T: number\n * And optionally:\n * percentExcessReactantConc: number\n * excessReactantConc: string\n * precision: number\n * bathGas: string\n * If excessReactantConc=\"true\" then the node contains a node of type \"me:excessReactantConc\".\n * \n */\nexport class PTpair extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTpair\";\n\n    /**\n     * The key to the P attribute value.\n     */\n    static readonly s_P: string = \"P\";\n\n    /**\n     * The key to the T attribute value.\n     */\n    static readonly s_T: string = \"T\";\n\n    /**\n     * The key to the precision attribute value.\n     */\n    static readonly s_precision: string = \"precision\";\n\n    /**\n     * The key to the excessReactantConc attribute value.\n     */\n    static readonly s_excessReactantConc = \"excessReactantConc\";\n\n    /**\n     * The key to the percentExcessReactantConc attribute value.\n     */\n    static readonly s_percentExcessReactantConc = \"percentExcessReactantConc\";\n\n    /**\n     * The index. Keys are types and values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */\n    constructor(attributes: Map<string, string>, bathGas?: BathGas, experimentRate?: ExperimentalRate,\n        experimentalYield?: ExperimentalYield, experimentalEigenvalue?: ExperimentalEigenvalue) {\n        super(attributes, PTpair.tagName);\n        this.index = new Map();\n        if (bathGas != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate != undefined) {\n            this.index.set(ExperimentalRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n        if (experimentalYield != undefined) {\n            this.index.set(ExperimentalYield.tagName, this.nodes.size);\n            this.addNode(experimentalYield);\n        }\n        if (experimentalEigenvalue != undefined) {\n            this.index.set(ExperimentalEigenvalue.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n\n    /**\n     * @returns The Pressure.\n     */\n    getP(): number {\n        //if (this !== undefined) {\n            let p: string | undefined = this.attributes.get(PTpair.s_P);\n            if (p !== undefined) {\n                return parseFloat(p);\n            }\n        //}\n        return NaN;\n    }\n\n    /**\n     * Set The Pressure\n     */\n    setP(p: number) {\n        this.attributes.set(PTpair.s_P, p.toString());\n    }\n\n    /**\n     * @returns The Temperature.\n     */\n    getT(): number {\n        //if (this !== undefined) {\n            let t: string | undefined = this.attributes.get(PTpair.s_T);\n            if (t !== undefined) {\n                return parseFloat(t);\n            }\n        //}\n        return NaN;\n    }\n\n    /**\n     * Set The Temperature.\n     */\n    setT(t: number) {\n        this.attributes.set(PTpair.s_T, t.toString());\n    }\n\n    /**\n     * @returns The precision attribute or undefined if there is no precision attribute.\n     */\n    getPrecision(): string | undefined {\n        return this.attributes.get(PTpair.s_precision);\n    }\n\n    /**\n     * Set the precision attribute.\n     * @param precision The precision.\n     */\n    setPrecision(precision: string) {\n        this.attributes.set(PTpair.s_precision, precision);\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas | undefined {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BathGas;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas.\n     */\n    setBathGas(bathGas: BathGas) {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bathGas);\n        } else {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * Remove the bath gas.\n     */\n    removeBathGas() {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(BathGas.tagName);\n        }\n    }\n\n    /**\n     * @returns The experiment rate.\n     */\n    getExperimentalRate(): ExperimentalRate | undefined {\n        let i: number | undefined = this.index.get(ExperimentalRate.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentalRate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentRate The experiment rate.\n     */\n    setExperimentalRate(experimentRate: ExperimentalRate) {\n        let i: number | undefined = this.index.get(ExperimentalRate.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentRate);\n        } else {\n            this.index.set(ExperimentalRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n\n    /**\n     * Remove the experiment rate.\n     */\n    removeExperimentalRate() {\n        let i: number | undefined = this.index.get(ExperimentalRate.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentalRate.tagName);\n        }\n    }\n\n    /**\n     * @returns The experimental yield.\n     */\n    getExperimentalYield(): ExperimentalYield | undefined {\n        let i: number | undefined = this.index.get(ExperimentalYield.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentalYield;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentalYield The experimental yield.\n     */\n    setExperimentalYield(experimentalYield: ExperimentalYield) {\n        let i: number | undefined = this.index.get(ExperimentalYield.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentalYield);\n        } else {\n            this.index.set(ExperimentalYield.tagName, this.nodes.size);\n            this.addNode(experimentalYield);\n        }\n    }\n\n    /**\n     * Remove the experimental yield.\n     */\n    removeExperimentalYield() {\n        let i: number | undefined = this.index.get(ExperimentalYield.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentalYield.tagName);\n        }\n    }\n\n    /**\n     * @returns The experimental eigenvalue.\n     */\n    getExperimentalEigenvalue(): ExperimentalEigenvalue | undefined {\n        let i: number | undefined = this.index.get(ExperimentalEigenvalue.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentalEigenvalue;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentalEigenvalue The experimental eigenvalue.\n     */\n    setExperimentalEigenvalue(experimentalEigenvalue: ExperimentalEigenvalue) {\n        let i: number | undefined = this.index.get(ExperimentalEigenvalue.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentalEigenvalue);\n        } else {\n            this.index.set(ExperimentalEigenvalue.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n\n    /**\n     * Remove the experimental eigenvalue.\n     */\n    removeExperimentalEigenvalue() {\n        let i: number | undefined = this.index.get(ExperimentalEigenvalue.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentalEigenvalue.tagName);\n        }\n    }\n\n    /**\n     * @returns this.attributes.get(\"excessReactantConc\").\n     */\n    getExcessReactantConc(): string | undefined {\n        return this.attributes.get(PTpair.s_excessReactantConc);\n    }\n\n    /**\n     * this.attributes.set(\"excessReactantConc\", excessReactantConc).\n     */\n    setExcessReactantConc(excessReactantConc: string) {\n        this.attributes.set(PTpair.s_excessReactantConc, excessReactantConc);\n    }\n\n    /**\n     * @returns this.attributes.get(\"percentExcessReactantConc\").\n     */\n    getPercentExcessReactantConc(): string | undefined {\n        return this.attributes.get(PTpair.s_percentExcessReactantConc);\n    }\n\n    /**\n     * this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc).\n     */\n    setPercentExcessReactantConc(percentExcessReactantConc: string) {\n        this.attributes.set(PTpair.s_percentExcessReactantConc, percentExcessReactantConc);\n    }\n\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * The Pressure and Temperature pairs.\n     */\n    pTpairs: PTpair[];\n\n    /**\n     * @param attributes The attributes.\n     * @param pTs The PTs.\n     */\n    constructor(attributes: Map<string, string>, pTpairs?: PTpair[]) {\n        super(attributes, PTs.tagName);\n        if (pTpairs != undefined) {\n            pTpairs.forEach((pTpair) => {\n                this.addNode(pTpair);\n            });\n            this.pTpairs = pTpairs;\n        } else {\n            this.pTpairs = [];\n        }\n    }\n\n    /**\n     * @param i The index of the PTpair to return. \n     * @returns The PTpair at the given index or undefined if the index is out of range.\n     */\n    getPTpair(i: number): PTpair {\n        return this.pTpairs[i];\n    }\n\n    /**\n     * Set the PT at the given index.\n     * @param i The index.\n     * @returns The PT pairs.\n     */\n    setPTpair(i: number, pTpair: PTpair): void {\n        this.nodes.set(i, pTpair);\n        this.pTpairs[i] = pTpair;\n    }\n\n    /**\n     * Add a PTpair.\n     * @param pTPair The PTpair to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */\n    addPTpair(pTpair: PTpair): number {\n        this.addNode(pTpair);\n        this.pTpairs.push(pTpair);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * Remove the PT at the given index.\n     * @param i The index.\n     */\n    removePTpair(i: number): void {\n        this.nodes.delete(i);\n        this.pTpairs.splice(i, 1);\n    }\n\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     */\n    setPTpairs(pTpairs: PTpair[]): void {\n        this.nodes.clear();\n        pTpairs.forEach((pTpair) => {\n            this.addNode(pTpair);\n            this.pTpairs.push(pTpair);\n        });\n    }\n\n    /**\n     * Remove all PT pairs.\n     */\n    removePTpairs(): void {\n        this.nodes.clear();\n        this.pTpairs = [];\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * The id.\n     */\n    id: number;\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The bath gases index. The keys are the molecule IDs and the values are the node indexes.\n     */\n    bathGasesIndex: Map<string, number>;\n\n    /**\n     * The bath gases.\n     */\n    bathGases: Map<BathGas, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGases The bath gases.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */\n    constructor(attributes: Map<string, string>, id: number, bathGases?: Set<BathGas>, pTs?: PTs) {\n        super(attributes, Conditions.tagName);\n        this.id = id;\n        this.index = new Map();\n        this.bathGasesIndex = new Map();\n        this.bathGases = new Map();\n        if (bathGases != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            bathGases.forEach((bathGas) => {\n                this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n                this.addNode(bathGas);\n                this.bathGases.set(bathGas, bathGases.size);\n            });\n        }\n        if (pTs != undefined) {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n\n    /**\n     * @returns The bath gases.\n     */\n    getBathGases(): Map<BathGas, number> {\n        return this.bathGases;\n    }\n\n    /**\n     * @param bathGas The bath gas to add.\n     */\n    addBathGas(bathGas: BathGas): number {\n        if (!this.bathGases.has(bathGas)) {\n            let index: number = this.bathGases.size;\n            this.bathGases.set(bathGas, index);\n            this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n            this.addNode(bathGas);\n            return index;\n        } else {\n            return this.bathGases.get(bathGas) as number;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas to remove.\n     */\n    removeBathGas(bathGas: BathGas) {\n        if (this.bathGases.has(bathGas)) {\n            this.bathGases.delete(bathGas);\n            this.nodes.delete(this.bathGasesIndex.get(bathGas.value) as number);\n        } else {\n            console.warn(\"Conditions.removeBathGas: bathGas not found to remove.\");\n        }\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs | undefined {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            return this.nodes.get(i) as PTs;\n        }\n    }\n\n    /**\n     * @param pTs The PTs.\n     */\n    setPTs(pTs: PTs) {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            this.nodes.set(i, pTs);\n        } else {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:grainSize\".\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, GrainSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:energyAboveTheTopHill\".\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:maxTemperature\".\n */\nexport class MaxTemperature extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:maxTemperature\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MaxTemperature.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param grainSize The grain size.\n     * @param automaticallySetMaxEne The automatically set max energy.\n     * @param energyAboveTheTopHill The energy above the top hill.\n     * @param maxTemperature The max temperature.\n     */\n    constructor(attributes: Map<string, string>, grainSize?: GrainSize, \n        automaticallySetMaxEne?: AutomaticallySetMaxEne, energyAboveTheTopHill?: EnergyAboveTheTopHill,\n        maxTemperature?: MaxTemperature) {\n        super(attributes, ModelParameters.tagName);\n        this.index = new Map<string, number>();\n        if (grainSize != undefined) {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n        if (automaticallySetMaxEne != undefined) {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n        if (energyAboveTheTopHill != undefined) {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n        if (maxTemperature != undefined) {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n\n    /**\n     * @returns The grain size or undefined.\n     */\n    getGrainSize(): GrainSize | undefined {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i) {\n            return this.nodes.get(i) as GrainSize;\n        }\n    }\n\n    /**\n     * @param grainSize The grain size.\n     */\n    setGrainSize(grainSize: GrainSize) {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i) {\n            this.nodes.set(i, grainSize);\n        } else {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n    }\n\n    /**\n     * Removes the grain size.\n     */\n    removeGrainSize() {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(GrainSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The automatically set max energy or undefined.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automatically set max energy.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * Removes the automatically set max energy.\n     */\n    removeAutomaticallySetMaxEne() {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(AutomaticallySetMaxEne.tagName);\n        }\n    }\n\n    /**\n     * @returns The energy above the top hill or undefined.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill | undefined {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            return this.nodes.get(i) as EnergyAboveTheTopHill;\n        }\n    }\n\n    /**\n     * @param energyAboveTheTopHill The energy above the top hill.\n     */\n    setEnergyAboveTheTopHill(energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            this.nodes.set(i, energyAboveTheTopHill);\n        } else {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n    }\n\n    /**\n     * Removes the energy above the top hill.\n     */\n    removeEnergyAboveTheTopHill() {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(EnergyAboveTheTopHill.tagName);\n        }\n    }\n\n    /**\n     * @returns The max temperature or undefined.\n     */\n    getMaxTemperature(): MaxTemperature | undefined {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            return this.nodes.get(i) as MaxTemperature;\n        }\n    }\n\n    /**\n     * @param maxTemperature The max temperature.\n     */\n    setMaxTemperature(maxTemperature: MaxTemperature) {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            this.nodes.set(i, maxTemperature);\n        } else {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n\n    /**\n     * Removes the max temperature.\n     */\n    removeMaxTemperature() {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MaxTemperature.tagName);\n        }\n    }\n}","import {\n    Tag, NodeWithNodes, NumberNode, TagWithAttributes, StringNode\n} from \"./xml\";\n\n/**\n * A class for \"me:calculateRateCoefficientsOnly\".\n */\nexport class CalculateRateCoefficientsOnly extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calculateRateCoefficientsOnly\";\n\n    constructor() {\n        super(CalculateRateCoefficientsOnly.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellDOS\".\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellTransitionStateFlux\".\n */\nexport class PrintCellTransitionStateFlux extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printCellTransitionStateFlux\";\n\n    constructor() {\n        super(PrintCellTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorColumnSums\".\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainBoltzmann\".\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainDOS\".\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkbE\".\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkfE\".\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTSsos\".\n */\nexport class PrintTSsos extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printTSsos\";\n\n    constructor() {\n        super(PrintTSsos.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainedSpeciesProfile\".\n */\nexport class PrintGrainedSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainedSpeciesProfile\";\n\n    constructor() {\n        super(PrintGrainedSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainTransitionStateFlux\".\n */\nexport class PrintGrainTransitionStateFlux extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainTransitionStateFlux\";\n\n    constructor() {\n        super(PrintGrainTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorSize\".\n */\nexport class PrintReactionOperatorSize extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorSize\";\n\n    constructor() {\n        super(PrintReactionOperatorSize.tagName);\n    }\n}\n\n/**\n * A class for \"me:printSpeciesProfile\".\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printPhenomenologicalEvolution\".\n */\nexport class PrintPhenomenologicalEvolution extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printPhenomenologicalEvolution\";\n\n    constructor() {\n        super(PrintPhenomenologicalEvolution.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTunnelingCoefficients\".\n */\nexport class PrintTunnelingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnelingCoefficients\";\n\n    constructor() {\n        super(PrintTunnelingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCrossingCoefficients\".\n */\nexport class PrintCrossingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCrossingCoefficients\";\n\n    constructor() {\n        super(PrintCrossingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:testDOS\".\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:testRateConstant\".\n */\nexport class TestRateConstant extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstant\";\n\n    constructor() {\n        super(TestRateConstant.tagName);\n    }\n}\n\n/**\n * A class for \"me:useTheSameCellNumberForAllConditions.\n */\nexport class UseTheSameCellNumberForAllConditions extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:useTheSameCellNumberForAllConditions\";\n\n    constructor() {\n        super(UseTheSameCellNumberForAllConditions.tagName);\n    }\n}\n\n/**\n * A class for \"me:ForceMacroDetailedBalance\".\n */\nexport class ForceMacroDetailedBalance extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ForceMacroDetailedBalance\";\n\n    constructor() {\n        super(ForceMacroDetailedBalance.tagName);\n    }\n}\n\n/**\n * A class for \"me:hideInactive\".\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for \"me:calcMethod\".\n * Expected to have an attribute \"xsi_type\" with one of the following values:\n * \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\",\n * \"me:simpleCalc\", \"me:gridSearch\", \"me:fitting\", \"me:marquardt\", \"me:analyticalRepresentation\", \"me:ThermodynamicTable\", \"me:sensitivityAnalysis\".\n */\nexport class CalcMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calcMethod\";\n\n    /**\n     * The possible values.\n     */\n    static readonly options: string[] = [\"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\",\n        \"ThermodynamicTable\", \"sensitivityAnalysis\", \"me:simpleCalc\", \"me:gridSearch\", \"me:fitting\", \"me:marquardt\",\n        \"me:analyticalRepresentation\", \"me:ThermodynamicTable\", \"me:sensitivityAnalysis\"];\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, CalcMethod.tagName);\n    }\n}\n\n/**\n * A class for \"me:SimpleCalc\" CalcMethod.\n */\nexport class CalcMethodSimpleCalc extends CalcMethod {\n\n    /**\n     * The xsi_type.\n     */\n    static readonly xsi_type: string = \"me:simpleCalc\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"simpleCalc\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n}\n\n/**\n * A class for \"me:GridSearch\" CalcMethod.\n */\nexport class CalcMethodGridSearch extends CalcMethod {\n\n    /**\n    * The xsi_type.\n    */\n    static readonly xsi_type: string = \"me:gridSearch\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"gridSearch\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n}\n\n/**\n * A class for \"me:fittingIterations\".\n */\nexport class FittingIterations extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:fittingIterations\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, FittingIterations.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Fitting\" CalcMethod.\n * Nodes:\n * \"me:fittingIterations\"\n */\nexport class CalcMethodFitting extends CalcMethod {\n\n    /**\n     * The xsi_type.\n     */\n    static readonly xsi_type: string = \"me:fitting\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"fitting\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, fittingIterations?: FittingIterations) {\n        super(attributes);\n        if (fittingIterations != undefined) {\n            this.addNode(fittingIterations);\n        }\n    }\n\n    /**\n     * @returns The fittingIterations or undefined.\n     */\n    getFittingIterations(): FittingIterations | undefined {\n        return this.nodes.get(0) as FittingIterations;\n    }\n\n    /**\n     * @param fittingIterations The fittingIterations.\n     */\n    setFittingIterations(fittingIterations: FittingIterations) {\n        this.nodes.set(0, fittingIterations);\n    }\n\n    /**\n     * Remove the fittingIterations.\n     */\n    removeFittingIterations() {\n        this.nodes.delete(0);\n    }\n}\n\n/**\n * A class for \"me:MarquardtIterations\".\n */\nexport class MarquardtIterations extends NumberNode {\n    \n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MarquardtIterations\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MarquardtIterations.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MarquardtTolerance\".\n */\nexport class MarquardtTolerance extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MarquardtTolerance\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MarquardtTolerance.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MarquardtDerivDelta\".\n */\nexport class MarquardtDerivDelta extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MarquardtDerivDelta\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MarquardtDerivDelta.tagName, value);\n    }\n}\n\nexport class CalcMethodMarquardt extends CalcMethod {\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type: string = \"me:marquardt\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type2: string = \"marquardt\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, marquardtIterations?: MarquardtIterations,\n        marquardtTolerance?: MarquardtTolerance, marquardtDerivDelta?: MarquardtDerivDelta) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (marquardtIterations != undefined) {\n            this.index.set(MarquardtIterations.tagName, this.nodes.size);\n            this.addNode(marquardtIterations);\n        }\n        if (marquardtTolerance != undefined) {\n            this.index.set(MarquardtTolerance.tagName, this.nodes.size);\n            this.addNode(marquardtTolerance);\n        }\n        if (marquardtDerivDelta != undefined) {\n            this.index.set(MarquardtDerivDelta.tagName, this.nodes.size);\n            this.addNode(marquardtDerivDelta);\n        }\n    }\n\n\n    /**\n     * @returns The marquardtIterations or undefined.\n     */\n    getMarquardtIterations(): MarquardtIterations | undefined {\n        let i = this.index.get(MarquardtIterations.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MarquardtIterations;\n        }\n    }\n\n    /**\n     * @param marquardtIterations The marquardtIterations.\n     */\n    setMarquardtIterations(marquardtIterations: MarquardtIterations) {\n        let i = this.index.get(MarquardtIterations.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, marquardtIterations);\n        } else {\n            this.index.set(MarquardtIterations.tagName, this.nodes.size);\n            this.addNode(marquardtIterations);\n        }\n    }\n\n    /**\n     * Remove the marquardtIterations.\n     */\n    removeMarquardtIterations() {\n        let i = this.index.get(MarquardtIterations.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MarquardtIterations.tagName);\n        }\n    }\n\n    /**\n     * @returns The marquardtTolerance or undefined.\n     */\n    getMarquardtTolerance(): MarquardtTolerance | undefined {\n        let i = this.index.get(MarquardtTolerance.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MarquardtTolerance;\n        }\n    }\n\n    /**\n     * @param marquardtTolerance The marquardtTolerance.\n     */\n    setMarquardtTolerance(marquardtTolerance: MarquardtTolerance) {\n        let i = this.index.get(MarquardtTolerance.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, marquardtTolerance);\n        } else {\n            this.index.set(MarquardtTolerance.tagName, this.nodes.size);\n            this.addNode(marquardtTolerance);\n        }\n    }\n\n    /**\n     * Remove the marquardtTolerance.\n     */\n    removeMarquardtTolerance() {\n        let i = this.index.get(MarquardtTolerance.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MarquardtTolerance.tagName);\n        }\n    }\n\n    /**\n     * @returns The marquardtDerivDelta or undefined.\n     */\n    getMarquardtDerivDelta(): MarquardtDerivDelta | undefined {\n        let i = this.index.get(MarquardtDerivDelta.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MarquardtDerivDelta;\n        }\n    }\n\n    /**\n     * @param marquardtDerivDelta The marquardtDerivDelta.\n     */\n    setMarquardtDerivDelta(marquardtDerivDelta: MarquardtDerivDelta) {\n        let i = this.index.get(MarquardtDerivDelta.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, marquardtDerivDelta);\n        } else {\n            this.index.set(MarquardtDerivDelta.tagName, this.nodes.size);\n            this.addNode(marquardtDerivDelta);\n        }\n    }\n\n    /**\n     * Remove the marquardtDerivDelta.\n     */\n    removeMarquardtDerivDelta() {\n        let i = this.index.get(MarquardtDerivDelta.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MarquardtDerivDelta.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:useTraceWeighting\".\n */\nexport class UseTraceWeighting extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:useTraceWeighting\";\n\n    constructor() {\n        super(UseTraceWeighting.tagName);\n    }\n}\n\n/**\n * A class for \"me:format\".\n * The attributes may have the following keys:\n * \"representation\" (with known value: \"Plog\")\n * \"rateUnits\" (with known values: \"cm3mole-1s-1\", \"cm3molecule-1s-1\")\n * Values include:\n * \"cantera\", \"chemkin\"\n */\nexport class Format extends StringNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:format\";\n\n    /**\n     * The options.\n     */\n    static readonly options: string[] = [\"cantera\", \"chemkin\"];\n\n    /**\n     * The rateUnits.\n     */\n    static readonly rateUnits: string = \"rateUnits\";\n\n    /**\n     * The rateUnits options.\n     */\n    static readonly rateUnitsOptions: string[] = [\"cm3mole-1s-1\", \"cm3molecule-1s-1\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Format.tagName, value);\n    }\n\n    /**\n     * @returns The value of the \"rateUnits\" attribute or undefined.\n     */\n    getRateUnits(): string | undefined {\n        return this.attributes.get(Format.rateUnits);\n    }\n\n    /**\n     * @param rateUnits The value of the \"rateUnits\" attribute.\n     */\n    setRateUnits(rateUnits: string) {\n        this.attributes.set(Format.rateUnits, rateUnits);\n    }\n\n    /**\n     * Remove the \"rateUnits\" attribute.\n     */\n    removeRateUnits() {\n        this.attributes.delete(Format.rateUnits);\n    }\n}\n\n/**\n * A class for \"me:precision\".\n * Known values include:\n * \"d\", \"dd\", \"qd\", \"double\", \"double-double\" or \"quad-double\"\n */\nexport class Precision extends StringNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:precision\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Precision.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebNumTemp\".\n */\nexport class ChebNumTemp extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebNumTemp\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebNumTemp.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebNumConc\".\n */\nexport class ChebNumConc extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebNumConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebNumConc.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebMaxTemp\".\n */\nexport class ChebMaxTemp extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMaxTemp\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebMaxTemp.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebMinTemp\".\n */\nexport class ChebMinTemp extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMinTemp\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebMinTemp.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebMaxConc\".\n * Known attributes include:\n * \"units\" (known values include \"atm\").\n */\nexport class ChebMaxConc extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMaxConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebMaxConc.tagName, value);\n    }\n\n    /**\n     * @returns The units.\n     */\n    getUnits(): string | undefined {\n        return this.attributes.get(\"units\");\n    }\n\n    /**\n     * @param units The units.\n     */\n    setUnits(units: string) {\n        this.attributes.set(\"units\", units);\n    }\n}\n\n/**\n * A class for \"me:chebMinConc\".\n */\nexport class ChebMinConc extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMinConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebMinConc.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebTExSize\".\n */\nexport class ChebTExSize extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebTExSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebTExSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebPExSize\".\n */\nexport class ChebPExSize extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebPExSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ChebPExSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:analyticalRepresentation\" CalcMethod.\n * Expected to have attributes:\n * \"xsi_type\" with the value \"me:analyticalRepresentation\".\n * Nodes:\n * \"me:format\"\n * If the \"me:format\" attribute \"representation\" is \"Plog\" then the following nodes are expected:\n * \"me:plogNumTemp\"\n * \"me:plogMaxTemp\"\n * \"me:plogMinTemp\"\n * \"me:plogConcs\" which may have multiple \"me:plogConc\" values.\n * If the \"me:format\" attribute \"representation\" is not specified, then the following nodes are expected:\n * \"me:precision\"\n * \"me:chebNumTemp\"\n * \"me:chebNumConc\"\n * \"me:chebMaxTemp\"\n * \"me:chebMinTemp\"\n * \"me:chebMaxConc\"\n * \"me:chebMinConc\"\n * \"me:chebTExSize\"\n * \"me:chebPExSize\"\n */\nexport class CalcMethodAnalyticalRepresentation extends CalcMethod {\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type: string = \"me:analyticalRepresentation\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type2: string = \"analyticalRepresentation\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, format?: Format, precision?: Precision, chebNumTemp?: ChebNumTemp,\n        chebNumConc?: ChebNumConc, chebMaxTemp?: ChebMaxTemp, chebMinTemp?: ChebMinTemp, chebMaxConc?: ChebMaxConc,\n        chebMinConc?: ChebMinConc, chebTExSize?: ChebTExSize, chebPExSize?: ChebPExSize) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (format != undefined) {\n            this.index.set(Format.tagName, this.nodes.size);\n            this.addNode(format);\n        }\n        if (precision != undefined) {\n            this.index.set(Precision.tagName, this.nodes.size);\n            this.addNode(precision);\n        }\n        if (chebNumTemp != undefined) {\n            this.index.set(ChebNumTemp.tagName, this.nodes.size);\n            this.addNode(chebNumTemp);\n        }\n        if (chebNumConc != undefined) {\n            this.index.set(ChebNumConc.tagName, this.nodes.size);\n            this.addNode(chebNumConc);\n        }\n        if (chebMaxTemp != undefined) {\n            this.index.set(ChebMaxTemp.tagName, this.nodes.size);\n            this.addNode(chebMaxTemp);\n        }\n        if (chebMinTemp != undefined) {\n            this.index.set(ChebMinTemp.tagName, this.nodes.size);\n            this.addNode(chebMinTemp);\n        }\n        if (chebMaxConc != undefined) {\n            this.index.set(ChebMaxConc.tagName, this.nodes.size);\n            this.addNode(chebMaxConc);\n        }\n        if (chebMinConc != undefined) {\n            this.index.set(ChebMinConc.tagName, this.nodes.size);\n            this.addNode(chebMinConc);\n        }\n        if (chebTExSize != undefined) {\n            this.index.set(ChebTExSize.tagName, this.nodes.size);\n            this.addNode(chebTExSize);\n        }\n        if (chebPExSize != undefined) {\n            this.index.set(ChebPExSize.tagName, this.nodes.size);\n            this.addNode(chebPExSize);\n        }\n    }\n\n    /**\n     * @returns The format or undefined.\n     */\n    getFormat(): Format | undefined {\n        let i = this.index.get(Format.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Format;\n        }\n    }\n\n    /**\n     * @param format The format.\n     */\n    setFormat(format: Format) {\n        let i = this.index.get(Format.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, format);\n        } else {\n            this.index.set(Format.tagName, this.nodes.size);\n            this.addNode(format);\n        }\n    }\n\n    /**\n     * Remove the format.\n     */\n    removeFormat() {\n        let i = this.index.get(Format.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Format.tagName);\n        }\n    }\n\n    /**\n     * @returns The precision or undefined.\n     */\n    getPrecision(): Precision | undefined {\n        let i = this.index.get(Precision.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Precision;\n        }\n    }\n\n    /**\n     * @param precision The precision.\n     */\n    setPrecision(precision: Precision) {\n        let i = this.index.get(Precision.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, precision);\n        } else {\n            this.index.set(Precision.tagName, this.nodes.size);\n            this.addNode(precision);\n        }\n    }\n\n    /**\n     * Remove the precision.\n     */\n    removePrecision() {\n        let i = this.index.get(Precision.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Precision.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebNumTemp or undefined.\n     */\n    getChebNumTemp(): ChebNumTemp | undefined {\n        let i = this.index.get(ChebNumTemp.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebNumTemp;\n        }\n    }\n\n    /**\n     * @param chebNumTemp The chebNumTemp.\n     */\n    setChebNumTemp(chebNumTemp: ChebNumTemp) {\n        let i = this.index.get(ChebNumTemp.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebNumTemp);\n        } else {\n            this.index.set(ChebNumTemp.tagName, this.nodes.size);\n            this.addNode(chebNumTemp);\n        }\n    }\n\n    /**\n     * Remove the chebNumTemp.\n     */\n    removeChebNumTemp() {\n        let i = this.index.get(ChebNumTemp.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebNumTemp.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebNumConc or undefined.\n     */\n    getChebNumConc(): ChebNumConc | undefined {\n        let i = this.index.get(ChebNumConc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebNumConc;\n        }\n    }\n\n    /**\n     * @param chebNumConc The chebNumConc.\n     */\n    setChebNumConc(chebNumConc: ChebNumConc) {\n        let i = this.index.get(ChebNumConc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebNumConc);\n        } else {\n            this.index.set(ChebNumConc.tagName, this.nodes.size);\n            this.addNode(chebNumConc);\n        }\n    }\n\n    /**\n     * Remove the chebNumConc.\n     */\n    removeChebNumConc() {\n        let i = this.index.get(ChebNumConc.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebNumConc.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMaxTemp or undefined.\n     */\n    getChebMaxTemp(): ChebMaxTemp | undefined {\n        let i = this.index.get(ChebMaxTemp.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMaxTemp;\n        }\n    }\n\n    /**\n     * @param chebMaxTemp The chebMaxTemp.\n     */\n    setChebMaxTemp(chebMaxTemp: ChebMaxTemp) {\n        let i = this.index.get(ChebMaxTemp.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMaxTemp);\n        } else {\n            this.index.set(ChebMaxTemp.tagName, this.nodes.size);\n            this.addNode(chebMaxTemp);\n        }\n    }\n\n    /**\n     * Remove the chebMaxTemp.\n     */\n    removeChebMaxTemp() {\n        let i = this.index.get(ChebMaxTemp.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMaxTemp.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMinTemp or undefined.\n     */\n    getChebMinTemp(): ChebMinTemp | undefined {\n        let i = this.index.get(ChebMinTemp.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMinTemp;\n        }\n    }\n\n    /**\n     * @param chebMinTemp The chebMinTemp.\n     */\n    setChebMinTemp(chebMinTemp: ChebMinTemp) {\n        let i = this.index.get(ChebMinTemp.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMinTemp);\n        } else {\n            this.index.set(ChebMinTemp.tagName, this.nodes.size);\n            this.addNode(chebMinTemp);\n        }\n    }\n\n    /**\n     * Remove the chebMinTemp.\n     */\n    removeChebMinTemp() {\n        let i = this.index.get(ChebMinTemp.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMinTemp.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMaxConc or undefined.\n     */\n    getChebMaxConc(): ChebMaxConc | undefined {\n        let i = this.index.get(ChebMaxConc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMaxConc;\n        }\n    }\n\n    /**\n     * @param chebMaxConc The chebMaxConc.\n     */\n    setChebMaxConc(chebMaxConc: ChebMaxConc) {\n        let i = this.index.get(ChebMaxConc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMaxConc);\n        } else {\n            this.index.set(ChebMaxConc.tagName, this.nodes.size);\n            this.addNode(chebMaxConc);\n        }\n    }\n\n    /**\n     * Remove the chebMaxConc.\n     */\n    removeChebMaxConc() {\n        let i = this.index.get(ChebMaxConc.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMaxConc.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMinConc or undefined.\n     */\n    getChebMinConc(): ChebMinConc | undefined {\n        let i = this.index.get(ChebMinConc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMinConc;\n        }\n    }\n\n    /**\n     * @param chebMinConc The chebMinConc.\n     */\n    setChebMinConc(chebMinConc: ChebMinConc) {\n        let i = this.index.get(ChebMinConc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMinConc);\n        } else {\n            this.index.set(ChebMinConc.tagName, this.nodes.size);\n            this.addNode(chebMinConc);\n        }\n    }\n\n    /**\n     * Remove the chebMinConc.\n     */\n    removeChebMinConc() {\n        let i = this.index.get(ChebMinConc.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMinConc.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebTExSize or undefined.\n     */\n    getChebTExSize(): ChebTExSize | undefined {\n        let i = this.index.get(ChebTExSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebTExSize;\n        }\n    }\n\n    /**\n     * @param chebTExSize The chebTExSize.\n     */\n    setChebTExSize(chebTExSize: ChebTExSize) {\n        let i = this.index.get(ChebTExSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebTExSize);\n        } else {\n            this.index.set(ChebTExSize.tagName, this.nodes.size);\n            this.addNode(chebTExSize);\n        }\n    }\n\n    /**\n     * Remove the chebTExSize.\n     */\n    removeChebTExSize() {\n        let i = this.index.get(ChebTExSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebTExSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebPExSize or undefined.\n     */\n    getChebPExSize(): ChebPExSize | undefined {\n        let i = this.index.get(ChebPExSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebPExSize;\n        }\n    }\n\n    /**\n     * @param chebPExSize The chebPExSize.\n     */\n    setChebPExSize(chebPExSize: ChebPExSize) {\n        let i = this.index.get(ChebPExSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebPExSize);\n        } else {\n            this.index.set(ChebPExSize.tagName, this.nodes.size);\n            this.addNode(chebPExSize);\n        }\n    }\n\n    /**\n     * Remove the chebPExSize.\n     */\n    removeChebPExSize() {\n        let i = this.index.get(ChebPExSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebPExSize.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:Tmin\" CalcMethod.\n */\nexport class Tmin extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tmin\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Tmin.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Tmid\" CalcMethod.\n */\nexport class Tmid extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tmid\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Tmid.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Tmax\" CalcMethod.\n */\nexport class Tmax extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tmax\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Tmax.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Tstep\" CalcMethod.\n */\nexport class Tstep extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tstep\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Tmin.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:ThermodynamicTable\" CalcMethod.\n * Expected to have attributes:\n * \"xsi_type\" with the value \"me:ThermodynamicTable\";\n * \"units\" with known values \"kJ/mol\".\n * Nodes:\n * \"me:Tmin\", \"me:Tmid\", \"me:Tmax\", \"me:Tstep\".\n */\nexport class CalcMethodThermodynamicTable extends CalcMethod {\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type: string = \"me:ThermodynamicTable\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type2: string = \"ThermodynamicTable\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tmin?: Tmin, tmid?: Tmid, tmax?: Tmax, tstep?: Tstep) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (tmin != undefined) {\n            this.index.set(Tmin.tagName, this.nodes.size);\n            this.addNode(tmin);\n        }\n        if (tmid != undefined) {\n            this.index.set(Tmid.tagName, this.nodes.size);\n            this.addNode(tmid);\n        }\n        if (tmax != undefined) {\n            this.index.set(Tmax.tagName, this.nodes.size);\n            this.addNode(tmax);\n        }\n        if (tstep != undefined) {\n            this.index.set(Tstep.tagName, this.nodes.size);\n            this.addNode(tstep);\n        }\n    }\n\n    /**\n     * @returns The tmin or undefined.\n     */\n    getTmin(): Tmin | undefined {\n        let i = this.index.get(Tmin.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tmin;\n        }\n    }\n\n    /**\n     * @param tmin The tmin.\n     */\n    setTmin(tmin: Tmin) {\n        let i = this.index.get(Tmin.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tmin);\n        } else {\n            this.index.set(Tmin.tagName, this.nodes.size);\n            this.addNode(tmin);\n        }\n    }\n\n    /**\n     * Remove the tmin.\n     */\n    removeTmin() {\n        let i = this.index.get(Tmin.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tmin.tagName);\n        }\n    }\n\n    /**\n     * @returns The tmid or undefined.\n     */\n    getTmid(): Tmid | undefined {\n        let i = this.index.get(Tmid.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tmid;\n        }\n    }\n\n    /**\n     * @param tmid The tmid.\n     */\n    setTmid(tmid: Tmid) {\n        let i = this.index.get(Tmid.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tmid);\n        } else {\n            this.index.set(Tmid.tagName, this.nodes.size);\n            this.addNode(tmid);\n        }\n    }\n\n    /**\n     * Remove the tmid.\n     */\n    removeTmid() {\n        let i = this.index.get(Tmid.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tmid.tagName);\n        }\n    }\n\n    /**\n     * @returns The tmax or undefined.\n     */\n    getTmax(): Tmax | undefined {\n        let i = this.index.get(Tmax.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tmax;\n        }\n    }\n\n    /**\n     * @param tmax The tmax.\n     */\n    setTmax(tmax: Tmax) {\n        let i = this.index.get(Tmax.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tmax);\n        } else {\n            this.index.set(Tmax.tagName, this.nodes.size);\n            this.addNode(tmax);\n        }\n    }\n\n    /**\n     * Remove the tmax.\n     */\n    removeTmax() {\n        let i = this.index.get(Tmax.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tmax.tagName);\n        }\n    }\n\n    /**\n     * @returns The tstep or undefined.\n     */\n    getTstep(): Tstep | undefined {\n        let i = this.index.get(Tstep.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tstep;\n        }\n    }\n\n    /**\n     * @param tstep The tstep.\n     */\n    setTstep(tstep: Tstep) {\n        let i = this.index.get(Tstep.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tstep);\n        } else {\n            this.index.set(Tstep.tagName, this.nodes.size);\n            this.addNode(tstep);\n        }\n    }\n\n    /**\n     * Remove the tstep.\n     */\n    removeTstep() {\n        let i = this.index.get(Tstep.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tstep.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:sensitivityAnalysisSamples\".\n */\nexport class SensitivityAnalysisSamples extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityAnalysisSamples\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, SensitivityAnalysisSamples.tagName, value);\n    }\n\n}\n\n/**\n * A class for \"me:sensitivityAnalysisOrder\".\n */\nexport class SensitivityAnalysisOrder extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityAnalysisOrder\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, SensitivityAnalysisOrder.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:sensitivityNumVarRedIters\".\n */\nexport class SensitivityNumVarRedIters extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityNumVarRedIters\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, SensitivityNumVarRedIters.tagName, value);\n    }\n}\n\n/**\n * A class for \"sensitivityVarRedMethod\".\n */\nexport class SensitivityVarRedMethod extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityVarRedMethod\";\n\n    /**\n     * The options.\n     */\n    static readonly options: string[] = [\"AdditiveControl\", \"RatioControl\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, SensitivityVarRedMethod.tagName, value);\n    }\n\n}\n\n/**\n * A class for \"me:sensitivityAnalysis\".\n * Nodes:\n * \"me:sensitivityAnalysisSamples\", \"me:sensitivityAnalysisOrder\", \"me:sensitivityNumVarRedIters\", \"me:sensitivityVarRedMethod\".\n */\nexport class CalcMethodSensitivityAnalysis extends CalcMethod {\n\n    /**\n    * The xsi_type.\n    */\n    static readonly xsi_type: string = \"me:sensitivityAnalysis\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"sensitivityAnalysis\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, sensitivityAnalysisSamples?: SensitivityAnalysisSamples,\n        sensitivityAnalysisOrder?: SensitivityAnalysisOrder, sensitivityNumVarRedIters?: SensitivityNumVarRedIters,\n        sensitivityVarRedMethod?: SensitivityVarRedMethod) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (sensitivityAnalysisSamples != undefined) {\n            this.index.set(SensitivityAnalysisSamples.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisSamples);\n        }\n        if (sensitivityAnalysisOrder != undefined) {\n            this.index.set(SensitivityAnalysisOrder.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisOrder);\n        }\n        if (sensitivityNumVarRedIters != undefined) {\n            this.index.set(SensitivityNumVarRedIters.tagName, this.nodes.size);\n            this.addNode(sensitivityNumVarRedIters);\n        }\n        if (sensitivityVarRedMethod != undefined) {\n            this.index.set(SensitivityVarRedMethod.tagName, this.nodes.size);\n            this.addNode(sensitivityVarRedMethod);\n        }\n    }\n\n    /**\n     * @returns The sensitivityAnalysisSamples or undefined.\n     */\n    getSensitivityAnalysisSamples(): SensitivityAnalysisSamples | undefined {\n        let i = this.index.get(SensitivityAnalysisSamples.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityAnalysisSamples;\n        }\n    }\n\n    /**\n     * @param sensitivityAnalysisSamples The sensitivityAnalysisSamples.\n     */\n    setSensitivityAnalysisSamples(sensitivityAnalysisSamples: SensitivityAnalysisSamples) {\n        let i = this.index.get(SensitivityAnalysisSamples.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityAnalysisSamples);\n        } else {\n            this.index.set(SensitivityAnalysisSamples.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisSamples);\n        }\n    }\n\n    /**\n     * Remove the sensitivityAnalysisSamples.\n     */\n    removeSensitivityAnalysisSamples() {\n        let i = this.index.get(SensitivityAnalysisSamples.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityAnalysisSamples.tagName);\n        }\n    }\n\n    /**\n     * @returns The sensitivityAnalysisOrder or undefined.\n     */\n    getSensitivityAnalysisOrder(): SensitivityAnalysisOrder | undefined {\n        let i = this.index.get(SensitivityAnalysisOrder.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityAnalysisOrder;\n        }\n    }\n\n    /**\n     * @param sensitivityAnalysisOrder The sensitivityAnalysisOrder.\n     */\n    setSensitivityAnalysisOrder(sensitivityAnalysisOrder: SensitivityAnalysisOrder) {\n        let i = this.index.get(SensitivityAnalysisOrder.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityAnalysisOrder);\n        } else {\n            this.index.set(SensitivityAnalysisOrder.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisOrder);\n        }\n    }\n\n    /**\n     * Remove the sensitivityAnalysisOrder.\n     */\n    removeSensitivityAnalysisOrder() {\n        let i = this.index.get(SensitivityAnalysisOrder.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityAnalysisOrder.tagName);\n        }\n    }\n\n    /**\n     * @returns The sensitivityNumVarRedIters or undefined.\n     */\n    getSensitivityNumVarRedIters(): SensitivityNumVarRedIters | undefined {\n        let i = this.index.get(SensitivityNumVarRedIters.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityNumVarRedIters;\n        }\n    }\n\n    /**\n     * @param sensitivityNumVarRedIters The sensitivityNumVarRedIters.\n     */\n    setSensitivityNumVarRedIters(sensitivityNumVarRedIters: SensitivityNumVarRedIters) {\n        let i = this.index.get(SensitivityNumVarRedIters.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityNumVarRedIters);\n        } else {\n            this.index.set(SensitivityNumVarRedIters.tagName, this.nodes.size);\n            this.addNode(sensitivityNumVarRedIters);\n        }\n    }\n\n    /**\n     * Remove the sensitivityNumVarRedIters.\n     */\n    removeSensitivityNumVarRedIters() {\n        let i = this.index.get(SensitivityNumVarRedIters.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityNumVarRedIters.tagName);\n        }\n    }\n\n    /**\n     * @returns The sensitivityVarRedMethod or undefined.\n     */\n    getSensitivityVarRedMethod(): SensitivityVarRedMethod | undefined {\n        let i = this.index.get(SensitivityVarRedMethod.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityVarRedMethod;\n        }\n    }\n\n    /**\n     * @param sensitivityVarRedMethod The sensitivityVarRedMethod.\n     */\n    setSensitivityVarRedMethod(sensitivityVarRedMethod: SensitivityVarRedMethod) {\n        let i = this.index.get(SensitivityVarRedMethod.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityVarRedMethod);\n        } else {\n            this.index.set(SensitivityVarRedMethod.tagName, this.nodes.size);\n            this.addNode(sensitivityVarRedMethod);\n        }\n    }\n\n    /**\n     * Remove the sensitivityVarRedMethod.\n     */\n    removeSensitivityVarRedMethod() {\n        let i = this.index.get(SensitivityVarRedMethod.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityVarRedMethod.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:eigenvalues\".\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:shortestTimeOfInterest\".\n */\nexport class ShortestTimeOfInterest extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:shortestTimeOfInterest\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ShortestTimeOfInterest.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MaximumEvolutionTime\".\n */\nexport class MaximumEvolutionTime extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MaximumEvolutionTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MaximumEvolutionTime.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:diagramEnergyOffset\".\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    /**\n      * @param attributes The attributes.\n      * @param value The value.\n      */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:testMicroRates\".\n * Expected numerical attributes: Tmin, Tmax, Tstep.\n */\nexport class TestMicroRates extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    /**\n     * The minimum temperature.\n     */\n    tMin: number;\n\n    /**\n     * The maximum temperature.\n     */\n    tMax: number;\n\n    /**\n     * The temperature step.\n     */\n    tStep: number;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, TestMicroRates.tagName);\n        this.tMin = parseFloat(attributes.get(\"Tmin\") as string);\n        this.tMax = parseFloat(attributes.get(\"Tmax\") as string);\n        this.tStep = parseFloat(attributes.get(\"Tstep\") as string);\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmin(): number {\n        return this.tMin;\n    }\n\n    /**\n     * @param tMin The minimum temperature.\n     */\n    setTmin(tMin: number) {\n        this.tMin = tMin;\n        this.attributes?.set(\"Tmin\", tMin.toString());\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmax(): number {\n        return this.tMax;\n    }\n\n    /**\n     * @param tMax The maximum temperature.\n     */\n    setTmax(tMax: number) {\n        this.tMax = tMax;\n        this.attributes?.set(\"Tmax\", tMax.toString());\n    }\n\n    /**\n     * @returns The temperature step.\n     */\n    getTstep(): number {\n        return this.tStep;\n    }\n\n    /**\n     * @param tStep The temperature step.\n     */\n    setTstep(tStep: number) {\n        this.tStep = tStep;\n        this.attributes?.set(\"Tstep\", tStep.toString());\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The id.\n     */\n    id: number;\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, id: number) {\n        super(attributes, Control.tagName);\n        this.id = id;\n        this.index = new Map<string, number>();\n    }\n\n    /**\n     * @returns The calculateRateCoefficientsOnly or undefined.\n     */\n    getCalculateRateCoefficientsOnly(): CalculateRateCoefficientsOnly | undefined {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalculateRateCoefficientsOnly;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calculateRateCoefficientsOnly The calculateRateCoefficientsOnly.\n     */\n    setCalculateRateCoefficientsOnly(calculateRateCoefficientsOnly: CalculateRateCoefficientsOnly) {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calculateRateCoefficientsOnly);\n        } else {\n            this.index.set(CalculateRateCoefficientsOnly.tagName, this.nodes.size);\n            this.addNode(calculateRateCoefficientsOnly);\n        }\n    }\n\n    /**\n     * Remove the calculateRateCoefficientsOnly.\n     */\n    removeCalculateRateCoefficientsOnly() {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalculateRateCoefficientsOnly.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellDOS or undefined.\n     */\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellDOS The printCellDOS.\n     */\n    setPrintCellDOS(printCellDOS: PrintCellDOS) {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellDOS);\n        } else {\n            this.index.set(PrintCellDOS.tagName, this.nodes.size);\n            this.addNode(printCellDOS);\n        }\n    }\n\n    /**\n     * Remove the printCellDOS.\n     */\n    removePrintCellDOS() {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellTransitionStateFlux or undefined.\n     */\n    getPrintCellTransitionStateFlux(): PrintCellTransitionStateFlux | undefined {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellTransitionStateFlux The printCellTransitionStateFlux.\n     */\n    setPrintCellTransitionStateFlux(printCellTransitionStateFlux: PrintCellTransitionStateFlux) {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellTransitionStateFlux);\n        } else {\n            this.index.set(PrintCellTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printCellTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printCellTransitionStateFlux.\n     */\n    removePrintCellTransitionStateFlux() {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorColumnSums or undefined.\n     */\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     */\n    setPrintReactionOperatorColumnSums(printReactionOperatorColumnSums: PrintReactionOperatorColumnSums) {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorColumnSums);\n        } else {\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorColumnSums);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorColumnSums.\n     */\n    removePrintReactionOperatorColumnSums() {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorColumnSums.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainBoltzmann or undefined.\n     */\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     */\n    setPrintGrainBoltzmann(printGrainBoltzmann: PrintGrainBoltzmann) {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainBoltzmann);\n        } else {\n            this.index.set(PrintGrainBoltzmann.tagName, this.nodes.size);\n            this.addNode(printGrainBoltzmann);\n        }\n    }\n\n    /**\n     * Remove the printGrainBoltzmann.\n     */\n    removePrintGrainBoltzmann() {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainBoltzmann.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainDOS or undefined.\n     */\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainDOS The printGrainDOS.\n     */\n    setPrintGrainDOS(printGrainDOS: PrintGrainDOS) {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainDOS);\n        } else {\n            this.index.set(PrintGrainDOS.tagName, this.nodes.size);\n            this.addNode(printGrainDOS);\n        }\n    }\n\n    /**\n     * Remove the printGrainDOS.\n     */\n    removePrintGrainDOS() {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkbE or undefined.\n     */\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkbE The printGrainkbE.\n     */\n    setPrintGrainkbE(printGrainkbE: PrintGrainkbE) {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkbE);\n        } else {\n            this.index.set(PrintGrainkbE.tagName, this.nodes.size);\n            this.addNode(printGrainkbE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkbE.\n     */\n    removePrintGrainkbE() {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkbE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkfE or undefined.\n     */\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkfE The printGrainkfE.\n     */\n    setPrintGrainkfE(printGrainkfE: PrintGrainkfE) {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkfE);\n        } else {\n            this.index.set(PrintGrainkfE.tagName, this.nodes.size);\n            this.addNode(printGrainkfE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkfE.\n     */\n    removePrintGrainkfE() {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkfE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTSsos or undefined.\n     */\n    getPrintTSsos(): PrintTSsos | undefined {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTSsos;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTSsos The printTSsos.\n     */\n    setPrintTSsos(printTSsos: PrintTSsos) {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTSsos);\n        } else {\n            this.index.set(PrintTSsos.tagName, this.nodes.size);\n            this.addNode(printTSsos);\n        }\n    }\n\n    /**\n     * Remove the printTSsos.\n     */\n    removePrintTSsos() {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTSsos.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainedSpeciesProfile or undefined.\n     */\n    getPrintGrainedSpeciesProfile(): PrintGrainedSpeciesProfile | undefined {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainedSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainedSpeciesProfile The printGrainedSpeciesProfile.\n     */\n    setPrintGrainedSpeciesProfile(printGrainedSpeciesProfile: PrintGrainedSpeciesProfile) {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainedSpeciesProfile);\n        } else {\n            this.index.set(PrintGrainedSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printGrainedSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printGrainedSpeciesProfile.\n     */\n    removePrintGrainedSpeciesProfile() {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainedSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainTransitionStateFlux or undefined.\n     */\n    getPrintGrainTransitionStateFlux(): PrintGrainTransitionStateFlux | undefined {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainTransitionStateFlux The printGrainTransitionStateFlux.\n     */\n    setPrintGrainTransitionStateFlux(printGrainTransitionStateFlux: PrintGrainTransitionStateFlux) {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainTransitionStateFlux);\n        } else {\n            this.index.set(PrintGrainTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printGrainTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printGrainTransitionStateFlux.\n     */\n    removePrintGrainTransitionStateFlux() {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorSize or undefined.\n     */\n    getPrintReactionOperatorSize(): PrintReactionOperatorSize | undefined {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorSize;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorSize The printReactionOperatorSize.\n     */\n    setPrintReactionOperatorSize(printReactionOperatorSize: PrintReactionOperatorSize) {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorSize);\n        } else {\n            this.index.set(PrintReactionOperatorSize.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorSize);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorSize.\n     */\n    removePrintReactionOperatorSize() {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The printSpeciesProfile or undefined.\n     */\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printSpeciesProfile The printSpeciesProfile.\n     */\n    setPrintSpeciesProfile(printSpeciesProfile: PrintSpeciesProfile) {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printSpeciesProfile);\n        } else {\n            this.index.set(PrintSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printSpeciesProfile.\n     */\n    removePrintSpeciesProfile() {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printPhenomenologicalEvolution or undefined.\n     */\n    getPrintPhenomenologicalEvolution(): PrintPhenomenologicalEvolution | undefined {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintPhenomenologicalEvolution;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printPhenomenologicalEvolution The printPhenomenologicalEvolution.\n     */\n    setPrintPhenomenologicalEvolution(printPhenomenologicalEvolution: PrintPhenomenologicalEvolution) {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printPhenomenologicalEvolution);\n        } else {\n            this.index.set(PrintPhenomenologicalEvolution.tagName, this.nodes.size);\n            this.addNode(printPhenomenologicalEvolution);\n        }\n    }\n\n    /**\n     * Remove the printPhenomenologicalEvolution.\n     */\n    removePrintPhenomenologicalEvolution() {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintPhenomenologicalEvolution.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTunnelingCoefficients or undefined.\n     */\n    getPrintTunnelingCoefficients(): PrintTunnelingCoefficients | undefined {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTunnelingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTunnelingCoefficients The printTunnelingCoefficients.\n     */\n    setPrintTunnelingCoefficients(printTunnelingCoefficients: PrintTunnelingCoefficients) {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTunnelingCoefficients);\n        } else {\n            this.index.set(PrintTunnelingCoefficients.tagName, this.nodes.size);\n            this.addNode(printTunnelingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printTunnelingCoefficients.\n     */\n    removePrintTunnelingCoefficients() {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTunnelingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCrossingCoefficients or undefined.\n     */\n    getPrintCrossingCoefficients(): PrintCrossingCoefficients | undefined {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCrossingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCrossingCoefficients The printCrossingCoefficients.\n     */\n    setPrintCrossingCoefficients(printCrossingCoefficients: PrintCrossingCoefficients) {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCrossingCoefficients);\n        } else {\n            this.index.set(PrintCrossingCoefficients.tagName, this.nodes.size);\n            this.addNode(printCrossingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printCrossingCoefficients.\n     */\n    removePrintCrossingCoefficients() {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCrossingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The testDOS or undefined.\n     */\n    getTestDOS(): TestDOS | undefined {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testDOS The testDOS.\n     */\n    setTestDOS(testDOS: TestDOS) {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testDOS);\n        } else {\n            this.index.set(TestDOS.tagName, this.nodes.size);\n            this.addNode(testDOS);\n        }\n    }\n\n    /**\n     * Remove the testDOS.\n     */\n    removeTestDOS() {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The testRateConstant or undefined.\n     */\n    getTestRateConstants(): TestRateConstant | undefined {\n        let i = this.index.get(TestRateConstant.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestRateConstant;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testRateConstant The testRateConstant.\n     */\n    setTestRateConstants(testRateConstant: TestRateConstant) {\n        let i = this.index.get(TestRateConstant.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testRateConstant);\n        } else {\n            this.index.set(TestRateConstant.tagName, this.nodes.size);\n            this.addNode(testRateConstant);\n        }\n    }\n\n    /**\n     * Remove the testRateConstant.\n     */\n    removeTestRateConstants() {\n        let i = this.index.get(TestRateConstant.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestRateConstant.tagName);\n        }\n    }\n\n    /**\n     * @returns The useTheSameCellNumberForAllConditions or undefined.\n     */\n    getUseTheSameCellNumberForAllConditions(): UseTheSameCellNumberForAllConditions | undefined {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as UseTheSameCellNumberForAllConditions;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param useTheSameCellNumberForAllConditions The useTheSameCellNumberForAllConditions.\n     */\n    setUseTheSameCellNumberForAllConditions(useTheSameCellNumberForAllConditions: UseTheSameCellNumberForAllConditions) {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, useTheSameCellNumberForAllConditions);\n        } else {\n            this.index.set(UseTheSameCellNumberForAllConditions.tagName, this.nodes.size);\n            this.addNode(useTheSameCellNumberForAllConditions);\n        }\n    }\n\n    /**\n     * Remove the useTheSameCellNumberForAllConditions.\n     */\n    removeUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(UseTheSameCellNumberForAllConditions.tagName);\n        }\n    }\n\n    /**\n     * @returns The hideInactive or undefined.\n     */\n    getHideInactive(): HideInactive | undefined {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HideInactive;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param hideInactive The hideInactive.\n     */\n    setHideInactive(hideInactive: HideInactive) {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hideInactive);\n        } else {\n            this.index.set(HideInactive.tagName, this.nodes.size);\n            this.addNode(hideInactive);\n        }\n    }\n\n    /**\n     * Remove the hideInactive.\n     */\n    removeHideInactive() {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(HideInactive.tagName);\n        }\n    }\n\n    /**\n     * @returns The ForceMacroDetailedBalance or undefined.\n     */\n    getForceMacroDetailedBalance(): ForceMacroDetailedBalance | undefined {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ForceMacroDetailedBalance;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param forceMacroDetailedBalance The forceMacroDetailedBalance.\n     */\n    setForceMacroDetailedBalance(forceMacroDetailedBalance: ForceMacroDetailedBalance) {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, forceMacroDetailedBalance);\n        } else {\n            this.index.set(ForceMacroDetailedBalance.tagName, this.nodes.size);\n            this.addNode(forceMacroDetailedBalance);\n        }\n    }\n\n    /**\n     * Remove the forceMacroDetailedBalance.\n     */\n    removeForceMacroDetailedBalance() {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ForceMacroDetailedBalance.tagName);\n        }\n    }\n\n    /**\n     * @returns The calcMethod or undefined.\n     */\n    getCalcMethod(): CalcMethod | undefined {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalcMethod;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calcMethod The calcMethod.\n     */\n    setCalcMethod(calcMethod: CalcMethod) {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calcMethod);\n        } else {\n            this.index.set(CalcMethod.tagName, this.nodes.size);\n            this.addNode(calcMethod);\n        }\n    }\n\n    /**\n     * Remove the calcMethod.\n     */\n    removeCalcMethod() {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalcMethod.tagName);\n        }\n    }\n\n    /**\n     * @returns The eigenvalues or undefined.\n     */\n    getEigenvalues(): Eigenvalues | undefined {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param eigenvalues The eigenvalues.\n     */\n    setEigenvalues(eigenvalues: Eigenvalues) {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, eigenvalues);\n        } else {\n            this.index.set(Eigenvalues.tagName, this.nodes.size);\n            this.addNode(eigenvalues);\n        }\n    }\n\n    /**\n     * Remove the eigenvalues.\n     */\n    removeEigenvalues() {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Eigenvalues.tagName);\n        }\n    }\n\n    /**\n     * @returns The shortestTimeOfInterest.\n     */\n    getShortestTimeOfInterest(): ShortestTimeOfInterest | undefined {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ShortestTimeOfInterest;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param shortestTimeOfInterest The shortestTimeOfInterest.\n     */\n    setShortestTimeOfInterest(shortestTimeOfInterest: ShortestTimeOfInterest) {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, shortestTimeOfInterest);\n        } else {\n            this.index.set(ShortestTimeOfInterest.tagName, this.nodes.size);\n            this.addNode(shortestTimeOfInterest);\n        }\n    }\n\n    /**\n     * Remove the shortestTimeOfInterest.\n     */\n    removeShortestTimeOfInterest() {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ShortestTimeOfInterest.tagName);\n        }\n    }\n\n    /**\n     * @returns The MaximumEvolutionTime.\n     */\n    getMaximumEvolutionTime(): MaximumEvolutionTime | undefined {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MaximumEvolutionTime;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param maximumEvolutionTime The MaximumEvolutionTime.\n     */\n    setMaximumEvolutionTime(maximumEvolutionTime: MaximumEvolutionTime) {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, maximumEvolutionTime);\n        } else {\n            this.index.set(MaximumEvolutionTime.tagName, this.nodes.size);\n            this.addNode(maximumEvolutionTime);\n        }\n    }\n\n    /**\n     * Remove the MaximumEvolutionTime.\n     */\n    removeMaximumEvolutionTime() {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MaximumEvolutionTime.tagName);\n        }\n    }\n\n    /**\n     * @returns The automaticallySetMaxEne.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automaticallySetMaxEne.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * Remove the automaticallySetMaxEne.\n     */\n    removeAutomaticallySetMaxEne() {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(AutomaticallySetMaxEne.tagName);\n        }\n    }\n\n    /**\n     * @returns The diagramEnergyOffset.\n     */\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    setDiagramEnergyOffset(diagramEnergyOffset: DiagramEnergyOffset) {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, diagramEnergyOffset);\n        } else {\n            this.index.set(DiagramEnergyOffset.tagName, this.nodes.size);\n            this.addNode(diagramEnergyOffset);\n        }\n    }\n\n    /**\n     * Remove the diagramEnergyOffset.\n     */\n    removeDiagramEnergyOffset() {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(DiagramEnergyOffset.tagName);\n        }\n    }\n\n    /**\n     * @returns The testMicroRates or undefined.\n     */\n    getTestMicroRates(): TestMicroRates | undefined {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testMicroRates The testMicroRates.\n     */\n    setTestMicroRates(testMicroRates: TestMicroRates) {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testMicroRates);\n        } else {\n            this.index.set(TestMicroRates.tagName, this.nodes.size);\n            this.addNode(testMicroRates);\n        }\n    }\n\n    /**\n     * Remove the testMicroRates.\n     */\n    removeTestMicroRates() {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestMicroRates.tagName);\n        }\n    }\n\n}","import { Conditions } from \"./conditions.js\";\nimport { Control } from \"./control.js\";\nimport { ModelParameters } from \"./modelParameters.js\";\nimport { Molecule } from \"./molecule.js\";\nimport { Reaction } from \"./reaction.js\";\nimport { arrayToString, mapToString } from \"./util.js\";\nimport { NodeWithNodes, StringNode } from \"./xml.js\";\n\n/**\n * The title.\n */\nexport class Title extends StringNode {\n\n    static readonly tagName: string = \"me:title\";\n\n    /**\n     * @param value \n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Title.tagName, value);\n    }\n\n}\n\n/**\n * A class for representing a \"moleculeList\".\n * In the XML, a \"moleculeList\" node is a child node of the \"me:mesmer\" node and has \"molecule\" node children.\n */\nexport class MoleculeList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"moleculeList\";\n\n    /**\n     * The index. The keys are the molecule ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecules?: Molecule[]) {\n        super(attributes, MoleculeList.tagName);\n        this.index = new Map();\n        if (molecules != undefined) {\n            molecules.forEach(molecule => {\n                this.nodes.set(this.nodes.size, molecule);\n                this.index.set(molecule.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */\n    getMolecule(id: string): Molecule | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Molecule;\n    }\n\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */\n    removeMolecule(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */\n    addMolecule(molecule: Molecule): void {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log('Replaced molecule with id ' + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"reactionList\".\n * In the XML, a \"reactionList\" node is a child node of a \"me:mesmer\" node and has \"reaction\" node children.\n */\nexport class ReactionList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactionList\";\n\n    /**\n     * The index. The keys are the reaction ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */\n    constructor(attributes: Map<string, string>, reactions?: Reaction[]) {\n        super(attributes, ReactionList.tagName);\n        this.index = new Map();\n        if (reactions != undefined) {\n            reactions.forEach(reaction => {\n                this.nodes.set(this.nodes.size, reaction);\n                this.index.set(reaction.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */\n    getReaction(id: string): Reaction | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Reaction;\n    }\n\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */\n    removeReaction(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */\n    addReaction(reaction: Reaction): void {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log('Replaced reaction with id ' + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"conditionsList\" - this does not yet exist in the MEMSER, so this is not used.\n * Currently, in the XML, a \"conditions\" node is a child node of a \"me:mesmer\" node and there is no \"conditionsList\".\n */\nexport class ConditionsList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"conditionsList\";\n\n    /**\n     * The index. The keys are the conditions ids and the values are the node indexes.\n     */\n    index: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param conditionss The conditions.\n     */\n    constructor(attributes: Map<string, string>, conditionss?: Conditions[]) {\n        super(attributes, ControlList.tagName);\n        this.index = new Map();\n        if (conditionss != undefined) {\n            conditionss.forEach(conditions => {\n                this.nodes.set(this.nodes.size, conditions);\n                this.index.set(conditions.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the control.\n     * @returns The conditions.\n     */\n    getConditions(id: number): Conditions | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            return this.nodes.get(i) as Conditions;\n        }\n    }\n\n    /**\n     * Remove a control.\n     * @param id The id of the control to remove.\n     */\n    removeConditions(id: number): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a conditions.\n     * @param conditions The conditions.\n     */\n    addConditions(conditions: Conditions): void {\n        let index = this.index.get(conditions.id);\n        if (index != undefined) {\n            this.nodes.set(index, conditions);\n            console.log('Replaced conditions with id ' + conditions.id);\n        } else {\n            this.nodes.set(this.nodes.size, conditions);\n            this.index.set(conditions.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"controlList\" - this does not yet exist in the MEMSER, so this is not used.\n * Currently, in the XML, a \"control\" node is a child node of a \"me:mesmer\" node and there is no \"controlList\".\n */\nexport class ControlList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"controlList\";\n\n    /**\n     * The index. The keys are the control ids and the values are the node indexes.\n     */\n    index: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param controls The controls.\n     */\n    constructor(attributes: Map<string, string>, controls?: Control[]) {\n        super(attributes, ControlList.tagName);\n        this.index = new Map();\n        if (controls != undefined) {\n            controls.forEach(control => {\n                this.nodes.set(this.nodes.size, control);\n                this.index.set(control.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the control.\n     * @returns The control.\n     */\n    getControl(id: number): Control | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            return this.nodes.get(i) as Control;\n        }\n    }\n\n    /**\n     * Remove a control.\n     * @param id The id of the control to remove.\n     */\n    removeControl(id: number): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a control.\n     * @param control The control.\n     */\n    addControl(control: Control): void {\n        let index = this.index.get(control.id);\n        if (index !== undefined) {\n            this.nodes.set(index, control);\n            console.log('Replaced control with id ' + control.id);\n        } else {\n            this.nodes.set(this.nodes.size, control);\n            this.index.set(control.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * The \"me:mesmer\" node contains a \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \n * \"me:modelParameters\" and \"me:control\".\n */\nexport class Mesmer extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:mesmer\";\n\n    /**\n     * Precision options.\n     */\n    static readonly precisionOptions: string[] = [\"d\", \"dd\", \"qd\", \"double\", \"double-double\", \"quad-double\"];\n\n    /**\n     * Pressure units.\n     */\n    static readonly pressureUnits: string[] = [\"Torr\", \"PPCC\", \"atm\", \"mbar\", \"psi\", \"mols/cc\"];\n\n    /**\n     * Energy units.\n     */\n    static readonly energyUnits: string[] = [\"kJ/mol\", \"cm-1\", \"wavenumber\", \"kcal/mol\", \"Hartree\", \"au\"];\n\n    /**\n     * Frequency units.\n     */\n    static readonly frequencyUnits: string[] = [\"cm-1\", \"GHz\", \"amuA^2\"];\n\n    /**\n     * The atoms with 1 to 118 protons inclusive. (source: https://query.wikidata.org/#SELECT%20%3Felement%20%3Fsymbol%20%20%3Fprotons%0AWHERE%0A%7B%0A%20%20%3Felement%20wdt%3AP31%20wd%3AQ11344%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20wdt%3AP1086%20%3Fprotons%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20wdt%3AP246%20%3Fsymbol%20.%0A%7D%0A%0AORDER%20BY%20%3Fprotons)\n     */\n    static readonly elementTypes: string[] = [\"H\", \"He\", \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Ne\", \"Na\", \"Mg\", \"Al\", \"Si\", \"P\", \"S\", \"Cl\", \"Ar\",\n    \"K\", \"Ca\", \"Sc\", \"Ti\", \"V\", \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\", \"As\", \"Se\", \"Br\", \"Kr\", \"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\",\n    \"Mo\", \"Tc\", \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\", \"Xe\", \"Cs\", \"Ba\", \"La\", \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\",\n    \"Gd\", \"Tb\", \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\", \"Lu\", \"Hf\", \"Ta\", \"W\", \"Re\", \"Os\", \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\",\n    \"Rn\", \"Fr\", \"Ra\", \"Ac\", \"Th\", \"Pa\", \"U\", \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\", \"Es\", \"Fm\", \"Md\", \"No\", \"Lr\", \"Rf\", \"Db\", \"Sg\", \"Bh\",\n    \"Hs\", \"Mt\", \"Ds\", \"Rg\", \"Cn\", \"Nh\", \"Fl\", \"Mc\", \"Lv\", \"Ts\", \"Og\"];\n    \n    /**\n     * Atomic mass map for atoms. The keys are element symbols, the values are the atomic mass according to a periodic table.\n     * (This is initialised in the constructor.)\n     */\n    static readonly atomMasses: Map<string, number> = new Map();\n\n    /**\n     * Atomic radius map for atoms. The keys are element symbols, the values are the atomic radii according to a periodic table.\n     * (This is initialised in the constructor.)\n     */\n    static readonly atomRadii: Map<string, number> = new Map();\n\n    /**\n     * Colour map for atoms. The keys are element symbols, the values are the colours the element is assigned.\n     * (This is initialised in the constructor.)\n     */\n    static readonly atomColors: Map<string, string> = new Map();\n\n    /**\n     * Colour map for bonds. The keys are bond order, the values are the colours the bond order is assigned.\n     * (This is initialised in the constructor.)\n     */\n    static readonly bondColors: Map<number, string> = new Map();\n\n    /**\n     * The header of the XML file.\n     */\n    static header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The conditions index. The keys are the conditions ids and the values are the node indexes.\n     */\n    conditionsIndex: Map<number, number>;\n\n    /**\n     * The control index. The keys are the control ids and the values are the node indexes.\n     */\n    controlIndex: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeList The molecule list.\n     * @param reactionList The reaction list.\n     * @param conditions The conditions.\n     * @param modelParameters The model parameters.\n     * @param controls The controls.\n     */\n    constructor(attributes: Map<string, string>, title?: Title, moleculeList?: MoleculeList, reactionList?: ReactionList,\n        conditionss?: Conditions[], modelParameters?: ModelParameters, controls?: Control[]) {\n        super(attributes, Mesmer.tagName);\n        let elements = [\"H\", \"O\", \"C\", \"N\", \"Cl\", \"S\", \"Ph\", \"Fe\"];\n        let colors = [\"White\", \"Red\", \"DarkGrey\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Brown\"];\n        for (let i = 0; i < elements.length; i++) {\n            Mesmer.atomColors.set(elements[i], colors[i]);\n        }\n        // Atomic mass units (amu)\n        let masses = [1.00784, 15.999, 12.011, 14.007, 35.453, 32.06, 77.845, 55.845]; // Atomic masses (see https://en.wikipedia.org/wiki/Periodic_table).\n        for (let i = 0; i < elements.length; i++) {\n            Mesmer.atomMasses.set(elements[i], masses[i]);\n        }\n        // Picometers (pm),\n        let radii = [37, 66, 67, 56, 99, 102, 110, 124]; // Calculated radii between two atoms of the same type in a molecule (https://en.wikipedia.org/wiki/Atomic_radii_of_the_elements_(data_page)).\n        for (let i = 0; i < elements.length; i++) {\n            Mesmer.atomRadii.set(elements[i], radii[i]);\n        }\n        let bondOrders = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6];\n        colors = [\"Black\", \"Red\", \"DarkRed\", \"Blue\", \"DarkBlue\", \"Green\", \"DarkGreen\", \"Yellow\", \"DarkYellow\", \"Orange\", \"DarkOrange\"];\n        for (let i = 0; i < bondOrders.length; i++) {\n            Mesmer.bondColors.set(bondOrders[i], colors[i]);\n        }\n        this.index = new Map();\n        if (title != undefined) {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (moleculeList != undefined) {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        this.conditionsIndex = new Map();\n        if (conditionss != undefined) {\n            conditionss.forEach(conditions => {\n                this.index.set(Conditions.tagName + conditions.id, this.nodes.size);\n                this.conditionsIndex.set(conditions.id, this.nodes.size);\n                this.addNode(conditions);\n            });\n        }\n        if (modelParameters != undefined) {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        this.controlIndex = new Map();\n        if (controls != undefined) {\n            controls.forEach(control => {\n                this.index.set(Control.tagName + control.id, this.nodes.size);\n                this.controlIndex.set(control.id, this.nodes.size);\n                this.addNode(control);\n            });\n        }\n    }\n\n    /**\n     * @returns The title.\n     */\n    getTitle() {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Title;\n        }\n    }\n\n    /**\n     * Set the title.\n     * @param title The title.\n     */\n    setTitle(title: Title) {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, title);\n        } else {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n\n    /**\n     * @returns The molecule list.\n     */\n    getMoleculeList() {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MoleculeList;\n        }\n    }\n\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */\n    setMoleculeList(moleculeList: MoleculeList) {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, moleculeList);\n        } else {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n\n    /**\n     * @returns The reaction list.\n     */\n    getReactionList() {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ReactionList;\n        }\n    }\n\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */\n    setReactionList(reactionList: ReactionList) {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, reactionList);\n        } else {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n\n    /**\n     * Add a Conditions.\n     * @param conditions The Conditions.\n     */\n    addConditions(conditions: Conditions) {\n        let id = Conditions.tagName + conditions.id;\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.set(i, conditions);\n        } else {\n            this.index.set(id, this.nodes.size);\n            this.conditionsIndex.set(conditions.id, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n\n    /**\n     * @param conditionsID The id of the conditions.\n     * @returns The conditions for the conditionsID.\n     */\n    getConditions(conditionsID: number) {\n        let i: number | undefined = this.conditionsIndex.get(conditionsID);\n        if (i != undefined) {\n            return this.nodes.get(i) as Conditions;\n        }        \n    }\n\n    /**\n     * @returns The next control id.\n     */\n    getNextConditionsID(): number {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.conditionsIndex.keys()).sort((a, b) => a - b);\n        console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            if (key > id) {\n                return id;\n            }\n            id ++;\n        });\n        return id;\n    }\n    \n    /**\n     * Remove a conditions.\n     * @param conditionsID The id of the conditions to remove.\n     */\n    removeConditions(conditionsID: number) {\n        let i: number | undefined = this.conditionsIndex.get(conditionsID);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Conditions.tagName + conditionsID);\n            this.conditionsIndex.delete(conditionsID);\n        }\n    }\n    \n    /**\n     * @returns The model parameters.\n     */\n    getModelParameters() {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ModelParameters;\n        }\n    }\n\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */\n    setModelParameters(modelParameters: ModelParameters) {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, modelParameters);\n        } else {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n    \n    /**\n     * Add a Control.\n     * @param control The Control.\n     */\n    addControl(control: Control) {\n        let id = Control.tagName + control.id;\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.set(i, control);\n        } else {\n            this.index.set(id, this.nodes.size);\n            this.controlIndex.set(control.id, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n\n    /**\n     * @returns The control.\n     */\n    getControl(controlID: number) {\n        let i: number | undefined = this.controlIndex.get(controlID);\n        if (i != undefined) {\n            return this.nodes.get(i) as Control;\n        }\n    }\n\n    /**\n     * @returns The next control id.\n     */\n    getNextControlID(): number {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.controlIndex.keys()).sort((a, b) => a - b);\n        console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            if (key > id) {\n                return id;\n            }\n            id ++;\n        });\n        return id;\n    }\n\n    /**\n     * Remove a control.\n     * @param controlID The id of the control to remove.\n     */\n    removeControl(controlID: number) {\n        let i: number | undefined = this.controlIndex.get(controlID);\n        console.log(\"removeControl \" + controlID + \" \" + i);\n        console.log(\"controlIndex \" + arrayToString(Array.from(this.controlIndex.keys())));\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Control.tagName + controlID);\n            this.controlIndex.delete(controlID);\n        }\n    }\n}"],"names":["$22c7fca7c69edc03$var$dark","$22c7fca7c69edc03$var$mesmer","$22c7fca7c69edc03$var$molecules","$22c7fca7c69edc03$var$reactions","$22c7fca7c69edc03$var$popWindow","$dcf293d9ee452407$export$3988ae62b71be9a3","map","key","has","Error","get","$dcf293d9ee452407$export$3205c97bcf96f7dc","parts","validId","id","join","replace","test","$dcf293d9ee452407$export$4323cc4280d5be7","array","delimiter","undefined","value","toString","$dcf293d9ee452407$export$8cfbaad830aa9e0a","s","r","i","length","$dcf293d9ee452407$export$e90fb89750dba83f","push","parseFloat","isNaN","Number","$2cda23d1e44619db$export$cd7f480d6b8286c3","ids","e","document","getElementById","remove","delete","$2cda23d1e44619db$export$8b2cd46c11844202","divToAddTo","divToAppendTo","elementToInsertBefore","content","buttonLabel","buttonId","margin","marginLeft","marginTop","marginBottom","marginRight","contentDivId","contentDivClassName","div","$2cda23d1e44619db$export$331ff980f0d45cff","className","button","$2cda23d1e44619db$export$9b6d6ca62970729f","addEventListener","textContent","split","appendChild","insertBefore","removeEventListener","$2cda23d1e44619db$var$toggleCollapsible","classList","toggle","nes","nextElementSibling","HTMLDivElement","style","display","console","log","$2cda23d1e44619db$export$4e9ec2b27757d9dd","type","componentMargin","divMargin","func","labelTextContent","input","$2cda23d1e44619db$export$78253536c0178a32","$2cda23d1e44619db$export$d80fffb1deb3b97e","onchange","$2cda23d1e44619db$export$d43d96a9a8ad3e51","label","$2cda23d1e44619db$export$f2839682b8c07f35","htmlFor","createElement","Object","assign","fontSize","add","$2cda23d1e44619db$export$ff083c49da8fe0f9","attributes","tagName","minSize","width","$2cda23d1e44619db$export$fdd146df37959fe8","$2cda23d1e44619db$export$b89bf4b169286865","options","name","select","forEach","option","optionElement","text","$2cda23d1e44619db$export$4c3eba01cd3c5ba4","boundary","flexWrap","$6648a11f147a5c05$export$91e73a91db22e6a2","element","el","getElementsByTagName","$6648a11f147a5c05$export$4e07613bf412feb7","cn","childNodes","$6648a11f147a5c05$export$13cb40e9b656ab9e","node","nodeValue","$6648a11f147a5c05$export$433c819efd6b1ea5","firstChildNode","trim","$6648a11f147a5c05$export$3288d34c523a1192","constructor","toXML","padding","$6648a11f147a5c05$export$ca4ceee82ec565dc","k","v","$6648a11f147a5c05$export$8f67221c6fb2ad09","$6648a11f147a5c05$export$dad497fe1f6e27c0","$6648a11f147a5c05$export$82583fad49645fc9","c","stringValue","toExponential","$6648a11f147a5c05$export$38d8ebe2767f8865","values","setDelimiter","replaceAll","$6648a11f147a5c05$export$bd431b64ad3b0433","nodes","Map","addNode","set","size","pad","padding1","warn","padValue","startTag","$6648a11f147a5c05$export$2cd488e9ab180ce2","$6648a11f147a5c05$export$fe94072fee8a6976","attributeNames","getAttributeNames","attributeName","attributeValue","getAttribute","$6648a11f147a5c05$export$b7531b8ff18dc588","xml","$07cfde92b14f998c$export$d0e9917d83c120a0","s_units","s_lower","s_upper","s_stepsize","setValue","getUnits","setUnits","units","removeUnits","getLower","lower","setLower","removeLower","getUpper","upper","setUpper","removeUpper","getStepsize","stepsize","setStepsize","removeStepsize","$7cb8c0739b32549c$export$80986e6afdd7e0cb","s_id","s_elementType","s_x3","s_y3","s_z3","molecule","hasCoordinates","getId","setId","getElementType","setElementType","elementType","getX3","x3","setX3","removeX3","getY3","y3","setY3","removeY3","getZ3","z3","setZ3","removeZ3","$7cb8c0739b32549c$export$9cea715eceba39a0","atoms","index","reverseIndex","atom","getAtom","addAtom","getNextAtomID","newID","removeAtom","deleteNodeAndReindex","newNodes","newIndex","newReverseIndex","$7cb8c0739b32549c$export$153327fc99ac0c53","s_atomRefs2","s_order","orderOptions","getAtomRefs2","atomRefs2","setAtomRefs2","getOrder","order","setOrder","$7cb8c0739b32549c$export$746fba2e30d93fe6","bonds","bond","getBondIds","Array","from","keys","getBond","addBond","getNextBondID","removeBond","$7cb8c0739b32549c$export$d29b345ea2be5072","updateUnits","existingUnits","$7cb8c0739b32549c$export$9f93a3fdf2490572","$7cb8c0739b32549c$export$a5a2be813176eb0e","s_rows","s_matrixType","$7cb8c0739b32549c$export$41b04b3a73e7216d","s_dictRef","property","dictRef","getProperty","setProperty","$7cb8c0739b32549c$export$95174cf0748f45cd","$7cb8c0739b32549c$export$1288989e9be37590","$7cb8c0739b32549c$export$2762c8fbc03043ca","$7cb8c0739b32549c$export$984abe26ded13ee0","unitOptions","$7cb8c0739b32549c$export$a3772f6eb527275b","$7cb8c0739b32549c$export$22995ecd2bdeb2","$7cb8c0739b32549c$export$4e0d1ad7ad6a0802","properties","$7cb8c0739b32549c$export$16fc56ab40b12b45","s_bathGas","getBathGas","setBathGas","bathGas","$7cb8c0739b32549c$export$1aede585378507cb","$7cb8c0739b32549c$export$f8ecc5f7f62d6fbf","s_referenceTemperature","getReferenceTemperature","setReferenceTemperature","referenceTemperature","$7cb8c0739b32549c$export$fbea747a02da7eb8","$7cb8c0739b32549c$export$499950da20810ac9","deltaEDowns","deltaEDown","getDeltaEDowns","setDeltaEDowns","clear","getDeltaEDown","setDeltaEDown","addDeltaEDown","$7cb8c0739b32549c$export$bbdce6c921702068","xsi_typeOptions","s_xsi_type","getXsiType","setXsiType","xsiType","$7cb8c0739b32549c$export$aef8e5ad5552fd72","bondRef","$7cb8c0739b32549c$export$86ca5149fcde8feb","s_angle","s_potential","angle","potential","getAngle","setAngle","getPotential","setPotential","$7cb8c0739b32549c$export$9b8e857b9a081d2","formats","Set","s_format","s_expansionSize","s_useSineTerms","potentialPoints","format","p","expansionSize","useSineTerms","getFormat","setFormat","getExpansionSize","setExpansionSize","getUseSineTerms","setUseSineTerms","getPotentialPoint","setPotentialPoint","setPotentialPoints","addPotentialPoint","removePotentialPoint","$7cb8c0739b32549c$export$9513c16afdf7d852","$7cb8c0739b32549c$export$ae98b7db6376163d","hinderedRotorPotential","periodicity","getBondRef","setBondRef","getHinderedRotorPotential","setHinderedRotorPotential","getPeriodicity","setPeriodicity","$7cb8c0739b32549c$export$97850fe2f2906f00","$7cb8c0739b32549c$export$3da9759ad07746a3","s_description","s_active","energyTransferModel","dOSCMethod","extraDOSCMethod","reservoirSize","getDescription","description","setDescription","getActive","active","setActive","getLabel","getAttributesAsString","getProperties","setProperties","atomId","getAtoms","setAtoms","bondId","getBonds","setBonds","getEnergyTransferModel","setEnergyTransferModel","getDOSCMethod","setDOSCMethod","getExtraDOSCMethod","setExtraDOSCMethod","getReservoirSize","setReservoirSize","getEnergy","$381c11e38cac5410$export$e8a062bb2fc9e2ba","ref","role","setRole","$381c11e38cac5410$export$dcfd4302d04b7fb6","roleOptions","getMolecule","$381c11e38cac5410$export$264ad599d7cef668","$381c11e38cac5410$export$145c1ed87b1a2216","$381c11e38cac5410$export$38ce90ac8b004d85","$381c11e38cac5410$export$1bdc69d2439d749d","$381c11e38cac5410$export$8d95dd32819bc86c","$381c11e38cac5410$export$d08982dd841d496f","$381c11e38cac5410$export$6fa70ee10f356b6","$381c11e38cac5410$export$191e95ebb11cc88","xsiType2","preExponential","activationEnergy","tInfinity","nInfinity","getPreExponential","setPreExponential","getActivationEnergy","setActivationEnergy","getTInfinity","setTInfinity","getNInfinity","setNInfinity","$381c11e38cac5410$export$c3cf6f96dac11421","s_name","getName","setName","$381c11e38cac5410$export$284227145ed02b04","$381c11e38cac5410$export$d2ae4167a30cf6bb","reactants","products","tunneling","transitionStates","mCRCMethod","excessReactantConc","reactantsIndex","productsIndex","transitionStatesIndex","reactant","product","transitionState","addToIndex","getReactants","setReactants","getReactant","addReactant","removeReactant","getProducts","setProducts","getProduct","addProduct","removeProduct","getTunneling","setTunneling","getTransitionStates","setTransitionStates","getTransitionState","addTransitionState","removeTransitionState","getMCRCMethod","setMCRCMethod","getExcessReactantConc","setExcessReactantConc","getReactantsLabel","getProductsLabel","getReactantsEnergy","molecules","reduce","a","b","getProductsEnergy","nodeIndex","$d2b4a77a4d44562c$export$479ac392a7fb4419","ctx","strokeStyle","strokewidth","x0","y0","x1","y1","font","th","energyString","x_centre","$d2b4a77a4d44562c$export$bec150f75a9b8f11","tw","$d2b4a77a4d44562c$export$37827d046293d309","$d2b4a77a4d44562c$export$819db45aec5fcbe5","x2","y2","beginPath","lineWidth","moveTo","lineTo","stroke","colour","x","y","save","translate","scale","fillStyle","fillText","restore","measureText","$613b909b2797b099$export$b33a132661f4be58","moleculeID","$613b909b2797b099$export$cdeafdd1d936ed5b","s_ref1","s_ref2","s_refReaction","s_error","getRef1","setRef1","ref1","getRef2","setRef2","ref2","getRefReaction","setRefReaction","refReaction","getError","setError","error","$613b909b2797b099$export$c291f4faacd745a6","s_ref","s_yieldTime","getRef","setRef","getYieldTime","setYieldTime","yieldTime","$613b909b2797b099$export$ed9dfbc127680fd1","s_EigenvalueID","getEigenvalueID","setEigenvalueID","EigenvalueID","$613b909b2797b099$export$284227145ed02b04","s_percent","getPercent","setPercent","percent","$613b909b2797b099$export$3fe97ecb6b172244","s_P","s_T","s_precision","s_excessReactantConc","s_percentExcessReactantConc","experimentRate","experimentalYield","experimentalEigenvalue","getP","NaN","setP","getT","t","setT","getPrecision","setPrecision","precision","removeBathGas","getExperimentalRate","setExperimentalRate","removeExperimentalRate","getExperimentalYield","setExperimentalYield","removeExperimentalYield","getExperimentalEigenvalue","setExperimentalEigenvalue","removeExperimentalEigenvalue","getPercentExcessReactantConc","setPercentExcessReactantConc","percentExcessReactantConc","$613b909b2797b099$export$3be0efe793283834","pTpairs","pTpair","getPTpair","setPTpair","addPTpair","removePTpair","splice","setPTpairs","removePTpairs","$613b909b2797b099$export$363c7374d425f4ad","bathGases","pTs","bathGasesIndex","getBathGases","addBathGas","getPTs","setPTs","$9a96fbd0df1ae67b$export$26e33f0df9ce919d","$9a96fbd0df1ae67b$export$576b56ca6e34780b","$9a96fbd0df1ae67b$export$aa73446724166cdb","$9a96fbd0df1ae67b$export$f9c72965e4ddfc8e","$9a96fbd0df1ae67b$export$77f098867dc64198","grainSize","automaticallySetMaxEne","energyAboveTheTopHill","maxTemperature","getGrainSize","setGrainSize","removeGrainSize","getAutomaticallySetMaxEne","setAutomaticallySetMaxEne","removeAutomaticallySetMaxEne","getEnergyAboveTheTopHill","setEnergyAboveTheTopHill","removeEnergyAboveTheTopHill","getMaxTemperature","setMaxTemperature","removeMaxTemperature","$d0ae5bc6e682c29f$export$7d9247c9879133fb","$d0ae5bc6e682c29f$export$60b233651e162b60","$d0ae5bc6e682c29f$export$7e63e5104be309ff","$d0ae5bc6e682c29f$export$a915db169f144f37","$d0ae5bc6e682c29f$export$e7fff349901f700d","$d0ae5bc6e682c29f$export$d23243bda4dfae2b","$d0ae5bc6e682c29f$export$55888ef4e813a34d","$d0ae5bc6e682c29f$export$f8d814a406a0ff5b","$d0ae5bc6e682c29f$export$3627f2b606ffd3cb","$d0ae5bc6e682c29f$export$c5481d114fddc81c","$d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab","$d0ae5bc6e682c29f$export$8420ab6988728a65","$d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1","$d0ae5bc6e682c29f$export$9f7939759d8efd9f","$d0ae5bc6e682c29f$export$fc99460819e23ac5","$d0ae5bc6e682c29f$export$2f2eaac8983031ef","$d0ae5bc6e682c29f$export$a3d7e677521f681f","$d0ae5bc6e682c29f$export$980e5abe9a459423","$d0ae5bc6e682c29f$export$5d7dbeba4bf49655","$d0ae5bc6e682c29f$export$6ffea14bdffd427f","$d0ae5bc6e682c29f$export$9d51752a8549e2d6","$d0ae5bc6e682c29f$export$f0bfd84d03c3a22d","$d0ae5bc6e682c29f$export$afd374542f6f3da6","xsi_type","xsi_type2","$d0ae5bc6e682c29f$export$271191b096a55e63","$d0ae5bc6e682c29f$export$830a50cd13af6e84","$d0ae5bc6e682c29f$export$654b70df01671c79","fittingIterations","getFittingIterations","setFittingIterations","removeFittingIterations","$d0ae5bc6e682c29f$export$9f699e98369d9591","$d0ae5bc6e682c29f$export$ca1e6c3ff9fd3627","$d0ae5bc6e682c29f$export$d3887b529debf19d","$d0ae5bc6e682c29f$export$7968aa666bcf62fa","marquardtIterations","marquardtTolerance","marquardtDerivDelta","getMarquardtIterations","setMarquardtIterations","removeMarquardtIterations","getMarquardtTolerance","setMarquardtTolerance","removeMarquardtTolerance","getMarquardtDerivDelta","setMarquardtDerivDelta","removeMarquardtDerivDelta","$d0ae5bc6e682c29f$export$85eca882ff5fb66","$d0ae5bc6e682c29f$export$93514d28bd18d75a","rateUnits","rateUnitsOptions","getRateUnits","setRateUnits","removeRateUnits","$d0ae5bc6e682c29f$export$be201676156f3e60","$d0ae5bc6e682c29f$export$19d20f3642d82681","$d0ae5bc6e682c29f$export$906be0805438fd80","$d0ae5bc6e682c29f$export$6ab4fe1621c91452","$d0ae5bc6e682c29f$export$e9853d49316ae9ae","$d0ae5bc6e682c29f$export$39eacc768d7e9bb","$d0ae5bc6e682c29f$export$78194e57ce26d99a","$d0ae5bc6e682c29f$export$96094ac7e31a750e","$d0ae5bc6e682c29f$export$ae695595d3952700","$d0ae5bc6e682c29f$export$fe9781900d201bdf","chebNumTemp","chebNumConc","chebMaxTemp","chebMinTemp","chebMaxConc","chebMinConc","chebTExSize","chebPExSize","removeFormat","removePrecision","getChebNumTemp","setChebNumTemp","removeChebNumTemp","getChebNumConc","setChebNumConc","removeChebNumConc","getChebMaxTemp","setChebMaxTemp","removeChebMaxTemp","getChebMinTemp","setChebMinTemp","removeChebMinTemp","getChebMaxConc","setChebMaxConc","removeChebMaxConc","getChebMinConc","setChebMinConc","removeChebMinConc","getChebTExSize","setChebTExSize","removeChebTExSize","getChebPExSize","setChebPExSize","removeChebPExSize","$d0ae5bc6e682c29f$export$7be1a36e1f74dbc7","$d0ae5bc6e682c29f$export$ac2eb7df727f506d","$d0ae5bc6e682c29f$export$58c8f4b7ec654137","$d0ae5bc6e682c29f$export$7b8cfe3a6a460886","$d0ae5bc6e682c29f$export$16ef3f79998b60b4","tmin","tmid","tmax","tstep","getTmin","setTmin","removeTmin","getTmid","setTmid","removeTmid","getTmax","setTmax","removeTmax","getTstep","setTstep","removeTstep","$d0ae5bc6e682c29f$export$37d0520a9fac7849","$d0ae5bc6e682c29f$export$9a832710e54827ea","$d0ae5bc6e682c29f$export$b43b57458ce8fb96","$d0ae5bc6e682c29f$export$e98aeac6c6b1df09","$d0ae5bc6e682c29f$export$a532500cc43efbef","sensitivityAnalysisSamples","sensitivityAnalysisOrder","sensitivityNumVarRedIters","sensitivityVarRedMethod","getSensitivityAnalysisSamples","setSensitivityAnalysisSamples","removeSensitivityAnalysisSamples","getSensitivityAnalysisOrder","setSensitivityAnalysisOrder","removeSensitivityAnalysisOrder","getSensitivityNumVarRedIters","setSensitivityNumVarRedIters","removeSensitivityNumVarRedIters","getSensitivityVarRedMethod","setSensitivityVarRedMethod","removeSensitivityVarRedMethod","$d0ae5bc6e682c29f$export$2453e311f702d9c7","$d0ae5bc6e682c29f$export$421603058c6718db","$d0ae5bc6e682c29f$export$b51d7314540831ed","$d0ae5bc6e682c29f$export$576b56ca6e34780b","$d0ae5bc6e682c29f$export$159b5d3263f1049a","$d0ae5bc6e682c29f$export$1f37c7c73e401f31","tMin","tMax","tStep","$d0ae5bc6e682c29f$export$7a7fa4424cb20976","getCalculateRateCoefficientsOnly","setCalculateRateCoefficientsOnly","calculateRateCoefficientsOnly","removeCalculateRateCoefficientsOnly","getPrintCellDOS","setPrintCellDOS","printCellDOS","removePrintCellDOS","getPrintCellTransitionStateFlux","setPrintCellTransitionStateFlux","printCellTransitionStateFlux","removePrintCellTransitionStateFlux","getPrintReactionOperatorColumnSums","setPrintReactionOperatorColumnSums","printReactionOperatorColumnSums","removePrintReactionOperatorColumnSums","getPrintGrainBoltzmann","setPrintGrainBoltzmann","printGrainBoltzmann","removePrintGrainBoltzmann","getPrintGrainDOS","setPrintGrainDOS","printGrainDOS","removePrintGrainDOS","getPrintGrainkbE","setPrintGrainkbE","printGrainkbE","removePrintGrainkbE","getPrintGrainkfE","setPrintGrainkfE","printGrainkfE","removePrintGrainkfE","getPrintTSsos","setPrintTSsos","printTSsos","removePrintTSsos","getPrintGrainedSpeciesProfile","setPrintGrainedSpeciesProfile","printGrainedSpeciesProfile","removePrintGrainedSpeciesProfile","getPrintGrainTransitionStateFlux","setPrintGrainTransitionStateFlux","printGrainTransitionStateFlux","removePrintGrainTransitionStateFlux","getPrintReactionOperatorSize","setPrintReactionOperatorSize","printReactionOperatorSize","removePrintReactionOperatorSize","getPrintSpeciesProfile","setPrintSpeciesProfile","printSpeciesProfile","removePrintSpeciesProfile","getPrintPhenomenologicalEvolution","setPrintPhenomenologicalEvolution","printPhenomenologicalEvolution","removePrintPhenomenologicalEvolution","getPrintTunnelingCoefficients","setPrintTunnelingCoefficients","printTunnelingCoefficients","removePrintTunnelingCoefficients","getPrintCrossingCoefficients","setPrintCrossingCoefficients","printCrossingCoefficients","removePrintCrossingCoefficients","getTestDOS","setTestDOS","testDOS","removeTestDOS","getTestRateConstants","setTestRateConstants","testRateConstant","removeTestRateConstants","getUseTheSameCellNumberForAllConditions","setUseTheSameCellNumberForAllConditions","useTheSameCellNumberForAllConditions","removeUseTheSameCellNumberForAllConditions","getHideInactive","setHideInactive","hideInactive","removeHideInactive","getForceMacroDetailedBalance","setForceMacroDetailedBalance","forceMacroDetailedBalance","removeForceMacroDetailedBalance","getCalcMethod","setCalcMethod","calcMethod","removeCalcMethod","getEigenvalues","setEigenvalues","eigenvalues","removeEigenvalues","getShortestTimeOfInterest","setShortestTimeOfInterest","shortestTimeOfInterest","removeShortestTimeOfInterest","getMaximumEvolutionTime","setMaximumEvolutionTime","maximumEvolutionTime","removeMaximumEvolutionTime","getDiagramEnergyOffset","setDiagramEnergyOffset","diagramEnergyOffset","removeDiagramEnergyOffset","getTestMicroRates","setTestMicroRates","testMicroRates","removeTestMicroRates","$762f625c179c0279$export$f99233281efd08a0","$762f625c179c0279$export$19d70f3647dee606","removeMolecule","addMolecule","$762f625c179c0279$export$44466a39ca846289","reactions","reaction","getReaction","removeReaction","addReaction","$762f625c179c0279$export$3139ebae3f570365","conditionss","$762f625c179c0279$export$2be1c851e287a6b1","conditions","getConditions","removeConditions","addConditions","controls","control","getControl","removeControl","addControl","$762f625c179c0279$export$692079bb871c6039","precisionOptions","pressureUnits","energyUnits","frequencyUnits","elementTypes","atomMasses","atomRadii","atomColors","bondColors","header","title","moleculeList","reactionList","modelParameters","elements","colors","masses","radii","bondOrders","conditionsIndex","controlIndex","getTitle","setTitle","getMoleculeList","setMoleculeList","getReactionList","setReactionList","conditionsID","getNextConditionsID","sortedKeys","sort","getModelParameters","setModelParameters","controlID","getNextControlID","$22c7fca7c69edc03$var$mxg_url","$22c7fca7c69edc03$var$mxg_a","href","$22c7fca7c69edc03$var$mxgDataExamples_url","$22c7fca7c69edc03$var$mxgDataExamples_a","$22c7fca7c69edc03$var$mesmer_url","$22c7fca7c69edc03$var$memser_a","$22c7fca7c69edc03$var$t3Dmol_url","$22c7fca7c69edc03$var$t3Dmol_a","$22c7fca7c69edc03$var$level0","$22c7fca7c69edc03$var$level1","$22c7fca7c69edc03$var$level2","$22c7fca7c69edc03$var$level3","$22c7fca7c69edc03$var$level4","$22c7fca7c69edc03$var$level5","$22c7fca7c69edc03$var$boundary1","$22c7fca7c69edc03$var$sy_selected","$22c7fca7c69edc03$var$sy_deselected","$22c7fca7c69edc03$var$s_Add_sy_add","$22c7fca7c69edc03$var$s_button","$22c7fca7c69edc03$var$s_Input","$22c7fca7c69edc03$var$s_optionOn","$22c7fca7c69edc03$var$s_optionOff","$22c7fca7c69edc03$var$s_Rename","$22c7fca7c69edc03$var$s_selectOption","$22c7fca7c69edc03$var$conditionsDivId","$22c7fca7c69edc03$var$controlDivId","$22c7fca7c69edc03$var$maxMoleculeEnergy","Infinity","$22c7fca7c69edc03$var$minMoleculeEnergy","$22c7fca7c69edc03$var$ids","$22c7fca7c69edc03$var$addID","validID","$22c7fca7c69edc03$var$rdDivId","$22c7fca7c69edc03$var$rdCanvasId","$22c7fca7c69edc03$var$rd_font","$22c7fca7c69edc03$var$redrawReactionsDiagram","$22c7fca7c69edc03$var$drawReactionDiagram","$22c7fca7c69edc03$var$getCollapsibleContentDiv","moleculeId","typeID","level","$22c7fca7c69edc03$var$getAddAtomButton","atomArrayDiv","atomDiv","$22c7fca7c69edc03$var$processElementType","$22c7fca7c69edc03$var$processCoordinates","$22c7fca7c69edc03$var$addRemoveButton","$22c7fca7c69edc03$var$removeAtom","$22c7fca7c69edc03$var$addOptionByClassName","atomRefs","bondDivs","getElementsByClassName","$22c7fca7c69edc03$var$removeOptionByClassName","optionToRemove","HTMLSelectElement","optionToAdd","$22c7fca7c69edc03$var$getAddBondButton","bondArrayDiv","alert","slice","bondDiv","inputId","$22c7fca7c69edc03$var$processAtomRefs2","$22c7fca7c69edc03$var$processOrder","atomRefOptions","alws","aselect","querySelector","event","target","blws","bselect","$22c7fca7c69edc03$var$createProperty","$22c7fca7c69edc03$var$processProperty","first","selectTypes","$22c7fca7c69edc03$var$doSelectOption","indexOf","lws","$22c7fca7c69edc03$var$selectAnotherOptionEventListener","$22c7fca7c69edc03$var$processCoordinate","bind","coordinate","getter","setter","buttonTextContentSelected","buttonTextContentDeselected","$22c7fca7c69edc03$var$addCoordinate","valueString","removeFunction","args","orderId","$22c7fca7c69edc03$var$addOrder","$22c7fca7c69edc03$var$create3DViewer","moleculeDiv","viewer","viewerContainerDiv","viewerDivID","showAtomLabels","showBondLabels","createViewer","viewerDiv","$3Dmol","backgroundColor","setStyle","stick","color","radius","et","ax","ay","az","addSphere","center","z","addLabel","position","atomArray","atom1","atom2","a1x","a1y","a1z","a2x","a2y","a2z","addCylinder","start","end","zoomTo","render","zoom","redrawButton","createLabelButton","showState","updateState","s_Atom_Labels","atomLabelbutton","newState","s_Bond_Labels","bondLabelbutton","saveButton","canvas","pngURI","download","body","click","removeChild","scalarNodes","inputString","psAttributes","ps","inputDiv","$22c7fca7c69edc03$export$b1e4cbf5b56e0e21","inputElement","$22c7fca7c69edc03$var$addAnyUnits","arrayNodes","paAttributes","pa","$22c7fca7c69edc03$export$819b5ff7dff3652c","matrixNodes","pmAttributes","pm","tagOrDictRef","$22c7fca7c69edc03$var$getUnitsLabelWithSelect","psUnits","attributesUnits","inputStrings","success","inputNumber","$22c7fca7c69edc03$var$handleBathGases","conditionsDiv","xml_conditions","nextLevel","bathGasesDiv","addBathGasButton","bathGasIndex","$22c7fca7c69edc03$var$createSelectElementBathGas","xml_bathGases","children","filter","child","$22c7fca7c69edc03$var$handlePTs","moleculeKeys","pTsDiv","xml_PTss","xml_PTpairs","pTpairAttributes","entries","xml_bathGass","xml_ers","xml_eys","xml_ees","append","$22c7fca7c69edc03$var$createPTpairDiv","pTsButtonsDiv","addButton","pTpairIndex","addMultipleButton","pTpairsArray","pTpairArray","unitsIndex","experimentalRate","experimentalRateRef1","experimentalRateRef2","experimentalRateRefReaction","experimentalRateError","experimentalYieldRef","experimentalYieldYieldTime","experimentalYieldError","experimentalEigenvalueEigenvalueID","experimentalEigenvalueError","removeAllButton","firstChild","nextSibling","$22c7fca7c69edc03$var$addConditions","conditionssDiv","conditionsDivId","pTIndex","pTpairDiv","$22c7fca7c69edc03$var$addPorT","$22c7fca7c69edc03$var$addAttribute","$22c7fca7c69edc03$var$createExcessReactantConcInputElement","$22c7fca7c69edc03$var$addPercentExcessReactantConc","attribute","toLowerCase","$22c7fca7c69edc03$var$createPrecisionSelectElement","$22c7fca7c69edc03$var$addBathGas","iid","$22c7fca7c69edc03$var$createBathGasSelectElement","$22c7fca7c69edc03$var$addExperimentalElement","$22c7fca7c69edc03$var$createExperimentalRateDetails","$22c7fca7c69edc03$var$createExperimentalYieldDetails","$22c7fca7c69edc03$var$createExperimentalEigenvalueDetails","lwi","createInputElement","$22c7fca7c69edc03$var$addExperimentalDetails","eventHandler","valueGetter","getExperimental","setExperimental","ExperimentalClass","details","experimental","detail","detailId","$22c7fca7c69edc03$var$processModelParametersN","xml_modelParameters","modelParametersDiv","ModelParameterType","setModelParameter","removeModelParameter","mp","$22c7fca7c69edc03$var$createInputModelParameters","setElementMethod","call","$22c7fca7c69edc03$var$getControlOptionsSimple","class","setMethod","removeMethod","$22c7fca7c69edc03$var$getControlItems","$22c7fca7c69edc03$var$addControl","controlDiv","controlsDiv","$22c7fca7c69edc03$var$createInputControlItem","obj","setControlMethod","$22c7fca7c69edc03$var$handleControl","onOffControls","xml_control","ControlClass","removeControlMethod","handleInput","controlInstance","$22c7fca7c69edc03$var$handleCalcMethod","cm","divCmId","divCm","divCmDetailsId","divCmDetailsSelectId","$22c7fca7c69edc03$var$getCalcMethod","$22c7fca7c69edc03$var$createSelectElementCalcMethod","divCmDetails","cmf","fi_xml","$22c7fca7c69edc03$var$processCalcMethodFitting","cmm","processElement","ClassConstructor","setterMethod","elementXml","$22c7fca7c69edc03$var$processCalcMethodMarquardt","cmar","$22c7fca7c69edc03$var$processCalcMethodAnalyticalRepresentation","cmtt","$22c7fca7c69edc03$var$processCalcMethodThermodynamicTable","cmsa","$22c7fca7c69edc03$var$processCalcMethodSensitivityAnalysis","$22c7fca7c69edc03$var$handleTestMicroRates","idTmax","idTmin","idTstep","$22c7fca7c69edc03$var$createTestMicroRates","xml_tmr","tmr","tMaxlwi","tMinlwi","tSteplwi","parseInt","createLabelWithInputForObject","processSelectElement","lwsElement","processNumberElement","pop","lastIndex","dark","lw","lwc","fontMetric","foreground","blue","orange","getContext","clearRect","height","actualBoundingBoxAscent","actualBoundingBoxDescent","intProducts","orders","energies","energyMin","MAX_VALUE","energyMax","MIN_VALUE","reactionTransitionStates","reactantsLabel","energy","Math","min","max","productsLabel","j","ts","energyRange","reorders","xmax","reactantsInXY","reactantsOutXY","productsInXY","productsOutXY","transitionStatesInXY","transitionStatesOutXY","energyRescaled","range","canvasHeightWithBorder","$22c7fca7c69edc03$var$rdCanvasHeight","transform","reactantOutXY","productInXY","transitionStateLabel","transitionStateInXY","transitionStateOutXY","$22c7fca7c69edc03$var$saveXML","blob","Blob","url","URL","createObjectURL","menuDiv","justifyContent","border","s_Load","loadButton","files","file","inputFilename","reader","FileReader","contents","onload","result","readAsText","xmlDiv","xmlHeading","xmlPre","$22c7fca7c69edc03$var$parse","xml_mesmer","xml_title","titleNode","titleDiv","lwiId","moleculesDiv","moleculesListDivId","moleculeListDiv","$22c7fca7c69edc03$var$processMoleculeList","xml_moleculeList","moleculeListTagNames","nodeName","xml_molecules","moleculeTagNames","cns","xml_atomArrays","xml_atomArray","xml_atoms","bondArray","xml_bondArrays","xml_bonds","xml_PLs","plDiv","pl","xml_Ps","xml_ETMs","$22c7fca7c69edc03$var$processEnergyTransferModel","etm","xml_deltaEDowns","etmDiv","unitsLabel","$22c7fca7c69edc03$var$margin75","xml_DOSCMethod","xml_ExtraDOSCMethod","extraDOSCMethodDiv","xml_bondRefs","bondIds","xml_hinderedRotorPotentials","hinderedRotorPotentialAttributes","hinderedRotorPotentialDiv","useSineTermsLabel","useSineTermsInput","checked","potentialPointsDiv","potentialPointContentDivId","potentialPointCollapsibleDiv","xml_potentialPoints","potentialPoint","potentialPointDiv","angleLabel","angleInputElement","potentialLabel","potentialInputElement","xml_periodicities","xml_ReservoirSize","molstarDiv","addMoleculeButton","prompt","renameButton","newMoleculeId","mid","reactionsDiv","reactionsListDivId","reactionsListDiv","$22c7fca7c69edc03$var$processReactionList","reactionListDiv","xml_reactionList","reactionListTagNames","xml_reactions","reactionDiv","reactionAttributes","reactionTagNames","xml_reactants","reactantsDiv","xml_products","productsDiv","xml_tunneling","xml_transitionStates","transitionStatesDiv","xml_MCRCMethod","mCRCMethodDiv","mCRCMethodAttributes","xml_preExponential","preExponentialAttributes","xml_activationEnergy","activationEnergyAttributes","xml_tInfinity","tInfinityAttributes","xml_nInfinity","nInfinityAttributes","mCRCMethodLabel","xml_excessReactantConc","close","rdDiv","popButtonDiv","popButtonID","popOutText","popButton","rdCanvas","popWindowRDCanvas","window","open","dataURL","toDataURL","conditionssDivId","$22c7fca7c69edc03$var$processConditions","xml_conditionss","removeButton","aboveElement","parentElement","modelParametersListDiv","$22c7fca7c69edc03$var$processGrainSize","gs","controlsDivId","$22c7fca7c69edc03$var$processControl","xml_controls","onOffControlsDiv","orderedOnOffControls","item","parser","DOMParser","parseFromString","s_Increase_fontsize","increaseFontSizeButton","getComputedStyle","s_Decrease_fontsize","decreaseFontSizeButton","s_Light_Dark_Mode","lightDarkModeButton","s_Save","welcomeDiv","p1","alignContent","p2","p3","p4","p5","p6","p7","instructionsDiv","p8","p9","p10","p11"],"version":3,"file":"index.c1c93bbb.js.map"}