{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-63a64610537ce4e2.js","src/ts/app.ts","src/ts/util.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/ts/xml.ts","src/ts/html.ts","src/ts/molecule.ts","src/ts/reaction.ts","src/ts/canvas.ts","src/ts/conditions.ts","src/ts/modelParameters.ts","src/ts/control.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"d00c71a58b3c27a1\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  try {\n    ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n  } catch (err) {\n    if (err.message) {\n      console.error(err.message);\n    }\n    ws = {};\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    if (e.message) {\n      console.error(e.message);\n    }\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","import {\n    get, rescale\n} from './util.js';\n\nimport {\n    getAttribute, getFirstElement, getFirstChildNode, getNodeValue, getTag, getEndTag,\n    getAttributes, toHTML, getSingularElement, NumberArrayNode, NumberNode, TagWithAttributes\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property, MoleculeRef\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, ZhuNakamuraCrossing, Tunneling, TInfinity\n} from './reaction.js';\n\nimport {\n    arrayToString, toNumberArray, isNumeric\n} from './util.js';\n\nimport {\n    getTD, getTH, getTR, getInput\n} from './html.js';\n\nimport {\n    drawLevel, drawLine, getTextHeight, getTextWidth\n} from './canvas.js';\n\nimport {\n    BathGas, Conditions, PTpair, PTs\n} from './conditions.js';\n\nimport {\n    EnergyAboveTheTopHill, GrainSize, ModelParameters\n} from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset, Eigenvalues, HideInactive, TestDOS, PrintSpeciesProfile,\n    TestMicroRates, TestRateConstant, PrintGrainDOS, PrintCellDOS, PrintReactionOperatorColumnSums,\n    PrintTunnellingCoefficients, PrintGrainkfE, PrintGrainBoltzmann, PrintGrainkbE\n} from './control.js';\n\n/*\n// Code for service worker for Progressive Web App (PWA).\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n        //const swUrl = new URL('../../../sw.js', import.meta.url);\n        const swUrl = new URL('../../../sw.js', document.baseURI);\n        navigator.serviceWorker.register(swUrl);\n    });\n}\n*/\n/*  \nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n        navigator.serviceWorker.register('../../../sw.js').then(function (registration) {\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }, function (err) {\n            console.log('ServiceWorker registration failed: ', err);\n        });\n    });\n}\n*/\n\n//declare var global: any;\n//const globalScope = (typeof global !== 'undefined') ? global : window;\n\n//if (typeof global === 'undefined') {\n//    (window as any).global = window;\n//}\n\ndeclare global {\n    interface Window {\n        loadXML(): void;\n        saveXML(): void;\n    }\n}\n\n// Expected XML tags strings.\nlet me_title_s: string = 'me:title';\n\n/**\n * For storing me.title.\n */\nlet title: string;\n\n/**\n * For storing the XML root start tag.\n */\nlet mesmerStartTag: string;\n\n/**\n * For storing the XML root end tag.\n */\nlet mesmerEndTag: string;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map([]);\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map([]);\n\n/**\n * The header of the XML file.\n */\nconst header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n/**\n * The filename of the mesmer input file loaded.\n */\nlet input_xml_filename: string;\n\n/**\n * The load button.\n */\nlet loadButton: HTMLElement | null;\n\n/**\n * The save button.\n */\nlet saveButton: HTMLElement | null;\n\n/**\n * The XML text element.\n */\nlet me_title: HTMLCollectionOf<Element> | null;\nlet molecules_title: HTMLElement | null;\nlet molecules_table: HTMLElement | null;\nlet reactions_title: HTMLElement | null;\nlet reactions_table: HTMLElement | null;\nlet reactions_diagram_title: HTMLElement | null;\nlet conditions_title: HTMLElement | null;\nlet conditions_table: HTMLElement | null;\nlet modelParameters_title: HTMLElement | null;\nlet modelParameters_table: HTMLElement | null;\nlet xml_title: HTMLElement | null;\nlet xml_text: HTMLElement | null;\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xml: string) {\n    //console.log(\"xml=\" + xml);\n    if (xml_title != null) {\n        xml_title.innerHTML = input_xml_filename;\n    }\n    if (xml_text != null) {\n        xml_text.innerHTML = toHTML(xml);\n    }\n}\n\n/**\n * Parses xml to initilise molecules.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initMolecules(xml: XMLDocument): void {\n    let moleculeList_s: string = 'moleculeList';\n    console.log(\"Read and store \" + moleculeList_s);\n    let xml_moleculeList: Element = getSingularElement(xml, moleculeList_s);\n    // Set molecules_title.\n    molecules_title = document.getElementById(\"molecules_title\");\n    if (molecules_title != null) {\n        molecules_title.innerHTML = \"Molecules\";\n    }\n    // xml_moleculeList should have one or more molecule elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(Molecule.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n    }\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName(Molecule.tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    // Process each molecule.\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n\n        // Set atoms.\n        const atoms: Map<string, Atom> = new Map();\n        // Sometimes there is an individual atom not in an atomArray.\n        //let xml_atomArray = xml_molecules[i].getElementsByTagName(\"atomArray\")[0];\n        //if (xml_atomArray != null) {\n        moleculeTagNames.delete(Atom.tagName);\n        moleculeTagNames.delete(\"atomArray\");\n\n        let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Atom.tagName);\n        for (let j = 0; j < xml_atoms.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_atoms[j]);\n            let id: string | undefined = attribs.get(\"id\");\n            if (id != undefined) {\n                let atom = new Atom(attribs);\n                //console.log(atom.toString());\n                atoms.set(id, atom);\n            }\n        }\n        //}\n        // Read bondArray.\n        moleculeTagNames.delete(Bond.tagName);\n        moleculeTagNames.delete(\"bondArray\");\n        const bonds: Map<string, Bond> = new Map();\n        let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Bond.tagName);\n        for (let j = 0; j < xml_bonds.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_bonds[j]);\n            let id: string | undefined = attribs.get(\"atomRefs2\");\n            if (id != undefined) {\n                let bond = new Bond(attribs);\n                //console.log(bond.toString());\n                bonds.set(id, bond);\n            }\n        }\n        // Read propertyList.\n        const properties: Map<string, Property> = new Map();\n        // Sometimes there is a single property not in propertyList!\n        //let xml_propertyList = xml_molecules[i].getElementsByTagName(\"propertyList\")[0];\n        //if (xml_propertyList != null) {\n        //    let xml_properties = xml_propertyList.getElementsByTagName(\"property\");\n\n        moleculeTagNames.delete(Property.tagName);\n        moleculeTagNames.delete(\"propertyList\");\n        let xml_properties: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Property.tagName);\n        for (let j = 0; j < xml_properties.length; j++) {\n            let attribs: Map<string, string> = getAttributes(xml_properties[j]);\n            let children: HTMLCollectionOf<Element> = xml_properties[j].children;\n            if (children.length != 1) {\n                throw new Error(\"Expecting 1 child but finding \" + children.length);\n            }\n            let nodeAttributes: Map<string, string> = getAttributes(children[0]);\n            let nodeName: string = children[0].nodeName; // Expecting scalar or array\n            let textContent: string | null = children[0].textContent;\n            if (textContent == null) {\n                console.error(\"nodeName\");\n                throw new Error('textContent is null');\n            }\n            textContent = textContent.trim();\n            let dictRef: string | undefined = attribs.get(\"dictRef\");\n            //console.log(\"dictRef=\" + dictRef);\n            if (dictRef == null) {\n                throw new Error('dictRef is null');\n            }\n            //console.log(\"fcnn=\" + fcnn);\n            if (nodeName == \"scalar\") {\n                moleculeTagNames.delete(\"scalar\");\n                let value: number = parseFloat(textContent);\n                properties.set(dictRef, new Property(attribs,\n                    new NumberNode(nodeAttributes, nodeName, value)));\n                if (dictRef === \"me:ZPE\") {\n                    minMoleculeEnergy = Math.min(minMoleculeEnergy, value);\n                    maxMoleculeEnergy = Math.max(maxMoleculeEnergy, value);\n                }\n            } else if (nodeName == \"array\") {\n                moleculeTagNames.delete(\"array\");\n                properties.set(dictRef, new Property(attribs,\n                    new NumberArrayNode(nodeAttributes, nodeName,\n                        toNumberArray(textContent.split(/\\s+/)), \" \")));\n            } else if (nodeName == \"matrix\") {\n                throw new Error(\"Unexpected nodeName: \" + nodeName);\n            } else {\n                throw new Error(\"Unexpected nodeName: \" + nodeName);\n            }\n        }\n\n        let els: HTMLCollectionOf<Element> | null;\n\n        // Read energyTransferModel\n        moleculeTagNames.delete(EnergyTransferModel.tagName);\n        let energyTransferModel: EnergyTransferModel | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (els != null) {\n            if (els.length > 0) {\n                if (els.length != 1) {\n                    throw new Error(\"energyTransferModel length=\" + els.length);\n                }\n                let xml_deltaEDown: HTMLCollectionOf<Element> = els[0].getElementsByTagName(DeltaEDown.tagName);\n                if (xml_deltaEDown != null) {\n                    let deltaEDowns: DeltaEDown[] = [];\n                    for (let k = 0; k < xml_deltaEDown.length; k++) {\n                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_deltaEDown[k])));\n                        let deltaEDown: DeltaEDown = new DeltaEDown(getAttributes(xml_deltaEDown[k]), value);\n                        deltaEDowns.push(deltaEDown);\n                    }\n                    energyTransferModel = new EnergyTransferModel(getAttributes(els[0]), deltaEDowns);\n                }\n            }\n        }\n\n        // Read DOSCMethod\n        moleculeTagNames.delete(DOSCMethod.tagName);\n        let dOSCMethod: DOSCMethod | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(DOSCMethod.tagName);\n        if (els != null) {\n            let el: Element | null = els[0];\n            if (el != null) {\n                dOSCMethod = new DOSCMethod(getAttributes(el));\n            }\n        }\n\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            moleculeTagNames.forEach(x => console.log(x));\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.error(x));\n            console.error(\"Unexpected tags in molecule.\");\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n\n        let molecule = new Molecule(attributes, atoms, bonds, properties, energyTransferModel, dOSCMethod);\n        //console.log(molecule.toString());\n        molecules.set(molecule.id, molecule);\n    }\n    // Add event listeners to molecules table.\n    molecules.forEach(function (molecule, id) {\n        let energyKey = id + \"_energy\";\n        let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n        if (inputElement) {\n            inputElement.addEventListener('change', (event) => {\n                // The input is set up to call the function setEnergy(HTMLInputElement),\n                // so the following commented code is not used. As the input was setup \n                // as a number type. The any non numbers were It seems that there are two \n                // ways to get and store the value of the input element.\n                // Both ways have been kept for now as I don't know which way is better!\n                let eventTarget = event.target as HTMLInputElement;\n                let inputValue = eventTarget.value;\n                if (isNumeric(inputValue)) {\n                    molecule.setEnergy(parseFloat(inputValue));\n                    console.log(\"Set energy of \" + id + \" to \" + inputValue + \" kJ/mol\");\n                } else {\n                    alert(\"Energy input for \" + id + \" is not a number\");\n                    let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n                    inputElement.value = molecule.getEnergy().toString();\n                    console.log(\"inputValue=\" + inputValue);\n                    console.log(\"Type of inputValue: \" + typeof inputValue);\n                }\n            });\n        }\n    });\n}\n\nlet inputElement: HTMLInputElement;\n\n//function reload() {\nfunction loadXML() {\n    inputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            input_xml_filename = file.name;\n            if (xml_text != null) {\n                let reader = new FileReader();\n                let chunkSize = 1024 * 1024; // 1MB\n                let start = 0;\n                let contents = '';\n                reader.onload = function (e) {\n                    if (!e.target) {\n                        throw new Error('Event target is null');\n                    }\n                    contents += (e.target as FileReader).result as string;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            displayXML(contents);\n                            let parser = new DOMParser();\n                            let xml = parser.parseFromString(contents, \"text/xml\");\n                            parse(xml);\n                            /*\n                            // Sending to the server for validation is no longer implemented as there is currently no server.\n                            // Send XML to the server\n                            fetch('http://localhost:1234/', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'text/xml',\n                                },\n                                body: contents,\n                            })\n                                .then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(`HTTP error! status: ${response.status}`);\n                                    }\n                                    return response.text();\n                                })\n                                .then(data => {\n                                    console.log('Server response:', data);\n                                })\n                                .catch(error => {\n                                    console.error('There was a problem with the fetch operation:', error);\n                                });\n                            */\n                        }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        }\n    };\n    inputElement.click();\n    // Add event listener to load button.\n    loadButton = document.getElementById('load_button');\n    if (loadButton != null) {\n        //loadButton.addEventListener('click', reload);\n        loadButton.addEventListener('click', loadXML);\n    }\n\n    // Ensure save button is displayed.\n    saveButton = document.getElementById('saveButton');\n    if (saveButton != null) {\n        saveButton.style.display = 'inline';\n    }\n}\n\n/**\n * Once the DOM is loaded, set up the elements.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n\n    // Initialise elements\n    xml_title = document.getElementById(\"xml_title\");\n    xml_text = document.getElementById(\"xml_text\");\n\n\n    window.loadXML = function () {\n        loadXML();\n        //reload();\n    }\n});\n\n/**\n * Set the title.\n * @param {XMLDocument} xml The XML document.\n */\nfunction setTitle(xml: XMLDocument) {\n    me_title = xml.getElementsByTagName(me_title_s);\n    if (me_title == null) {\n        throw new Error(me_title_s + ' not found');\n    } else {\n        if (me_title.length != 1) {\n            throw new Error('Multiple ' + me_title_s + ' elements found');\n        } else {\n            title = me_title[0].childNodes[0].nodeValue as string;\n            title = title.trim();\n            console.log(\"Title=\" + title);\n            let e: HTMLElement | null = document.getElementById(\"title\");\n            if (e != null) {\n                e.innerHTML = title;\n            }\n        }\n    }\n}\n\n/**\n * Parse the XML.\n * @param {XMLDocument} xml \n */\nfunction parse(xml: XMLDocument) {\n\n    /**\n     * Set mesmer_xml start tag.\n     */\n    mesmerStartTag = \"\\n\";\n    let documentElement: HTMLElement = xml.documentElement;\n    if (documentElement == null) {\n        throw new Error(\"Document element not found\");\n    } else {\n        let tagName: string = documentElement.tagName;\n        mesmerStartTag += \"<\" + tagName;\n        console.log(tagName);\n        mesmerEndTag = getEndTag(tagName, \"\", true);\n        let first: boolean = true;\n        let pad = \" \".repeat(tagName.length + 2);\n        let names: string[] = documentElement.getAttributeNames();\n        names.forEach(function (name) {\n            let attribute = documentElement.getAttribute(name);\n            let na = `${name}=\"${attribute}\"`;\n            if (first) {\n                first = false;\n                mesmerStartTag += \" \" + na;\n            } else {\n                mesmerStartTag += \"\\n\" + pad + na;\n            }\n        });\n        mesmerStartTag += \">\";\n        //console.log(mesmerStartTag);\n    }\n\n    /**\n     *  Set title.\n     */\n    setTitle(xml);\n\n    /**\n     * Generate molecules table.\n     */\n    initMolecules(xml);\n    displayMoleculesTable();\n\n    /**\n     * Generate reactions table.\n     */\n    initReactions(xml);\n    displayReactionsTable();\n    displayReactionsDiagram();\n\n    /**\n     * Generate conditions table.\n     */\n    initConditions(xml);\n    displayConditions();\n\n    /**\n     * Generate parameters table.\n     */\n    initModelParameters(xml);\n    displayModelParameters();\n\n    /**\n     * Generate control table.\n     */\n    initControl(xml);\n    displayControl();\n}\n\nlet conditions: Conditions;\n\n/**\n * Parse xml to initialise conditions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initConditions(xml: XMLDocument): void {\n    console.log(Conditions.tagName);\n    let xml_conditions: Element = getSingularElement(xml, Conditions.tagName);\n    // Set conditions_title.\n    conditions_title = document.getElementById(\"conditions_title\");\n    if (conditions_title != null) {\n        conditions_title.innerHTML = \"Conditions\";\n    }\n    // BathGas\n    let xml_bathGas: Element = getSingularElement(xml_conditions, BathGas.tagName);\n    let attributes: Map<string, string> = getAttributes(xml_bathGas);\n    let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGas));\n    let bathGas: BathGas = new BathGas(attributes, moleculeID, molecules);\n    // PTs\n    let xml_PTs: Element = getSingularElement(xml_conditions, 'me:PTs');\n    let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTs.getElementsByTagName(PTpair.tagName);\n    // Process each PTpair.\n    let pTs: PTpair[] = [];\n    for (let i = 0; i < xml_PTPairs.length; i++) {\n        pTs.push(new PTpair(getAttributes(xml_PTPairs[i])));\n    }\n    conditions = new Conditions(getAttributes(xml_conditions), bathGas, new PTs(new Map<string, string>, pTs));\n}\n\nlet modelParameters: ModelParameters;\n\n/**\n * Parses xml to initialise modelParameters.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initModelParameters(xml: XMLDocument): void {\n    console.log(ModelParameters.tagName);\n    let xml_modelParameters: Element = getSingularElement(xml, ModelParameters.tagName);\n    // Set modelParameters_title.\n    modelParameters_title = document.getElementById(\"modelParameters_title\");\n    if (modelParameters_title != null) {\n        modelParameters_title.innerHTML = \"Model Parameters\";\n    }\n    // GrainSize\n    let xml_grainSize: Element = getSingularElement(xml_modelParameters, GrainSize.tagName);\n    let attributes: Map<string, string> = getAttributes(xml_grainSize);\n    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSize)));\n    let grainSize: GrainSize = new GrainSize(attributes, value);\n    // EnergyAboveTheTopHill\n    let xml_energyAboveTheTopHill: Element = getSingularElement(xml_modelParameters, EnergyAboveTheTopHill.tagName);\n    let energyAboveTheTopHill: EnergyAboveTheTopHill = new EnergyAboveTheTopHill(getAttributes(xml_energyAboveTheTopHill),\n        parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHill))));\n\n    modelParameters = new ModelParameters(grainSize, energyAboveTheTopHill);\n}\n\nlet control: Control;\n\n/**\n * Parses xml to initialise control.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initControl(xml: XMLDocument): void {\n    console.log(Control.tagName);\n    let xml_control: Element = getSingularElement(xml, Control.tagName);\n    // Set control_title.\n    let control_title = document.getElementById(\"control_title\");\n    if (control_title != null) {\n        control_title.innerHTML = \"Control\";\n    }\n    // me:testDOS\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestDOS.tagName);\n    let testDOS: TestDOS | undefined;\n    if (xml_testDOS.length == 1) {\n        testDOS = new TestDOS();\n    } else {\n        if (xml_testDOS.length > 1) {\n            console.warn(\"testDOS.length=\" + xml_testDOS.length);\n        }\n    }\n    // me:printSpeciesProfile\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintSpeciesProfile.tagName);\n    let printSpeciesProfile: PrintSpeciesProfile | undefined;\n    if (xml_printSpeciesProfile.length == 1) {\n        printSpeciesProfile = new PrintSpeciesProfile();\n    } else {\n        if (xml_printSpeciesProfile.length > 1) {\n            console.warn(\"printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n        }\n    }\n    // me:testMicroRates\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestMicroRates.tagName);\n    let testMicroRates: TestMicroRates | undefined;\n    if (xml_testMicroRates.length == 1) {\n        testMicroRates = new TestMicroRates();\n    } else {\n        if (xml_testMicroRates.length > 1) {\n            console.warn(\"testMicroRates.length=\" + xml_testMicroRates.length);\n        }\n    }\n    // me:testRateConstant\n    let xml_testRateConstant: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestRateConstant.tagName);\n    let testRateConstant: TestRateConstant | undefined;\n    if (xml_testRateConstant.length == 1) {\n        testRateConstant = new TestRateConstant();\n    } else {\n        if (xml_testRateConstant.length > 1) {\n            console.warn(\"testRateConstant.length=\" + xml_testRateConstant.length);\n        }\n    }\n    // me:printGrainDOS\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainDOS.tagName);\n    let printGrainDOS: PrintGrainDOS | undefined;\n    if (xml_printGrainDOS.length == 1) {\n        printGrainDOS = new PrintGrainDOS();\n    } else {\n        if (xml_printGrainDOS.length > 1) {\n            console.warn(\"printGrainDOS.length=\" + xml_printGrainDOS.length);\n        }\n    }\n    // me:printCellDOS\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellDOS.tagName);\n    let printCellDOS: PrintCellDOS | undefined;\n    if (xml_printCellDOS.length == 1) {\n        printCellDOS = new PrintCellDOS();\n    } else {\n        if (xml_printCellDOS.length > 1) {\n            console.warn(\"printCellDOS.length=\" + xml_printCellDOS.length);\n        }\n    }\n    // me:printReactionOperatorColumnSums\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorColumnSums.tagName);\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined;\n    if (xml_printReactionOperatorColumnSums.length == 1) {\n        printReactionOperatorColumnSums = new PrintReactionOperatorColumnSums();\n    } else {\n        if (xml_printReactionOperatorColumnSums.length > 1) {\n            console.warn(\"printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n        }\n    }\n    // me:printTunnellingCoefficients\n    let xml_printTunnellingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTunnellingCoefficients.tagName);\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined;\n    if (xml_printTunnellingCoefficients.length == 1) {\n        printTunnellingCoefficients = new PrintTunnellingCoefficients();\n    } else {\n        if (xml_printTunnellingCoefficients.length > 1) {\n            console.warn(\"printTunnellingCoefficients.length=\" + xml_printTunnellingCoefficients.length);\n        }\n    }\n    // me:printGrainkfE\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkfE.tagName);\n    let printGrainkfE: PrintGrainkfE | undefined;\n    if (xml_printGrainkfE.length == 1) {\n        printGrainkfE = new PrintGrainkfE();\n    } else {\n        if (xml_printGrainkfE.length > 1) {\n            console.warn(\"printGrainkfE.length=\" + xml_printGrainkfE.length);\n        }\n    }\n    // me:printGrainBoltzmann\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainBoltzmann.tagName);\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined;\n    if (xml_printGrainBoltzmann.length == 1) {\n        printGrainBoltzmann = new PrintGrainBoltzmann();\n    } else {\n        if (xml_printGrainBoltzmann.length > 1) {\n            console.warn(\"printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n        }\n    }\n    // me:printGrainkbE\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkbE.tagName);\n    let printGrainkbE: PrintGrainkbE | undefined;\n    if (xml_printGrainkbE.length == 1) {\n        printGrainkbE = new PrintGrainkbE();\n    } else {\n        if (xml_printGrainkbE.length > 1) {\n            console.warn(\"printGrainkbE.length=\" + xml_printGrainkbE.length);\n        }\n    }\n    // me:eigenvalues\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(Eigenvalues.tagName);\n    let eigenvalues: Eigenvalues | undefined;\n    if (xml_eigenvalues.length == 1) {\n        eigenvalues = new Eigenvalues(getAttributes(xml_eigenvalues[0]), parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0]))));\n    } else {\n        console.warn(\"eigenvalues.length=\" + xml_eigenvalues.length);\n    }\n    // me:hideInactive\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(HideInactive.tagName);\n    let hideInactive: HideInactive | undefined;\n    if (xml_hideInactive.length == 1) {\n        hideInactive = new HideInactive();\n    } else {\n        console.warn(\"hideInactive.length=\" + xml_hideInactive.length);\n    }\n    // me:diagramEnergyOffset\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(DiagramEnergyOffset.tagName);\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    if (xml_diagramEnergyOffset.length == 1) {\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffset = new DiagramEnergyOffset(getAttributes(xml_diagramEnergyOffset[0]), value);\n    } else {\n        console.warn(\"diagramEnergyOffset.length=\" + xml_diagramEnergyOffset.length);\n    }\n    control = new Control(getAttributes(xml_control), testDOS, printSpeciesProfile, testMicroRates, testRateConstant,\n        printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE,\n        printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset);\n}\n\n/**\n * Parses xml to initialise reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initReactions(xml: XMLDocument): void {\n    let reactionList_s: string = 'reactionList';\n    console.log(reactionList_s);\n    let xml_reactionList: Element = getSingularElement(xml, reactionList_s);\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    // Process each reaction.\n    if (xml_reactions_length == 0) {\n        //return;\n        throw new Error(\"No reactions: There should be at least 1!\");\n    }\n    // Set reactions_title.\n    reactions_title = document.getElementById(\"reactions_title\");\n    if (reactions_title != null) {\n        reactions_title.innerHTML = \"Reactions\";\n    }\n    for (let i = 0; i < xml_reactions_length; i++) {\n        let attributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionID = attributes.get(\"id\");\n        if (reactionID == null) {\n            throw new Error(\"reactionID is null\");\n        }\n        if (reactionID != null) {\n            console.log(\"id=\" + reactionID);\n            // Load reactants.\n            let reactants: Map<string, Reactant> = new Map([]);\n            let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            for (let j = 0; j < xml_reactants.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);                \n                let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                reactants.set(moleculeID, new Reactant(getAttributes(xml_molecule), twa, molecules));\n            }\n            // Load products.\n            let products: Map<string, Product> = new Map([]);\n            let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            for (let j = 0; j < xml_products.length; j++) {\n                let xml_molecule = getFirstElement(xml_products[j], Molecule.tagName);\n                let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                products.set(moleculeID, new Product(getAttributes(xml_molecule), twa, molecules));\n            }\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let mCRCMethod: MCRCMethod | undefined;\n            let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                let attributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                let name: string | undefined = attributes.get(\"name\");\n                if (name == null) {\n                    let type = attributes.get(\"xsi:type\");\n                    if (type != null) {\n                        if (type === MesmerILT.tagName) {\n                            let preExponential: PreExponential | undefined;\n                            let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                            if (xml_preExponential != null) {\n                                if (xml_preExponential[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_preExponential[0])));\n                                    preExponential = new PreExponential(getAttributes(xml_preExponential[0]), value);\n                                }\n                            }\n                            let activationEnergy: ActivationEnergy | undefined;\n                            let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                            if (xml_activationEnergy != null) {\n                                if (xml_activationEnergy[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_activationEnergy[0])));\n                                    activationEnergy = new ActivationEnergy(getAttributes(xml_activationEnergy[0]), value);\n                                }\n                            }\n                            let tInfinity: TInfinity | undefined;\n                            let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:TInfinity\");\n                            if (xml_tInfinity != null) {\n                                if (xml_tInfinity[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_tInfinity[0])));\n                                    tInfinity = new NInfinity(getAttributes(xml_tInfinity[0]), value);\n                                }\n                            }\n                            let nInfinity: NInfinity | undefined;\n                            let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(\"me:nInfinity\");\n                            if (xml_nInfinity != null) {\n                                if (xml_nInfinity[0] != null) {\n                                    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_nInfinity[0])));\n                                    nInfinity = new NInfinity(getAttributes(xml_nInfinity[0]), value);\n                                }\n                            }\n                            mCRCMethod = new MesmerILT(attributes, preExponential, activationEnergy, tInfinity, nInfinity);\n                        }\n                    }\n                } else {\n                    mCRCMethod = new MCRCMethod(attributes);\n                }\n            }\n            // Load transition state.\n            //console.log(\"Load  transition state...\");\n            let xml_transitionState: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(\n                'me:transitionState');\n            let transitionState: TransitionState | undefined;\n            if (xml_transitionState.length > 0) {\n                let xml_molecule: Element = xml_transitionState[0].getElementsByTagName('molecule')[0];\n                let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                transitionState = new TransitionState(getAttributes(xml_molecule), twa, molecules);\n                //let moleculeID: string = getAttribute(xml_molecule, \"ref\");\n                //console.log(\"transitionState moleculeID=\" + transitionState.molecule.getID());\n                //console.log(\"transitionState role=\" + transitionState.attributes.get(\"role\"));\n            }\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName('me:tunneling');\n            let tunneling: Tunneling | undefined;\n            if (xml_tunneling.length > 0) {\n                tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            }\n            let reaction = new Reaction(attributes, reactionID, reactants, products,\n                mCRCMethod, transitionState, tunneling);\n            reactions.set(reactionID, reaction);\n            //console.log(\"reaction=\" + reaction);\n        }\n    }\n}\n\n/**\n * Create a diagram.\n * @param {Map<string, Molecule>} molecules The molecules.\n * @param {Map<string, Reaction>} reactions The reactions.\n * @param {boolean} dark True for dark mode.\n * @returns {HTMLCanvasElement} The diagram.\n * @param {string} font The font to use.\n * @param {number} lw The line width of reactants, transition states and products.\n * @param {string} lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, molecules: Map<string, Molecule>,\n    reactions: Map<string, Reaction>, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: Set<string> = new Set();\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionState if there is one.\n        let transitionState: TransitionState | undefined = reaction.getTransitionState();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string = reaction.getReactantsLabel();\n        reactants.add(reactantsLabel);\n        if (products.has(reactantsLabel)) {\n            intProducts.add(reactantsLabel);\n        }\n        let energy: number = reaction.getReactantsEnergy();\n        energyMin = Math.min(energyMin, energy);\n        energyMax = Math.max(energyMax, energy);\n        energies.set(reactantsLabel, energy);\n        let productsLabel: string = reaction.getProductsLabel();\n        products.add(productsLabel);\n        energy = reaction.getProductsEnergy();\n        energyMin = Math.min(energyMin, energy);\n        energyMax = Math.max(energyMax, energy);\n        energies.set(productsLabel, energy);\n        if (!orders.has(reactantsLabel)) {\n            orders.set(reactantsLabel, i);\n            i++;\n        }\n        if (orders.has(productsLabel)) {\n            i--;\n            let j: number = get(orders, productsLabel);\n            // Move product to end and shift everything back.\n            orders.forEach(function (value, key) {\n                if (value > j) {\n                    orders.set(key, value - 1);\n                }\n            });\n            // Insert transition state.\n            if (transitionState != undefined) {\n                let tsn: string = transitionState.getRef();\n                transitionStates.add(tsn);\n                orders.set(tsn, i);\n                energy = transitionState.getMolecule().getEnergy();\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(tsn, energy);\n                i++;\n            }\n            orders.set(productsLabel, i);\n            i++\n        } else {\n            if (transitionState != undefined) {\n                let tsn: string = transitionState.getRef();\n                transitionStates.add(tsn);\n                orders.set(tsn, i);\n                energy = transitionState.getMolecule().getEnergy();\n                energyMin = Math.min(energyMin, energy);\n                energyMax = Math.max(energyMax, energy);\n                energies.set(tsn, energy);\n                i++;\n            }\n            orders.set(productsLabel, i);\n            i++;\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines.)\n        // The code is left here commented out for reference.\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n\n    let originalCanvasHeight = canvas.height;\n\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n\n\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let transitionState: TransitionState | undefined = reaction.getTransitionState();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string = reaction.getReactantsLabel();\n        let productsLabel: string = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (transitionState != undefined) {\n            let transitionStateLabel: string = transitionState.getRef();\n            let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                transitionStateInXY[1]);\n            let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n            drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                productInXY[0], productInXY[1]);\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let v: any;\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n/**\n * Display molecules table.\n */\nfunction displayMoleculesTable(): void {\n    if (molecules.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let moleculesTable = getTH([\n        \"Name\",\n        \"Energy<br>kJ/mol\",\n        \"Rotation constants<br>cm<sup>-1</sup>\",\n        \"Vibration frequencies<br>cm<sup>-1</sup>\"]);\n    molecules.forEach(function (molecule, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"molecule=\" + molecule);\n        let energyNumber: number = molecule.getEnergy();\n        let energy: string;\n        if (energyNumber == null) {\n            energy = \"\";\n        } else {\n            energy = energyNumber.toString();\n        }\n        //console.log(\"energy=\" + energy);\n        let rotationConstants: string = \"\";\n        let rotConsts: number[] | undefined = molecule.getRotationConstants();\n        if (rotConsts != undefined) {\n            rotationConstants = arrayToString(rotConsts, \" \");\n        }\n        let vibrationFrequencies: string = \"\";\n        let vibFreqs: number[] | undefined = molecule.getVibrationFrequencies();\n        if (vibFreqs != undefined) {\n            vibrationFrequencies = arrayToString(vibFreqs, \" \");\n        }\n        moleculesTable += getTR(getTD(id)\n            + getTD(getInput(\"number\", id + \"_energy\", \"setEnergy(this)\", energy))\n            + getTD(rotationConstants, true)\n            + getTD(vibrationFrequencies, true));\n    });\n    molecules_table = document.getElementById(\"molecules_table\");\n    if (molecules_table !== null) {\n        molecules_table.innerHTML = moleculesTable;\n    }\n}\n\n/**\n * Display reactions table.\n */\nfunction displayReactionsTable(): void {\n    if (reactions.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let reactionsTable = getTH([\"ID\", \"Reactants\", \"Products\", \"Transition State\",\n        \"PreExponential\", \"Activation Energy\", \"TInfinity\", \"NInfinity\"]);\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        let reactants: string = arrayToString(Array.from(reaction.reactants.keys()), \" \");\n        let products: string = arrayToString(Array.from(reaction.products.keys()), \" \");\n        let transitionState: string = \"\";\n        let preExponential: string = \"\";\n        let activationEnergy: string = \"\";\n        let tInfinity: string = \"\";\n        let nInfinity: string = \"\";\n        let ts: TransitionState | undefined = reaction.getTransitionState();\n        if (ts != undefined) {\n            let name: string | undefined = ts.attributes.get(\"name\");\n            if (name != null) {\n                transitionState = name;\n            }\n        }\n        let mCRCMethod: MCRCMethod | undefined = reaction.getMCRCMethod();\n        if (mCRCMethod != undefined) {\n            if (mCRCMethod instanceof MesmerILT) {\n                let mp: PreExponential | undefined = mCRCMethod.getPreExponential();\n                if (mp != undefined) {\n                    preExponential = mp.value.toString() + \" \"\n                        + mp.attributes.get(\"units\");\n                }\n                let ae: ActivationEnergy | undefined = mCRCMethod.getActivationEnergy();\n                if (ae != undefined) {\n                    activationEnergy = ae.value.toString() + \" \"\n                        + ae.attributes.get(\"units\");\n                }\n                let ti: TInfinity | undefined = mCRCMethod.getTInfinity();\n                if (ti != undefined) {\n                    tInfinity = ti.value.toString();\n                }\n                let ni: NInfinity | undefined = mCRCMethod.getNInfinity();\n                if (ni != undefined) {\n                    nInfinity = ni.value.toString();\n                }\n            } else {\n                if (mCRCMethod.attributes.get(\"name\") == \"RRKM\") {\n                } else {\n                    throw new Error(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                }\n            }\n        }\n        reactionsTable += getTR(getTD(id) + getTD(reactants) + getTD(products) + getTD(transitionState)\n            + getTD(preExponential, true) + getTD(activationEnergy, true) + getTD(tInfinity, true)\n            + getTD(nInfinity, true));\n        reactions_table = document.getElementById(\"reactions_table\");\n        if (reactions_table !== null) {\n            reactions_table.innerHTML = reactionsTable;\n        }\n    });\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 1) {\n        // Set reactions_diagram_title.\n        reactions_diagram_title = document.getElementById(\"reactions_diagram_title\");\n        if (reactions_diagram_title != null) {\n            reactions_diagram_title.innerHTML = \"Diagram\";\n        }\n        // Display the diagram.\n        let canvas: HTMLCanvasElement | null = document.getElementById(\"reactions_diagram\") as HTMLCanvasElement;\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, molecules, reactions, dark, font, lw, lwc);\n        }\n    }\n}\n\n/**\n * Display conditions.\n */\nfunction displayConditions(): void {\n    let bathGas_element: HTMLElement | null = document.getElementById(\"bathGas\");\n    if (bathGas_element != null) {\n        bathGas_element.innerHTML = \"Bath Gas \" + conditions.getBathGas().value;\n    }\n    let PTs_element: HTMLElement | null = document.getElementById(\"PT_table\");\n    let table: string = getTH([\"P\", \"T\"]);\n    if (PTs_element != null) {\n        conditions.getPTs().pTpairs.forEach(function (pTpair) {\n            table += getTR(getTD(pTpair.P.toString()) + getTD(pTpair.T.toString()));\n        });\n        PTs_element.innerHTML = table;\n    }\n}\n\n/**\n * Display modelParameters.\n */\nfunction displayModelParameters(): void {\n    let modelParameters_element: HTMLElement | null = document.getElementById(\"modelParameters_table\");\n    let table: string = getTH([\"Parameter\", \"Value\"]);\n    table += getTR(getTD(\"Grain Size\") + getTD(modelParameters.getGrainSize().value.toString()));\n    table += getTR(getTD(\"Energy Above The Top Hill\") + getTD(modelParameters.getEnergyAboveTheTopHill().toString()));\n\n    if (modelParameters_element != null) {\n        modelParameters_element.innerHTML = table;\n    }\n}\n\n/**\n * Display control.\n */\nfunction displayControl(): void {\n    let control_table_element: HTMLElement | null = document.getElementById(\"control_table\");\n    let table: string = getTH([\"Control\", \"Value\"]);\n    // TestDOS\n    let testDOS: TestDOS | undefined = control.getTestDOS();\n    if (testDOS != undefined) {\n        table += getTR(getTD(TestDOS.tagName) + getTD(\"\"));\n    }\n    // PrintSpeciesProfile\n    let printSpeciesProfile: PrintSpeciesProfile | undefined = control.getPrintSpeciesProfile();\n    if (printSpeciesProfile != undefined) {\n        table += getTR(getTD(PrintSpeciesProfile.tagName) + getTD(\"\"));\n    }\n    // TestMicroRates\n    let testMicroRates: TestMicroRates | undefined = control.getTestMicroRates();\n    if (testMicroRates != undefined) {\n        table += getTR(getTD(TestMicroRates.tagName) + getTD(\"\"));\n    }\n    // TestRateConstant\n    let testRateConstant: TestRateConstant | undefined = control.getTestRateConstant();\n    if (testRateConstant != undefined) {\n        table += getTR(getTD(TestRateConstant.tagName) + getTD(\"\"));\n    }\n    // PrintGrainDOS\n    let printGrainDOS: PrintGrainDOS | undefined = control.getPrintGrainDOS();\n    if (printGrainDOS != undefined) {\n        table += getTR(getTD(PrintGrainDOS.tagName) + getTD(\"\"));\n    }\n    // PrintCellDOS\n    let printCellDOS: PrintCellDOS | undefined = control.getPrintCellDOS();\n    if (printCellDOS != undefined) {\n        table += getTR(getTD(PrintCellDOS.tagName) + getTD(\"\"));\n    }\n    // PrintReactionOperatorColumnSums\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined = control.getPrintReactionOperatorColumnSums();\n    if (printReactionOperatorColumnSums != undefined) {\n        table += getTR(getTD(PrintReactionOperatorColumnSums.tagName) + getTD(\"\"));\n    }\n    // PrintTunnellingCoefficients\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined = control.getPrintTunnellingCoefficients();\n    if (printTunnellingCoefficients != undefined) {\n        table += getTR(getTD(PrintTunnellingCoefficients.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkfE\n    let printGrainkfE: PrintGrainkfE | undefined = control.getPrintGrainkfE();\n    if (printGrainkfE != undefined) {\n        table += getTR(getTD(PrintGrainkfE.tagName) + getTD(\"\"));\n    }\n    // PrintGrainBoltzmann\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined = control.getPrintGrainBoltzmann();\n    if (printGrainBoltzmann != undefined) {\n        table += getTR(getTD(PrintGrainBoltzmann.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkbE\n    let printGrainkbE: PrintGrainkbE | undefined = control.getPrintGrainkbE();\n    if (printGrainkbE != undefined) {\n        table += getTR(getTD(PrintGrainkbE.tagName) + getTD(\"\"));\n    }\n    // Eigenvalues\n    let eigenvalues: Eigenvalues | undefined = control.getEigenvalues();\n    if (eigenvalues != undefined) {\n        table += getTR(getTD(Eigenvalues.tagName) + getTD(eigenvalues.value.toString()));\n    }\n    // HideInactive\n    let hideInactive: HideInactive | undefined = control.getHideInactive();\n    if (hideInactive != undefined) {\n        table += getTR(getTD(HideInactive.tagName) + getTD(\"\"));\n    }\n    // DiagramEnergyOffset\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined = control.getDiagramEnergyOffset();\n    if (diagramEnergyOffset != undefined) {\n        table += getTR(getTD(DiagramEnergyOffset.tagName) + getTD(diagramEnergyOffset.value.toString()));\n    }\n    // Set the table.\n    if (control_table_element != null) {\n        control_table_element.innerHTML = table;\n    }\n}\n\n/**\n * Set the energy of a molecule when the energy input value is changed.\n * @param input The input element. \n */\nexport function setEnergy(input: HTMLInputElement): void {\n    let id_energy: string = input.id;\n    let moleculeID: string = id_energy.split(\"_\")[0];\n    let molecule: Molecule | undefined = molecules.get(moleculeID);\n    if (molecule != undefined) {\n        let inputValue: number = parseFloat(input.value);\n        if (!isNaN(inputValue)) {\n            molecule.setEnergy(inputValue);\n            console.log(\"Energy of \" + moleculeID + \" set to \" + inputValue);\n        } else {\n            alert(\"Energy input for \" + moleculeID + \" is not a number\");\n            let inputElement = document.getElementById(id_energy) as HTMLInputElement;\n            inputElement.value = molecule.getEnergy().toString();\n        }\n        //console.log(\"molecule=\" + molecule);\n    }\n}\n\n(window as any).setEnergy = setEnergy;\n\n/**\n * Save to XML file.\n */\nwindow.saveXML = function () {\n    console.log(\"saveXML\");\n\n    const pad: string = \"  \";\n    let level: number;\n    const padding2: string = pad.repeat(2);\n\n    // Create me.title.\n    let title_xml = \"\\n\" + pad + getTag(title, \"me:title\");\n\n    // Create moleculeList.\n    level = 2;\n    let moleculeList: string = \"\";\n    molecules.forEach(function (molecule, id) {\n        moleculeList += molecule.toXML(\"molecule\", pad, level);\n    });\n    moleculeList = getTag(moleculeList, \"moleculeList\", undefined, pad, true);\n\n    // Create reactionList.\n    level = 2;\n    let reactionList: string = \"\";\n    reactions.forEach(function (reaction, id) {\n        reactionList += reaction.toXML(pad, padding2);\n        //reactionList += reaction.toXML(\"reaction\", pad, level);\n    });\n    reactionList = getTag(reactionList, \"reactionList\", undefined, pad, true);\n\n    // Create me.Conditions\n    let xml_conditions: string = conditions.toXML(pad, pad);\n\n    // Create modelParameters\n    let xml_modelParameters: string = modelParameters.toXML(pad, pad);\n\n    // create me.control\n    let xml_control: string = control.toXML(pad, pad);\n\n    // Create a new Blob object from the data\n    let blob = new Blob([header, mesmerStartTag, title_xml, moleculeList, reactionList,\n        xml_conditions, xml_modelParameters, xml_control, mesmerEndTag],\n        { type: \"text/plain\" });\n\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    a.download = input_xml_filename; // Replace with your desired filename\n\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n\n}","/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>): string {\n    if (map == null) {\n        return \"\";\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(', ');\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter: string): string {\n    if (array == null) {\n        return \"\";\n    }\n    if (delimiter == null) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        r.push(parseFloat(s[i]));\n    }\n    return r;\n}\n\n/**\n * Is the string numeric in that it can be parsed as a float that is not a NaN?\n * @param {string} s The string.\n * @returns True if the string can be parsed as a float that is not a NaN and false otherwise.\n */\nexport function isNumeric(s: string): boolean {\n    return !isNaN(parseFloat(s));\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {\n    getSelfClosingTag }\nfrom \"./html\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param {Element} element The xml element to search in.\n * @returns {ChildNode} The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a ChildNode.\n * @param {ChildNode} node The node to get the nodeValue of.\n * @returns {string} The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: ChildNode): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param {string} tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param {string | undefined} padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(null, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }    \n}\n\n/**\n * A class for representing A Tag with attributes.\n * @param {Map<string, string>} attributes The attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        this.attributes.forEach((value, key) => {\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n        if (this.attributes) {\n            for (let [k, v] of this.attributes) {\n                s += ' ' + k + '=\"' + v.toString() + '\"';\n            }\n        }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: number) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} tagName The tag name.\n     * @param {number[]} values The values.\n     * @param {string} delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, tagName: string, values: number[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param {string} delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} tagName The tag name.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): void {\n        this.nodes.set(this.nodes.size, node);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} pad The pad (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        this.nodes.forEach((v) => {\n            if (v instanceof NodeWithNodes) {\n                s += (v as NodeWithNodes).toXML(pad, padding1);\n            } else if (v instanceof TagWithAttributes) {\n                s += (v as TagWithAttributes).toXML(padding1);\n            } else {\n                s += (v as Tag).toXML(padding1);\n            }\n            s += v.toXML(padding1);\n        });\n        return getTag(s, this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} padding The padding (optional).\n * @param {boolean} padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>, padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param {Element} element The element to get the attributes of.\n * @returns {Map<string, string>} The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param {XMLDocument | Element} xml The XML document or element.\n * @param {string} tagName The tag name.\n * @returns {Element} The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {;\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}\n\n/**\n * Convert XML to HTML.\n * @param {string} text The XML text.\n */\nexport function toHTML(text: string): string {\n    return text.replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(/  /g, \"&nbsp;&nbsp;\");\n}","/**\n * Create a table header row.\n * @param {string[]} headings The headings.\n * @returns {string} Table row with headings.\n */\nexport function getTH(headings: string[]): string {\n    var th = \"\";\n    for (let i = 0; i < headings.length; i++) {\n        th += \"<th>\" + headings[i] + \"</th>\";\n    }\n    return getTR(th);\n}\n\n/**\n * Create a table cell.\n * @param {string} x A cell for a table row.\n * @param {boolean} contentEditable If true then the cell is set to be editable.  \n * @returns {string} x wrapped in td tags.\n */\nexport function getTD(x: string, contentEditable: boolean = false): string {\n    let r: string = \"<td\";\n    if (contentEditable) {\n        r += \" contenteditable=\\\"true\\\"\";\n    }\n    r += \">\" + x + \"</td>\";\n    return r;\n}\n\n/**\n * Create a table row.\n * @param {string} x A row for a table.\n * @returns {string} x wrapped in tr tags.\n */\nexport function getTR(x: string): string {\n    return \"<tr>\" + x + \"</tr>\\n\";\n}\n\n/**\n * Create a table.\n * @param {string} x Table rows for a table.\n * @returns {string} x wrapped in table tags.\n */\nexport function getTable(x: string): string {\n    return \"<table>\" + x + \"</table>\";\n}\n\n/**\n * Create a div.\n * @param {string} x The content of the div.\n * @param {string | null} id The id of the div.\n * @param {string | null} html_class The class of the div.\n * @returns {string} x wrapped in div tags.\n */\nexport function getDiv(x: string, id: string | null, html_class: string | null): string {\n    let r: string = \"<div\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (html_class !== null) {\n        r += \" class=\\\"\" + html_class + \"\\\"\";\n    }\n    return r + \">\" + x + \"</div>\";\n}\n\n/**\n * Create a input.\n * @param {string} type The input type (e.g. text, number).\n * @param {string | null} id The id of the button.\n * @param {string | null} func The function called on a change.\n * @param {string | null} value The value of the input.\n * @returns {string} An input HTML element.\n */\nexport function getInput(type: string, id: string | null, func: string | null,\n    value : string | null): string {\n    let r: string = \"<input type=\\\"\" + type + \"\\\"\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (func !== null) {\n        r += \" onchange=\\\"\" + func + \"\\\"\";\n    }\n    if (value !== null) {\n        r += \" value=\\\"\" + value + \"\\\"\";\n    }\n    return r + \">\";\n}\n\n/**\n * Create a self closing tag.\n * @param {Map<string, string> | null} attributes The attributes.\n * @param {string} tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | null, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}","import {\n    getEndTag, getStartTag, getTag, TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode\n} from './xml.js';\n\nimport {\n    mapToString\n} from './util.js';\n\n/**\n * A class for representing an atom.\n * @param {Map<string, string>} attributes The attributes.\n * If there is no \"id\" or \"elementType\" key an error will be thrown.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * @param attributes The attributes. If there is no \"id\" or \"elementType\" key an error will be thrown.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Atom.tagName);\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            throw new Error('elementType is undefined');\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        return s + `)`;\n    }\n\n    /**\n     * @returns The id of the atom.\n     */\n    get id(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * @returns The element type of the atom.\n     */\n    get elementType(): string {\n        return this.attributes.get(\"elementType\") as string;\n    }\n}\n\n/**\n * A class for representing an atomic bond - a bond beteen two atoms.\n * @param {Map<string, string>} attributes The attributes.\n * @param {Atom} atomA One atom.\n * @param {Atom} atomB Another atom.\n * @param {string} order The order of the bond.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Bond.tagName);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let s = super.toString();\n        return s + `)`;\n    }\n}\n\n\n/**\n * A class for representing a property.\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * The property value.\n     */\n    property: NumberNode | NumberArrayNode;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {NumberNode | NumberArrayWithAttributes} property The property.\n     */\n    constructor(attributes: Map<string, string>, property: NumberNode | NumberArrayNode) {\n        super(attributes, Property.tagName);\n        this.property = property;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + ` (${this.property.toString()}))`;\n    }\n\n    /**\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string | undefined = undefined;\n        if (pad != undefined) {\n            if (padding != undefined) {\n                padding1 = padding + pad;\n            }\n        }\n        return getTag(this.property.toXML(padding1), Property.tagName, this.attributes, padding, true);\n    }\n}\n\n/**\n * Represents the deltaEDown class.\n */\nexport class DeltaEDown extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n}\n\n/**\n * A class for representing an energy transfer model.\n */\nexport class EnergyTransferModel extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * The DeltaEDown.\n     */\n    deltaEDowns: DeltaEDown[];\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {DeltaEDown[]} deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        this.deltaEDowns = deltaEDowns;\n    }\n\n    /**\n     * @param padding - Optional padding string for formatting the XML output.\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string = \"\";\n        if (padding != undefined) {\n            if (pad != undefined) {\n                padding1 = padding + pad;\n            }\n        }\n        // deltaEDowns\n        let deltaEDowns_xml: string = \"\";\n        this.deltaEDowns.forEach(d => {\n            deltaEDowns_xml += d.toXML(padding1);\n        });\n        if (pad == undefined) {\n            return getTag(deltaEDowns_xml, EnergyTransferModel.tagName,\n                this.attributes, padding, false);\n        } else {\n            return getTag(deltaEDowns_xml, EnergyTransferModel.tagName,\n                this.attributes, padding, true);\n        }\n    }\n}\n\n/**\n * A class for representing a method for calculating the density of states.\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n    }\n}\n\n/**\n * A class for representing a bondRef.\n */\nexport class BondRef extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly xmlTagName: string = \"me:bondRef\";\n\n    /**\n     * For storing the bondRef.\n     */\n    bondRef: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.xmlTagName);\n        this.bondRef = bondRef;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString + ` (${this.bondRef}))`;\n    }\n\n    /**\n     * @param padding The padding (Optional).\n     * @returns A tag representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = getStartTag(BondRef.xmlTagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        s += this.bondRef;\n        return s + getEndTag(BondRef.xmlTagName);\n    }\n}\n\n/**\n * A class for representing a PotentialPoint.\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    static readonly xmlTagName: string = \"me:PotentialPoint\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.xmlTagName);\n    }\n}\n\n/**\n * A class for representing a HinderedRotorPotential.\n */\nexport class HinderedRotorPotential extends TagWithAttributes {\n\n    static readonly xmlTagName: string = \"me:HinderedRotorPotential\";\n\n    PotentialPoint: PotentialPoint[];\n\n    /**\n     * @param attributes The attributes.\n     * @param PotentialPoint The PotentialPoint.\n     */\n    constructor(attributes: Map<string, string>, PotentialPoint: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.xmlTagName);\n        this.PotentialPoint = PotentialPoint;\n    }\n\n}\n\n\n/**\n * A class for representing the extra DOSC method.\n */\nexport class ExtraDOSCMethod extends TagWithAttributes {\n\n    static readonly xmlTagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * The bondRef.\n     */\n    bondRef: BondRef;\n\n    /**\n     * The HinderedRotorPotential.\n     */\n    hinderedRotorPotential: HinderedRotorPotential;\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param HinderedRotorPotential The HinderedRotorPotential.\n     */\n    constructor(attributes: Map<string, string>, bondRef: BondRef, HinderedRotorPotential: HinderedRotorPotential) {\n        super(attributes, ExtraDOSCMethod.xmlTagName);\n        this.bondRef = bondRef;\n        this.hinderedRotorPotential = HinderedRotorPotential;\n    }\n}\n\n\n/**\n * A class for representing a molecule.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    // The molecule ID.\n    id: string;\n    // Atoms\n    atoms: Map<string, Atom>;\n    // Bonds\n    bonds: Map<string, Bond>;\n    // Properties\n    properties: Map<string, Property>;\n    // EnergyTransferModel\n    energyTransferModel?: EnergyTransferModel;\n    // DOSCMethod\n    dOSCMethod?: DOSCMethod;\n\n    /**\n     * Create a molecule.\n     * @param {Map<string, string>} attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param {Map<string, Atom>} atoms A Map of atoms with keys as ids.\n     * @param {Map<string, Bond>} bonds A Map of bonds with. The keys combine the ids of the two bonded atoms.\n     * @param {Map<string, Property>} properties A map of properties.\n     * @param {EnergyTransferModel | null} energyTransferModel The energy transfer model.\n     * @param {DOSCMethod | null} dOSCMethod The method for calculating density of states.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms: Map<string, Atom>,\n        bonds: Map<string, Bond>,\n        properties: Map<string, Property>,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod) {\n        super(attributes, Molecule.tagName);\n        let id: string | undefined = this.attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        this.id = id;\n        this.atoms = atoms;\n        this.bonds = bonds;\n        this.properties = properties;\n        this.energyTransferModel = energyTransferModel;\n        this.dOSCMethod = dOSCMethod;\n    }\n\n    /** \n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = `Molecule(id(${this.getID()}), `;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            r += `description(${description}), `;\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active != undefined) {\n            r += `active(${active}), `;\n        }\n        if (this.atoms.size > 0) {\n            r += `atoms(${mapToString(this.atoms)}), `;\n        }\n        if (this.bonds.size > 0) {\n            r += `bonds(${mapToString(this.bonds)}), `;\n        }\n        if (this.properties.size > 0) {\n            r += `properties(${mapToString(this.properties)}), `;\n        }\n        if (this.energyTransferModel) {\n            r += `energyTransferModel(${this.energyTransferModel.toString()}), `;\n        }\n        if (this.dOSCMethod) {\n            r += `dOSCMethod(${this.dOSCMethod.toString()}), `;\n        }\n        return r + `)`;\n    }\n\n    /**\n     * @return The id of the molecule.\n     */\n    getID(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * Gets the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        return this.attributes.get(\"description\");\n    }\n\n    /**\n     * Gets the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(\"active\");\n        if (active != undefined) {\n            return true;\n        }\n        return active;\n    }\n\n    /**\n     * @returns {number} The energy of the molecule or zero if the energy is not set.\n     * @throws An error if \"me.ZPE\" is a property, but is not mapped to a PropertyScalar.\n     */\n    getEnergy(): number {\n        let zpe: Property | undefined = this.properties.get('me:ZPE');\n        if (zpe == undefined) {\n            return 0;\n        }\n        if (zpe.property instanceof NumberNode) {\n            return zpe.property.value;\n        } else {\n            throw new Error(\"Expected a PropertyScalar but got a PropertyArray and not sure how to handle that.\");\n        }\n    }\n\n    /**\n     * Set the Energy of the molecule.\n     * @param {number} energy The energy of the molecule in kcal/mol.\n     */\n    setEnergy(energy: number) {\n        let property: Property | undefined = this.properties.get('me:ZPE');\n        if (property == undefined) {\n            throw new Error(\"No me.ZPE property found\");\n        }\n        if (property.property instanceof NumberArrayNode) {\n            throw new Error(\"Unexpected NumberArrayNode.\");\n        } else {\n            property.property.value = energy;\n        }\n    }\n\n    /**\n     * Get the RotationConstants of the molecule.\n     * @returns The RotationConstants of the molecule.\n     */\n    getRotationConstants(): number[] | undefined {\n        let property: Property | undefined = this.properties.get('me:rotConsts');\n        if (property != undefined) {\n            if (property.property != null) {\n                if (property.property instanceof NumberNode) {\n                    return [property.property.value];\n                } else {\n                    return property.property.values;\n                }\n            } else {\n                return undefined;\n            }\n        }\n        return property;\n    }\n\n    /**\n     * Get the VibrationFrequencies of the molecule.\n     * @returns The VibrationFrequencies of the molecule.\n     */\n    getVibrationFrequencies(): number[] | undefined {\n        let property: Property | undefined = this.properties.get('me:vibFreqs');\n        if (property != undefined) {\n            if (property.property instanceof NumberNode) {\n                return [property.property.value];\n            } else if (property.property instanceof NumberArrayNode) {\n                return property.property.values;\n            } else {\n                return undefined;\n            }\n        }\n        return property;\n    }\n\n    /**\n     * @param {string} tagName The tag name.\n     * @param {string} pad The pad (Optional).\n     * @param {number} level The level of padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(tagName: string, pad?: string, level?: number): string {\n        // Padding\n        let padding0: string = \"\";\n        let padding1: string = \"\";\n        let padding2: string = \"\";\n        let padding3: string = \"\";\n        if (pad != undefined && level != undefined) {\n            padding0 = pad.repeat(level);\n            padding1 = padding0 + pad;\n            padding2 = padding1 + pad;\n            padding3 = padding2 + pad;\n        }\n        // Atoms\n        let atoms_xml: string = \"\";\n        for (let atom of this.atoms.values()) {\n            atoms_xml += atom.toXML(padding2);\n        }\n        if (this.atoms.size > 1) {\n            if (atoms_xml != \"\") {\n                atoms_xml = getTag(atoms_xml, \"atomArray\", undefined, padding1, true);\n            }\n        }\n        // Bonds\n        let bonds_xml: string = \"\";\n        for (let bond of this.bonds.values()) {\n            bonds_xml += bond.toXML(padding2);\n        }\n        if (bonds_xml != \"\") {\n            bonds_xml = getTag(bonds_xml, \"bondArray\", undefined, padding1, true);\n        }\n        // Properties\n        let properties_xml: string = \"\";\n        this.properties.forEach(property => {\n            let property_xml: string = property.property.toXML(padding3);\n            properties_xml += getTag(property_xml, Property.tagName, property.attributes, padding2, true);\n        });\n        if (this.properties.size > 1) {\n            if (properties_xml != \"\") {\n                properties_xml = getTag(properties_xml, \"propertyList\", undefined, padding1, true);\n            }\n        }\n        // EnergyTransferModel\n        let energyTransferModel_xml: string = \"\";\n        if (this.energyTransferModel) {\n            energyTransferModel_xml = this.energyTransferModel.toXML(pad, padding1);\n        }\n        // DOSCMethod\n        let dOSCMethod_xml: string = \"\";\n        if (this.dOSCMethod) {\n            dOSCMethod_xml = this.dOSCMethod.toXML(padding1);\n        }\n        return getTag(atoms_xml + bonds_xml + properties_xml + energyTransferModel_xml + dOSCMethod_xml,\n            tagName, this.attributes, padding0, true);\n    }\n}\n\n/**\n * A class for representing a MoleculeRef.\n */\nexport class MoleculeRef extends NodeWithNodes {\n\n    /**\n     * A reference to the molecules.\n     */\n    molecules: Map<string, Molecule>\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} tagName The tag name.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, tagName);\n        this.nodes.set(0, molecule);\n        this.molecules = molecules;\n    }\n\n    getMoleculeAbb(): TagWithAttributes {\n        return this.nodes.get(0) as TagWithAttributes;\n    }\n\n    /**\n     * A convenience method to get the ref (the molecule ID) of the transition state.\n     * @returns The ref of the transition state.\n     */\n    getRef(): string {\n        let s: string | undefined = this.getMoleculeAbb().attributes.get(\"ref\");\n        if (s == null) {\n            console.log(this.getMoleculeAbb().toString());\n            throw new Error('Attribute \"ref\" is undefined.');\n        }\n        return s;\n    }\n\n    /**\n     * A convenience method to get the molecule.\n     * @returns {Molecule} The molecule.\n     * @throws An error if the molecule is not found.\n     */\n    getMolecule(): Molecule {\n        let ref: string = this.getRef();\n        let molecule: Molecule | undefined = this.molecules.get(ref);\n        if (molecule == null) {\n            throw new Error(`Molecule with ref ${ref} not found in molecules`);\n        }\n        return molecule;\n    }\n}","import {\n    mapToString\n} from './util.js';\n\nimport {\n    Molecule, MoleculeRef\n} from './molecule.js';\n\nimport {\n    TagWithAttributes, NodeWithNodes, NumberNode, getTag\n} from './xml.js';\n\n\n\n/**\n * A class for representing a reactant - a molecule that reacts in a reaction.\n */\nexport class Reactant extends MoleculeRef {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, Reactant.tagName, molecule, molecules);\n    }\n}\n\n/**\n * A class for representing a product - a molecule produced in a reaction.\n */\nexport class Product extends MoleculeRef {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, Product.tagName, molecule, molecules);\n    }\n\n}\n\n/**\n * A class for representing a transition state - a molecule that is a transition state in a reaction.\n */\nexport class TransitionState extends MoleculeRef {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, Product.tagName, molecule, molecules);\n    }\n}\n\n\n/**\n * A class for representing the Arrhenius pre-exponential factor.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * A class for representing the Arrhenius activation energy factor.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * A class for representing the reference temperature.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * A class for representing the modified Arrhenius parameter factor.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * A class for representing tunneling.\n */\nexport class Tunneling extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n}\n\n/**\n * A class for representing the MCRCMethod specifications.\n * Extended classes indicate how microcanonical rate constant is to be treated.\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * A class for representing the inverse Laplace transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PreExponential | undefined} preExponential The pre-exponential factor.\n     * @param {ActivationEnergy | undefined} activationEnergy The activation energy.\n     * @param {TInfinity | undefined} tInfinity The TInfinity.\n     * @param {NInfinity | undefined} nInfinity The nInfinity.\n     */\n    constructor(attributes: Map<string, string>, preExponential: PreExponential | undefined,\n        activationEnergy: ActivationEnergy | undefined, tInfinity: TInfinity | undefined,\n        nInfinity: NInfinity | undefined) {\n        super(attributes, \"me:MesmerILT\");\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(preExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(activationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(tInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(nInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n}\n\n/**\n * A class for representing the Zhu-Nakamura crossing MCRCMethod.\n */\nexport class ZhuNakamuraCrossing extends MCRCMethod {\n    harmonicReactantDiabat_FC: number;\n    harmonicReactantDiabat_XO: number;\n    harmonicProductDiabat_DE: number;\n    exponentialProductDiabat_A: number;\n    exponentialProductDiabat_B: number;\n    exponentialProductDiabat_DE: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} harmonicReactantDiabat_FC The harmonic reactant diabatic FC.\n     * @param {number} harmonicReactantDiabat_XO The harmonic reactant diabatic XO.\n     * @param {number} harmonicProductDiabat_DE The harmonic product diabatic DE.\n     * @param {number} exponentialProductDiabat_A The exponential product diabatic A.\n     * @param {number} exponentialProductDiabat_B The exponential product diabatic B.\n     * @param {number} exponentialProductDiabat_DE The exponential product diabatic DE.\n     */\n    constructor(attributes: Map<string, string>,\n        harmonicReactantDiabat_FC: number,\n        harmonicReactantDiabat_XO: number,\n        harmonicProductDiabat_DE: number,\n        exponentialProductDiabat_A: number,\n        exponentialProductDiabat_B: number,\n        exponentialProductDiabat_DE: number) {\n        super(attributes);\n        this.harmonicReactantDiabat_FC = harmonicReactantDiabat_FC;\n        this.harmonicReactantDiabat_XO = harmonicReactantDiabat_XO;\n        this.harmonicProductDiabat_DE = harmonicProductDiabat_DE;\n        this.exponentialProductDiabat_A = exponentialProductDiabat_A;\n        this.exponentialProductDiabat_B = exponentialProductDiabat_B;\n        this.exponentialProductDiabat_DE = exponentialProductDiabat_DE;\n    }\n    toString() {\n        return `ZhuNakamuraCrossing(${super.toString()}, ` +\n            `harmonicReactantDiabat_FC(${this.harmonicReactantDiabat_FC.toString()}), ` +\n            `harmonicReactantDiabat_XO(${this.harmonicReactantDiabat_XO.toString()}), ` +\n            `harmonicProductDiabat_DE(${this.harmonicProductDiabat_DE.toString()}), ` +\n            `exponentialProductDiabat_A(${this.exponentialProductDiabat_A.toString()}), ` +\n            `exponentialProductDiabat_B(${this.exponentialProductDiabat_B.toString()}), ` +\n            `exponentialProductDiabat_DE(${this.exponentialProductDiabat_DE.toString()}))`;\n    }\n}\n\n/**\n * A class for representing the sum of states.\n * @param {string} units The units of energy.\n * @param {boolean} angularMomentum The angular momentum attribute.\n * @param {boolean} noLogSpline The no log spline attribute.\n * @param {SumOfStatesPoint[]} sumOfStatesPoints The sum of states points.\n */\n/*\nexport class SumOfStates extends NumberWithAttributes {\n    units: string;\n    angularMomentum: boolean;\n    noLogSpline: boolean;\n    sumOfStatesPoints: SumOfStatesPoint[];\n    constructor(units: string, angularMomentum: boolean, noLogSpline: boolean, sumOfStatesPoints: SumOfStatesPoint[]) {\n        this.units = units;\n        this.angularMomentum = angularMomentum;\n        this.noLogSpline = noLogSpline;\n        this.sumOfStatesPoints = sumOfStatesPoints;\n    }\n    toString() {\n        return `SumOfStates(` +\n            `units(${this.units}), ` +\n            `angularMomentum(${this.angularMomentum.toString()}), ` +\n            `noLogSpline(${this.noLogSpline.toString()}), ` +\n            `sumOfStatesPoints(${arrayToString(this.sumOfStatesPoints, \" \")}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a sum of states point.\n * @param {number} value The value of the point.\n * @param {number} energy The energy of the point.\n * @param {number} angMomMag The angular momentum magnitude of the point.\n */\n/*\nexport class SumOfStatesPoint {\n    value: number;\n    energy: number;\n    angMomMag: number;\n    constructor(value: number, energy: number, angMomMag: number) {\n        this.value = value;\n        this.energy = energy;\n        this.angMomMag = angMomMag;\n    }\n    toString() {\n        return `SumOfStatesPoint(` +\n            `value(${this.value}), ` +\n            `energy(${this.energy.toString()}), ` +\n            `angMomMag(${this.angMomMag.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing the DefinedSumOfStates MCRCMethod.\n * @param {string} name The name or xsi:type of the method.\n * @param {SumOfStates} sumOfStates The sum of states.\n */\n/*\nexport class DefinedSumOfStates extends MCRCMethod {\n    sumOfStates: SumOfStates;\n\n    constructor(name: string, sumOfStates: SumOfStates) {\n        super(name);\n        this.sumOfStates = sumOfStates;\n    }\n    toString() {\n        return `DefinedSumOfStates(${super.toString()}, ` +\n            `sumOfStates(${this.sumOfStates.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The index for the nodes. \n     */\n    index : Map<string, number>;\n    \n    /**\n     * The id of the reaction. This is also stored in the attributes, but is hee for convenience...\n     */\n    id: string;\n\n    /**\n     * The reactants in the reaction.\n     */\n    reactants: Map<string, Reactant>;\n\n    /**\n     * The products of the reaction.\n     */\n    products: Map<string, Product>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} id The id of the reaction.\n     * @param {Map<string, Reactant>} reactants The reactants in the reaction.\n     * @param {Map<string, Product>} products The products of the reaction.\n     * @param {MCRCMethod | undefined} mCRCMethod The MCRCMethod (optional).\n     * @param {TransitionState | undefined} transitionState The transition state (optional).\n     * @param {Tunneling | undefined} tunneling The tunneling (optional).\n     */\n    constructor(attributes: Map<string, string>, id: string,\n        reactants: Map<string, Reactant>, products: Map<string, Product>,\n        mCRCMethod?: MCRCMethod | undefined,\n        transitionState?: TransitionState | undefined,\n        tunneling?: Tunneling | undefined) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map<string, number>();\n        this.id = id;\n        this.reactants = reactants;\n        this.products = products;\n        if (mCRCMethod != undefined) {\n            this.addNode(mCRCMethod);\n            this.index.set(mCRCMethod.tagName, this.index.size);\n        }\n        if (transitionState) {\n            this.addNode(transitionState);\n            this.index.set(transitionState.tagName, this.index.size);\n        }\n        if (tunneling) {\n            this.addNode(tunneling);\n            this.index.set(tunneling.tagName, this.index.size);\n        }\n    }\n\n    getTransitionState(): TransitionState | undefined {\n        let i: number | undefined = this.index.get(TransitionState.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TransitionState;\n    }\n\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as MCRCMethod;\n    }\n\n    getTunneling(): Tunneling | undefined {\n        let i: number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Tunneling;\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return Array.from(this.reactants.values()).map(reactant => reactant.getRef()).join(' + ');\n    }\n\n    /**\n     * Get the combined energy of the reactants.\n     * @returns The combined energy of the reactants.\n     */\n    getReactantsEnergy(): number {\n        return Array.from(this.reactants.values()).map(reactant => reactant.getMolecule().getEnergy()).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return Array.from(this.products.values()).map(product => product.getRef()).join(' + ');\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(): number {\n        return Array.from(this.products.values()).map(product => product.getMolecule().getEnergy()).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n}","/**\n * Draw a horizontal line and add labels.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {number} strokewidth The width of the line.\n * @param {number} x0 The start x-coordinate of the line.\n * @param {number} y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    TagWithAttributes, NodeWithNodes, NumberNode, StringNode\n} from \"./xml.js\";\n\nimport {\n    Molecule, MoleculeRef\n} from \"./molecule.js\";\n\n/**\n * A class for representing a Pressure and Temperature pair.\n */\nexport class PTpair extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"PTpair\";\n\n    /**\n     * The pressure also stored as a string in the attributes.\n     */\n    P: number;\n\n    /**\n     * The temperature also stored as a string in the attributes.\n     */\n    T: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PTpair.tagName);\n        let p: string | undefined = attributes.get(\"P\");\n        if (p) {\n            this.P = parseFloat(p);\n        } else {\n            throw new Error(\"P is undefined\");\n        }\n        let t: string | undefined = attributes.get(\"T\");\n        if (t) {\n            this.T = parseFloat(t);\n        } else {\n            throw new Error(\"T is undefined\");\n        }\n    }\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * The PT pairs.\n     */\n    pTpairs: PTpair[]\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PTpair[]} PTpairs The PT pairs.\n     */\n    constructor(attributes: Map<string, string>, pTpairs: PTpair[]) {\n        super(attributes, PTs.tagName);\n        pTpairs.forEach((v) => {\n            this.addNode(v);\n        });\n        this.pTpairs = pTpairs;\n    }\n}\n\n/**\n * A class for representing a bath gas reaction molecule.\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * The molecules.\n     */\n    molecules: Map<string, Molecule>\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} moleculeID The moleculeID.\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, moleculeID: string,\n        molecules: Map<string, Molecule>) {\n        super(attributes, BathGas.tagName, moleculeID);\n        this.molecules = molecules;\n    }\n\n    getMolecule(): Molecule {\n        return this.molecules.get(this.value) as Molecule;\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * @param {BathGas} bathGas The bath gas.\n     * @param {PTpair} pTs The Pressure and Temperature pairs.\n     */\n    constructor(attributes: Map<string, string>, bathGas: BathGas, pTs: PTs) {\n        super(attributes, Conditions.tagName);\n        this.addNode(bathGas);\n        this.addNode(pTs);\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas {\n        return this.nodes.get(0) as BathGas;\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs {\n        return this.nodes.get(1) as PTs;\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for measures of grain size.\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, GrainSize.tagName, value);\n    }\n    toString() {\n        return `GrainSize(${super.toString()})`;\n    }\n}\n\n/**\n * A class for measures of grain size.\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    constructor(grainSize: GrainSize, energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        super(new Map<string, string>(), ModelParameters.tagName);\n        this.addNode(grainSize);\n        this.addNode(energyAboveTheTopHill);\n    }\n\n    /**\n     * @returns The grain size.\n     */\n    getGrainSize(): GrainSize {\n        return this.nodes.get(0) as GrainSize;\n    }\n\n    /**\n     * @returns The energy above the top hill.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill {\n        return this.nodes.get(1) as EnergyAboveTheTopHill;\n    }\n}","import {\n    Tag, NodeWithNodes, NumberNode\n} from \"./xml\";\n\n/**\n * A class for me:testDOS.\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printSpeciesProfile.\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for me:testMicroRates.\n */\nexport class TestMicroRates extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    constructor() {\n        super(TestMicroRates.tagName);\n    }\n}\n\n/**\n * A class for me:testRateConstant.\n */\nexport class TestRateConstant extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstant\";\n\n    constructor() {\n        super(TestRateConstant.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainDOS.\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printCellDOS.\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printReactionOperatorColumnSums.\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for me:printTunnellingCoefficients.\n */\nexport class PrintTunnellingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnellingCoefficients\";\n\n    constructor() {\n        super(PrintTunnellingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainkfE.\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainBoltzmann.\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainkbE.\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for me:eigenvalues.\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for me:hideInactive.\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for me:diagramEnergyOffset.\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n    \n    /**\n     * @param attributes The attributes.\n     * @param testDOS The testDOS.\n     * @param printSpeciesProfile The printSpeciesProfile.\n     * @param testMicroRates The testMicroRates.\n     * @param testRateConstant T\n     * @param printGrainDOS The printGrainDOS.\n     * @param printCellDOS The printCellDOS.\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     * @param printTunnellingCoefficients The printTunnellingCoefficients.\n     * @param printGrainkfE The printGrainkfE.\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     * @param printGrainkbE The printGrainkbE.\n     * @param eigenvalues The eigenvalues.\n     * @param hideInactive The hideInactive.\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    constructor(attributes: Map<string,string>, testDOS?: TestDOS, printSpeciesProfile?: PrintSpeciesProfile, \n        testMicroRates?: TestMicroRates, testRateConstant?: TestRateConstant, printGrainDOS?: PrintGrainDOS, \n        printCellDOS?: PrintCellDOS, printReactionOperatorColumnSums?: PrintReactionOperatorColumnSums, \n        printTunnellingCoefficients?: PrintTunnellingCoefficients, printGrainkfE?: PrintGrainkfE, \n        printGrainBoltzmann?: PrintGrainBoltzmann, printGrainkbE?: PrintGrainkbE, eigenvalues?: Eigenvalues, \n        hideInactive?: HideInactive, diagramEnergyOffset?: DiagramEnergyOffset) {\n        super(attributes, Control.tagName);\n        this.index = new Map<string, number>();\n        if (testDOS != undefined) {\n            this.addNode(testDOS);\n            this.index.set(TestDOS.tagName, this.index.size);\n        }\n        if (printSpeciesProfile != undefined) {\n            this.addNode(printSpeciesProfile);\n            this.index.set(PrintSpeciesProfile.tagName, this.index.size);\n        }\n        if (testMicroRates != undefined) {\n            this.addNode(testMicroRates);\n            this.index.set(TestMicroRates.tagName, this.index.size);\n        }\n        if (testRateConstant != undefined) {\n            this.addNode(testRateConstant);\n            this.index.set(TestRateConstant.tagName, this.index.size);\n        }\n        if (printGrainDOS != undefined) {\n            this.addNode(printGrainDOS);\n            this.index.set(PrintGrainDOS.tagName, this.index.size);\n        }\n        if (printCellDOS != undefined) {\n            this.addNode(printCellDOS);\n            this.index.set(PrintCellDOS.tagName, this.index.size);\n        }\n        if (printReactionOperatorColumnSums != undefined) {\n            this.addNode(printReactionOperatorColumnSums);\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.index.size);\n        }\n        if (printTunnellingCoefficients != undefined) {\n            this.addNode(printTunnellingCoefficients);\n            this.index.set(PrintTunnellingCoefficients.tagName, this.index.size);\n        }\n        if (printGrainkfE != undefined) {\n            this.addNode(printGrainkfE);\n            this.index.set(PrintGrainkfE.tagName, this.index.size);\n        }\n        if (printGrainBoltzmann != undefined) {\n            this.addNode(printGrainBoltzmann);\n            this.index.set(PrintGrainBoltzmann.tagName, this.index.size);\n        }\n        if (printGrainkbE != undefined) {\n            this.addNode(printGrainkbE);\n            this.index.set(PrintGrainkbE.tagName, this.index.size);\n        }\n        if (eigenvalues != undefined) {\n            this.addNode(eigenvalues);\n            this.index.set(Eigenvalues.tagName, this.index.size);\n        }\n        if (hideInactive != undefined) {\n            this.addNode(hideInactive);\n            this.index.set(HideInactive.tagName, this.index.size);\n        }\n        if (diagramEnergyOffset != undefined) {\n            this.addNode(diagramEnergyOffset);\n            this.index.set(DiagramEnergyOffset.tagName, this.index.size);\n        }\n    }\n\n    getTestDOS(): TestDOS | undefined {\n        const index = this.index.get(TestDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestDOS;\n        }\n        return undefined;\n    }\n\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        const index = this.index.get(PrintSpeciesProfile.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    getTestMicroRates(): TestMicroRates | undefined {\n        const index = this.index.get(TestMicroRates.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    getTestRateConstant(): TestRateConstant | undefined {\n        const index = this.index.get(TestRateConstant.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestRateConstant;\n        }\n        return undefined;\n    }\n\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        const index = this.index.get(PrintGrainDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        const index = this.index.get(PrintCellDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        const index = this.index.get(PrintReactionOperatorColumnSums.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    getPrintTunnellingCoefficients(): PrintTunnellingCoefficients | undefined {\n        const index = this.index.get(PrintTunnellingCoefficients.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintTunnellingCoefficients;\n        }\n        return undefined;\n    }\n\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        const index = this.index.get(PrintGrainkfE.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        const index = this.index.get(PrintGrainBoltzmann.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        const index = this.index.get(PrintGrainkbE.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    getEigenvalues(): Eigenvalues | undefined {\n        const index = this.index.get(Eigenvalues.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    getHideInactive(): HideInactive | undefined {\n        const index = this.index.get(HideInactive.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as HideInactive;\n        }\n        return undefined;\n    }\n\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        const index = this.index.get(DiagramEnergyOffset.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n}"],"names":[],"version":3,"file":"index.8b3c27a1.js.map","sourceRoot":"/__parcel_source_root/"}