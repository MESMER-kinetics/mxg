{"mappings":"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","sources":["<anon>","src/ts/app.ts","src/ts/util.ts","src/ts/xml.ts","src/ts/html.ts","src/ts/molecule.ts","src/ts/reaction.ts","src/ts/canvas.ts","src/ts/conditions.ts","src/ts/modelParameters.ts","src/ts/control.ts","src/ts/mesmer.ts"],"sourcesContent":["//import * as $3Dmol from '3dmol';\n/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */ function $dcf293d9ee452407$export$3988ae62b71be9a3(map, key) {\n    if (!map.has(key)) throw new Error(`Key ${key} not found in map`);\n    return map.get(key);\n}\nfunction $dcf293d9ee452407$export$bd2782c820638828(min, range, newMin, newRange, value) {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return (value - min) * newRange / (range + 0.0) + newMin;\n}\nfunction $dcf293d9ee452407$export$dc22ec7f8e0b9ac(map, delimiter) {\n    if (map == null) return \"\";\n    if (delimiter == undefined) delimiter = \", \";\n    return Array.from(map.entries()).map(([key, value])=>`${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$4323cc4280d5be7(array, delimiter) {\n    if (delimiter == undefined) delimiter = \", \";\n    return array.map((value)=>value == null ? \"null\" : value.toString()).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$736cc24a423eb64d(set, delimiter) {\n    if (delimiter == undefined) delimiter = \", \";\n    return Array.from(set).map((value)=>value == null ? \"null\" : value.toString()).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$8cfbaad830aa9e0a(s) {\n    let r = [];\n    for(let i = 0; i < s.length; i++)if ($dcf293d9ee452407$export$e90fb89750dba83f(s[i])) r.push(parseFloat(s[i]));\n    return r;\n}\nfunction $dcf293d9ee452407$export$e90fb89750dba83f(s) {\n    if (s === \"\") return false;\n    return !isNaN(Number(s));\n}\n\n\n/**\n * Remove a top level element.\n * @param id The id of the element to remove.\n */ function $2cda23d1e44619db$export$cd7f480d6b8286c3(id) {\n    let e = document.getElementById(id);\n    if (e != null) e.parentNode?.removeChild(e);\n}\nfunction $2cda23d1e44619db$export$8b2cd46c11844202({ content: content, buttonLabel: buttonLabel, buttonFontSize: buttonFontSize = \"\", boundary: boundary = {\n    marginLeft: \"\",\n    marginTop: \"\",\n    marginBottom: \"\",\n    marginRight: \"\"\n}, level: level = {\n    marginLeft: \"\",\n    marginTop: \"\",\n    marginBottom: \"\",\n    marginRight: \"\"\n}, contentDivId: contentDivId = \"\", contentDivClassName: contentDivClassName = \"\" }) {\n    let contentDiv = $2cda23d1e44619db$export$331ff980f0d45cff(boundary);\n    contentDiv.id = contentDivId;\n    contentDiv.className = contentDivClassName;\n    let button = document.createElement(\"button\");\n    button.id = contentDivId + \"Button\";\n    button.className = \"collapsible\";\n    button.innerText = `${buttonLabel} \\u{25BC}`;\n    button.addEventListener(\"click\", function() {\n        button.innerText = button.innerText.includes(\"\\u25BC\") ? `${buttonLabel} \\u{25B2}` : `${buttonLabel} \\u{25BC}`;\n    });\n    button.style.fontSize = buttonFontSize;\n    Object.assign(button.style, level);\n    contentDiv.appendChild(button);\n    contentDiv.appendChild(content);\n    return contentDiv;\n}\nfunction $2cda23d1e44619db$export$2883f21c1f82e07d() {\n    var collapsibleElements = document.getElementsByClassName(\"collapsible\");\n    for(var i = 0; i < collapsibleElements.length; i++){\n        // Remove existing event listener\n        collapsibleElements[i].removeEventListener(\"click\", $2cda23d1e44619db$var$toggleCollapsible);\n        // Add new event listener\n        collapsibleElements[i].addEventListener(\"click\", $2cda23d1e44619db$var$toggleCollapsible);\n    }\n}\n/**\n * For toggling the collapsible content.\n */ function $2cda23d1e44619db$var$toggleCollapsible() {\n    this.classList.toggle(\"active\");\n    let contentDiv = this.nextElementSibling;\n    if (contentDiv.style.display === \"block\") contentDiv.style.display = \"none\";\n    else contentDiv.style.display = \"block\";\n}\nfunction $2cda23d1e44619db$export$4e9ec2b27757d9dd(type, id, boundary, level, func, value, labelContent, inputFontsize, labelFontsize) {\n    let input = $2cda23d1e44619db$export$cef1adc173ab7099(type, id, boundary, func, value, inputFontsize);\n    Object.assign(input.style, boundary);\n    let label = $2cda23d1e44619db$export$f2839682b8c07f35(labelContent, boundary, labelFontsize);\n    label.htmlFor = id;\n    Object.assign(label.style, boundary);\n    let container = $2cda23d1e44619db$export$78253536c0178a32(level);\n    container.appendChild(label);\n    container.appendChild(input);\n    return container;\n}\nfunction $2cda23d1e44619db$export$cef1adc173ab7099(type, id, boundary, func, value, inputFontsize) {\n    let input = $2cda23d1e44619db$export$d80fffb1deb3b97e(type, id, boundary);\n    input.onchange = func;\n    input.value = value;\n    if (inputFontsize != undefined) input.style.fontSize = inputFontsize;\n    $2cda23d1e44619db$export$d43d96a9a8ad3e51(input);\n    return input;\n}\nfunction $2cda23d1e44619db$export$d80fffb1deb3b97e(type, id, boundary) {\n    let input = document.createElement(\"input\");\n    input.type = type;\n    input.id = id;\n    Object.assign(input.style, boundary);\n    return input;\n}\nfunction $2cda23d1e44619db$export$ff083c49da8fe0f9(attributes, tagName) {\n    let s = \"<\" + tagName;\n    if (attributes) for (let [key, value] of attributes)s += \" \" + key + '=\"' + value + '\"';\n    return s + \" />\";\n}\nfunction $2cda23d1e44619db$export$d43d96a9a8ad3e51(input, minSize) {\n    if (minSize == undefined) minSize = 4;\n    input.style.width = input.value.length + minSize + \"ch\";\n}\nfunction $2cda23d1e44619db$export$fdd146df37959fe8(input, minSize) {\n    if (minSize == undefined) minSize = 6;\n    input.style.width = input.value.length + minSize + \"ch\";\n}\nfunction $2cda23d1e44619db$export$b89bf4b169286865(options, name, id, boundary) {\n    let selectElement = document.createElement(\"select\");\n    options.forEach((option)=>{\n        selectElement.name = name;\n        selectElement.id = id;\n        let optionElement = document.createElement(\"option\");\n        optionElement.value = option;\n        optionElement.text = option;\n        selectElement.appendChild(optionElement);\n    });\n    Object.assign(selectElement.style, boundary);\n    return selectElement;\n}\nfunction $2cda23d1e44619db$export$cc4306e505fa54b1(textContent, options, name, id, boundary) {\n    let div = document.createElement(\"div\");\n    let label = $2cda23d1e44619db$export$f2839682b8c07f35(textContent, boundary);\n    div.appendChild(label);\n    let selectElement = document.createElement(\"select\");\n    div.appendChild(selectElement);\n    options.forEach((option)=>{\n        selectElement.name = name;\n        selectElement.id = id;\n        let optionElement = document.createElement(\"option\");\n        optionElement.value = option;\n        optionElement.text = option;\n        selectElement.appendChild(optionElement);\n    });\n    Object.assign(selectElement.style, boundary);\n    return div;\n}\nfunction $2cda23d1e44619db$export$9b6d6ca62970729f(textContent, boundary) {\n    let button = document.createElement(\"button\");\n    button.textContent = textContent;\n    Object.assign(button.style, boundary);\n    return button;\n}\nfunction $2cda23d1e44619db$export$331ff980f0d45cff(boundary) {\n    let div = document.createElement(\"div\");\n    Object.assign(div.style, boundary);\n    return div;\n}\nfunction $2cda23d1e44619db$export$78253536c0178a32(boundary) {\n    let div = $2cda23d1e44619db$export$331ff980f0d45cff(boundary);\n    div.style.display = \"flex\";\n    return div;\n}\nfunction $2cda23d1e44619db$export$f2839682b8c07f35(textContent, boundary, fontsize) {\n    let label = document.createElement(\"label\");\n    Object.assign(label.style, boundary);\n    label.textContent = textContent;\n    if (fontsize != undefined) //console.log(\"fontsize=\" + fontsize);\n    label.style.fontSize = fontsize;\n    return label;\n}\n\n\nfunction $6648a11f147a5c05$export$735ee1799fd02602(xml, name) {\n    let v = xml.getAttribute(name);\n    if (!v) throw new Error(name + \" attribute not found\");\n    return v;\n}\nfunction $6648a11f147a5c05$export$91e73a91db22e6a2(element, tagName) {\n    let el = element.getElementsByTagName(tagName)[0];\n    if (el == null) throw new Error(tagName + \" element not found\");\n    return el;\n}\nfunction $6648a11f147a5c05$export$4e07613bf412feb7(element) {\n    let cn = element.childNodes;\n    if (cn == null) throw new Error(\"Element has no childNodes\");\n    return cn[0];\n}\nfunction $6648a11f147a5c05$export$13cb40e9b656ab9e(node) {\n    let nodeValue = node.nodeValue;\n    if (nodeValue == null) throw new Error(\"nodeValue is null\");\n    return nodeValue;\n}\nfunction $6648a11f147a5c05$export$433c819efd6b1ea5(e) {\n    let s;\n    let firstChildNode = $6648a11f147a5c05$export$4e07613bf412feb7(e);\n    if (firstChildNode) s = $6648a11f147a5c05$export$13cb40e9b656ab9e(firstChildNode).trim();\n    else s = \"\";\n    return s;\n}\nclass $6648a11f147a5c05$export$3288d34c523a1192 {\n    /**\n     * @param tagName The tag name.\n     */ constructor(tagName){\n        this.tagName = tagName;\n    }\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */ toXML(padding) {\n        let s = (0, $2cda23d1e44619db$export$ff083c49da8fe0f9)(undefined, this.tagName);\n        if (padding) return \"\\n\" + padding + s;\n        return s;\n    }\n}\nclass $6648a11f147a5c05$export$ca4ceee82ec565dc extends $6648a11f147a5c05$export$3288d34c523a1192 {\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, tagName){\n        super(tagName);\n        this.attributes = attributes;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        let r = this.tagName + `(`;\n        if (this.attributes) this.attributes.forEach((value, key)=>{\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */ toXML(padding) {\n        let s = \"\";\n        if (padding != undefined) s += \"\\n\" + padding;\n        s += \"<\" + this.tagName;\n        for (let [k, v] of this.attributes)s += \" \" + k + '=\"' + v.toString() + '\"';\n        return s + \" />\";\n    }\n}\nclass $6648a11f147a5c05$export$8f67221c6fb2ad09 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName);\n        this.value = value;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$82583fad49645fc9 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName);\n        this.value = value;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$38d8ebe2767f8865 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, tagName, values, delimiter){\n        super(attributes, tagName);\n        /**\n     * The delimiter of the values.\n     */ this.delimiter = \",\";\n        this.values = values;\n        if (delimiter != undefined) this.delimiter = delimiter;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */ setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$bd431b64ad3b0433 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */ constructor(attributes, tagName){\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */ addNode(node) {\n        this.nodes.set(this.nodes.size, node);\n        return this.nodes.size - 1;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        let s = super.toString();\n        this.nodes.forEach((v, k)=>{\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(pad, padding) {\n        let padding1;\n        if (pad != undefined && padding != undefined) padding1 = padding + pad;\n        let s = \"\";\n        if (this.nodes.size > 0) {\n            this.nodes.forEach((v)=>{\n                if (v instanceof $6648a11f147a5c05$export$bd431b64ad3b0433) s += v.toXML(pad, padding1);\n                else if (v instanceof $6648a11f147a5c05$export$ca4ceee82ec565dc) s += v.toXML(padding1);\n                else s += v.toXML(padding1);\n            });\n            return $6648a11f147a5c05$export$dad497fe1f6e27c0(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s = (0, $2cda23d1e44619db$export$ff083c49da8fe0f9)(this.attributes, this.tagName);\n            if (padding != undefined) return \"\\n\" + padding + s;\n            return s;\n        }\n    }\n}\nfunction $6648a11f147a5c05$export$2cd488e9ab180ce2(tagName, attributes, padding) {\n    let s = \"\";\n    if (padding != undefined) s += \"\\n\" + padding;\n    s += \"<\" + tagName;\n    if (attributes) for (let [k, v] of attributes)s += \" \" + k + '=\"' + v.toString() + '\"';\n    return s + \">\";\n}\nfunction $6648a11f147a5c05$export$34b7e1ae786b72b0(tagName, padding, padValue) {\n    let s = \"\";\n    if (padValue) {\n        if (padding != undefined) s += \"\\n\" + padding;\n    }\n    return s + \"</\" + tagName + \">\";\n}\nfunction $6648a11f147a5c05$export$dad497fe1f6e27c0(content, tagName, attributes, padding, padValue) {\n    let startTag = $6648a11f147a5c05$export$2cd488e9ab180ce2(tagName, attributes, padding);\n    let endTag = $6648a11f147a5c05$export$34b7e1ae786b72b0(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\nfunction $6648a11f147a5c05$export$fe94072fee8a6976(element) {\n    let attributeNames = element.getAttributeNames();\n    let attributes = new Map();\n    attributeNames.forEach(function(attributeName) {\n        let attributeValue = element.getAttribute(attributeName);\n        if (attributeValue != null) attributes.set(attributeName, attributeValue);\n    });\n    return attributes;\n}\nfunction $6648a11f147a5c05$export$b7531b8ff18dc588(xml, tagName) {\n    let e = xml.getElementsByTagName(tagName);\n    if (e.length != 1) throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    return e[0];\n}\n\n\n\n\nclass $7cb8c0739b32549c$export$80986e6afdd7e0cb extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"atom\";\n    }\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     * If there is no \"id\" then \"this.id\" is set to the \"elementType\".\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName);\n        let elementType = attributes.get(\"elementType\");\n        if (elementType == undefined) throw new Error(\"elementType is undefined\");\n        this.elementType = elementType;\n        let id = attributes.get(\"id\");\n        if (id == undefined) id = this.elementType;\n        this.id = id;\n    }\n}\nclass $7cb8c0739b32549c$export$9cea715eceba39a0 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"atomArray\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */ constructor(attributes, atoms){\n        super(attributes, $7cb8c0739b32549c$export$9cea715eceba39a0.tagName);\n        atoms.forEach((atom)=>{\n            this.nodes.set(this.nodes.size, atom);\n        });\n    }\n}\nclass $7cb8c0739b32549c$export$153327fc99ac0c53 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"bond\";\n    }\n    static{\n        /**\n     * The key for the atomRefs2 attribute.\n     */ this.s_atomRefs2 = \"atomRefs2\";\n    }\n    static{\n        /**\n     * The key for the id attribute.\n     */ this.s_id = \"id\";\n    }\n    static{\n        /**\n     * The key for the order attribute.\n     */ this.s_order = \"order\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$153327fc99ac0c53.tagName);\n        let atomRefs2 = attributes.get($7cb8c0739b32549c$export$153327fc99ac0c53.s_atomRefs2);\n        if (atomRefs2 == undefined) throw new Error($7cb8c0739b32549c$export$153327fc99ac0c53.s_atomRefs2 + \" is undefined!\");\n        this.atomRefs2 = atomRefs2;\n    }\n    /**\n     * @param atomRefs2 The atomRefs2 to set.\n     */ setAtomRefs2(atomRefs2) {\n        this.atomRefs2 = atomRefs2;\n        this.attributes.set($7cb8c0739b32549c$export$153327fc99ac0c53.s_atomRefs2, atomRefs2);\n    }\n    /**\n     * @returns The attribute value referred to by \"id\" or undefined.\n     */ getId() {\n        return this.attributes.get($7cb8c0739b32549c$export$153327fc99ac0c53.s_id);\n    }\n    /**\n     * @param id The id to set the attribute value referred to by \"id\".\n     */ setId(id) {\n        this.attributes.set($7cb8c0739b32549c$export$153327fc99ac0c53.s_id, id);\n    }\n    /**\n     * @returns The attribute value referred to by \"order\" as a number or undefined.\n     */ getOrder() {\n        let order = this.attributes.get($7cb8c0739b32549c$export$153327fc99ac0c53.s_order);\n        if (order != undefined) return parseFloat(order);\n    }\n    /**\n     * @param order The order to set the attribute value referred to by \"order\".\n     */ setOrder(order) {\n        this.attributes.set($7cb8c0739b32549c$export$153327fc99ac0c53.s_order, order.toString());\n    }\n}\nclass $7cb8c0739b32549c$export$746fba2e30d93fe6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"bondArray\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bonds A Map of bonds with keys as ids.\n     */ constructor(attributes, bonds){\n        super(attributes, $7cb8c0739b32549c$export$746fba2e30d93fe6.tagName);\n        this.bonds = bonds;\n        bonds.forEach((bond)=>{\n            this.nodes.set(this.nodes.size, bond);\n        });\n    }\n    /**\n     * @param i The index of the bond.\n     * @returns The bond at the given index.\n     * @throws Error if this.bonds has no such index.\n     */ getBond(i) {\n        return this.bonds[i];\n    }\n    /**\n     * @returns The bonds.\n     */ getBonds() {\n        return this.bonds;\n    }\n    /**\n     * Set the bond at the given index.\n     * @param i The index.\n     * @param bond The bond.\n     * @throws Error if this.bonds has no such index.\n     */ setBond(i, bond) {\n        this.bonds[i] = bond;\n        this.nodes.set(i, bond);\n    }\n    /**\n     * Adds a bond to the array.\n     * @param bond The bond to add.\n     */ addBond(bond) {\n        this.bonds.push(bond);\n        this.nodes.set(this.nodes.size, bond);\n    }\n    /**\n     * @param i The index of the bond to remove.\n     */ removeBond(i) {\n        this.bonds.splice(i, 1);\n        this.nodes.delete(i);\n    }\n    /**\n     * Get a set of all the bond ids.\n     */ getBondIds() {\n        let bondIds = new Set();\n        this.bonds.forEach((bond)=>{\n            bondIds.add(bond.getId());\n        });\n        return bondIds;\n    }\n}\nclass $7cb8c0739b32549c$export$d29b345ea2be5072 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"scalar\";\n    }\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$d29b345ea2be5072.tagName, value);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits = this.attributes.get($7cb8c0739b32549c$export$d29b345ea2be5072.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) //console.log('Units are not the same, changing units...');\n                this.attributes.set($7cb8c0739b32549c$export$d29b345ea2be5072.s_units, units);\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$9f93a3fdf2490572 extends (0, $6648a11f147a5c05$export$38d8ebe2767f8865) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"array\";\n    }\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, values, delimiter){\n        super(attributes, $7cb8c0739b32549c$export$9f93a3fdf2490572.tagName, values, delimiter);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits = this.attributes.get($7cb8c0739b32549c$export$9f93a3fdf2490572.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set($7cb8c0739b32549c$export$9f93a3fdf2490572.s_units, units);\n                    console.log(\"Units changed from \" + existingUnits + \" to \" + units);\n                }\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$41b04b3a73e7216d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"property\";\n    }\n    static{\n        /**\n     * The key for the dictRef attribute.\n     */ this.s_dictRef = \"dictRef\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, $7cb8c0739b32549c$export$41b04b3a73e7216d.tagName);\n        let dictRef = attributes.get($7cb8c0739b32549c$export$41b04b3a73e7216d.s_dictRef);\n        if (dictRef == undefined) throw new Error($7cb8c0739b32549c$export$41b04b3a73e7216d.s_dictRef + \" is undefined!\");\n        this.dictRef = dictRef;\n        if (property) this.nodes.set(0, property);\n    }\n    /**\n     * @returns The property.\n     */ getProperty() {\n        return this.nodes.get(0);\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        this.nodes.set(0, property);\n    }\n}\nclass $7cb8c0739b32549c$export$95174cf0748f45cd extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:ZPE\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n    /**\n     * @param units The units.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"wavenumber\", \"kcal/mol\", \"Hartree\", \"au\"].\n     */ setUnits(units) {\n        this.getProperty().updateUnits(units);\n    }\n}\nclass $7cb8c0739b32549c$export$1288989e9be37590 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:frequenciesScaleFactor\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$2762c8fbc03043ca extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:vibFreqs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$984abe26ded13ee0 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:rotConsts\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$a3772f6eb527275b extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:MW\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$22995ecd2bdeb2 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:imFreqs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$4e0d1ad7ad6a0802 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"propertyList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */ constructor(attributes, properties){\n        super(attributes, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        this.index = new Map();\n        if (properties != undefined) properties.forEach((property)=>{\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */ getProperty(dictRef) {\n        let i = this.index.get(dictRef);\n        if (i != undefined) return this.nodes.get(i);\n        else throw new Error(\"Property \" + dictRef + \" does not exist\");\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        let i = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log(\"Property \" + property.dictRef + \" already exists, updating...\");\n            this.nodes.set(i, property);\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$16fc56ab40b12b45 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:deltaEDown\";\n    }\n    static{\n        /**\n     * The key for the bathGas attribute.\n     */ this.s_bathGas = \"bathGas\";\n    }\n    static{\n        /**\n     * The key for the units attribute.\n     */ this.s_units = \"units\";\n    }\n    static{\n        /**\n     * The key for the lower attribute.\n     */ this.s_lower = \"lower\";\n    }\n    static{\n        /**\n     * The key for the upper attribute.\n     */ this.s_upper = \"upper\";\n    }\n    static{\n        /**\n     * The key for the stepsize attribute.\n     */ this.s_stepsize = \"stepsize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$16fc56ab40b12b45.tagName, value);\n    }\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */ getBathGas() {\n        return this.attributes.get($7cb8c0739b32549c$export$16fc56ab40b12b45.s_bathGas);\n    }\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */ setBathGas(bathGas) {\n        this.attributes.set($7cb8c0739b32549c$export$16fc56ab40b12b45.s_bathGas, bathGas);\n    }\n    /**\n     * @returns The units of the DeltaEDown.\n     */ getUnits() {\n        return this.attributes.get($7cb8c0739b32549c$export$16fc56ab40b12b45.s_units);\n    }\n    /**\n     * @param units The units of the DeltaEDown.\n     */ setUnits(units) {\n        this.attributes.set($7cb8c0739b32549c$export$16fc56ab40b12b45.s_units, units);\n    }\n    /**\n     * @returns The lower of the DeltaEDown.\n     */ getLower() {\n        return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, $7cb8c0739b32549c$export$16fc56ab40b12b45.s_lower));\n    }\n    /**\n     * @param lower The lower of the DeltaEDown.\n     */ setLower(lower) {\n        this.attributes.set($7cb8c0739b32549c$export$16fc56ab40b12b45.s_lower, lower.toString());\n    }\n    /**\n     * @returns The upper of the DeltaEDown.\n     */ getUpper() {\n        return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, $7cb8c0739b32549c$export$16fc56ab40b12b45.s_upper));\n    }\n    /**\n     * @param upper The upper of the DeltaEDown.\n     */ setUpper(upper) {\n        this.attributes.set($7cb8c0739b32549c$export$16fc56ab40b12b45.s_upper, upper.toString());\n    }\n    /**\n     * @returns The stepsize of the DeltaEDown.\n     */ getStepsize() {\n        return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, $7cb8c0739b32549c$export$16fc56ab40b12b45.s_stepsize));\n    }\n    /**\n     * @param stepsize The stepsize of the DeltaEDown.\n     */ setStepsize(stepsize) {\n        this.attributes.set($7cb8c0739b32549c$export$16fc56ab40b12b45.s_stepsize, stepsize.toString());\n    }\n    /**\n     * @param value The value of the DeltaEDown.\n     */ setValue(value) {\n        this.value = value;\n    }\n}\nclass $7cb8c0739b32549c$export$499950da20810ac9 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:energyTransferModel\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */ constructor(attributes, deltaEDowns){\n        super(attributes, $7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (deltaEDowns != undefined) deltaEDowns.forEach((deltaEDown)=>{\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n    /**\n     * @returns The DeltaEDowns.\n     */ getDeltaEDowns() {\n        let deltaEDowns = [];\n        this.nodes.forEach((node)=>{\n            if (node instanceof $7cb8c0739b32549c$export$16fc56ab40b12b45) deltaEDowns.push(node);\n        });\n        return deltaEDowns;\n    }\n    /**\n     * @param deltaEDowns The DeltaEDowns.\n     */ setDeltaEDowns(deltaEDowns) {\n        this.nodes.clear();\n        deltaEDowns.forEach((deltaEDown)=>{\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */ getDeltaEDown(index) {\n        if (index < 0 || index >= this.nodes.size) throw new Error(\"index out of range\");\n        return this.nodes.get(index);\n    }\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */ setDeltaEDown(index, deltaEDown) {\n        this.nodes.set(index, deltaEDown);\n    }\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */ addDeltaEDown(deltaEDown) {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\nclass $7cb8c0739b32549c$export$bbdce6c921702068 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:DOSCMethod\";\n    }\n    static{\n        /**\n     * The key for the \"xsi:type\" attribute value.\n     */ this.s_xsi_type = \"xsi:type\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (attributes.get($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type) == undefined) {\n            let name = attributes.get(\"name\");\n            if (name == undefined) throw new Error(\"Neither xsi:type or name are defined.\");\n            else attributes.set($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type, name);\n        }\n    }\n    /**\n     * @returns The xsi:type.\n     */ getXsiType() {\n        return this.attributes.get($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type);\n    }\n    /**\n     * @param xsiType The xsi:type.\n     */ setXsiType(xsiType) {\n        this.attributes.set($7cb8c0739b32549c$export$bbdce6c921702068.s_xsi_type, xsiType);\n    }\n}\nclass $7cb8c0739b32549c$export$aef8e5ad5552fd72 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:bondRef\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */ constructor(attributes, bondRef){\n        super(attributes, $7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, bondRef);\n    }\n}\nclass $7cb8c0739b32549c$export$86ca5149fcde8feb extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PotentialPoint\";\n    }\n    static{\n        /**\n     * The key angle attribute.\n     */ this.s_angle = \"angle\";\n    }\n    static{\n        /**\n     * The key potential attribute.\n     */ this.s_potential = \"potential\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$86ca5149fcde8feb.tagName);\n        let angle = attributes.get($7cb8c0739b32549c$export$86ca5149fcde8feb.s_angle);\n        if (angle == undefined) throw new Error($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential + \" is undefined!\");\n        this.angle = parseFloat(angle);\n        let potential = attributes.get($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential);\n        if (potential == undefined) throw new Error($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential + \" is undefined!\");\n        this.potential = parseFloat(potential);\n    }\n    /**\n     * @returns The angle.\n     */ getAngle() {\n        return this.angle;\n    }\n    /**\n     * @param angle The angle of the PotentialPoint.\n     */ setAngle(angle) {\n        this.angle = angle;\n        this.attributes.set($7cb8c0739b32549c$export$86ca5149fcde8feb.s_angle, angle.toString());\n    }\n    /**\n     * @returns The potential.\n     */ getPotential() {\n        return this.potential;\n    }\n    /**\n     * @param potential The potential of the PotentialPoint.\n     */ setPotential(potential) {\n        this.potential = potential;\n        this.attributes.set($7cb8c0739b32549c$export$86ca5149fcde8feb.s_potential, potential.toString());\n    }\n}\nclass $7cb8c0739b32549c$export$9b8e857b9a081d2 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:HinderedRotorPotential\";\n    }\n    static{\n        /**\n     * The permitted formats.\n     */ this.formats = [\n            \"numerical\",\n            \"analytical\"\n        ];\n    }\n    static{\n        /**\n     * The permitted units.\n     */ this.units = [\n            \"kJ/mol\",\n            \"cm-1\",\n            \"Hartree\"\n        ];\n    }\n    static{\n        /**\n     * The key for the format attribute value.\n     */ this.s_format = \"format\";\n    }\n    static{\n        /**\n     * The key for the units attribute value.\n     */ this.s_units = \"units\";\n    }\n    static{\n        /**\n     * The key for the expansionSize attribute value.\n     */ this.s_expansionSize = \"expansionSize\";\n    }\n    static{\n        /**\n     * The key for the useSineTerms attribute value.\n     */ this.s_useSineTerms = \"useSineTerms\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param potentialPoints The PotentialPoints.\n     */ constructor(attributes, potentialPoints){\n        super(attributes, $7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        let format = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_format);\n        if (format == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_format + \" is undefined!\");\n        this.format = format;\n        let units = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_units);\n        if (units == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_units + \" is undefined!\");\n        this.units = units;\n        if (potentialPoints != undefined) potentialPoints.forEach((p)=>{\n            this.nodes.set(this.nodes.size, p);\n        });\n        let expansionSize = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_expansionSize);\n        if (expansionSize == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_expansionSize + \" is undefined!\");\n        this.expansionSize = parseFloat(expansionSize);\n        let useSineTerms = attributes.get($7cb8c0739b32549c$export$9b8e857b9a081d2.s_useSineTerms);\n        if (useSineTerms == undefined) throw new Error($7cb8c0739b32549c$export$9b8e857b9a081d2.s_useSineTerms + \" is undefined!\");\n        this.useSineTerms = useSineTerms == \"yes\";\n    }\n    /**\n     * @returns The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */ getFormat() {\n        return this.format;\n    }\n    /**\n     * @param format The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */ setFormat(format) {\n        this.format = format;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_format, format);\n    }\n    /**\n     * @returns The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */ getUnits() {\n        return this.units;\n    }\n    /**\n     * @param units The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */ setUnits(units) {\n        this.units = units;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_units, units);\n    }\n    /**\n     * @returns The expansionSize of the HinderedRotorPotential.\n     */ getExpansionSize() {\n        return this.expansionSize;\n    }\n    /**\n     * @param expansionSize The expansionSize of the HinderedRotorPotential.\n     */ setExpansionSize(expansionSize) {\n        this.expansionSize = expansionSize;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_expansionSize, expansionSize.toString());\n    }\n    /**\n     * @returns The useSineTerms of the HinderedRotorPotential.\n     */ getUseSineTerms() {\n        return this.useSineTerms;\n    }\n    /**\n     * @param useSineTerms The useSineTerms of the HinderedRotorPotential.\n     */ setUseSineTerms(useSineTerms) {\n        this.useSineTerms = useSineTerms;\n        this.attributes.set($7cb8c0739b32549c$export$9b8e857b9a081d2.s_useSineTerms, useSineTerms ? \"yes\" : \"no\");\n    }\n    /**\n     * @returns The potential point with the given index.\n     */ getPotentialPoint(i) {\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the potential point at the given index.\n     * @param i The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */ setPotentialPoint(i, p) {\n        this.nodes.set(i, p);\n    }\n    /**\n     * Sets the potential points.\n     * @param potentialPoints The potential points.\n     */ setPotentialPoints(potentialPoints) {\n        this.nodes.clear();\n        potentialPoints.forEach((p)=>{\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */ addPotentialPoint(p) {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n    /**\n     * @param i The index of the potential point to remove.\n     */ removePotentialPoint(i) {\n        this.nodes.delete(i);\n    }\n}\nclass $7cb8c0739b32549c$export$9513c16afdf7d852 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        this.tagName = \"me:periodicity\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$9513c16afdf7d852.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$ae98b7db6376163d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:ExtraDOSCMethod\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */ constructor(attributes, bondRef, hinderedRotorPotential, periodicity){\n        super(attributes, $7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        this.index = new Map();\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, this.nodes.size - 1);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName, this.nodes.size - 1);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set($7cb8c0739b32549c$export$9513c16afdf7d852.tagName, this.nodes.size - 1);\n        }\n    }\n    /**\n     * @returns The bondRef.\n     */ getBondRef() {\n        let i = this.index.get($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */ setBondRef(bondRef) {\n        let i = this.index.get($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName);\n        if (i != undefined) this.nodes.set(i, bondRef);\n        else {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set($7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, this.nodes.size - 1);\n        }\n    }\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */ getHinderedRotorPotential() {\n        let i = this.index.get($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */ setHinderedRotorPotential(hinderedRotorPotential) {\n        let i = this.index.get($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        if (i != undefined) this.nodes.set(i, hinderedRotorPotential);\n        else {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set($7cb8c0739b32549c$export$9b8e857b9a081d2.tagName, this.nodes.size - 1);\n        }\n    }\n    /**\n     * @returns The periodicity of the molecule.\n     */ getPeriodicity() {\n        let i = this.index.get($7cb8c0739b32549c$export$9513c16afdf7d852.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */ setPeriodicity(periodicity) {\n        let i = this.index.get($7cb8c0739b32549c$export$9513c16afdf7d852.tagName);\n        if (i != undefined) this.nodes.set(i, periodicity);\n        else {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set($7cb8c0739b32549c$export$9513c16afdf7d852.tagName, this.nodes.size - 1);\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$97850fe2f2906f00 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:reservoirSize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$97850fe2f2906f00.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$3da9759ad07746a3 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"molecule\";\n    }\n    static{\n        /**\n     * The key for the id attribute value.\n     */ this.s_id = \"id\";\n    }\n    static{\n        /**\n     * The key for the description attribute value.\n     */ this.s_description = \"description\";\n    }\n    static{\n        /**\n     * The key for the active attribute value.\n     */ this.s_active = \"active\";\n    }\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */ constructor(attributes, atoms, bonds, properties, energyTransferModel, dOSCMethod, extraDOSCMethod, reservoirSize){\n        super(attributes, $7cb8c0739b32549c$export$3da9759ad07746a3.tagName);\n        this.index = new Map();\n        let id = attributes.get($7cb8c0739b32549c$export$3da9759ad07746a3.s_id);\n        if (id == undefined) throw new Error($7cb8c0739b32549c$export$3da9759ad07746a3.s_id + \" is undefined\");\n        this.id = id;\n        let i = 0;\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            if (atoms instanceof $7cb8c0739b32549c$export$80986e6afdd7e0cb) this.index.set($7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName, i);\n            else this.index.set($7cb8c0739b32549c$export$9cea715eceba39a0.tagName, i);\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set($7cb8c0739b32549c$export$499950da20810ac9.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set($7cb8c0739b32549c$export$bbdce6c921702068.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set($7cb8c0739b32549c$export$ae98b7db6376163d.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set($7cb8c0739b32549c$export$97850fe2f2906f00.tagName, i);\n        }\n    }\n    /**\n     * Get the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */ getDescription() {\n        return this.attributes.get($7cb8c0739b32549c$export$3da9759ad07746a3.s_description);\n    }\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */ setDescription(description) {\n        this.attributes.set($7cb8c0739b32549c$export$3da9759ad07746a3.s_description, description);\n    }\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */ getActive() {\n        let active = this.attributes.get($7cb8c0739b32549c$export$3da9759ad07746a3.s_active);\n        if (active != undefined) {\n            if (active == \"true\") return true;\n            else return false;\n        }\n    }\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */ setActive(active) {\n        this.attributes.set($7cb8c0739b32549c$export$3da9759ad07746a3.s_active, active.toString());\n    }\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */ getLabel() {\n        let label = this.id;\n        let description = this.getDescription();\n        if (description != undefined) label += \" (\" + description + \")\";\n        let active = this.getActive();\n        if (active) label += \" (\" + $7cb8c0739b32549c$export$3da9759ad07746a3.s_active + \")\";\n        return label;\n    }\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */ getAttributesAsString() {\n        return Array.from(this.attributes, ([key, value])=>`${key}=\\\"${value}\\\"`).join(\", \");\n    }\n    /**\n     * @returns The properties of the molecule.\n     */ getProperties() {\n        let i = this.index.get($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        if (i == undefined) {\n            i = this.index.get($7cb8c0739b32549c$export$41b04b3a73e7216d.tagName);\n            if (i == undefined) return undefined;\n            else return this.nodes.get(i);\n        } else return this.nodes.get(i);\n    }\n    /**\n     * @param properties The properties.\n     */ setProperties(properties) {\n        let i = this.index.get($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else this.nodes.set(i, properties);\n    }\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */ getProperty(dictRef) {\n        let properties = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof $7cb8c0739b32549c$export$4e0d1ad7ad6a0802) //console.log('PropertyList');\n            return properties.getProperty(dictRef);\n            else //console.log('Property');\n            return properties;\n        }\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        let properties = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof $7cb8c0739b32549c$export$4e0d1ad7ad6a0802) properties.setProperty(property);\n            else this.setProperties(properties);\n        } else this.setProperties(property);\n    }\n    /**\n     * @returns The atoms of the molecule.\n     */ getAtoms() {\n        let i = this.index.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName);\n        if (i == undefined) {\n            i = this.index.get($7cb8c0739b32549c$export$9cea715eceba39a0.tagName);\n            if (i == undefined) return undefined;\n            else return this.nodes.get(i);\n        } else return this.nodes.get(i);\n    }\n    /**\n     * @returns The bonds of the molecule.\n     */ getBonds() {\n        let i = this.index.get($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @returns The energy transfer model of the molecule.\n     */ getEnergyTransferModel() {\n        let i = this.index.get($7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */ setEnergyTransferModel(energyTransferModel) {\n        let i = this.index.get($7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$499950da20810ac9.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else this.nodes.set(i, energyTransferModel);\n    }\n    /**\n     * @returns The DOSC method of the molecule.\n     */ getDOSCMethod() {\n        let i = this.index.get($7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */ setDOSCMethod(dOSCMethod) {\n        let i = this.index.get($7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$bbdce6c921702068.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else this.nodes.set(i, dOSCMethod);\n    }\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */ getExtraDOSCMethod() {\n        let i = this.index.get($7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */ setExtraDOSCMethod(extraDOSCMethod) {\n        let i = this.index.get($7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$ae98b7db6376163d.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else this.nodes.set(i, extraDOSCMethod);\n    }\n    /**\n     * @returns The reservoir size of the molecule.\n     */ getReservoirSize() {\n        let i = this.index.get($7cb8c0739b32549c$export$97850fe2f2906f00.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */ setReservoirSize(reservoirSize) {\n        let i = this.index.get($7cb8c0739b32549c$export$97850fe2f2906f00.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$97850fe2f2906f00.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else this.nodes.set(i, reservoirSize);\n    }\n    /**\n     * Get the ZPE value of the molecule.\n     */ getEnergy() {\n        let p = this.getProperty($7cb8c0739b32549c$export$95174cf0748f45cd.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error($7cb8c0739b32549c$export$95174cf0748f45cd.dictRef + \" property not found!\");\n        //return 0;\n        }\n        return p.getProperty().value;\n    }\n}\n\n\n\nclass $381c11e38cac5410$export$e8a062bb2fc9e2ba extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"molecule\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$e8a062bb2fc9e2ba.tagName);\n        this.ref = attributes.get(\"ref\");\n        this.role = attributes.get(\"role\");\n    }\n    /**\n     * @param role The role of the molecule in the reaction.\n     */ setRole(role) {\n        this.role = role;\n    }\n}\nclass $381c11e38cac5410$export$dcfd4302d04b7fb6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reactant\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$dcfd4302d04b7fb6.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$264ad599d7cef668 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"product\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$264ad599d7cef668.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$145c1ed87b1a2216 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:transitionState\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$145c1ed87b1a2216.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$38ce90ac8b004d85 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:preExponential\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$38ce90ac8b004d85.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$1bdc69d2439d749d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:activationEnergy\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$1bdc69d2439d749d.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$8d95dd32819bc86c extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:TInfinity\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$8d95dd32819bc86c.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$d08982dd841d496f extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:nInfinity\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$d08982dd841d496f.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$6fa70ee10f356b6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MCRCMethod\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n    }\n}\nclass $381c11e38cac5410$export$191e95ebb11cc88 extends $381c11e38cac5410$export$6fa70ee10f356b6 {\n    static{\n        /**\n     * The xsiType.\n     */ this.xsiType = \"me:MesmerILT\";\n    }\n    static{\n        /**\n     * The tag name.\n     */ this.xsiType2 = \"MesmerILT\";\n    }\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */ constructor(attributes, preExponential, activationEnergy, tInfinity, nInfinity){\n        super(attributes);\n        this.index = new Map();\n        if (preExponential != undefined) {\n            this.index.set($381c11e38cac5410$export$38ce90ac8b004d85.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set($381c11e38cac5410$export$1bdc69d2439d749d.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set($381c11e38cac5410$export$8d95dd32819bc86c.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set($381c11e38cac5410$export$d08982dd841d496f.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */ getPreExponential() {\n        let i = this.index.get($381c11e38cac5410$export$38ce90ac8b004d85.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param preExponential The pre-exponential factor.\n     */ setPreExponential(preExponential) {\n        let i = this.index.get($381c11e38cac5410$export$38ce90ac8b004d85.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$38ce90ac8b004d85.tagName, this.nodes.size);\n            this.addNode(preExponential);\n        } else this.nodes.set(i, preExponential);\n    }\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */ getActivationEnergy() {\n        let i = this.index.get($381c11e38cac5410$export$1bdc69d2439d749d.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param activationEnergy The activation energy.\n     */ setActivationEnergy(activationEnergy) {\n        let i = this.index.get($381c11e38cac5410$export$1bdc69d2439d749d.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$1bdc69d2439d749d.tagName, this.nodes.size);\n            this.addNode(activationEnergy);\n        } else this.nodes.set(i, activationEnergy);\n    }\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */ getTInfinity() {\n        let i = this.index.get($381c11e38cac5410$export$8d95dd32819bc86c.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param tInfinity The TInfinity.\n     */ setTInfinity(tInfinity) {\n        let i = this.index.get($381c11e38cac5410$export$8d95dd32819bc86c.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$8d95dd32819bc86c.tagName, this.nodes.size);\n            this.addNode(tInfinity);\n        } else this.nodes.set(i, tInfinity);\n    }\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */ getNInfinity() {\n        let i = this.index.get($381c11e38cac5410$export$d08982dd841d496f.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @param nInfinity The NInfinity.\n     */ setNInfinity(nInfinity) {\n        let i = this.index.get($381c11e38cac5410$export$d08982dd841d496f.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$d08982dd841d496f.tagName, this.nodes.size);\n            this.addNode(nInfinity);\n        } else this.nodes.set(i, nInfinity);\n    }\n}\nclass $381c11e38cac5410$export$c3cf6f96dac11421 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:tunneling\";\n    }\n    static{\n        /**\n     * The key to the name attribute value.\n     */ this.s_name = \"name\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n    }\n    /**\n     * @returns The name of the tunneling method.\n     */ getName() {\n        return this.attributes.get($381c11e38cac5410$export$c3cf6f96dac11421.s_name);\n    }\n    /**\n     * @param The name of the tunneling method.\n     */ setName(name) {\n        this.attributes.set($381c11e38cac5410$export$c3cf6f96dac11421.s_name, name);\n    }\n}\nclass $381c11e38cac5410$export$284227145ed02b04 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:excessReactantConc\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$284227145ed02b04.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$d2ae4167a30cf6bb extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reaction\";\n    }\n    static{\n        /**\n     * The key to the id attribute value.\n     */ this.s_id = \"id\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */ constructor(attributes, reactants, products, tunneling, transitionStates, mCRCMethod, excessReactantConc){\n        super(attributes, $381c11e38cac5410$export$d2ae4167a30cf6bb.tagName);\n        this.index = new Map();\n        this.reactantsIndex = new Map();\n        this.productsIndex = new Map();\n        this.transitionStatesIndex = new Map();\n        let id = attributes.get($381c11e38cac5410$export$d2ae4167a30cf6bb.s_id);\n        if (id == undefined) throw new Error($381c11e38cac5410$export$d2ae4167a30cf6bb.s_id + \" is undefined!\");\n        this.id = id;\n        if (reactants != undefined) {\n            reactants.forEach((reactant)=>{\n                this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n                this.addNode(reactant);\n            });\n            this.index.set($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName, this.reactantsIndex);\n        }\n        if (products != undefined) {\n            products.forEach((product)=>{\n                this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n                this.addNode(product);\n            });\n            this.index.set($381c11e38cac5410$export$264ad599d7cef668.tagName, this.productsIndex);\n        }\n        if (tunneling != undefined) {\n            this.index.set($381c11e38cac5410$export$c3cf6f96dac11421.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach((transitionState)=>{\n                this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n                this.addNode(transitionState);\n            });\n            this.index.set($381c11e38cac5410$export$145c1ed87b1a2216.tagName, this.transitionStatesIndex);\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set($381c11e38cac5410$export$6fa70ee10f356b6.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set($381c11e38cac5410$export$284227145ed02b04.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n    /**\n     * Add a node to the index.\n     */ addToIndex(tagName, node) {\n        let v = this.index.get(tagName);\n        if (v == undefined) this.index.set(tagName, this.nodes.size);\n        else if (v instanceof Map) v.set(node.tagName, this.nodes.size);\n        else {\n            let map = new Map();\n            map.set(this.nodes.get(v).ref, v);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n    /**\n     * @returns The reactants.\n     */ getReactants() {\n        let i = this.index.get($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * Set the reactants.\n     */ setReactants(reactants) {\n        reactants.forEach((reactant)=>{\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n            this.addNode(reactant);\n        });\n        this.index.set($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName, this.reactantsIndex);\n    }\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */ getReactant(ref) {\n        let index = this.reactantsIndex.get(ref);\n        if (index == undefined) throw new Error(`Reactant with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @param reactant The reactant to add.\n     */ addReactant(reactant) {\n        this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n        this.addNode(reactant);\n    }\n    /**\n     * @param ref The ref of the reactant to remove.\n     */ removeReactant(ref) {\n        let index = this.reactantsIndex.get(ref);\n        if (index == undefined) throw new Error(`Reactant with ref ${ref} not found`);\n        else {\n            this.nodes.delete(index);\n            this.reactantsIndex.delete(ref);\n        }\n    }\n    /**\n     * @returns The products.\n     */ getProducts() {\n        let i = this.index.get($381c11e38cac5410$export$264ad599d7cef668.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * Set the products.\n     */ setProducts(products) {\n        products.forEach((product)=>{\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n            this.addNode(product);\n        });\n        this.index.set($381c11e38cac5410$export$264ad599d7cef668.tagName, this.productsIndex);\n    }\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */ getProduct(ref) {\n        let index = this.productsIndex.get(ref);\n        if (index == undefined) throw new Error(`Product with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @param product The product to add.\n     */ addProduct(product) {\n        this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n        this.addNode(product);\n    }\n    /**\n     * @param ref The ref of the product to remove.\n     */ removeProduct(ref) {\n        let index = this.productsIndex.get(ref);\n        if (index == undefined) throw new Error(`Product with ref ${ref} not found`);\n        else {\n            this.nodes.delete(index);\n            this.productsIndex.delete(ref);\n        }\n    }\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */ getTunneling() {\n        let i = this.index.get($381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */ setTunneling(tunneling) {\n        let i = this.index.get($381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$c3cf6f96dac11421.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, tunneling);\n        }\n    }\n    /**\n     * @returns The transition states.\n     */ getTransitionStates() {\n        let i = this.index.get($381c11e38cac5410$export$145c1ed87b1a2216.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * Set the transition states.\n     */ setTransitionStates(transitionStates) {\n        transitionStates.forEach((transitionState)=>{\n            this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n            this.addNode(transitionState);\n        });\n        this.index.set($381c11e38cac5410$export$145c1ed87b1a2216.tagName, this.transitionStatesIndex);\n    }\n    /**\n     * @returns A particular TransitionState.\n     * @param ref The ref of the transition state to return.\n     * @returns The transition state at the given index.\n     */ getTransitionState(ref) {\n        let index = this.transitionStatesIndex.get(ref);\n        if (index == undefined) throw new Error(`Transition state with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @param transitionState The transition state to add.\n     */ addTransitionState(transitionState) {\n        this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n        this.addNode(transitionState);\n    }\n    /**\n     * @param ref The ref of the transition state to remove.\n     */ removeTransitionState(ref) {\n        let index = this.transitionStatesIndex.get(ref);\n        if (index == undefined) throw new Error(`Transition State with ref ${ref} not found`);\n        else {\n            this.nodes.delete(index);\n            this.transitionStatesIndex.delete(ref);\n        }\n    }\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */ getMCRCMethod() {\n        let i = this.index.get($381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */ setMCRCMethod(mCRCMethod) {\n        let i = this.index.get($381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$6fa70ee10f356b6.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, mCRCMethod);\n        }\n    }\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */ getExcessReactantConc() {\n        let i = this.index.get($381c11e38cac5410$export$284227145ed02b04.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the excess reactant concentration or create it if it is undefined.\n     */ setExcessReactantConc(excessReactantConc) {\n        let i = this.index.get($381c11e38cac5410$export$284227145ed02b04.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$284227145ed02b04.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        } else {\n            if (i instanceof Map) throw new Error(\"ExcessReactantConc is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, excessReactantConc);\n        }\n    }\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */ getReactantsLabel() {\n        return this.getReactants().map((reactant)=>reactant.getMolecule().ref).join(\" + \");\n    }\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */ getProductsLabel() {\n        return this.getProducts().map((product)=>product.getMolecule().ref).join(\" + \");\n    }\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */ getLabel() {\n        let label = this.getReactantsLabel() + \" -> \" + this.getProductsLabel();\n        return label;\n    }\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */ getReactantsEnergy(molecules) {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map((reactant)=>{\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            return molecule.getEnergy();\n        }).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */ getProductsEnergy(molecules) {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map((product)=>{\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            return molecule.getEnergy();\n        }).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */ get(tagName, dictRef) {\n        if (this.index.has(tagName)) {\n            let i = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex = i.get(dictRef);\n                    if (nodeIndex != undefined) return this.nodes.get(nodeIndex);\n                } else return this.nodes.get(i);\n            }\n        }\n    }\n}\n\n\n\n/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */ function $d2b4a77a4d44562c$export$479ac392a7fb4419(ctx, strokeStyle, strokewidth, x0, y0, x1, y1, font, th, label, energyString) {\n    let x_centre = x0 + (x1 - x0) / 2;\n    $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, energyString, font, strokeStyle, $d2b4a77a4d44562c$var$getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, label, font, strokeStyle, $d2b4a77a4d44562c$var$getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    $d2b4a77a4d44562c$export$819db45aec5fcbe5(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */ function $d2b4a77a4d44562c$var$getTextStartX(ctx, text, font, x_centre) {\n    let tw = $d2b4a77a4d44562c$export$37827d046293d309(ctx, text, font);\n    return x_centre - tw / 2;\n}\nfunction $d2b4a77a4d44562c$export$819db45aec5fcbe5(ctx, strokeStyle, strokewidth, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\nfunction $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, text, font, colour, x, y) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\nfunction $d2b4a77a4d44562c$export$c398604a09be5382(ctx, text, font) {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\nfunction $d2b4a77a4d44562c$export$37827d046293d309(ctx, text, font) {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}\n\n\n\nclass $613b909b2797b099$export$b33a132661f4be58 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:bathGas\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     */ constructor(attributes, moleculeID){\n        super(attributes, $613b909b2797b099$export$b33a132661f4be58.tagName, moleculeID);\n    }\n}\nclass $613b909b2797b099$export$ea088383ce76fc5a extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:experimentRate\";\n    }\n    static{\n        /**\n     * The key to the ref1 attribute value.\n     */ this.s_ref1 = \"ref1\";\n    }\n    static{\n        /**\n     * The key to the ref2 attribute value.\n     */ this.s_ref2 = \"ref2\";\n    }\n    static{\n        /**\n     * The key to the refReaction attribute value.\n     */ this.s_refReaction = \"refReaction\";\n    }\n    static{\n        /**\n     * The key to the error attribute value.\n     */ this.s_error = \"error\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$ea088383ce76fc5a.tagName, value);\n    }\n    /**\n     * @returns The ref1 attribute or undefined if there is no ref1 attribute.\n     */ getRef1() {\n        return this.attributes.get($613b909b2797b099$export$ea088383ce76fc5a.s_ref1);\n    }\n    /**\n     * Set the ref1 attribute.\n     * @param ref1 The ref1.\n     */ setRef1(ref1) {\n        this.attributes.set($613b909b2797b099$export$ea088383ce76fc5a.s_ref1, ref1);\n    }\n    /**\n     * @returns The ref2 attribute or undefined if there is no ref2 attribute.\n     */ getRef2() {\n        return this.attributes.get($613b909b2797b099$export$ea088383ce76fc5a.s_ref2);\n    }\n    /**\n     * Set the ref2 attribute.\n     * @param ref2 The ref2.\n     */ setRef2(ref2) {\n        this.attributes.set($613b909b2797b099$export$ea088383ce76fc5a.s_ref2, ref2);\n    }\n    /**\n     * @returns The refReaction attribute or undefined if there is no refReaction attribute.\n     */ getRefReaction() {\n        return this.attributes.get($613b909b2797b099$export$ea088383ce76fc5a.s_refReaction);\n    }\n    /**\n     * Set the refReaction attribute.\n     * @param refReaction The refReaction.\n     */ setRefReaction(refReaction) {\n        this.attributes.set($613b909b2797b099$export$ea088383ce76fc5a.s_refReaction, refReaction);\n    }\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */ getError() {\n        let error = this.attributes.get($613b909b2797b099$export$ea088383ce76fc5a.s_error);\n        if (error != undefined) return parseFloat(error);\n    }\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */ setError(error) {\n        this.attributes.set($613b909b2797b099$export$ea088383ce76fc5a.s_error, error.toString());\n    }\n}\nclass $613b909b2797b099$export$c291f4faacd745a6 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:experimentalYield\";\n    }\n    static{\n        /**\n     * The key to the ref attribute value.\n     */ this.s_ref = \"ref\";\n    }\n    static{\n        /**\n     * The key to the error attribute value.\n     */ this.s_error = \"error\";\n    }\n    static{\n        /**\n     * The key to the yieldTime attribute value.\n     */ this.s_yieldTime = \"yieldTime\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$c291f4faacd745a6.tagName, value);\n    }\n    /**\n     * @returns The ref attribute or undefined if there is no ref attribute.\n     */ getRef() {\n        return this.attributes.get($613b909b2797b099$export$c291f4faacd745a6.s_ref);\n    }\n    /**\n     * Set the ref attribute.\n     * @param ref The ref.\n     */ setRef(ref) {\n        this.attributes.set($613b909b2797b099$export$c291f4faacd745a6.s_ref, ref);\n    }\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */ getError() {\n        let error = this.attributes.get($613b909b2797b099$export$c291f4faacd745a6.s_error);\n        if (error != undefined) return parseFloat(error);\n    }\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */ setError(error) {\n        this.attributes.set($613b909b2797b099$export$c291f4faacd745a6.s_error, error.toString());\n    }\n    /**\n     * @returns The yieldTime attribute or undefined if there is no yieldTime attribute.\n     */ getYieldTime() {\n        let yieldTime = this.attributes.get($613b909b2797b099$export$c291f4faacd745a6.s_yieldTime);\n        if (yieldTime) return parseFloat(yieldTime);\n    }\n    /**\n     * Set the yieldTime attribute.\n     * @param yieldTime The yieldTime.\n     */ setYieldTime(yieldTime) {\n        this.attributes.set($613b909b2797b099$export$c291f4faacd745a6.s_yieldTime, yieldTime.toString());\n    }\n}\nclass $613b909b2797b099$export$ed9dfbc127680fd1 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:experimentalEigenvalue\";\n    }\n    static{\n        /**\n     * The key to the EigenvalueID attribute value.\n     */ this.s_EigenvalueID = \"EigenvalueID\";\n    }\n    static{\n        /**\n     * The key to the error attribute value.\n     */ this.s_error = \"error\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$ed9dfbc127680fd1.tagName, value);\n    }\n    /**\n     * @returns The EigenvalueID attribute or undefined if there is no EigenvalueID attribute.\n     */ getEigenvalueID() {\n        return this.attributes.get($613b909b2797b099$export$ed9dfbc127680fd1.s_EigenvalueID);\n    }\n    /**\n     * Set the EigenvalueID attribute.\n     * @param EigenvalueID The EigenvalueID.\n     */ setEigenvalueID(EigenvalueID) {\n        this.attributes.set($613b909b2797b099$export$ed9dfbc127680fd1.s_EigenvalueID, EigenvalueID);\n    }\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */ getError() {\n        let error = this.attributes.get($613b909b2797b099$export$ed9dfbc127680fd1.s_error);\n        if (error != undefined) return parseFloat(error);\n    }\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */ setError(error) {\n        this.attributes.set($613b909b2797b099$export$ed9dfbc127680fd1.s_error, error.toString());\n    }\n}\nclass $613b909b2797b099$export$284227145ed02b04 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:excessReactantConc\";\n    }\n    static{\n        /**\n     * The key to the percent attribute value.\n     */ this.s_percent = \"percent\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$284227145ed02b04.tagName, value);\n    }\n    /**\n     * @returns The percent attribute or undefined if there is no percent attribute.\n     */ getPercent() {\n        return this.attributes.get($613b909b2797b099$export$284227145ed02b04.s_percent);\n    }\n    /**\n     * Set the percent attribute.\n     * @param percent The percent.\n     */ setPercent(percent) {\n        this.attributes.set($613b909b2797b099$export$284227145ed02b04.s_percent, percent);\n    }\n}\nclass $613b909b2797b099$export$3fe97ecb6b172244 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PTpair\";\n    }\n    static{\n        /**\n     * The precision attribute potential values.\n     */ this.precisions = [\n            \"d\",\n            \"dd\",\n            \"qd\",\n            \"double\",\n            \"double-double\",\n            \"quad-double\"\n        ];\n    }\n    static{\n        /**\n     * The key to the P attribute value.\n     */ this.s_P = \"P\";\n    }\n    static{\n        /**\n     * The key to the T attribute value.\n     */ this.s_T = \"T\";\n    }\n    static{\n        /**\n     * The key to the precision attribute value.\n     */ this.s_precision = \"precision\";\n    }\n    static{\n        /**\n     * The key to the excessReactantConc attribute value.\n     */ this.s_excessReactantConc = \"excessReactantConc\";\n    }\n    static{\n        /**\n     * The key to the percentExcessReactantConc attribute value.\n     */ this.s_percentExcessReactantConc = \"percentExcessReactantConc\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */ constructor(attributes, bathGas, experimentRate, excessReactantConc, experimentalEigenvalue){\n        super(attributes, $613b909b2797b099$export$3fe97ecb6b172244.tagName);\n        this.index = new Map();\n        if (bathGas != undefined) {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate != undefined) {\n            this.index.set($613b909b2797b099$export$ea088383ce76fc5a.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set($613b909b2797b099$export$c291f4faacd745a6.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n        if (experimentalEigenvalue != undefined) {\n            this.index.set($613b909b2797b099$export$ed9dfbc127680fd1.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n    /**\n     * @returns The Pressure.\n     */ getP() {\n        let p = this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_P);\n        if (p != undefined) return parseFloat(p);\n        return NaN;\n    }\n    /**\n     * Set The Pressure\n     */ setP(p) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_P, p.toString());\n    }\n    /**\n     * @returns The Temperature.\n     */ getT() {\n        let t = this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_T);\n        if (t != undefined) return parseFloat(t);\n        return NaN;\n    }\n    /**\n     * Set The Temperature.\n     */ setT(t) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_T, t.toString());\n    }\n    /**\n     * @returns The precision attribute or undefined if there is no precision attribute.\n     */ getPrecision() {\n        return this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_precision);\n    }\n    /**\n     * Set the precision attribute.\n     * @param precision The precision.\n     */ setPrecision(precision) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_precision, precision);\n    }\n    /**\n     * @returns The bath gas.\n     */ getBathGas() {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param bathGas The bath gas.\n     */ setBathGas(bathGas) {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i != undefined) this.nodes.set(i, bathGas);\n        else {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n    /**\n     * Remove the bath gas.\n     */ removeBathGas() {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($613b909b2797b099$export$b33a132661f4be58.tagName);\n        }\n    }\n    /**\n     * @returns The experiment rate.\n     */ getExperimentRate() {\n        let i = this.index.get($613b909b2797b099$export$ea088383ce76fc5a.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param experimentRate The experiment rate.\n     */ setExperimentRate(experimentRate) {\n        let i = this.index.get($613b909b2797b099$export$ea088383ce76fc5a.tagName);\n        if (i != undefined) this.nodes.set(i, experimentRate);\n        else {\n            this.index.set($613b909b2797b099$export$ea088383ce76fc5a.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n    /**\n     * Remove the experiment rate.\n     */ removeExperimentRate() {\n        let i = this.index.get($613b909b2797b099$export$ea088383ce76fc5a.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($613b909b2797b099$export$ea088383ce76fc5a.tagName);\n        }\n    }\n    /**\n     * @returns this.attributes.get(\"excessReactantConc\").\n     */ getExcessReactantConc() {\n        return this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_excessReactantConc);\n    }\n    /**\n     * this.attributes.set(\"excessReactantConc\", excessReactantConc).\n     */ setExcessReactantConc(excessReactantConc) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_excessReactantConc, excessReactantConc);\n    }\n    /**\n     * @returns this.attributes.get(\"percentExcessReactantConc\").\n     */ getPercentExcessReactantConc() {\n        return this.attributes.get($613b909b2797b099$export$3fe97ecb6b172244.s_percentExcessReactantConc);\n    }\n    /**\n     * this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc).\n     */ setPercentExcessReactantConc(percentExcessReactantConc) {\n        this.attributes.set($613b909b2797b099$export$3fe97ecb6b172244.s_percentExcessReactantConc, percentExcessReactantConc);\n    }\n}\nclass $613b909b2797b099$export$3be0efe793283834 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PTs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param pTs The PTs.\n     */ constructor(attributes, pTpairs){\n        super(attributes, $613b909b2797b099$export$3be0efe793283834.tagName);\n        if (pTpairs != undefined) {\n            pTpairs.forEach((pTpair)=>{\n                this.addNode(pTpair);\n            });\n            this.pTpairs = pTpairs;\n        } else this.pTpairs = [];\n    }\n    /**\n     * @param i The index of the PTpair to return. \n     * @returns The PTpair at the given index or undefined if the index is out of range.\n     */ getPTpair(i) {\n        return this.pTpairs[i];\n    }\n    /**\n     * Set the PT at the given index.\n     * @param i The index.\n     * @returns The PT pairs.\n     */ setPTpair(i, pTpair) {\n        this.nodes.set(i, pTpair);\n        this.pTpairs[i] = pTpair;\n    }\n    /**\n     * Add a PTpair.\n     * @param pTPair The PTpair to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */ addPTpair(pTpair) {\n        this.addNode(pTpair);\n        this.pTpairs.push(pTpair);\n        return this.nodes.size - 1;\n    }\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     */ setPTpairs(pTpairs) {\n        this.nodes.clear();\n        pTpairs.forEach((pTpair)=>{\n            this.addNode(pTpair);\n            this.pTpairs.push(pTpair);\n        });\n    }\n    /**\n     * Remove the PT at the given index.\n     * @param i The index.\n     */ removePTpair(i) {\n        this.nodes.delete(i);\n        this.pTpairs.splice(i, 1);\n    }\n}\nclass $613b909b2797b099$export$363c7374d425f4ad extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:conditions\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bathGases The bath gases.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */ constructor(attributes, bathGases, pTs){\n        super(attributes, $613b909b2797b099$export$363c7374d425f4ad.tagName);\n        this.index = new Map();\n        this.bathGasesIndex = new Map();\n        this.bathGases = new Set();\n        if (bathGases != undefined) {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            bathGases.forEach((bathGas)=>{\n                this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n                this.addNode(bathGas);\n                this.bathGases.add(bathGas);\n            });\n        }\n        if (pTs != undefined) {\n            this.index.set($613b909b2797b099$export$3be0efe793283834.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n    /**\n     * @returns The bath gases.\n     */ getBathGases() {\n        return this.bathGases;\n    }\n    /**\n     * @param bathGas The bath gas to add.\n     */ addBathGas(bathGas) {\n        if (!this.bathGases.has(bathGas)) {\n            this.bathGases.add(bathGas);\n            this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n    /**\n     * @param bathGas The bath gas to remove.\n     */ removeBathGas(bathGas) {\n        if (this.bathGases.has(bathGas)) {\n            this.bathGases.delete(bathGas);\n            this.nodes.delete(this.bathGasesIndex.get(bathGas.value));\n        } else console.warn(\"Conditions.removeBathGas: bathGas not found to remove.\");\n    }\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */ getPTs() {\n        let i = this.index.get($613b909b2797b099$export$3be0efe793283834.tagName);\n        if (i != undefined) return this.nodes.get(i);\n    }\n    /**\n     * @param pTs The PTs.\n     */ setPTs(pTs) {\n        let i = this.index.get($613b909b2797b099$export$3be0efe793283834.tagName);\n        if (i != undefined) this.nodes.set(i, pTs);\n        else {\n            this.index.set($613b909b2797b099$export$3be0efe793283834.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n}\n\n\n\nclass $9a96fbd0df1ae67b$export$26e33f0df9ce919d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:grainSize\";\n    }\n    /**\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$576b56ca6e34780b extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:automaticallySetMaxEne\";\n    }\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$aa73446724166cdb extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:energyAboveTheTopHill\";\n    }\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:maxTemperature\";\n    }\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$77f098867dc64198 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:modelParameters\";\n    }\n    constructor(attributes, grainSize, automaticallySetMaxEne, energyAboveTheTopHill, maxTemperature){\n        super(attributes, $9a96fbd0df1ae67b$export$77f098867dc64198.tagName);\n        this.index = new Map();\n        if (grainSize != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n        if (automaticallySetMaxEne != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n        if (energyAboveTheTopHill != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n        if (maxTemperature != undefined) {\n            this.index.set($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n    /**\n     * @returns The grain size or undefined.\n     */ getGrainSize() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param grainSize The grain size.\n     */ setGrainSize(grainSize) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName);\n        if (i) this.nodes.set(i, grainSize);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n    }\n    /**\n     * @returns The automatically set max energy or undefined.\n     */ getAutomaticallySetMaxEne() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param automaticallySetMaxEne The automatically set max energy.\n     */ setAutomaticallySetMaxEne(automaticallySetMaxEne) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName);\n        if (i) this.nodes.set(i, automaticallySetMaxEne);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$576b56ca6e34780b.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n    /**\n     * @returns The energy above the top hill or undefined.\n     */ getEnergyAboveTheTopHill() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param energyAboveTheTopHill The energy above the top hill.\n     */ setEnergyAboveTheTopHill(energyAboveTheTopHill) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName);\n        if (i) this.nodes.set(i, energyAboveTheTopHill);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n    }\n    /**\n     * @returns The max temperature or undefined.\n     */ getMaxTemperature() {\n        let i = this.index.get($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName);\n        if (i) return this.nodes.get(i);\n    }\n    /**\n     * @param maxTemperature The max temperature.\n     */ setMaxTemperature(maxTemperature) {\n        let i = this.index.get($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName);\n        if (i) this.nodes.set(i, maxTemperature);\n        else {\n            this.index.set($9a96fbd0df1ae67b$export$f9c72965e4ddfc8e.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n}\n\n\n\nclass $d0ae5bc6e682c29f$export$7d9247c9879133fb extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:calculateRateCoefficientsOnly\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$60b233651e162b60 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printCellDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$7e63e5104be309ff extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:printCellTransitionStateFlux\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$a915db169f144f37 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printReactionOperatorColumnSums\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$e7fff349901f700d extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainBoltzmann\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$d23243bda4dfae2b extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$55888ef4e813a34d extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainkbE\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$f8d814a406a0ff5b extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainkfE\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$3627f2b606ffd3cb extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"me:printTSsos\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$c5481d114fddc81c extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainedSpeciesProfile\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainTransitionStateFlux\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$8420ab6988728a65 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printReactionOperatorSize\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printSpeciesProfile\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9f7939759d8efd9f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printPhenomenologicalEvolution\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$fc99460819e23ac5 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printTunnelingCoefficients\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$2f2eaac8983031ef extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printCrossingCoefficients\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$a3d7e677521f681f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$724a5a49739f4b4a extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testRateConstants\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$724a5a49739f4b4a.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$5d7dbeba4bf49655 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:useTheSameCellNumberForAllConditions\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$6ffea14bdffd427f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:ForceMacroDetailedBalance\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9d51752a8549e2d6 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:hideInactive\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:calcMethod\";\n    }\n    static{\n        /**\n     * The possible values.\n     */ this.options = [\n            \"simpleCalc\",\n            \"gridSearch\",\n            \"fitting\",\n            \"marquardt\",\n            \"analyticalRepresentation\",\n            \"ThermodynamicTable\",\n            \"sensitivityAnalysis\"\n        ];\n    }\n    /**\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$2453e311f702d9c7 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:eigenvalues\";\n    }\n    constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$421603058c6718db extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:shortestTimeOfInterest\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$421603058c6718db.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$b51d7314540831ed extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MaximumEvolutionTime\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$b51d7314540831ed.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$576b56ca6e34780b extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:automaticallySetMaxEne\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$159b5d3263f1049a extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:diagramEnergyOffset\";\n    }\n    /**\n      * @param attributes The attributes.\n      * @param value The value.\n      */ constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$1f37c7c73e401f31 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testMicroRates\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        this.tMin = parseFloat(attributes.get(\"Tmin\"));\n        this.tMax = parseFloat(attributes.get(\"Tmax\"));\n        this.tStep = parseFloat(attributes.get(\"Tstep\"));\n    }\n    /**\n     * @returns The maximum temperature.\n     */ getTmin() {\n        return this.tMin;\n    }\n    /**\n     * @param tMin The minimum temperature.\n     */ setTmin(tMin) {\n        this.tMin = tMin;\n        this.attributes?.set(\"Tmin\", tMin.toString());\n    }\n    /**\n     * @returns The maximum temperature.\n     */ getTmax() {\n        return this.tMax;\n    }\n    /**\n     * @param tMax The maximum temperature.\n     */ setTmax(tMax) {\n        this.tMax = tMax;\n        this.attributes?.set(\"Tmax\", tMax.toString());\n    }\n    /**\n     * @returns The temperature step.\n     */ getTstep() {\n        return this.tStep;\n    }\n    /**\n     * @param tStep The temperature step.\n     */ setTstep(tStep) {\n        this.tStep = tStep;\n        this.attributes?.set(\"Tstep\", tStep.toString());\n    }\n}\nclass $d0ae5bc6e682c29f$export$7a7fa4424cb20976 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:control\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $d0ae5bc6e682c29f$export$7a7fa4424cb20976.tagName);\n        this.index = new Map();\n    }\n    /**\n     * @returns The calculateRateCoefficientsOnly or undefined.\n     */ getCalculateRateCoefficientsOnly() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param calculateRateCoefficientsOnly The calculateRateCoefficientsOnly.\n     */ setCalculateRateCoefficientsOnly(calculateRateCoefficientsOnly) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        if (i != undefined) this.nodes.set(i, calculateRateCoefficientsOnly);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName, this.nodes.size);\n            this.addNode(calculateRateCoefficientsOnly);\n        }\n    }\n    /**\n     * Remove the calculateRateCoefficientsOnly.\n     */ removeCalculateRateCoefficientsOnly() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$7d9247c9879133fb.tagName);\n        }\n    }\n    /**\n     * @returns The printCellDOS or undefined.\n     */ getPrintCellDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printCellDOS The printCellDOS.\n     */ setPrintCellDOS(printCellDOS) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        if (i != undefined) this.nodes.set(i, printCellDOS);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$60b233651e162b60.tagName, this.nodes.size);\n            this.addNode(printCellDOS);\n        }\n    }\n    /**\n     * Remove the printCellDOS.\n     */ removePrintCellDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n        }\n    }\n    /**\n     * @returns The printCellTransitionStateFlux or undefined.\n     */ getPrintCellTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printCellTransitionStateFlux The printCellTransitionStateFlux.\n     */ setPrintCellTransitionStateFlux(printCellTransitionStateFlux) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        if (i != undefined) this.nodes.set(i, printCellTransitionStateFlux);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName, this.nodes.size);\n            this.addNode(printCellTransitionStateFlux);\n        }\n    }\n    /**\n     * Remove the printCellTransitionStateFlux.\n     */ removePrintCellTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$7e63e5104be309ff.tagName);\n        }\n    }\n    /**\n     * @returns The printReactionOperatorColumnSums or undefined.\n     */ getPrintReactionOperatorColumnSums() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     */ setPrintReactionOperatorColumnSums(printReactionOperatorColumnSums) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        if (i != undefined) this.nodes.set(i, printReactionOperatorColumnSums);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$a915db169f144f37.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorColumnSums);\n        }\n    }\n    /**\n     * Remove the printReactionOperatorColumnSums.\n     */ removePrintReactionOperatorColumnSums() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainBoltzmann or undefined.\n     */ getPrintGrainBoltzmann() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     */ setPrintGrainBoltzmann(printGrainBoltzmann) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainBoltzmann);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName, this.nodes.size);\n            this.addNode(printGrainBoltzmann);\n        }\n    }\n    /**\n     * Remove the printGrainBoltzmann.\n     */ removePrintGrainBoltzmann() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainDOS or undefined.\n     */ getPrintGrainDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainDOS The printGrainDOS.\n     */ setPrintGrainDOS(printGrainDOS) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainDOS);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName, this.nodes.size);\n            this.addNode(printGrainDOS);\n        }\n    }\n    /**\n     * Remove the printGrainDOS.\n     */ removePrintGrainDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainkbE or undefined.\n     */ getPrintGrainkbE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainkbE The printGrainkbE.\n     */ setPrintGrainkbE(printGrainkbE) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainkbE);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName, this.nodes.size);\n            this.addNode(printGrainkbE);\n        }\n    }\n    /**\n     * Remove the printGrainkbE.\n     */ removePrintGrainkbE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainkfE or undefined.\n     */ getPrintGrainkfE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainkfE The printGrainkfE.\n     */ setPrintGrainkfE(printGrainkfE) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainkfE);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName, this.nodes.size);\n            this.addNode(printGrainkfE);\n        }\n    }\n    /**\n     * Remove the printGrainkfE.\n     */ removePrintGrainkfE() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n        }\n    }\n    /**\n     * @returns The printTSsos or undefined.\n     */ getPrintTSsos() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printTSsos The printTSsos.\n     */ setPrintTSsos(printTSsos) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        if (i != undefined) this.nodes.set(i, printTSsos);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName, this.nodes.size);\n            this.addNode(printTSsos);\n        }\n    }\n    /**\n     * Remove the printTSsos.\n     */ removePrintTSsos() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$3627f2b606ffd3cb.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainedSpeciesProfile or undefined.\n     */ getPrintGrainedSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainedSpeciesProfile The printGrainedSpeciesProfile.\n     */ setPrintGrainedSpeciesProfile(printGrainedSpeciesProfile) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainedSpeciesProfile);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName, this.nodes.size);\n            this.addNode(printGrainedSpeciesProfile);\n        }\n    }\n    /**\n     * Remove the printGrainedSpeciesProfile.\n     */ removePrintGrainedSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$c5481d114fddc81c.tagName);\n        }\n    }\n    /**\n     * @returns The printGrainTransitionStateFlux or undefined.\n     */ getPrintGrainTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printGrainTransitionStateFlux The printGrainTransitionStateFlux.\n     */ setPrintGrainTransitionStateFlux(printGrainTransitionStateFlux) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        if (i != undefined) this.nodes.set(i, printGrainTransitionStateFlux);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName, this.nodes.size);\n            this.addNode(printGrainTransitionStateFlux);\n        }\n    }\n    /**\n     * Remove the printGrainTransitionStateFlux.\n     */ removePrintGrainTransitionStateFlux() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab.tagName);\n        }\n    }\n    /**\n     * @returns The printReactionOperatorSize or undefined.\n     */ getPrintReactionOperatorSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printReactionOperatorSize The printReactionOperatorSize.\n     */ setPrintReactionOperatorSize(printReactionOperatorSize) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        if (i != undefined) this.nodes.set(i, printReactionOperatorSize);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorSize);\n        }\n    }\n    /**\n     * Remove the printReactionOperatorSize.\n     */ removePrintReactionOperatorSize() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$8420ab6988728a65.tagName);\n        }\n    }\n    /**\n     * @returns The printSpeciesProfile or undefined.\n     */ getPrintSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printSpeciesProfile The printSpeciesProfile.\n     */ setPrintSpeciesProfile(printSpeciesProfile) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        if (i != undefined) this.nodes.set(i, printSpeciesProfile);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName, this.nodes.size);\n            this.addNode(printSpeciesProfile);\n        }\n    }\n    /**\n     * Remove the printSpeciesProfile.\n     */ removePrintSpeciesProfile() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n        }\n    }\n    /**\n     * @returns The printPhenomenologicalEvolution or undefined.\n     */ getPrintPhenomenologicalEvolution() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printPhenomenologicalEvolution The printPhenomenologicalEvolution.\n     */ setPrintPhenomenologicalEvolution(printPhenomenologicalEvolution) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        if (i != undefined) this.nodes.set(i, printPhenomenologicalEvolution);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName, this.nodes.size);\n            this.addNode(printPhenomenologicalEvolution);\n        }\n    }\n    /**\n     * Remove the printPhenomenologicalEvolution.\n     */ removePrintPhenomenologicalEvolution() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$9f7939759d8efd9f.tagName);\n        }\n    }\n    /**\n     * @returns The printTunnelingCoefficients or undefined.\n     */ getPrintTunnelingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printTunnelingCoefficients The printTunnelingCoefficients.\n     */ setPrintTunnelingCoefficients(printTunnelingCoefficients) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        if (i != undefined) this.nodes.set(i, printTunnelingCoefficients);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName, this.nodes.size);\n            this.addNode(printTunnelingCoefficients);\n        }\n    }\n    /**\n     * Remove the printTunnelingCoefficients.\n     */ removePrintTunnelingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$fc99460819e23ac5.tagName);\n        }\n    }\n    /**\n     * @returns The printCrossingCoefficients or undefined.\n     */ getPrintCrossingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param printCrossingCoefficients The printCrossingCoefficients.\n     */ setPrintCrossingCoefficients(printCrossingCoefficients) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        if (i != undefined) this.nodes.set(i, printCrossingCoefficients);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName, this.nodes.size);\n            this.addNode(printCrossingCoefficients);\n        }\n    }\n    /**\n     * Remove the printCrossingCoefficients.\n     */ removePrintCrossingCoefficients() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$2f2eaac8983031ef.tagName);\n        }\n    }\n    /**\n     * @returns The testDOS or undefined.\n     */ getTestDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param testDOS The testDOS.\n     */ setTestDOS(testDOS) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        if (i != undefined) this.nodes.set(i, testDOS);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName, this.nodes.size);\n            this.addNode(testDOS);\n        }\n    }\n    /**\n     * Remove the testDOS.\n     */ removeTestDOS() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n        }\n    }\n    /**\n     * @returns The testRateConstant or undefined.\n     */ getTestRateConstants() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$724a5a49739f4b4a.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param testRateConstant The testRateConstant.\n     */ setTestRateConstants(testRateConstant) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$724a5a49739f4b4a.tagName);\n        if (i != undefined) this.nodes.set(i, testRateConstant);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$724a5a49739f4b4a.tagName, this.nodes.size);\n            this.addNode(testRateConstant);\n        }\n    }\n    /**\n     * Remove the testRateConstant.\n     */ removeTestRateConstants() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$724a5a49739f4b4a.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$724a5a49739f4b4a.tagName);\n        }\n    }\n    /**\n     * @returns The useTheSameCellNumberForAllConditions or undefined.\n     */ getUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param useTheSameCellNumberForAllConditions The useTheSameCellNumberForAllConditions.\n     */ setUseTheSameCellNumberForAllConditions(useTheSameCellNumberForAllConditions) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        if (i != undefined) this.nodes.set(i, useTheSameCellNumberForAllConditions);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName, this.nodes.size);\n            this.addNode(useTheSameCellNumberForAllConditions);\n        }\n    }\n    /**\n     * Remove the useTheSameCellNumberForAllConditions.\n     */ removeUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$5d7dbeba4bf49655.tagName);\n        }\n    }\n    /**\n     * @returns The hideInactive or undefined.\n     */ getHideInactive() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param hideInactive The hideInactive.\n     */ setHideInactive(hideInactive) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        if (i != undefined) this.nodes.set(i, hideInactive);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName, this.nodes.size);\n            this.addNode(hideInactive);\n        }\n    }\n    /**\n     * Remove the hideInactive.\n     */ removeHideInactive() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n        }\n    }\n    /**\n     * @returns The ForceMacroDetailedBalance or undefined.\n     */ getForceMacroDetailedBalance() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param forceMacroDetailedBalance The forceMacroDetailedBalance.\n     */ setForceMacroDetailedBalance(forceMacroDetailedBalance) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        if (i != undefined) this.nodes.set(i, forceMacroDetailedBalance);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName, this.nodes.size);\n            this.addNode(forceMacroDetailedBalance);\n        }\n    }\n    /**\n     * Remove the forceMacroDetailedBalance.\n     */ removeForceMacroDetailedBalance() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$6ffea14bdffd427f.tagName);\n        }\n    }\n    /**\n     * @returns The calcMethod or undefined.\n     */ getCalcMethod() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param calcMethod The calcMethod.\n     */ setCalcMethod(calcMethod) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        if (i != undefined) this.nodes.set(i, calcMethod);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName, this.nodes.size);\n            this.addNode(calcMethod);\n        }\n    }\n    /**\n     * Remove the calcMethod.\n     */ removeCalcMethod() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$f0bfd84d03c3a22d.tagName);\n        }\n    }\n    /**\n     * @returns The eigenvalues or undefined.\n     */ getEigenvalues() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param eigenvalues The eigenvalues.\n     */ setEigenvalues(eigenvalues) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        if (i != undefined) this.nodes.set(i, eigenvalues);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName, this.nodes.size);\n            this.addNode(eigenvalues);\n        }\n    }\n    /**\n     * Remove the eigenvalues.\n     */ removeEigenvalues() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName);\n        }\n    }\n    /**\n     * @returns The shortestTimeOfInterest.\n     */ getShortestTimeOfInterest() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param shortestTimeOfInterest The shortestTimeOfInterest.\n     */ setShortestTimeOfInterest(shortestTimeOfInterest) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        if (i != undefined) this.nodes.set(i, shortestTimeOfInterest);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$421603058c6718db.tagName, this.nodes.size);\n            this.addNode(shortestTimeOfInterest);\n        }\n    }\n    /**\n     * Remove the shortestTimeOfInterest.\n     */ removeShortestTimeOfInterest() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$421603058c6718db.tagName);\n        }\n    }\n    /**\n     * @returns The MaximumEvolutionTime.\n     */ getMaximumEvolutionTime() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param MaximumEvolutionTime The MaximumEvolutionTime.\n     */ setMaximumEvolutionTime(MaximumEvolutionTime) {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) this.nodes.set(i, MaximumEvolutionTime);\n        else {\n            this.index.set(MaximumEvolutionTime.tagName, this.nodes.size);\n            this.addNode(MaximumEvolutionTime);\n        }\n    }\n    /**\n     * Remove the MaximumEvolutionTime.\n     */ removeMaximumEvolutionTime() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$b51d7314540831ed.tagName);\n        }\n    }\n    /**\n     * @returns The automaticallySetMaxEne.\n     */ getAutomaticallySetMaxEne() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param automaticallySetMaxEne The automaticallySetMaxEne.\n     */ setAutomaticallySetMaxEne(automaticallySetMaxEne) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        if (i != undefined) this.nodes.set(i, automaticallySetMaxEne);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n    /**\n     * Remove the automaticallySetMaxEne.\n     */ removeAutomaticallySetMaxEne() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$576b56ca6e34780b.tagName);\n        }\n    }\n    /**\n     * @returns The diagramEnergyOffset.\n     */ getDiagramEnergyOffset() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */ setDiagramEnergyOffset(diagramEnergyOffset) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        if (i != undefined) this.nodes.set(i, diagramEnergyOffset);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName, this.nodes.size);\n            this.addNode(diagramEnergyOffset);\n        }\n    }\n    /**\n     * Remove the diagramEnergyOffset.\n     */ removeDiagramEnergyOffset() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName);\n        }\n    }\n    /**\n     * @returns The testMicroRates or undefined.\n     */ getTestMicroRates() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        if (i != undefined) return this.nodes.get(i);\n        return undefined;\n    }\n    /**\n     * @param testMicroRates The testMicroRates.\n     */ setTestMicroRates(testMicroRates) {\n        let i = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        if (i != undefined) this.nodes.set(i, testMicroRates);\n        else {\n            this.index.set($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName, this.nodes.size);\n            this.addNode(testMicroRates);\n        }\n    }\n    /**\n     * Remove the testMicroRates.\n     */ removeTestMicroRates() {\n        let i = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n        }\n    }\n}\n\n\n\n\n\n\nclass $762f625c179c0279$export$f99233281efd08a0 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        this.tagName = \"me:title\";\n    }\n    /**\n     * @param value \n     */ constructor(attributes, value){\n        super(attributes, $762f625c179c0279$export$f99233281efd08a0.tagName, value);\n    }\n}\nclass $762f625c179c0279$export$19d70f3647dee606 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"moleculeList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */ constructor(attributes, molecules){\n        super(attributes, $762f625c179c0279$export$19d70f3647dee606.tagName);\n        this.index = new Map();\n        if (molecules != undefined) molecules.forEach((molecule)=>{\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */ getMolecule(id) {\n        let i = this.index.get(id);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */ removeMolecule(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */ addMolecule(molecule) {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log(\"Replaced molecule with id \" + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$44466a39ca846289 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reactionList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */ constructor(attributes, reactions){\n        super(attributes, $762f625c179c0279$export$44466a39ca846289.tagName);\n        this.index = new Map();\n        if (reactions != undefined) reactions.forEach((reaction)=>{\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */ getReaction(id) {\n        let i = this.index.get(id);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */ removeReaction(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */ addReaction(reaction) {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log(\"Replaced reaction with id \" + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$692079bb871c6039 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        this.tagName = \"me:mesmer\";\n    }\n    static{\n        /**\n     * The header of the XML file.\n     */ this.header = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n    }\n    /**\n     * @param attributes The attributes.\n     * @param moleculeList The molecule list.\n     * @param reactionList The reaction list.\n     * @param conditions The conditions.\n     * @param modelParameters The model parameters.\n     * @param control The control.\n     */ constructor(attributes, title, moleculeList, reactionList, conditions, modelParameters, control){\n        super(attributes, $762f625c179c0279$export$692079bb871c6039.tagName);\n        this.index = new Map();\n        if (title != undefined) {\n            this.index.set($762f625c179c0279$export$f99233281efd08a0.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (moleculeList != undefined) {\n            this.index.set($762f625c179c0279$export$19d70f3647dee606.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set($762f625c179c0279$export$44466a39ca846289.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        if (conditions != undefined) {\n            this.index.set((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n        if (modelParameters != undefined) {\n            this.index.set((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        if (control != undefined) {\n            this.index.set((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n    /**\n     * @returns The title.\n     */ getTitle() {\n        let i = this.index.get($762f625c179c0279$export$f99233281efd08a0.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the title.\n     * @param title The title.\n     */ setTitle(title) {\n        let i = this.index.get($762f625c179c0279$export$f99233281efd08a0.tagName);\n        if (i != undefined) this.nodes.set(i, title);\n        else {\n            this.index.set($762f625c179c0279$export$f99233281efd08a0.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n    /**\n     * @returns The molecule list.\n     */ getMoleculeList() {\n        let i = this.index.get($762f625c179c0279$export$19d70f3647dee606.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */ setMoleculeList(moleculeList) {\n        let i = this.index.get($762f625c179c0279$export$19d70f3647dee606.tagName);\n        if (i != undefined) this.nodes.set(i, moleculeList);\n        else {\n            this.index.set($762f625c179c0279$export$19d70f3647dee606.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n    /**\n     * @returns The reaction list.\n     */ getReactionList() {\n        let i = this.index.get($762f625c179c0279$export$44466a39ca846289.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */ setReactionList(reactionList) {\n        let i = this.index.get($762f625c179c0279$export$44466a39ca846289.tagName);\n        if (i != undefined) this.nodes.set(i, reactionList);\n        else {\n            this.index.set($762f625c179c0279$export$44466a39ca846289.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n    /**\n     * @returns The conditions.\n     */ getConditions() {\n        let i = this.index.get((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the conditions.\n     * @param conditions The conditions.\n     */ setConditions(conditions) {\n        let i = this.index.get((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n        if (i != undefined) this.nodes.set(i, conditions);\n        else {\n            this.index.set((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n    /**\n     * @returns The model parameters.\n     */ getModelParameters() {\n        let i = this.index.get((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */ setModelParameters(modelParameters) {\n        let i = this.index.get((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n        if (i != undefined) this.nodes.set(i, modelParameters);\n        else {\n            this.index.set((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n    /**\n     * @returns The control.\n     */ getControl() {\n        let i = this.index.get((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the control.\n     * @param control The control.\n     */ setControl(control) {\n        let i = this.index.get((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n        if (i != undefined) this.nodes.set(i, control);\n        else {\n            this.index.set((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n}\n\n\n/**\n * The font sizes for different levels of the GUI.\n */ let $22c7fca7c69edc03$var$fontSize1 = \"1.5em\";\nlet $22c7fca7c69edc03$var$fontSize2 = \"1.25em\";\nlet $22c7fca7c69edc03$var$fontSize3 = \"1.0em\";\nlet $22c7fca7c69edc03$var$fontSize4 = \"0.75em\";\n/**\n * Margins for spacing GUI components.\n */ //let margin0: string = \"0px\";\nlet $22c7fca7c69edc03$var$margin1 = \"1px\";\nlet $22c7fca7c69edc03$var$margin2 = \"2px\";\nlet $22c7fca7c69edc03$var$margin3 = \"3px\";\nlet $22c7fca7c69edc03$var$margin5 = \"5px\";\nlet $22c7fca7c69edc03$var$margin25 = \"25px\";\nlet $22c7fca7c69edc03$var$margin50 = \"50px\";\nlet $22c7fca7c69edc03$var$margin75 = \"75px\";\nlet $22c7fca7c69edc03$var$margin100 = \"100px\";\nlet $22c7fca7c69edc03$var$margin125 = \"125px\";\nlet $22c7fca7c69edc03$var$level0 = {\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$level1 = {\n    marginLeft: $22c7fca7c69edc03$var$margin25,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$level2 = {\n    marginLeft: $22c7fca7c69edc03$var$margin50,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$level3 = {\n    marginLeft: $22c7fca7c69edc03$var$margin75,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$level4 = {\n    marginLeft: $22c7fca7c69edc03$var$margin100,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$level5 = {\n    marginLeft: $22c7fca7c69edc03$var$margin125,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$boundary1 = {\n    marginLeft: $22c7fca7c69edc03$var$margin1,\n    marginTop: $22c7fca7c69edc03$var$margin1,\n    marginBottom: $22c7fca7c69edc03$var$margin1,\n    marginRight: $22c7fca7c69edc03$var$margin1\n};\nlet $22c7fca7c69edc03$var$boundary3 = {\n    marginLeft: $22c7fca7c69edc03$var$margin3,\n    marginTop: $22c7fca7c69edc03$var$margin3,\n    marginBottom: $22c7fca7c69edc03$var$margin3,\n    marginRight: $22c7fca7c69edc03$var$margin3\n};\n/**\n * Symbology for the GUI.\n */ let $22c7fca7c69edc03$var$addString = \"add\";\nlet $22c7fca7c69edc03$var$addSymbol = \"\\uFF0B\";\nlet $22c7fca7c69edc03$var$removeString = \"remove\";\nlet $22c7fca7c69edc03$var$removeSymbol = \"\\u2715\";\nlet $22c7fca7c69edc03$var$addFromSpreadsheetString = \"Add from spreadsheet\";\n/**\n * Units for different things.\n */ let $22c7fca7c69edc03$var$unitsEnergy = [\n    \"kJ/mol\",\n    \"cm-1\",\n    \"kcal/mol\",\n    \"Hartree\"\n];\nlet $22c7fca7c69edc03$var$unitsRotConsts = [\n    \"cm-1\",\n    \"GHz\"\n];\nlet $22c7fca7c69edc03$var$unitsPressure = [\n    \"Torr\",\n    \"PPCC\",\n    \"atm\",\n    \"mbar\",\n    \"psi\",\n    \"mols/cc\"\n];\n/**\n * For mesmer.\n */ let $22c7fca7c69edc03$var$mesmer;\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */ let $22c7fca7c69edc03$var$molecules = new Map();\n/**\n * For storing the maximum molecule energy in a reaction.\n */ let $22c7fca7c69edc03$var$maxMoleculeEnergy = -Infinity;\n/**\n * For storing the minimum molecule energy in a reaction.\n */ let $22c7fca7c69edc03$var$minMoleculeEnergy = Infinity;\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */ let $22c7fca7c69edc03$var$reactions = new Map();\n/**\n * Once the DOM is loaded, add a load button.\n */ document.addEventListener(\"DOMContentLoaded\", ()=>{\n    // Create load button\n    let loadButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(\"Load\", $22c7fca7c69edc03$var$boundary1);\n    loadButton.addEventListener(\"click\", $22c7fca7c69edc03$var$load);\n    // Append loadButton to menu and set the display style of the menu.\n    let menuDiv = document.getElementById(\"menu\");\n    if (menuDiv) menuDiv.appendChild(loadButton);\n    menuDiv.style.display = \"flex\";\n});\n/**\n * Prompts the user for a MESMER XML file, initiates the parsing of the chosen file, and \n * creates a save button for saving a new XML file.\n */ function $22c7fca7c69edc03$var$load() {\n    let inputElement = document.createElement(\"input\");\n    inputElement.type = \"file\";\n    inputElement.onchange = function() {\n        if (inputElement.files) {\n            for(let i = 0; i < inputElement.files.length; i++)console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            let file = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            let inputFilename = file.name;\n            let reader = new FileReader();\n            let chunkSize = 1048576; // 1MB\n            let start = 0;\n            let contents = \"\";\n            reader.onload = function(e) {\n                if (e.target == null) throw new Error(\"Event target is null\");\n                contents += e.target.result;\n                if (file != null) {\n                    if (start < file.size) {\n                        // Read the next chunk\n                        let blob = file.slice(start, start + chunkSize);\n                        reader.readAsText(blob);\n                        start += chunkSize;\n                    } else {\n                        // All chunks have been read\n                        contents = contents.trim();\n                        $22c7fca7c69edc03$var$displayXML(inputFilename, contents);\n                        let parser = new DOMParser();\n                        let xml = parser.parseFromString(contents, \"text/xml\");\n                        $22c7fca7c69edc03$var$parse(xml);\n                    /*\n                        // Sending to the server for validation is no longer implemented as there is currently no server.\n                        // Send XML to the server\n                        fetch('http://localhost:1234/', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'text/xml',\n                            },\n                            body: contents,\n                        })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error(`HTTP error! status: ${response.status}`);\n                                }\n                                return response.text();\n                            })\n                            .then(data => {\n                                console.log('Server response:', data);\n                            })\n                            .catch(error => {\n                                console.error('There was a problem with the fetch operation:', error);\n                            });\n                        */ }\n                }\n            };\n            // Read the first chunk\n            let blob = file.slice(start, start + chunkSize);\n            reader.readAsText(blob);\n            start += chunkSize;\n            // Create save button.\n            let saveButtonId = \"saveButtonId\";\n            (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(saveButtonId);\n            let saveButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)(\"Save\", $22c7fca7c69edc03$var$boundary1);\n            saveButton.id = saveButtonId;\n            saveButton.addEventListener(\"click\", $22c7fca7c69edc03$var$saveXML);\n            let menuDiv = document.getElementById(\"menu\");\n            menuDiv.appendChild(saveButton);\n        }\n    };\n    inputElement.click();\n}\n/**\n * Parse an XMLDocument and create the mesmer object.\n * @param xml The XML.\n */ function $22c7fca7c69edc03$var$parse(xml) {\n    console.log(\"parse: \" + xml);\n    // Process the XML.\n    let xml_mesmer = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$692079bb871c6039).tagName);\n    $22c7fca7c69edc03$var$mesmer = new (0, $762f625c179c0279$export$692079bb871c6039)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_mesmer));\n    // Title.\n    let xml_title = xml.getElementsByTagName((0, $762f625c179c0279$export$f99233281efd08a0).tagName);\n    if (xml_title.length != 1) throw new Error(\"Multiple \" + (0, $762f625c179c0279$export$f99233281efd08a0).tagName + \" tags found\");\n    else {\n        let title = xml_title[0].childNodes[0].nodeValue.trim();\n        let titleNode = new (0, $762f625c179c0279$export$f99233281efd08a0)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_title[0]), title);\n        let titleElement = document.getElementById(\"title\");\n        let titleString = titleNode.value;\n        $22c7fca7c69edc03$var$mesmer.setTitle(titleNode);\n        let titleId = \"titleId\";\n        // Remove any existing titleDiv.\n        (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(titleId);\n        // Create input element.\n        let titleDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"text\", titleId + \"Input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                titleNode.value = event.target.value;\n                console.log(titleNode.tagName + \" changed to \" + titleNode.value);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, titleString, \"Title\", $22c7fca7c69edc03$var$fontSize1);\n        titleDiv.id = titleId;\n        //let input: HTMLInputElement = titleDiv.querySelector('input') as HTMLInputElement;\n        //input.style.fontSize = fontSize1;\n        //input.value = titleString;\n        //resizeInputElement(input, 0);\n        // Insert.\n        titleElement.parentNode?.insertBefore(titleDiv, titleElement);\n    }\n    // Molecules.\n    let moleculesElement = document.getElementById(\"molecules\");\n    let moleculesDivId = \"moleculesDivId\";\n    // If there is an existing moleculesDiv remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(moleculesDivId);\n    if (moleculesElement == null) ;\n    else {\n        let moleculesDiv = $22c7fca7c69edc03$var$processMoleculeList(xml);\n        moleculesDiv.id = moleculesDivId;\n        moleculesElement.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: moleculesDiv,\n            buttonLabel: \"Molecules\",\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize1,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level0,\n            contentDivId: moleculesDivId\n        }));\n        $22c7fca7c69edc03$var$mesmer.setMoleculeList(new (0, $762f625c179c0279$export$19d70f3647dee606)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(moleculesDiv), Array.from($22c7fca7c69edc03$var$molecules.values())));\n    }\n    // Reactions.\n    let reactionsElement = document.getElementById(\"reactions\");\n    let reactionsDivId = \"reactionsDivId\";\n    // If there is an existing reactionsDiv remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(reactionsDivId);\n    if (reactionsElement == null) ;\n    else {\n        let reactionsDiv = $22c7fca7c69edc03$var$processReactionList(xml);\n        reactionsDiv.id = reactionsDivId;\n        reactionsElement.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: reactionsDiv,\n            buttonLabel: \"Reactions\",\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize1,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level0,\n            contentDivId: reactionsDivId\n        }));\n        $22c7fca7c69edc03$var$mesmer.setReactionList(new (0, $762f625c179c0279$export$44466a39ca846289)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(reactionsDiv), Array.from($22c7fca7c69edc03$var$reactions.values())));\n    }\n    // Display reaction diagram. \n    $22c7fca7c69edc03$var$displayReactionsDiagram();\n    // Conditions\n    let conditionsElement = document.getElementById(\"conditions\");\n    let conditionsDivId = \"conditionsDivId\";\n    // If there is an existing conditionsDiv remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(conditionsDivId);\n    if (conditionsElement == null) ;\n    else {\n        let conditionsDiv = $22c7fca7c69edc03$var$processConditions(xml);\n        conditionsDiv.id = conditionsDivId;\n        conditionsElement.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: conditionsDiv,\n            buttonLabel: \"Conditions\",\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize1,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level0,\n            contentDivId: conditionsDivId\n        }));\n    }\n    // Model Parameters.\n    let modelParametersElement = document.getElementById(\"modelParameters\");\n    let modelParametersDivId = \"modelParametersDivId\";\n    // If there is an existing modelParametersDiv remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(modelParametersDivId);\n    if (modelParametersElement == null) ;\n    else {\n        let modelParametersDiv = $22c7fca7c69edc03$var$processModelParameters(xml);\n        modelParametersDiv.id = modelParametersDivId;\n        modelParametersElement.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: modelParametersDiv,\n            buttonLabel: \"Model Parameters\",\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize1,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level0,\n            contentDivId: modelParametersDivId\n        }));\n    }\n    // Control.\n    let controlElement = document.getElementById(\"control\");\n    let controlDivId = \"controlDivId\";\n    // If there is an existing controlDiv remove it.\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(controlDivId);\n    if (controlElement == null) ;\n    else {\n        let controlDiv = $22c7fca7c69edc03$var$processControl(xml);\n        controlDiv.id = controlDivId;\n        controlElement.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: controlDiv,\n            buttonLabel: \"Control\",\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize1,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level0,\n            contentDivId: controlDivId\n        }));\n    }\n    // Initiate action listeners for collapsible content.\n    (0, $2cda23d1e44619db$export$2883f21c1f82e07d)();\n}\n/**\n * Parse XML and create HTMLDivElement for molecules.\n * @param xml The XML.\n * @returns The HTMLDivElement.\n */ function $22c7fca7c69edc03$var$processMoleculeList(xml) {\n    // Create div to contain the molecules list.\n    let moleculeListDiv = document.createElement(\"div\");\n    // Get the XML \"moleculeList\" element.\n    let xml_moleculeList = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$19d70f3647dee606).tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames = new Set();\n    xml_moleculeList.childNodes.forEach(function(node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach((x)=>console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has((0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName)) throw new Error('Expecting tags with \"' + (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName + '\" tagName but there are none!');\n    // Process the XML \"molecule\" elements.\n    let xml_molecules = xml_moleculeList.getElementsByTagName((0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for(let i = 0; i < xml_molecules.length; i++){\n        let moleculeDiv = document.createElement(\"div\");\n        // Set attributes.\n        let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecules[i]);\n        let moleculeTagNames = new Set();\n        let cns = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for(let j = 0; j < cns.length; j++){\n            let cn = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) moleculeTagNames.add(cn.nodeName);\n            else // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n            if (cn.nodeName != \"#text\") console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n        //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n        // Init atomsNode.\n        let atomsNode;\n        // There can be an individual atom not in an atom array, or an attom array.\n        let xml_atomArrays = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName);\n        if (xml_atomArrays.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms = xml_atomArray.getElementsByTagName((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n            if (xml_atoms.length < 2) throw new Error(\"Expecting 2 or more atoms in \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \", but finding \" + xml_atoms.length + \"!\");\n            let atoms = [];\n            for(let j = 0; j < xml_atoms.length; j++)atoms.push(new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atoms[j])));\n            atomsNode = new (0, $7cb8c0739b32549c$export$9cea715eceba39a0)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atomArray), atoms);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName);\n        } else {\n            let xml_atoms = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n            if (xml_atoms.length == 1) atomsNode = new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atoms[0]));\n            else if (xml_atoms.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \"?\");\n        }\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n        // Init bondsNode.\n        let bondsNode;\n        // There can be an individual bond not in a bond array, or a bond array.\n        let xml_bondArrays = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName);\n        if (xml_bondArrays.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n        if (xml_bondArrays.length == 1) {\n            let xml_bondArray = xml_bondArrays[0];\n            let xml_bonds = xml_bondArray.getElementsByTagName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n            // There may be only 1 bond in a BondArray.\n            let bonds = [];\n            for(let j = 0; j < xml_bonds.length; j++)bonds.push(new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bonds[j])));\n            bondsNode = new (0, $7cb8c0739b32549c$export$746fba2e30d93fe6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bondArray), bonds);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName);\n        } else {\n            let xml_bonds = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n            if (xml_bonds.length == 1) bondsNode = new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bonds[0]));\n            else if (xml_bonds.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName + \"?\");\n        }\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n        // Create molecule.\n        let molecule = new (0, $7cb8c0739b32549c$export$3da9759ad07746a3)(attributes, atomsNode, bondsNode);\n        $22c7fca7c69edc03$var$molecules.set(molecule.id, molecule);\n        // Organise PropertyList or individual Property.\n        // (There can be an individual property not in a propertyList?)\n        // If there is a PropertyList, then create a property list.\n        let xml_PLs = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n        if (xml_PLs.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \" but finding \" + xml_PLs.length + \"!\");\n        if (xml_PLs.length == 1) {\n            // Create a new collapsible div for the PropertyList.\n            let plDiv = document.createElement(\"div\");\n            let contentDivId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \"_\";\n            let collapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                content: plDiv,\n                buttonLabel: (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName,\n                buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                boundary: $22c7fca7c69edc03$var$boundary1,\n                level: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            moleculeDiv.appendChild(collapsibleDiv);\n            // Create a new PropertyList.\n            let pl = new (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PLs[0]));\n            molecule.setProperties(pl);\n            let xml_Ps = xml_PLs[0].getElementsByTagName((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n            for(let j = 0; j < xml_Ps.length; j++){\n                let p = new (0, $7cb8c0739b32549c$export$41b04b3a73e7216d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_Ps[j]));\n                pl.setProperty(p);\n                molecule.setProperties(pl);\n                if (p.dictRef == (0, $7cb8c0739b32549c$export$95174cf0748f45cd).dictRef) $22c7fca7c69edc03$var$processProperty(p, $22c7fca7c69edc03$var$unitsEnergy, molecule, xml_Ps[j], plDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n                else if (p.dictRef == (0, $7cb8c0739b32549c$export$984abe26ded13ee0).dictRef) $22c7fca7c69edc03$var$processProperty(p, $22c7fca7c69edc03$var$unitsRotConsts, molecule, xml_Ps[j], plDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n                else $22c7fca7c69edc03$var$processProperty(p, undefined, molecule, xml_Ps[j], plDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3);\n            }\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n        } else {\n            // If there is a Property on its own, then create a property on its own.\n            let xml_Ps = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n            if (xml_Ps.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \"?\");\n            // Create a new Property.\n            let p = new (0, $7cb8c0739b32549c$export$41b04b3a73e7216d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_Ps[0]));\n            molecule.setProperties(p);\n            if (p.dictRef == (0, $7cb8c0739b32549c$export$95174cf0748f45cd).dictRef) $22c7fca7c69edc03$var$processProperty(p, $22c7fca7c69edc03$var$unitsEnergy, molecule, xml_Ps[0], moleculeDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2);\n            else if (p.dictRef == (0, $7cb8c0739b32549c$export$984abe26ded13ee0).dictRef) $22c7fca7c69edc03$var$processProperty(p, $22c7fca7c69edc03$var$unitsRotConsts, molecule, xml_Ps[0], moleculeDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2);\n            else $22c7fca7c69edc03$var$processProperty(p, undefined, molecule, xml_Ps[0], moleculeDiv, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n        }\n        // Organise EnergyTransferModel.\n        let xml_ETMs = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        if (xml_ETMs.length > 0) {\n            if (xml_ETMs.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName + \" but finding \" + xml_ETMs.length + \"!\");\n            let etm = new (0, $7cb8c0739b32549c$export$499950da20810ac9)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_ETMs[0]));\n            $22c7fca7c69edc03$var$processEnergyTransferModel(etm, molecule, xml_ETMs[0], moleculeDiv, $22c7fca7c69edc03$var$margin75);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        }\n        // Organise DOSCMethod.\n        let xml_DOSCMethod = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName);\n        if (xml_DOSCMethod.length > 0) {\n            if (xml_DOSCMethod.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \" but finding \" + xml_DOSCMethod.length + \"!\");\n            let dOSCMethod = new (0, $7cb8c0739b32549c$export$bbdce6c921702068)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_DOSCMethod[0]));\n            $22c7fca7c69edc03$var$processDOSCMethod(dOSCMethod, molecule, moleculeDiv);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName);\n        }\n        // Organise ExtraDOSCMethod.\n        let xml_ExtraDOSCMethod = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n        if (xml_ExtraDOSCMethod.length > 0) {\n            if (xml_ExtraDOSCMethod.length != 1) throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + xml_ExtraDOSCMethod.length);\n            //console.warn(\"ExtraDOSCMethod detected: This is not displayed in the GUI - more coding needed!\");\n            let extraDOSCMethod = new (0, $7cb8c0739b32549c$export$ae98b7db6376163d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_DOSCMethod[0]));\n            // Create a new collapsible div for the ExtraDOSCMethod.\n            let extraDOSCMethodDiv = document.createElement(\"div\");\n            let contentDivId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName + \"_\";\n            let extraDOSCMethodCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                content: extraDOSCMethodDiv,\n                buttonLabel: (0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName,\n                buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                boundary: $22c7fca7c69edc03$var$boundary1,\n                level: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            moleculeDiv.appendChild(extraDOSCMethodCollapsibleDiv);\n            // Read bondRef.\n            let xml_bondRefs = xml_ExtraDOSCMethod[0].getElementsByTagName((0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName);\n            if (xml_bondRefs.length > 0) {\n                if (xml_bondRefs.length != 1) throw new Error(\"Expecting only 1 bondRef, but there are \" + xml_bondRefs.length);\n                let container = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level3);\n                let label = document.createElement(\"label\");\n                label.textContent = (0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName + \": \";\n                container.appendChild(label);\n                let bondRef = new (0, $7cb8c0739b32549c$export$aef8e5ad5552fd72)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bondRefs[0]), (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bondRefs[0])));\n                extraDOSCMethod.setBondRef(bondRef);\n                // Create a HTMLSelectElement to select the bondRef.\n                let bondIds = molecule.getBonds().getBondIds();\n                let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(bondIds, bondRef.value, molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName, $22c7fca7c69edc03$var$boundary1);\n                selectElement.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLSelectElement) {\n                        bondRef.value = event.target.value;\n                        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n                    }\n                });\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n                container.appendChild(selectElement);\n                extraDOSCMethodDiv.appendChild(container);\n            }\n            // Read hinderedRotorPotential.\n            let xml_hinderedRotorPotentials = xml_ExtraDOSCMethod[0].getElementsByTagName((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName);\n            if (xml_hinderedRotorPotentials.length > 0) {\n                if (xml_hinderedRotorPotentials.length != 1) throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + xml_hinderedRotorPotentials.length);\n                let hinderedRotorPotentialAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_hinderedRotorPotentials[0]);\n                let hinderedRotorPotential = new (0, $7cb8c0739b32549c$export$9b8e857b9a081d2)(hinderedRotorPotentialAttributes);\n                // Create a new collapsible div for the HinderedRotorPotential.\n                let hinderedRotorPotentialDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$boundary1);\n                let contentDivId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName;\n                let hinderedRotorPotentialCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                    content: hinderedRotorPotentialDiv,\n                    buttonLabel: (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName,\n                    buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                    boundary: $22c7fca7c69edc03$var$boundary1,\n                    level: $22c7fca7c69edc03$var$level3,\n                    contentDivId: contentDivId\n                });\n                extraDOSCMethodDiv.appendChild(hinderedRotorPotentialCollapsibleDiv);\n                // Formats\n                let formatLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"Format:\", $22c7fca7c69edc03$var$level4);\n                hinderedRotorPotentialDiv.appendChild(formatLabel);\n                let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).formats, hinderedRotorPotential.format, molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, $22c7fca7c69edc03$var$boundary1);\n                selectElement.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLSelectElement) {\n                        hinderedRotorPotential.format = event.target.value;\n                        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n                    }\n                });\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n                hinderedRotorPotentialDiv.appendChild(selectElement);\n                // Add any units.\n                let unitsLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"Units:\", $22c7fca7c69edc03$var$boundary1);\n                hinderedRotorPotentialDiv.appendChild(unitsLabel);\n                $22c7fca7c69edc03$var$addAnyUnits((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).units, hinderedRotorPotentialAttributes, hinderedRotorPotentialDiv, molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName, $22c7fca7c69edc03$var$boundary1);\n                // Add expansionSize.\n                let expansionSizeLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"Expansion size:\", $22c7fca7c69edc03$var$boundary1);\n                hinderedRotorPotentialDiv.appendChild(expansionSizeLabel);\n                let expansionSizeInputElementId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName + \"_expansionSize\";\n                let expansionSizeInputElement = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", expansionSizeInputElementId, $22c7fca7c69edc03$var$boundary1);\n                expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                expansionSizeInputElement.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the input is a number.\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) hinderedRotorPotential.setExpansionSize(parseInt(event.target.value));\n                        else {\n                            // Reset the input to the current value.\n                            alert(\"Expansion size input is not a number, resetting...\");\n                            expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                        }\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(expansionSizeInputElement);\n                    }\n                });\n                expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(expansionSizeInputElement);\n                hinderedRotorPotentialDiv.appendChild(expansionSizeInputElement);\n                // Add useSineTerms.\n                let useSineTermsLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"Use sine terms:\", $22c7fca7c69edc03$var$boundary1);\n                hinderedRotorPotentialDiv.appendChild(useSineTermsLabel);\n                let useSineTermsInputId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName + \"_useSineTerms\";\n                let useSineTermsInput = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"checkbox\", useSineTermsInputId, $22c7fca7c69edc03$var$boundary1);\n                useSineTermsInput.checked = hinderedRotorPotential.getUseSineTerms();\n                useSineTermsInput.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLInputElement) hinderedRotorPotential.setUseSineTerms(event.target.checked);\n                });\n                hinderedRotorPotentialDiv.appendChild(useSineTermsInput);\n                // Load PotentialPoints.\n                // Create a new collapsible div for the potential points.\n                let potentialPointsDiv = document.createElement(\"div\");\n                let potentialPointContentDivId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \"_\" + (0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName + \"_\" + (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName;\n                let potentialPointCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                    content: potentialPointsDiv,\n                    buttonLabel: (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName,\n                    buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                    boundary: $22c7fca7c69edc03$var$boundary1,\n                    level: $22c7fca7c69edc03$var$level4,\n                    contentDivId: potentialPointContentDivId\n                });\n                hinderedRotorPotentialDiv.appendChild(potentialPointCollapsibleDiv);\n                let potentialPoints = [];\n                let xml_potentialPoints = xml_hinderedRotorPotentials[0].getElementsByTagName((0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName);\n                for(let k = 0; k < xml_potentialPoints.length; k++){\n                    let potentialPoint = new (0, $7cb8c0739b32549c$export$86ca5149fcde8feb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_potentialPoints[k]));\n                    potentialPoints.push(potentialPoint);\n                    let potentialPointDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level5);\n                    potentialPointCollapsibleDiv.appendChild(potentialPointDiv);\n                    // Process angle\n                    let angleLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"Angle:\", $22c7fca7c69edc03$var$boundary1);\n                    potentialPointDiv.appendChild(angleLabel);\n                    let angleInputElementId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName + \"_angle\";\n                    let angleInputElement = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", angleInputElementId, $22c7fca7c69edc03$var$boundary1);\n                    angleInputElement.addEventListener(\"change\", (event)=>{\n                        if (event.target instanceof HTMLInputElement) {\n                            // Check the input is a number.\n                            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                                let value = parseFloat(event.target.value);\n                                potentialPoint.setAngle(parseFloat(event.target.value));\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Angle input is not a number, resetting...\");\n                                angleInputElement.value = potentialPoint.getAngle().toString();\n                            }\n                            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(angleInputElement);\n                        }\n                    });\n                    angleInputElement.value = potentialPoint.getAngle().toString();\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(angleInputElement);\n                    potentialPointDiv.appendChild(angleInputElement);\n                    // Create a new div element for the potential.\n                    let potentialLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(\"Potential:\", $22c7fca7c69edc03$var$boundary1);\n                    potentialPointDiv.appendChild(potentialLabel);\n                    let potentialInputElementId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName + \"_potential\";\n                    let potentialInputElement = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", potentialInputElementId, $22c7fca7c69edc03$var$boundary1);\n                    potentialInputElement.addEventListener(\"change\", (event)=>{\n                        if (event.target instanceof HTMLInputElement) {\n                            // Check the input is a number.\n                            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                                let value = parseFloat(event.target.value);\n                                potentialPoint.setPotential(value);\n                                console.log(\"Set \" + (0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName + \" to \" + value.toString());\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Potential input is not a number, resetting...\");\n                                potentialInputElement.value = potentialPoint.getPotential().toString();\n                            }\n                            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(potentialInputElement);\n                        }\n                    });\n                    potentialInputElement.value = potentialPoint.getPotential().toString();\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(potentialInputElement);\n                    potentialPointDiv.appendChild(potentialInputElement);\n                    potentialPointsDiv.appendChild(potentialPointDiv);\n                }\n                potentialPointCollapsibleDiv.appendChild(potentialPointsDiv);\n                hinderedRotorPotential.setPotentialPoints(potentialPoints);\n                extraDOSCMethod.setHinderedRotorPotential(hinderedRotorPotential);\n            }\n            // Read periodicities.\n            let xml_periodicities = xml_DOSCMethod[0].getElementsByTagName((0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName);\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                let valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_periodicities[0]));\n                let periodicity = new (0, $7cb8c0739b32549c$export$9513c16afdf7d852)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_periodicities[0]), parseFloat(valueString));\n                extraDOSCMethod.setPeriodicity(periodicity);\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        valueString = event.target.value;\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(valueString)) {\n                            let value = parseFloat(valueString);\n                            periodicity.value = value;\n                            extraDOSCMethod.getPeriodicity().value = value;\n                            console.log(\"Set \" + (0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName + \" to \" + value);\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Periodicity input is not a number, resetting...\");\n                            event.target.value = periodicity.value.toString();\n                        }\n                    }\n                }, valueString, (0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName);\n                extraDOSCMethodDiv.appendChild(inputDiv);\n            }\n            molecule.setExtraDOSCMethod(extraDOSCMethod);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n        }\n        // Organise ReservoirSize.\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n        let xml_ReservoirSize = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n        if (xml_ReservoirSize.length > 0) {\n            if (xml_ReservoirSize.length != 1) throw new Error(\"Expecting only 1 reservoirSize, but there are \" + xml_ReservoirSize.length);\n            let valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_ReservoirSize[0]));\n            let value = parseFloat(valueString);\n            let reservoirSizeAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_ReservoirSize[0]);\n            let reservoirSize = new (0, $7cb8c0739b32549c$export$97850fe2f2906f00)(reservoirSizeAttributes, value);\n            molecule.setReservoirSize(reservoirSize);\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2, (event)=>{\n                if (event.target instanceof HTMLInputElement) {\n                    reservoirSize.value = parseFloat(event.target.value);\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                }\n            }, valueString, (0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n            moleculeDiv.appendChild(inputDiv);\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach((x)=>console.warn(x));\n        //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        // Create a molstar molecule visualisation\n        let molstarDiv = document.createElement(\"div\");\n        molstarDiv.id = molecule.id + \"_molstar\";\n        moleculeDiv.appendChild(molstarDiv);\n        // Create a new collapsible div for the molecule.\n        let collapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize2,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level1,\n            contentDivId: molecule.tagName + \"_\" + molecule.id\n        });\n        // Append the collapsibleDiv to the moleculeListDiv.\n        moleculeListDiv.appendChild(collapsibleDiv);\n    }\n    return moleculeListDiv;\n}\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */ function $22c7fca7c69edc03$var$displayXML(xmlFilename, xml) {\n    let xmlDiv = document.getElementById(\"xml\");\n    // xmlHeading\n    let xmlHeadingId = \"xmlHeading\";\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(xmlHeadingId);\n    let xmlHeading = document.createElement(\"h2\");\n    xmlHeading.textContent = xmlFilename;\n    xmlDiv.appendChild(xmlHeading);\n    // xmlParagraph\n    let xmlParagraphId = \"xmlParagraph\";\n    (0, $2cda23d1e44619db$export$cd7f480d6b8286c3)(xmlParagraphId);\n    let xmlPre = document.createElement(\"pre\");\n    xmlPre.textContent = xml;\n    xmlDiv.appendChild(xmlPre);\n}\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n * @param boundary The boundary to go around components.\n * @param level The level of the component.\n */ function $22c7fca7c69edc03$var$processProperty(p, units, molecule, element, moleculeDiv, boundary, level) {\n    // Handle scalar or array property\n    let scalarNodes = element.getElementsByTagName((0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName + \" but finding \" + scalarNodes.length + \"!\");\n        let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(scalarNodes[0]);\n        let value = parseFloat(inputString);\n        let psAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(scalarNodes[0]);\n        let ps = new (0, $7cb8c0739b32549c$export$d29b345ea2be5072)(psAttributes, value);\n        p.setProperty(ps);\n        let label = p.dictRef;\n        // Create a new div element for the input.\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", molecule.id + \"_\" + p.dictRef, $22c7fca7c69edc03$var$boundary1, level, (event)=>{\n            if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(ps, event.target);\n        }, inputString, label);\n        let inputElement = inputDiv.querySelector(\"input\");\n        //inputElement.value = inputString;\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n        inputElement.addEventListener(\"change\", (event)=>{\n            let eventTarget = event.target;\n            inputString = eventTarget.value;\n            ps = p.getProperty();\n            ps.value = parseFloat(inputString);\n            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n            if (p.dictRef == (0, $7cb8c0739b32549c$export$95174cf0748f45cd).dictRef) {\n                // Update the min and max molecule energy.\n                if (value < $22c7fca7c69edc03$var$minMoleculeEnergy) $22c7fca7c69edc03$var$minMoleculeEnergy = value;\n                if (value > $22c7fca7c69edc03$var$maxMoleculeEnergy) $22c7fca7c69edc03$var$maxMoleculeEnergy = value;\n                // Update the molecule energy diagram.\n                $22c7fca7c69edc03$var$displayReactionsDiagram();\n            }\n        });\n        $22c7fca7c69edc03$var$addAnyUnits(units, psAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n        moleculeDiv.appendChild(inputDiv);\n    } else {\n        let arrayNodes = element.getElementsByTagName((0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName + \" but finding \" + arrayNodes.length + \"!\");\n            let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(arrayNodes[0]);\n            let values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n            let paAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(arrayNodes[0]);\n            let pa = new (0, $7cb8c0739b32549c$export$9f93a3fdf2490572)(paAttributes, values);\n            p.setProperty(pa);\n            let label = p.dictRef;\n            // Create a new div element for the input.\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"text\", molecule.id + \"_\" + p.dictRef, boundary, level, (event)=>{\n                if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$819b5ff7dff3652c(pa, event.target);\n            }, inputString, label);\n            let inputElement = inputDiv.querySelector(\"input\");\n            inputElement.value = inputString;\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n            inputElement.addEventListener(\"change\", (event)=>{\n                let eventTarget = event.target;\n                inputString = eventTarget.value;\n                pa = p.getProperty();\n                values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n                pa.values = values;\n                console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n            });\n            $22c7fca7c69edc03$var$addAnyUnits(units, paAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n            moleculeDiv.appendChild(inputDiv);\n        } else throw new Error(\"Expecting \" + (0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName + \" or \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName);\n    }\n}\n/**\n * If there are a choice of units, then add a new select element to display/select them.\n * @param units The possible units.\n * @param attributes The attributes.\n * @param inputDiv The input div.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n */ function $22c7fca7c69edc03$var$addAnyUnits(units, attributes, inputDiv, id, tagOrDictRef, boundary) {\n    if (units != undefined) {\n        let unitsSelectElement = $22c7fca7c69edc03$var$getUnitsSelectElement(units, attributes, id, tagOrDictRef);\n        if (unitsSelectElement != undefined) {\n            Object.assign(unitsSelectElement.style, boundary);\n            inputDiv.appendChild(unitsSelectElement);\n        }\n    } else {\n        let attributesUnits = attributes.get(\"units\");\n        if (attributesUnits != undefined) {\n            let label = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(attributesUnits, boundary);\n            inputDiv.appendChild(label);\n        }\n    }\n}\n/**\n * @param attributes The attributes.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @returns A select element for setting the units or undefined if there is not attribute for units.\n */ function $22c7fca7c69edc03$var$getUnitsSelectElement(units, attributes, id, tagOrDictRef) {\n    let psUnits = attributes.get(\"units\");\n    if (psUnits != undefined) {\n        // Get a select element for setting the units.\n        let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(units, \"Units\", id, $22c7fca7c69edc03$var$boundary1);\n        // Set the initial value to the units.\n        selectElement.value = psUnits;\n        // Add event listener to selectElement.\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n        selectElement.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLSelectElement) {\n                attributes.set(\"units\", event.target.value);\n                console.log(\"Set \" + tagOrDictRef + \" units to \" + event.target.value);\n            }\n            (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n        });\n        return selectElement;\n    }\n    return undefined;\n}\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param margin The margin.\n * @param moleculeDiv The molecule div.\n */ function $22c7fca7c69edc03$var$processDOSCMethod(dOSCMethod, molecule, moleculeDiv) {\n    let label = document.createElement(\"label\");\n    label.textContent = (0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName + \": \";\n    let container = document.createElement(\"div\");\n    container.appendChild(label);\n    // Create a HTMLSelectElement to select the DOSCMethod.\n    let options = [\n        \"ClassicalRotors\",\n        \"me:QMRotors\",\n        \"QMRotors\"\n    ];\n    let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(options, \"DOSCMethod\", molecule.id + \"_\" + \"Select_DOSCMethod\", $22c7fca7c69edc03$var$boundary1);\n    // Set the initial value to the DOSCMethod.\n    selectElement.value = dOSCMethod.getXsiType();\n    // Add event listener to selectElement.\n    selectElement.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLSelectElement) {\n            dOSCMethod.setXsiType(event.target.value);\n            console.log(\"Set DOSCMethod to \" + event.target.value);\n        }\n    });\n    molecule.setDOSCMethod(dOSCMethod);\n    container.appendChild(selectElement);\n    Object.assign(container.style, $22c7fca7c69edc03$var$level2);\n    moleculeDiv.appendChild(container);\n}\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */ function $22c7fca7c69edc03$var$processEnergyTransferModel(etm, molecule, element, moleculeDiv, margin) {\n    let xml_deltaEDowns = element.getElementsByTagName((0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName);\n    if (xml_deltaEDowns.length > 0) {\n        // Create a new collapsible div for the energyTransferModel.\n        let etmDiv = document.createElement(\"div\");\n        let contentDivId = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName;\n        let collapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: etmDiv,\n            buttonLabel: (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName,\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level2,\n            contentDivId: contentDivId\n        });\n        moleculeDiv.appendChild(collapsibleDiv);\n        let deltaEDowns = [];\n        for(let k = 0; k < xml_deltaEDowns.length; k++){\n            let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_deltaEDowns[k]);\n            let value = parseFloat(inputString);\n            let deltaEDownAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_deltaEDowns[k]);\n            let deltaEDown = new (0, $7cb8c0739b32549c$export$16fc56ab40b12b45)(deltaEDownAttributes, value);\n            deltaEDowns.push(deltaEDown);\n            let label = (0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName;\n            // Create a new div element for the input.\n            let id = molecule.id + \"_\" + (0, $7cb8c0739b32549c$export$499950da20810ac9).tagName + \"_\" + (0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName + \"_\" + k;\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                if (event.target instanceof HTMLInputElement) {\n                    $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(deltaEDown, event.target);\n                    inputString = event.target.value;\n                    deltaEDowns[k].setValue(parseFloat(inputString));\n                    console.log(\"Set \" + id + \" to \" + inputString);\n                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                }\n            }, inputString, label);\n            etmDiv.appendChild(inputDiv);\n            let unitsLabel = document.createElement(\"label\");\n            unitsLabel.textContent = \"cm-1\";\n            inputDiv.appendChild(unitsLabel);\n        }\n        etm.setDeltaEDowns(deltaEDowns);\n        molecule.setEnergyTransferModel(etm);\n    }\n}\nfunction $22c7fca7c69edc03$export$819b5ff7dff3652c(node, input) {\n    let inputString = input.value.trim();\n    if (inputString == \"\") {\n        alert(\"Empty input resetting...\");\n        input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \");\n        return;\n    }\n    let inputStrings = inputString.split(/\\s+/);\n    let values = [];\n    let success = true;\n    inputStrings.forEach(function(value) {\n        if (!(0, $dcf293d9ee452407$export$e90fb89750dba83f)(value)) success = false;\n        values.push(parseFloat(value));\n    });\n    if (!success) {\n        alert(\"An input is not a number, resetting...\");\n        input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \");\n        return;\n    }\n    //console.log(\"propertyArray=\" + propertyArray);\n    if (values.length == node.values.length) console.log(\"Changed \" + node.tagName + ' from: \"' + inputString + '\" to: \"' + (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \") + '\"');\n    else {\n        alert(\"Expecting \" + node.values.length + \" values for, but finding \" + values.length + \" resetting...\");\n        input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(node.values, \" \");\n    }\n}\nwindow.setNumberArrayNode = $22c7fca7c69edc03$export$819b5ff7dff3652c;\nfunction $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(node, input) {\n    if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(input.value)) {\n        let inputNumber = parseFloat(input.value);\n        node.value = inputNumber;\n        console.log(\"Value set to \" + inputNumber);\n    } else {\n        alert(\"Value is not numeric, resetting...\");\n        input.value = node.value.toString();\n    }\n}\nwindow.set = $22c7fca7c69edc03$export$b1e4cbf5b56e0e21;\n/**\n * Parse XML and create HTMLDivElement for reactions.\n * @param {XMLDocument} xml The XML document.\n */ function $22c7fca7c69edc03$var$processReactionList(xml) {\n    // Create div to contain the reaction list.\n    let reactionListDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$boundary1);\n    // Get the XML \"reactionList\" element.\n    let xml_reactionList = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$44466a39ca846289).tagName);\n    // Check the XML \"reactionList\" element has one or more \"reaction\" elements and no other elements.\n    let reactionListTagNames = new Set();\n    xml_reactionList.childNodes.forEach(function(node) {\n        reactionListTagNames.add(node.nodeName);\n    });\n    if (reactionListTagNames.size != 1) {\n        if (!(reactionListTagNames.size == 2 && reactionListTagNames.has(\"#text\"))) {\n            console.error(\"reactionListTagNames:\");\n            reactionListTagNames.forEach((x)=>console.error(x));\n            throw new Error(\"Additional tag names in reactionList:\");\n        }\n    }\n    if (!reactionListTagNames.has((0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName)) throw new Error('Expecting tags with \"' + (0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName + '\" tagName but there are none!');\n    // Process the XML \"reaction\" elements.\n    let xml_reactions = xml_reactionList.getElementsByTagName((0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    //xml_reactions.forEach(function (xml_reaction) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for(let i = 0; i < xml_reactions.length; i++){\n        let reactionDiv = (0, $2cda23d1e44619db$export$331ff980f0d45cff)($22c7fca7c69edc03$var$boundary1);\n        // Set attributes.\n        let reactionAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactions[i]);\n        let reactionTagNames = new Set();\n        let cns = xml_reactions[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for(let j = 0; j < cns.length; j++){\n            let cn = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!reactionTagNames.has(cn.nodeName)) reactionTagNames.add(cn.nodeName);\n            else // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n            if (cn.nodeName != \"#text\") console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n        //console.log(cn.nodeName);\n        }\n        // Create reaction.\n        let reaction = new (0, $381c11e38cac5410$export$d2ae4167a30cf6bb)(reactionAttributes);\n        $22c7fca7c69edc03$var$reactions.set(reaction.id, reaction);\n        // Reactions typically have one or more reactant and product. They may also have one or more \"me:transitionState\" and other things...\n        // Load reactants.\n        let xml_reactants = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName);\n        reactionTagNames.delete((0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName);\n        //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n        if (xml_reactants.length > 0) {\n            // Create a new div for the reactants.\n            let reactantsDiv = document.createElement(\"div\");\n            let reactants = [];\n            for(let j = 0; j < xml_reactants.length; j++){\n                let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_reactants[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                let molecule = new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule));\n                let reactant = new (0, $381c11e38cac5410$export$dcfd4302d04b7fb6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactants[j]), molecule);\n                reactants.push(reactant);\n                // Create a new div for the role.\n                let container = document.createElement(\"div\");\n                let label = document.createElement(\"label\");\n                label.textContent = molecule.ref + \" role: \";\n                container.appendChild(label);\n                // Create a HTMLSelectElement to select the Role.\n                let options = [\n                    \"deficientReactant\",\n                    \"excessReactant\",\n                    \"modelled\"\n                ];\n                let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(options, \"Role\", molecule.ref + \"_\" + \"Select_Role\", $22c7fca7c69edc03$var$boundary1);\n                // Set the initial value.\n                selectElement.value = molecule.role;\n                // Add event listener to selectElement.\n                selectElement.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLSelectElement) {\n                        molecule.setRole(event.target.value);\n                        console.log(\"Set Role to \" + event.target.value);\n                    }\n                });\n                container.appendChild(selectElement);\n                Object.assign(container.style, $22c7fca7c69edc03$var$level3);\n                reactantsDiv.appendChild(container);\n            }\n            reaction.setReactants(reactants);\n            // Create a new collapsible div for the reactants.\n            let contentDivId = reaction.id + \"_\" + (0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName;\n            let reactantCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                content: reactantsDiv,\n                buttonLabel: \"Reactants\",\n                buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                boundary: $22c7fca7c69edc03$var$boundary1,\n                level: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(reactantCollapsibleDiv);\n        }\n        // Load products.\n        let xml_products = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$264ad599d7cef668).tagName);\n        reactionTagNames.delete((0, $381c11e38cac5410$export$264ad599d7cef668).tagName);\n        //console.log(\"xml_products.length=\" + xml_products.length);\n        if (xml_products.length > 0) {\n            let productsDiv = document.createElement(\"div\");\n            let products = [];\n            for(let j = 0; j < xml_products.length; j++){\n                let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_products[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                let molecule = new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule));\n                let product = new (0, $381c11e38cac5410$export$264ad599d7cef668)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_products[j]), molecule);\n                products.push(product);\n                let options = [\n                    \"modelled\",\n                    \"sink\"\n                ];\n                let container = (0, $2cda23d1e44619db$export$cc4306e505fa54b1)(molecule.ref + \" role:\", options, molecule.ref + \"_\" + \"Select_Role\", \"Role\", $22c7fca7c69edc03$var$boundary1);\n                let selectElement = container.querySelector(\"select\");\n                selectElement.value = molecule.role;\n                selectElement.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLSelectElement) {\n                        molecule.setRole(event.target.value);\n                        console.log(\"Set Role to \" + event.target.value);\n                    }\n                });\n                Object.assign(container.style, $22c7fca7c69edc03$var$level3);\n                productsDiv.appendChild(container);\n            }\n            reaction.setProducts(products);\n            // Create collapsible div for the products.\n            let contentDivId = reaction.id + \"_\" + (0, $381c11e38cac5410$export$264ad599d7cef668).tagName;\n            let productCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                content: productsDiv,\n                buttonLabel: \"Products\",\n                buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                boundary: $22c7fca7c69edc03$var$boundary1,\n                level: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(productCollapsibleDiv);\n        }\n        // Load tunneling.\n        let xml_tunneling = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName);\n        if (xml_tunneling.length > 0) {\n            if (xml_tunneling.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName + \" but finding \" + xml_tunneling.length + \"!\");\n            let tunneling = new (0, $381c11e38cac5410$export$c3cf6f96dac11421)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tunneling[0]));\n            reaction.setTunneling(tunneling);\n            // Create a new div for the tunneling.\n            let container = document.createElement(\"div\");\n            let label = document.createElement(\"label\");\n            label.textContent = (0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName + \": \";\n            container.appendChild(label);\n            // Create a HTMLSelectElement to select the Tunneling.\n            let options = [\n                \"Eckart\",\n                \"WKB\"\n            ];\n            let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(options, \"Tunneling\", reaction.id + \"_\" + \"Select_Tunneling\", $22c7fca7c69edc03$var$boundary1);\n            // Set the initial value.\n            selectElement.value = tunneling.getName();\n            // Add event listener to selectElement.\n            selectElement.addEventListener(\"change\", (event)=>{\n                if (event.target instanceof HTMLSelectElement) {\n                    tunneling.setName(event.target.value);\n                    console.log(\"Set Tunneling to \" + event.target.value);\n                }\n            });\n            container.appendChild(selectElement);\n            Object.assign(container.style, $22c7fca7c69edc03$var$level2);\n            reactionDiv.appendChild(container);\n        }\n        // Load transition states.\n        let xml_transitionStates = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$145c1ed87b1a2216).tagName);\n        //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n        if (xml_transitionStates.length > 0) {\n            let transitionStatesDiv = document.createElement(\"div\");\n            let transitionStates = [];\n            for(let j = 0; j < xml_transitionStates.length; j++){\n                let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_transitionStates[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                let molecule = new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule));\n                let transitionState = new (0, $381c11e38cac5410$export$145c1ed87b1a2216)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_transitionStates[j]), molecule);\n                transitionStates.push(transitionState);\n                // Create a label for the Transition State.\n                let label = (0, $2cda23d1e44619db$export$f2839682b8c07f35)(molecule.ref + \" role: transitionState\", $22c7fca7c69edc03$var$level3);\n                transitionStatesDiv.appendChild(label);\n            }\n            reaction.setTransitionStates(transitionStates);\n            // Create a new collapsible div for the transition states.\n            let contentDivId = reaction.id + \"_\" + (0, $381c11e38cac5410$export$145c1ed87b1a2216).tagName;\n            let transitionStatesCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                content: transitionStatesDiv,\n                buttonLabel: \"Transition States\",\n                buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                boundary: $22c7fca7c69edc03$var$boundary1,\n                level: $22c7fca7c69edc03$var$level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(transitionStatesCollapsibleDiv);\n        }\n        // Load MCRCMethod.\n        //console.log(\"Load MCRCMethod...\");\n        let xml_MCRCMethod = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName);\n        //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n        //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n        if (xml_MCRCMethod.length > 0) {\n            if (xml_MCRCMethod.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n            else {\n                let mCRCMethodDiv = document.createElement(\"div\");\n                let mCRCMethod;\n                let mCRCMethodAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_MCRCMethod[0]);\n                let name = mCRCMethodAttributes.get(\"name\");\n                //console.log(MCRCMethod.tagName + \" name=\" + name);\n                if (name == undefined || name == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType2) {\n                    let type = mCRCMethodAttributes.get(\"xsi:type\");\n                    mCRCMethod = new (0, $381c11e38cac5410$export$191e95ebb11cc88)(mCRCMethodAttributes);\n                    //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                    if (type == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType || type == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType2) {\n                        let xml_preExponential = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName);\n                        if (xml_preExponential != null) {\n                            if (xml_preExponential[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_preExponential[0]);\n                                let value = parseFloat(inputString);\n                                let preExponentialAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_preExponential[0]);\n                                let preExponential = new (0, $381c11e38cac5410$export$38ce90ac8b004d85)(preExponentialAttributes, value);\n                                mCRCMethod.setPreExponential(preExponential);\n                                let label = (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(preExponential, event.target);\n                                }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let eventTarget = event.target;\n                                    inputString = eventTarget.value;\n                                    preExponential.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, preExponentialAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName, (0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"preExponential \" + preExponential);\n                        let xml_activationEnergy = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName);\n                        if (xml_activationEnergy != null) {\n                            if (xml_activationEnergy[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_activationEnergy[0]);\n                                let value = parseFloat(inputString);\n                                let activationEnergyAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_activationEnergy[0]);\n                                let activationEnergy = new (0, $381c11e38cac5410$export$1bdc69d2439d749d)(activationEnergyAttributes, value);\n                                mCRCMethod.setActivationEnergy(activationEnergy);\n                                let label = (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(activationEnergy, event.target);\n                                }, inputString, label);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let eventTarget = event.target;\n                                    inputString = eventTarget.value;\n                                    activationEnergy.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, activationEnergyAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName, (0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"activationEnergy \" + activationEnergy);\n                        let xml_tInfinity = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName);\n                        if (xml_tInfinity != null) {\n                            if (xml_tInfinity[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_tInfinity[0]);\n                                let value = parseFloat(inputString);\n                                let tInfinityAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tInfinity[0]);\n                                let tInfinity = new (0, $381c11e38cac5410$export$8d95dd32819bc86c)(tInfinityAttributes, value);\n                                mCRCMethod.setTInfinity(tInfinity);\n                                let label = (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(tInfinity, event.target);\n                                }, inputString, label);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let eventTarget = event.target;\n                                    inputString = eventTarget.value;\n                                    tInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, tInfinityAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName, (0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"tInfinity \" + tInfinity);\n                        let xml_nInfinity = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$d08982dd841d496f).tagName);\n                        if (xml_nInfinity != null) {\n                            if (xml_nInfinity[0] != null) {\n                                let inputString = (0, $6648a11f147a5c05$export$433c819efd6b1ea5)(xml_nInfinity[0]);\n                                let value = parseFloat(inputString);\n                                let nInfinityAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_nInfinity[0]);\n                                let nInfinity = new (0, $381c11e38cac5410$export$d08982dd841d496f)(nInfinityAttributes, value);\n                                mCRCMethod.setNInfinity(nInfinity);\n                                let label = (0, $381c11e38cac5410$export$d08982dd841d496f).tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).tagName + \"_\" + (0, $381c11e38cac5410$export$d08982dd841d496f).tagName;\n                                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n                                    if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(nInfinity, event.target);\n                                }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement = inputDiv.querySelector(\"input\");\n                                inputElement.value = inputString;\n                                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                inputElement.addEventListener(\"change\", (event)=>{\n                                    let eventTarget = event.target;\n                                    inputString = eventTarget.value;\n                                    nInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputElement);\n                                });\n                                $22c7fca7c69edc03$var$addAnyUnits(undefined, nInfinityAttributes, inputDiv, reaction.id + \"_\" + (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType + \"_\" + (0, $381c11e38cac5410$export$d08982dd841d496f).tagName, (0, $381c11e38cac5410$export$d08982dd841d496f).tagName, $22c7fca7c69edc03$var$boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"nInfinity \" + nInfinity);\n                        // Create a new collapsible div for the MCRCMethod.\n                        let contentDivId = reaction.id + \"_\" + (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName;\n                        let mCRCMethodCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n                            content: mCRCMethodDiv,\n                            buttonLabel: (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName,\n                            buttonFontSize: $22c7fca7c69edc03$var$fontSize3,\n                            boundary: $22c7fca7c69edc03$var$boundary1,\n                            level: $22c7fca7c69edc03$var$level2,\n                            contentDivId: contentDivId\n                        });\n                        reactionDiv.appendChild(mCRCMethodCollapsibleDiv);\n                    } else throw new Error(\"Unexpected xsi:type=\" + type);\n                } else {\n                    mCRCMethod = new (0, $381c11e38cac5410$export$6fa70ee10f356b6)(mCRCMethodAttributes);\n                    let mCRCMethodLabel = document.createElement(\"label\");\n                    mCRCMethodLabel.textContent = (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName + \": \" + mCRCMethodAttributes.get(\"name\");\n                    Object.assign(mCRCMethodLabel.style, $22c7fca7c69edc03$var$level2);\n                    mCRCMethodDiv.appendChild(mCRCMethodLabel);\n                    reactionDiv.appendChild(mCRCMethodDiv);\n                }\n                reaction.setMCRCMethod(mCRCMethod);\n            }\n        }\n        // Load excessReactantConc\n        let xml_excessReactantConc = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$284227145ed02b04).tagName);\n        if (xml_excessReactantConc.length > 0) {\n            if (xml_excessReactantConc.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n            let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_excessReactantConc[0])));\n            let excessReactantConc = new (0, $381c11e38cac5410$export$284227145ed02b04)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_excessReactantConc[0]), value);\n            reaction.setExcessReactantConc(excessReactantConc);\n            let id = reaction.id + \"_\" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName;\n            let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2, (event)=>{\n                if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(excessReactantConc, event.target);\n            }, value.toString(), (0, $381c11e38cac5410$export$284227145ed02b04).tagName);\n            reactionDiv.appendChild(inputDiv);\n        }\n        // Create a new collapsible div for the reaction.\n        let reactionCollapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n            content: reactionDiv,\n            buttonLabel: reaction.id + \"(\" + reaction.getLabel() + \")\",\n            buttonFontSize: $22c7fca7c69edc03$var$fontSize2,\n            boundary: $22c7fca7c69edc03$var$boundary1,\n            level: $22c7fca7c69edc03$var$level1,\n            contentDivId: reaction.tagName + \"_\" + reaction.id\n        });\n        // Append the collapsibleDiv to the reactionListDiv.\n        reactionListDiv.appendChild(reactionCollapsibleDiv);\n    }\n    return reactionListDiv;\n}\n/**\n * Parse xml to initialise conditions.\n * @param xml The XML document.\n * @returns The conditions div.\n */ function $22c7fca7c69edc03$var$processConditions(xml) {\n    console.log((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n    // Create div to contain the conditions.\n    let conditionsDiv = document.createElement(\"div\");\n    // Get the XML \"moleculeList\" element.\n    let xml_conditions = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n    let conditions = new (0, $613b909b2797b099$export$363c7374d425f4ad)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_conditions));\n    $22c7fca7c69edc03$var$mesmer.setConditions(conditions);\n    // Bath Gases\n    let bathGasesDiv = document.createElement(\"div\");\n    conditionsDiv.appendChild(bathGasesDiv);\n    // Add collapsible div.\n    conditionsDiv.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        content: bathGasesDiv,\n        buttonLabel: (0, $613b909b2797b099$export$b33a132661f4be58).name,\n        buttonFontSize: $22c7fca7c69edc03$var$fontSize2,\n        boundary: $22c7fca7c69edc03$var$boundary1,\n        level: $22c7fca7c69edc03$var$level1,\n        contentDivId: (0, $613b909b2797b099$export$b33a132661f4be58).tagName\n    }));\n    // Add add button.\n    let addBathGasButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString, $22c7fca7c69edc03$var$level2);\n    bathGasesDiv.appendChild(addBathGasButton);\n    addBathGasButton.addEventListener(\"click\", ()=>{\n        let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(new Map(), \"\");\n        conditions.addBathGas(bathGas);\n        let containerDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level2);\n        let bathGasLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)((0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n        containerDiv.appendChild(bathGasLabel);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs = new Set($22c7fca7c69edc03$var$molecules.keys());\n        let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(Array.from(moleculeIDs), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, (0, $613b909b2797b099$export$363c7374d425f4ad).tagName + \"_\" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Added \" + event.target.value + \" as a \" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n            }\n        });\n        selectElement.style.marginLeft = $22c7fca7c69edc03$var$margin2;\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n        containerDiv.appendChild(selectElement);\n        // Add a remove button.\n        let removeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$removeString, $22c7fca7c69edc03$var$boundary1);\n        removeButton.addEventListener(\"click\", ()=>{\n            bathGasesDiv.removeChild(containerDiv);\n            conditions.removeBathGas(bathGas);\n        });\n        containerDiv.appendChild(removeButton);\n        bathGasesDiv.appendChild(containerDiv);\n    });\n    // Process any \"bathGas\" elements that are immediate children of xml_conditions.\n    let xml_bathGases = Array.from(xml_conditions.children).filter((child)=>child.tagName === (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n    if (xml_bathGases.length > 0) for(let i = 0; i < xml_bathGases.length; i++){\n        let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bathGases[i]);\n        let moleculeID = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bathGases[i]));\n        let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(attributes, moleculeID);\n        console.log(\"bathGas\" + bathGas.toString());\n        conditions.addBathGas(bathGas);\n        let containerDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level2);\n        let bathGasLabel = (0, $2cda23d1e44619db$export$f2839682b8c07f35)((0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n        containerDiv.appendChild(bathGasLabel);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs = new Set($22c7fca7c69edc03$var$molecules.keys());\n        let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(Array.from(moleculeIDs), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, (0, $613b909b2797b099$export$363c7374d425f4ad).tagName + \"_\" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Set \" + (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName + \" to \" + event.target.value);\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n            }\n        });\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n        containerDiv.appendChild(selectElement);\n        // Add a remove button.\n        let removeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$removeString, $22c7fca7c69edc03$var$boundary1);\n        removeButton.addEventListener(\"click\", ()=>{\n            bathGasesDiv.removeChild(containerDiv);\n            conditions.removeBathGas(bathGas);\n        });\n        containerDiv.appendChild(removeButton);\n        bathGasesDiv.appendChild(containerDiv);\n    }\n    // PTs\n    let pTsDiv = document.createElement(\"div\");\n    conditionsDiv.appendChild(pTsDiv);\n    let pTs = new (0, $613b909b2797b099$export$3be0efe793283834)(new Map());\n    // Add collapsible div.\n    conditionsDiv.appendChild((0, $2cda23d1e44619db$export$8b2cd46c11844202)({\n        content: pTsDiv,\n        buttonLabel: (0, $613b909b2797b099$export$3be0efe793283834).name,\n        buttonFontSize: $22c7fca7c69edc03$var$fontSize2,\n        boundary: $22c7fca7c69edc03$var$boundary1,\n        level: $22c7fca7c69edc03$var$level1,\n        contentDivId: (0, $613b909b2797b099$export$b33a132661f4be58).tagName\n    }));\n    // Create an add button to add a new PTpair.\n    let addButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString, $22c7fca7c69edc03$var$level2);\n    pTsDiv.appendChild(addButton);\n    // Add event listener to the addButton.\n    addButton.addEventListener(\"click\", ()=>{\n        // Create a new PTpair.\n        let pTPairAttributes = new Map();\n        pTPairAttributes.set(\"units\", \"Torr\");\n        let pTPair = new (0, $613b909b2797b099$export$3fe97ecb6b172244)(pTPairAttributes);\n        let pTPairIndex = pTs.addPTpair(pTPair);\n        let pTPairDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level2);\n        $22c7fca7c69edc03$var$addP(pTPairDiv, pTPair);\n        $22c7fca7c69edc03$var$addT(pTPairDiv, pTPair);\n        $22c7fca7c69edc03$var$addAnyUnits(undefined, pTPairAttributes, pTPairDiv, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, $22c7fca7c69edc03$var$boundary1);\n        // Create an add button for adding details.\n        let addDetailsButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString + \" details\", $22c7fca7c69edc03$var$boundary1);\n        pTPairDiv.appendChild(addDetailsButton);\n        // Add event listener to the addDetailsButton.\n        addDetailsButton.addEventListener(\"click\", ()=>{\n            let detailsDiv = document.createElement(\"div\");\n            $22c7fca7c69edc03$var$addExcessReactantConc(pTPairDiv, pTPair);\n            $22c7fca7c69edc03$var$addPercentExcessReactantConc(pTPairDiv, pTPair);\n            $22c7fca7c69edc03$var$addPrecision(pTPairDiv, pTPair);\n            $22c7fca7c69edc03$var$addBathGas(pTPairDiv, pTPair);\n            $22c7fca7c69edc03$var$addExperimentRateButton(pTPairDiv, pTPair);\n            pTPairDiv.insertBefore(detailsDiv, addDetailsButton);\n            pTPairDiv.removeChild(addDetailsButton);\n        });\n        /*\n        addExperimentRateButton.addEventListener('click', () => {\n            let experimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n            let experimentRate: ExperimentRate = new ExperimentRate(new Map(), NaN);\n            pTPair.setExperimentRate(experimentRate);\n            let experimentRateLabel: HTMLLabelElement = document.createElement('label');\n            experimentRateLabel.textContent = ExperimentRate.tagName + \": \";\n            experimentRateDiv.appendChild(experimentRateLabel);\n            pTPairDiv.insertBefore(experimentRateDiv, addExperimentRateButton);\n            pTPairDiv.removeChild(addExperimentRateButton);\n        });\n        pTPairDiv.appendChild(addExperimentRateDiv);\n        */ // Add a remove button.\n        let removeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$removeString, $22c7fca7c69edc03$var$boundary1);\n        removeButton.addEventListener(\"click\", ()=>{\n            pTsDiv.removeChild(pTPairDiv);\n            pTs.removePTpair(pTPairIndex);\n            pTPair.removeBathGas();\n        });\n        pTPairDiv.appendChild(removeButton);\n        pTsDiv.appendChild(pTPairDiv);\n    });\n    // Create an add from spreadsheet button to add multiple PTPairs.\n    let addMultipleButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addFromSpreadsheetString, $22c7fca7c69edc03$var$boundary1);\n    pTsDiv.appendChild(addMultipleButton);\n    // Add event listener to the addMultipleButton.\n    addMultipleButton.addEventListener(\"click\", ()=>{\n        // Add a new text input for the user to paste the PTPairs.\n        let inputDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level2);\n        let addFromSpreadsheetId = (0, $613b909b2797b099$export$3be0efe793283834).tagName + \"_\" + \"addFromSpreadsheet\";\n        let inputElement = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"text\", addFromSpreadsheetId, $22c7fca7c69edc03$var$level2);\n        inputDiv.appendChild(inputElement);\n        pTsDiv.insertBefore(inputDiv, addButton);\n        // Add an event listener to the inputElement.\n        inputElement.addEventListener(\"change\", ()=>{\n            console.log(\"inputElement.value=\" + inputElement.value);\n            console.log(\"inputElement.value.length=\" + inputElement.value.length);\n            if (inputElement.value.length > 0) {\n                let pTPairsArray = inputElement.value.split(\" \");\n                console.log(\"pTPairsArray.length=\" + pTPairsArray.length);\n                for(let i = 0; i < pTPairsArray.length; i++){\n                    let pTPairAttributes = new Map();\n                    pTPairAttributes.set(\"units\", \"Torr\");\n                    let pTPair = new (0, $613b909b2797b099$export$3fe97ecb6b172244)(pTPairAttributes);\n                    let pTPairArray = pTPairsArray[i].split(\"\t\");\n                    if (pTPairArray.length == 2) {\n                        let p = parseFloat(pTPairArray[0]);\n                        let t = parseFloat(pTPairArray[1]);\n                        pTPair.setP(p);\n                        pTPair.setT(t);\n                        console.log(\"pTPair=\" + pTPair);\n                    } else console.warn(\"pTPairArray.length=\" + pTPairArray.length);\n                    let pTPairDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level2);\n                    $22c7fca7c69edc03$var$addP(pTPairDiv, pTPair);\n                    $22c7fca7c69edc03$var$addT(pTPairDiv, pTPair);\n                    $22c7fca7c69edc03$var$addAnyUnits(undefined, pTPairAttributes, pTPairDiv, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, $22c7fca7c69edc03$var$boundary1);\n                    $22c7fca7c69edc03$var$addExcessReactantConc(pTPairDiv, pTPair);\n                    $22c7fca7c69edc03$var$addPercentExcessReactantConc(pTPairDiv, pTPair);\n                    $22c7fca7c69edc03$var$addPrecision(pTPairDiv, pTPair);\n                    $22c7fca7c69edc03$var$addBathGas(pTPairDiv, pTPair);\n                    console.log(addButton); // Check the value of addButton\n                    console.log(pTsDiv); // Check the value of pTsDiv\n                    pTsDiv.insertBefore(pTPairDiv, addButton);\n                    pTs.addPTpair(pTPair);\n                }\n                //pTs.addPTpairs(pTPairs);\n                pTsDiv.removeChild(inputDiv);\n            }\n        });\n    });\n    let xml_PTss = xml_conditions.getElementsByTagName((0, $613b909b2797b099$export$3be0efe793283834).tagName);\n    if (xml_PTss.length > 0) {\n        if (xml_PTss.length > 1) throw new Error(\"Expecting 1 \" + (0, $613b909b2797b099$export$3be0efe793283834).tagName + \" but finding \" + xml_PTss.length + \"!\");\n        let pTsDiv = document.createElement(\"div\");\n        conditionsDiv.appendChild(pTsDiv);\n        let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTss[0]);\n        let xml_PTPairs = xml_PTss[0].getElementsByTagName((0, $613b909b2797b099$export$3fe97ecb6b172244).tagName);\n        if (xml_PTPairs.length == 0) throw new Error(\"Expecting 1 or more \" + (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \" but finding 0!\");\n        else {\n            let pTs = new (0, $613b909b2797b099$export$3be0efe793283834)(attributes);\n            for(let i = 0; i < xml_PTPairs.length; i++){\n                let pTPair = new (0, $613b909b2797b099$export$3fe97ecb6b172244)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTPairs[i]));\n                // Create a container div for P, T and units.\n                let pTPairDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level2);\n                pTsDiv.appendChild(pTPairDiv);\n                // Add any optional BathGas\n                let xml_bathGass = xml_PTPairs[i].getElementsByTagName((0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n                if (xml_bathGass.length > 0) {\n                    if (xml_bathGass.length > 1) console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n                    // Add a label for the BathGas.\n                    let bathGasLabel = document.createElement(\"label\");\n                    bathGasLabel.textContent = (0, $613b909b2797b099$export$b33a132661f4be58).tagName + \": \";\n                    pTPairDiv.appendChild(bathGasLabel);\n                    let bathGasValue = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bathGass[0]));\n                    let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bathGass[0]), bathGasValue);\n                    pTPair.setBathGas(bathGas);\n                    // Create a HTMLSelectInput for the BathGas.\n                    // Get the ids of all the molecules.\n                    let moleculeIDs = new Set($22c7fca7c69edc03$var$molecules.keys());\n                    let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(Array.from(moleculeIDs), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n                    // Set the initial value.\n                    selectElement.value = bathGas.value;\n                    // Add event listener to selectElement.\n                    selectElement.addEventListener(\"change\", (event)=>{\n                        if (event.target instanceof HTMLSelectElement) {\n                            bathGas.value = event.target.value;\n                            console.log(\"Set \" + (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName + \" to \" + event.target.value);\n                            (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n                        }\n                    });\n                    (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n                    pTPairDiv.appendChild(selectElement);\n                }\n                // Add any optional ExperimentRate\n                let xml_experimentRates = xml_PTPairs[i].getElementsByTagName((0, $613b909b2797b099$export$ea088383ce76fc5a).tagName);\n                if (xml_experimentRates.length > 0) {\n                    if (xml_experimentRates.length > 1) console.warn(\"xml_experimentRates.length=\" + xml_experimentRates.length);\n                    let valueString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_experimentRates[0]));\n                    let experimentRate = new (0, $613b909b2797b099$export$ea088383ce76fc5a)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_experimentRates[0]), parseFloat(valueString));\n                    pTPair.setExperimentRate(experimentRate);\n                    // Create a new div for the ExperimentRate.\n                    let id = (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + (0, $613b909b2797b099$export$ea088383ce76fc5a).tagName;\n                    let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n                        if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(experimentRate, event.target);\n                    }, experimentRate.value.toString(), (0, $613b909b2797b099$export$ea088383ce76fc5a).tagName);\n                    pTPairDiv.appendChild(inputDiv);\n                }\n                $22c7fca7c69edc03$var$addP(pTPairDiv, pTPair);\n                $22c7fca7c69edc03$var$addT(pTPairDiv, pTPair);\n                $22c7fca7c69edc03$var$addAnyUnits(undefined, (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTPairs[i]), pTPairDiv, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName, $22c7fca7c69edc03$var$boundary1);\n                $22c7fca7c69edc03$var$addExcessReactantConc(pTPairDiv, pTPair);\n                $22c7fca7c69edc03$var$addPercentExcessReactantConc(pTPairDiv, pTPair);\n                $22c7fca7c69edc03$var$addPrecision(pTPairDiv, pTPair);\n                $22c7fca7c69edc03$var$addBathGas(pTPairDiv, pTPair);\n                pTs.addPTpair(pTPair);\n                // Add the pTPairDiv to the pTsDiv.\n                pTsDiv.appendChild(pTPairDiv);\n            }\n            conditions.setPTs(pTs);\n        }\n    }\n    return conditionsDiv;\n}\n/**\n * @param containerDiv The container div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addP(containerDiv, pTPair) {\n    let pInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + \"P\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                pTPair.setP(parseFloat(event.target.value));\n                console.log(\"Set P to \" + event.target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                event.target.value = pTPair.getP().toString();\n            }\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n        }\n    }, pTPair.getP().toString(), \"P\");\n    let pInputElement = pInputDiv.querySelector(\"input\");\n    pInputElement.value = pTPair.getP().toString();\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(pInputElement);\n    containerDiv.appendChild(pInputDiv);\n}\n/**\n * @param containerDiv The container div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addT(containerDiv, pTPair) {\n    let tInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + \"T\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                pTPair.setT(parseFloat(event.target.value));\n                console.log(\"Set T to \" + event.target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                event.target.value = pTPair.getT().toString();\n            }\n            (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n        }\n    }, pTPair.getT().toString(), \"T\");\n    let tInputElement = tInputDiv.querySelector(\"input\");\n    tInputElement.value = pTPair.getT().toString();\n    (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tInputElement);\n    containerDiv.appendChild(tInputDiv);\n}\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addExcessReactantConc(pTPairDiv, pTPair) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString + \" \" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName, $22c7fca7c69edc03$var$boundary1);\n    pTPairDiv.append(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener(\"click\", ()=>{\n        let excessReactantConcLabel = document.createElement(\"label\");\n        excessReactantConcLabel.textContent = \"excessReactantConc: \";\n        pTPairDiv.appendChild(excessReactantConcLabel);\n        let excessReactantConcInput = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName, $22c7fca7c69edc03$var$boundary1);\n        excessReactantConcInput.value = NaN.toString();\n        excessReactantConcInput.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setExcessReactantConc(event.target.value);\n                console.log(\"Set excessReactantConc to \" + event.target.value);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        });\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(excessReactantConcInput);\n        pTPairDiv.appendChild(excessReactantConcInput);\n        // Add a remove button.\n        let removeButton = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$removeSymbol, $22c7fca7c69edc03$var$boundary1);\n        removeButton.addEventListener(\"click\", ()=>{\n            pTPairDiv.removeChild(excessReactantConcLabel);\n            pTPairDiv.removeChild(excessReactantConcInput);\n            pTPairDiv.removeChild(removeButton);\n            $22c7fca7c69edc03$var$addExcessReactantConc(pTPairDiv, pTPair);\n        });\n        pTPairDiv.appendChild(removeButton);\n        // Remove the add button.\n        pTPairDiv.removeChild(button);\n    });\n}\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addPercentExcessReactantConc(pTPairDiv, pTPair) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString + \" percentExcessReactantConc\", $22c7fca7c69edc03$var$boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener(\"click\", ()=>{\n        let percentExcessReactantConcLabel = document.createElement(\"label\");\n        percentExcessReactantConcLabel.textContent = \"percentExcessReactantConc: \";\n        pTPairDiv.appendChild(percentExcessReactantConcLabel);\n        let percentExcessReactantConcInput = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + \"percentExcessReactantConc\", $22c7fca7c69edc03$var$boundary1);\n        percentExcessReactantConcInput.value = NaN.toString();\n        percentExcessReactantConcInput.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setPercentExcessReactantConc(event.target.value);\n                console.log(\"Set percentExcessReactantConc to \" + event.target.value);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        });\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(percentExcessReactantConcInput);\n        pTPairDiv.appendChild(percentExcessReactantConcInput);\n    });\n}\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addPrecision(pTPairDiv, pTPair) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString + \" \" + \"precision\", $22c7fca7c69edc03$var$boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener(\"click\", ()=>{\n        let precisionLabel = document.createElement(\"label\");\n        precisionLabel.textContent = \"Precision: \";\n        pTPairDiv.appendChild(precisionLabel);\n        let precisionInput = (0, $2cda23d1e44619db$export$d80fffb1deb3b97e)(\"number\", (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + \"precision\", $22c7fca7c69edc03$var$boundary1);\n        precisionInput.value = NaN.toString();\n        precisionInput.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setPrecision(event.target.value);\n                console.log(\"Set Precision to \" + event.target.value);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        });\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(precisionInput);\n        pTPairDiv.appendChild(precisionInput);\n    });\n}\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addBathGas(pTPairDiv, pTPair) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString + \" \" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener(\"click\", ()=>{\n        let bathGasDiv = document.createElement(\"div\");\n        let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(new Map(), \"\");\n        pTPair.setBathGas(bathGas);\n        let bathGasLabel = document.createElement(\"label\");\n        bathGasLabel.textContent = (0, $613b909b2797b099$export$b33a132661f4be58).tagName + \": \";\n        bathGasDiv.appendChild(bathGasLabel);\n        pTPairDiv.insertBefore(bathGasDiv, button);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs = new Set($22c7fca7c69edc03$var$molecules.keys());\n        let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)(Array.from(moleculeIDs), (0, $613b909b2797b099$export$b33a132661f4be58).tagName, (0, $613b909b2797b099$export$3be0efe793283834).tagName + \"_\" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName, $22c7fca7c69edc03$var$boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener(\"change\", (event)=>{\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Added \" + event.target.value + \" as a \" + (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n            }\n        });\n        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n        bathGasDiv.appendChild(selectElement);\n        pTPairDiv.insertBefore(bathGasDiv, button);\n        pTPairDiv.removeChild(button);\n    });\n}\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */ function $22c7fca7c69edc03$var$addExperimentRateButton(pTPairDiv, pTPair) {\n    let button = (0, $2cda23d1e44619db$export$9b6d6ca62970729f)($22c7fca7c69edc03$var$addString + \" \" + (0, $613b909b2797b099$export$ea088383ce76fc5a).tagName, $22c7fca7c69edc03$var$boundary1);\n    //let addExperimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n    //addExperimentRateDiv.appendChild(addExperimentRateButton);\n    // Add event listener to the addExperimentRateButton.\n    button.addEventListener(\"click\", ()=>{\n        let experimentRateDiv = document.createElement(\"div\");\n        experimentRateDiv.style.marginLeft = $22c7fca7c69edc03$var$margin5;\n        let experimentRate = new (0, $613b909b2797b099$export$ea088383ce76fc5a)(new Map(), NaN);\n        pTPair.setExperimentRate(experimentRate);\n        // Create a new div element for the input.\n        let id = (0, $613b909b2797b099$export$3fe97ecb6b172244).tagName + \"_\" + (0, $613b909b2797b099$export$ea088383ce76fc5a).tagName;\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level3, (event)=>{\n            if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(experimentRate, event.target);\n        }, \"\", (0, $613b909b2797b099$export$ea088383ce76fc5a).tagName);\n        pTPairDiv.insertBefore(experimentRateDiv, button);\n        pTPairDiv.removeChild(button);\n    });\n/*\n    pTsDiv.appendChild(button);\n    pTPairDiv.appendChild(button);\n    // Add the pTPairDiv to the pTsDiv.\n    pTsDiv.insertBefore(pTPairDiv, addButton);\n    */ }\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */ function $22c7fca7c69edc03$var$processModelParameters(xml) {\n    console.log((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n    let modelParametersDiv = document.createElement(\"div\");\n    let xml_modelParameters = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n    let modelParameters = new (0, $9a96fbd0df1ae67b$export$77f098867dc64198)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_modelParameters));\n    $22c7fca7c69edc03$var$mesmer.setModelParameters(modelParameters);\n    // Process any \"me:grainSize\" element.\n    let xml_grainSizes = xml_modelParameters.getElementsByTagName((0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName);\n    if (xml_grainSizes.length > 0) {\n        if (xml_grainSizes.length > 1) throw new Error(\"Expecting 1 \" + (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName + \" but finding \" + xml_grainSizes.length + \"!\");\n        let grainSizeAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_grainSizes[0]);\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_grainSizes[0])));\n        let grainSize = new (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d)(grainSizeAttributes, value);\n        modelParameters.setGrainSize(grainSize);\n        let grainSizeDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n        // Create a new div for the grainSize.\n        let grainSizeId = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName;\n        let grainSizeInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", grainSizeId, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(grainSize, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, value.toString(), (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(grainSizeInputDiv.querySelector(\"input\"));\n        grainSizeDiv.appendChild(grainSizeInputDiv);\n        // Add any units\n        $22c7fca7c69edc03$var$addAnyUnits(undefined, grainSizeAttributes, grainSizeDiv, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName, (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName, $22c7fca7c69edc03$var$boundary1);\n        modelParametersDiv.appendChild(grainSizeDiv);\n    }\n    // Process any \"me:automaticallySetMaxEne\" element.\n    let xml_automaticallySetMaxEnes = xml_modelParameters.getElementsByTagName((0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName);\n    if (xml_automaticallySetMaxEnes.length > 0) {\n        if (xml_automaticallySetMaxEnes.length > 1) throw new Error(\"Expecting 1 \" + (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName + \" but finding \" + xml_automaticallySetMaxEnes.length + \"!\");\n        let automaticallySetMaxEneAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_automaticallySetMaxEnes[0]);\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_automaticallySetMaxEnes[0])));\n        let automaticallySetMaxEne = new (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b)(automaticallySetMaxEneAttributes, value);\n        modelParameters.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n        // Create a new div for the automaticallySetMaxEne.\n        let automaticallySetMaxEneId = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName;\n        let automaticallySetMaxEneInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", automaticallySetMaxEneId, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(automaticallySetMaxEne, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, value.toString(), (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(automaticallySetMaxEneInputDiv.querySelector(\"input\"));\n        Object.assign(automaticallySetMaxEneInputDiv.style, $22c7fca7c69edc03$var$level1);\n        modelParametersDiv.appendChild(automaticallySetMaxEneInputDiv);\n        // Add any units\n        $22c7fca7c69edc03$var$addAnyUnits(undefined, automaticallySetMaxEneAttributes, modelParametersDiv, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName, (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName, $22c7fca7c69edc03$var$boundary1);\n    }\n    // Process any \"me:energyAboveTheTopHill\" element.\n    let xml_energyAboveTheTopHills = xml_modelParameters.getElementsByTagName((0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName);\n    if (xml_energyAboveTheTopHills.length > 0) {\n        if (xml_energyAboveTheTopHills.length > 1) throw new Error(\"Expecting 1 \" + (0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName + \" but finding \" + xml_energyAboveTheTopHills.length + \"!\");\n        let energyAboveTheTopHillAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_energyAboveTheTopHills[0]);\n        let energyAboveTheTopHillValue = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_energyAboveTheTopHills[0])));\n        let energyAboveTheTopHill = new (0, $9a96fbd0df1ae67b$export$aa73446724166cdb)(energyAboveTheTopHillAttributes, energyAboveTheTopHillValue);\n        modelParameters.setEnergyAboveTheTopHill(energyAboveTheTopHill);\n        // Create a new div for the energyAboveTheTopHill.\n        let energyAboveTheTopHillId = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName;\n        let energyAboveTheTopHillInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", energyAboveTheTopHillId, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level2, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(energyAboveTheTopHill, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, energyAboveTheTopHill.value.toString(), (0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(energyAboveTheTopHillInputDiv.querySelector(\"input\"));\n        modelParametersDiv.appendChild(energyAboveTheTopHillInputDiv);\n        // Add any units\n        $22c7fca7c69edc03$var$addAnyUnits(undefined, energyAboveTheTopHillAttributes, modelParametersDiv, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName, (0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName, $22c7fca7c69edc03$var$boundary1);\n    }\n    // Process any \"me:maxTemperature\" element.\n    let xml_maxTemperatures = xml_modelParameters.getElementsByTagName((0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e).tagName);\n    if (xml_maxTemperatures.length > 0) {\n        if (xml_maxTemperatures.length > 1) throw new Error(\"Expecting 1 \" + (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e).tagName + \" but finding \" + xml_maxTemperatures.length + \"!\");\n        let maxTemperatureAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_maxTemperatures[0]);\n        let maxTemperatureValue = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_maxTemperatures[0])));\n        let maxTemperature = new (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e)(maxTemperatureAttributes, maxTemperatureValue);\n        modelParameters.setMaxTemperature(maxTemperature);\n        // Create a new div for the maxTemperature.\n        let maxTemperatureId = (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e).tagName;\n        let maxTemperatureInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", maxTemperatureId, $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(maxTemperature, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, maxTemperature.value.toString(), (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(maxTemperatureInputDiv.querySelector(\"input\"));\n        modelParametersDiv.appendChild(maxTemperatureInputDiv);\n        // Add any units\n        $22c7fca7c69edc03$var$addAnyUnits(undefined, maxTemperatureAttributes, modelParametersDiv, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName + \"_\" + (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e).tagName, (0, $9a96fbd0df1ae67b$export$f9c72965e4ddfc8e).tagName, $22c7fca7c69edc03$var$boundary1);\n    }\n    return modelParametersDiv;\n}\n/**\n * Parses xml to initialise controls.\n * @param xml The XML document.\n * @returns The controls div.\n * \n * Tag control options:\n * me:calculateRateCoefficientsOnly\n * me:printCellDOS\n * me:printCellTransitionStateFlux\n * me:printReactionOperatorColumnSums\n * me:printGrainBoltzmann\n * me:printGrainDOS\n * me:printGrainkbE\n * me:printGrainkfE\n * me:printTSsos\n * me:printGrainedSpeciesProfile\n * me:printGrainTransitionStateFlux\n * me:printReactionOperatorSize\n * me:printSpeciesProfile\n * me:printPhenomenologicalEvolution\n * me:printTunnelingCoefficients\n * me:printCrossingCoefficients\n * me:testDOS\n * me:testRateConstants\n * me:useTheSameCellNumberForAllConditions\n * me:hideInactive\n * me:ForceMacroDetailedBalance\n * \n * TagWithAttribute control options:\n * me:testMicroRates\n * \n * StringNode control options:\n * me:calcMethod \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\"\n * \n * NumberNode control options:\n * me:eigenvalues\n * me:shortestTimeOfInterest\n * me:MaximumEvolutionTime\n * me:automaticallySetMaxEne\n * me:diagramEnergyOffset\n */ function $22c7fca7c69edc03$var$processControl(xml) {\n    console.log((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n    // Create div to contain the controls.\n    let controlsDiv = document.createElement(\"div\");\n    // Get the XML \"me:control\" element.\n    let xml_control = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n    let control = new (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_control));\n    $22c7fca7c69edc03$var$mesmer.setControl(control);\n    // me:calculateRateCoefficientsOnly\n    let calculateRateCoefficientsOnlyDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(calculateRateCoefficientsOnlyDiv);\n    let xml_calculateRateCoefficientsOnly = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$7d9247c9879133fb).tagName);\n    // Create a input checkbox for the CalculateRateCoefficientsOnly.\n    let calculateRateCoefficientsOnlyLabel = document.createElement(\"label\");\n    calculateRateCoefficientsOnlyDiv.appendChild(calculateRateCoefficientsOnlyLabel);\n    calculateRateCoefficientsOnlyLabel.textContent = (0, $d0ae5bc6e682c29f$export$7d9247c9879133fb).tagName;\n    let calculateRateCoefficientsOnlyInput = document.createElement(\"input\");\n    calculateRateCoefficientsOnlyDiv.appendChild(calculateRateCoefficientsOnlyInput);\n    calculateRateCoefficientsOnlyInput.type = \"checkbox\";\n    calculateRateCoefficientsOnlyInput.id = (0, $d0ae5bc6e682c29f$export$7d9247c9879133fb).tagName;\n    if (xml_calculateRateCoefficientsOnly.length == 1) {\n        calculateRateCoefficientsOnlyInput.checked = true;\n        control.setCalculateRateCoefficientsOnly(new (0, $d0ae5bc6e682c29f$export$7d9247c9879133fb)());\n    } else if (xml_calculateRateCoefficientsOnly.length > 1) console.warn(\"xml_calculateRateCoefficientsOnly.length=\" + xml_calculateRateCoefficientsOnly.length);\n    calculateRateCoefficientsOnlyInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setCalculateRateCoefficientsOnly(new (0, $d0ae5bc6e682c29f$export$7d9247c9879133fb)());\n            else control.removeCalculateRateCoefficientsOnly();\n        }\n    });\n    // me:printCellDOS\n    let printCellDOSDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printCellDOSDiv);\n    let xml_printCellDOS = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$60b233651e162b60).tagName);\n    // Create a input checkbox for the PrintCellDOS.\n    let printCellDOSLabel = document.createElement(\"label\");\n    printCellDOSDiv.appendChild(printCellDOSLabel);\n    printCellDOSLabel.textContent = (0, $d0ae5bc6e682c29f$export$60b233651e162b60).tagName;\n    let printCellDOSInput = document.createElement(\"input\");\n    printCellDOSDiv.appendChild(printCellDOSInput);\n    printCellDOSInput.type = \"checkbox\";\n    printCellDOSInput.id = (0, $d0ae5bc6e682c29f$export$60b233651e162b60).tagName;\n    if (xml_printCellDOS.length == 1) {\n        printCellDOSInput.checked = true;\n        control.setPrintCellDOS(new (0, $d0ae5bc6e682c29f$export$60b233651e162b60)());\n    } else if (xml_printCellDOS.length > 1) console.warn(\"xml_printCellDOS.length=\" + xml_printCellDOS.length);\n    printCellDOSInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintCellDOS(new (0, $d0ae5bc6e682c29f$export$60b233651e162b60)());\n            else control.removePrintCellDOS();\n        }\n    });\n    // me:printCellTransitionStateFlux\n    let printCellTransitionStateFluxDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printCellTransitionStateFluxDiv);\n    let xml_printCellTransitionStateFlux = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$7e63e5104be309ff).tagName);\n    // Create a input checkbox for the PrintCellTransitionStateFlux.\n    let printCellTransitionStateFluxLabel = document.createElement(\"label\");\n    printCellTransitionStateFluxDiv.appendChild(printCellTransitionStateFluxLabel);\n    printCellTransitionStateFluxLabel.textContent = (0, $d0ae5bc6e682c29f$export$7e63e5104be309ff).tagName;\n    let printCellTransitionStateFluxInput = document.createElement(\"input\");\n    printCellTransitionStateFluxDiv.appendChild(printCellTransitionStateFluxInput);\n    printCellTransitionStateFluxInput.type = \"checkbox\";\n    printCellTransitionStateFluxInput.id = (0, $d0ae5bc6e682c29f$export$7e63e5104be309ff).tagName;\n    if (xml_printCellTransitionStateFlux.length == 1) {\n        printCellTransitionStateFluxInput.checked = true;\n        control.setPrintCellTransitionStateFlux(new (0, $d0ae5bc6e682c29f$export$7e63e5104be309ff)());\n    } else if (xml_printCellTransitionStateFlux.length > 1) console.warn(\"xml_printCellTransitionStateFlux.length=\" + xml_printCellTransitionStateFlux.length);\n    printCellTransitionStateFluxInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintCellTransitionStateFlux(new (0, $d0ae5bc6e682c29f$export$7e63e5104be309ff)());\n            else control.removePrintCellTransitionStateFlux();\n        }\n    });\n    // me:printReactionOperatorColumnSums\n    let printReactionOperatorColumnSumsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printReactionOperatorColumnSumsDiv);\n    let xml_printReactionOperatorColumnSums = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$a915db169f144f37).tagName);\n    // Create a input checkbox for the PrintReactionOperatorColumnSums.\n    let printReactionOperatorColumnSumsLabel = document.createElement(\"label\");\n    printReactionOperatorColumnSumsDiv.appendChild(printReactionOperatorColumnSumsLabel);\n    printReactionOperatorColumnSumsLabel.textContent = (0, $d0ae5bc6e682c29f$export$a915db169f144f37).tagName;\n    let printReactionOperatorColumnSumsInput = document.createElement(\"input\");\n    printReactionOperatorColumnSumsDiv.appendChild(printReactionOperatorColumnSumsInput);\n    printReactionOperatorColumnSumsInput.type = \"checkbox\";\n    printReactionOperatorColumnSumsInput.id = (0, $d0ae5bc6e682c29f$export$a915db169f144f37).tagName;\n    if (xml_printReactionOperatorColumnSums.length == 1) {\n        printReactionOperatorColumnSumsInput.checked = true;\n        control.setPrintReactionOperatorColumnSums(new (0, $d0ae5bc6e682c29f$export$a915db169f144f37)());\n    } else if (xml_printReactionOperatorColumnSums.length > 1) console.warn(\"xml_printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n    printReactionOperatorColumnSumsInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintReactionOperatorColumnSums(new (0, $d0ae5bc6e682c29f$export$a915db169f144f37)());\n            else control.removePrintReactionOperatorColumnSums();\n        }\n    });\n    // me:printGrainBoltzmann\n    let printGrainBoltzmannDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printGrainBoltzmannDiv);\n    let xml_printGrainBoltzmann = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$e7fff349901f700d).tagName);\n    // Create a input checkbox for the PrintGrainBoltzmann.\n    let printGrainBoltzmannLabel = document.createElement(\"label\");\n    printGrainBoltzmannDiv.appendChild(printGrainBoltzmannLabel);\n    printGrainBoltzmannLabel.textContent = (0, $d0ae5bc6e682c29f$export$e7fff349901f700d).tagName;\n    let printGrainBoltzmannInput = document.createElement(\"input\");\n    printGrainBoltzmannDiv.appendChild(printGrainBoltzmannInput);\n    printGrainBoltzmannInput.type = \"checkbox\";\n    printGrainBoltzmannInput.id = (0, $d0ae5bc6e682c29f$export$e7fff349901f700d).tagName;\n    if (xml_printGrainBoltzmann.length == 1) {\n        printGrainBoltzmannInput.checked = true;\n        control.setPrintGrainBoltzmann(new (0, $d0ae5bc6e682c29f$export$e7fff349901f700d)());\n    } else if (xml_printGrainBoltzmann.length > 1) console.warn(\"xml_printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n    printGrainBoltzmannInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintGrainBoltzmann(new (0, $d0ae5bc6e682c29f$export$e7fff349901f700d)());\n            else control.removePrintGrainBoltzmann();\n        }\n    });\n    // me:printGrainDOS\n    let printGrainDOSDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printGrainDOSDiv);\n    let xml_printGrainDOS = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b).tagName);\n    // Create a input checkbox for the PrintGrainDOS.\n    let printGrainDOSLabel = document.createElement(\"label\");\n    printGrainDOSDiv.appendChild(printGrainDOSLabel);\n    printGrainDOSLabel.textContent = (0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b).tagName;\n    let printGrainDOSInput = document.createElement(\"input\");\n    printGrainDOSDiv.appendChild(printGrainDOSInput);\n    printGrainDOSInput.type = \"checkbox\";\n    printGrainDOSInput.id = (0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b).tagName;\n    if (xml_printGrainDOS.length == 1) {\n        printGrainDOSInput.checked = true;\n        control.setPrintGrainDOS(new (0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b)());\n    } else if (xml_printGrainDOS.length > 1) console.warn(\"xml_printGrainDOS.length=\" + xml_printGrainDOS.length);\n    printGrainDOSInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintGrainDOS(new (0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b)());\n            else control.removePrintGrainDOS();\n        }\n    });\n    // me:printGrainkbE\n    let printGrainkbEDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printGrainkbEDiv);\n    let xml_printGrainkbE = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$55888ef4e813a34d).tagName);\n    // Create a input checkbox for the PrintGrainkbE.\n    let printGrainkbELabel = document.createElement(\"label\");\n    printGrainkbEDiv.appendChild(printGrainkbELabel);\n    printGrainkbELabel.textContent = (0, $d0ae5bc6e682c29f$export$55888ef4e813a34d).tagName;\n    let printGrainkbEInput = document.createElement(\"input\");\n    printGrainkbEDiv.appendChild(printGrainkbEInput);\n    printGrainkbEInput.type = \"checkbox\";\n    printGrainkbEInput.id = (0, $d0ae5bc6e682c29f$export$55888ef4e813a34d).tagName;\n    if (xml_printGrainkbE.length == 1) {\n        printGrainkbEInput.checked = true;\n        control.setPrintGrainkbE(new (0, $d0ae5bc6e682c29f$export$55888ef4e813a34d)());\n    } else if (xml_printGrainkbE.length > 1) console.warn(\"xml_printGrainkbE.length=\" + xml_printGrainkbE.length);\n    printGrainkbEInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintGrainkbE(new (0, $d0ae5bc6e682c29f$export$55888ef4e813a34d)());\n            else control.removePrintGrainkbE();\n        }\n    });\n    // me:printGrainkfE\n    let printGrainkfEDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printGrainkfEDiv);\n    let xml_printGrainkfE = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b).tagName);\n    // Create a input checkbox for the PrintGrainkfE.\n    let printGrainkfELabel = document.createElement(\"label\");\n    printGrainkfEDiv.appendChild(printGrainkfELabel);\n    printGrainkfELabel.textContent = (0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b).tagName;\n    let printGrainkfEInput = document.createElement(\"input\");\n    printGrainkfEDiv.appendChild(printGrainkfEInput);\n    printGrainkfEInput.type = \"checkbox\";\n    printGrainkfEInput.id = (0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b).tagName;\n    if (xml_printGrainkfE.length == 1) {\n        printGrainkfEInput.checked = true;\n        control.setPrintGrainkfE(new (0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b)());\n    } else if (xml_printGrainkfE.length > 1) console.warn(\"xml_printGrainkfE.length=\" + xml_printGrainkfE.length);\n    printGrainkfEInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintGrainkfE(new (0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b)());\n            else control.removePrintGrainkfE();\n        }\n    });\n    // me:printTSsos\n    let printTSsosDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printTSsosDiv);\n    let xml_printTSsos = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$3627f2b606ffd3cb).tagName);\n    // Create a input checkbox for the PrintTSsos.\n    let printTSsosLabel = document.createElement(\"label\");\n    printTSsosDiv.appendChild(printTSsosLabel);\n    printTSsosLabel.textContent = (0, $d0ae5bc6e682c29f$export$3627f2b606ffd3cb).tagName;\n    let printTSsosInput = document.createElement(\"input\");\n    printTSsosDiv.appendChild(printTSsosInput);\n    printTSsosInput.type = \"checkbox\";\n    printTSsosInput.id = (0, $d0ae5bc6e682c29f$export$3627f2b606ffd3cb).tagName;\n    if (xml_printTSsos.length == 1) {\n        printTSsosInput.checked = true;\n        control.setPrintTSsos(new (0, $d0ae5bc6e682c29f$export$3627f2b606ffd3cb)());\n    } else if (xml_printTSsos.length > 1) console.warn(\"xml_printTSsos.length=\" + xml_printTSsos.length);\n    printTSsosInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintTSsos(new (0, $d0ae5bc6e682c29f$export$3627f2b606ffd3cb)());\n            else control.removePrintTSsos();\n        }\n    });\n    // me:printGrainedSpeciesProfile\n    let printGrainedSpeciesProfileDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printGrainedSpeciesProfileDiv);\n    let xml_printGrainedSpeciesProfile = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$c5481d114fddc81c).tagName);\n    // Create a input checkbox for the PrintGrainedSpeciesProfile.\n    let printGrainedSpeciesProfileLabel = document.createElement(\"label\");\n    printGrainedSpeciesProfileDiv.appendChild(printGrainedSpeciesProfileLabel);\n    printGrainedSpeciesProfileLabel.textContent = (0, $d0ae5bc6e682c29f$export$c5481d114fddc81c).tagName;\n    let printGrainedSpeciesProfileInput = document.createElement(\"input\");\n    printGrainedSpeciesProfileDiv.appendChild(printGrainedSpeciesProfileInput);\n    printGrainedSpeciesProfileInput.type = \"checkbox\";\n    printGrainedSpeciesProfileInput.id = (0, $d0ae5bc6e682c29f$export$c5481d114fddc81c).tagName;\n    if (xml_printGrainedSpeciesProfile.length == 1) {\n        printGrainedSpeciesProfileInput.checked = true;\n        control.setPrintGrainedSpeciesProfile(new (0, $d0ae5bc6e682c29f$export$c5481d114fddc81c)());\n    } else if (xml_printGrainedSpeciesProfile.length > 1) console.warn(\"xml_printGrainedSpeciesProfile.length=\" + xml_printGrainedSpeciesProfile.length);\n    printGrainedSpeciesProfileInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintGrainedSpeciesProfile(new (0, $d0ae5bc6e682c29f$export$c5481d114fddc81c)());\n            else control.removePrintGrainedSpeciesProfile();\n        }\n    });\n    // me:printGrainTransitionStateFlux\n    let printGrainTransitionStateFluxDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printGrainTransitionStateFluxDiv);\n    let xml_printGrainTransitionStateFlux = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab).tagName);\n    // Create a input checkbox for the PrintGrainTransitionStateFlux.\n    let printGrainTransitionStateFluxLabel = document.createElement(\"label\");\n    printGrainTransitionStateFluxDiv.appendChild(printGrainTransitionStateFluxLabel);\n    printGrainTransitionStateFluxLabel.textContent = (0, $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab).tagName;\n    let printGrainTransitionStateFluxInput = document.createElement(\"input\");\n    printGrainTransitionStateFluxDiv.appendChild(printGrainTransitionStateFluxInput);\n    printGrainTransitionStateFluxInput.type = \"checkbox\";\n    printGrainTransitionStateFluxInput.id = (0, $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab).tagName;\n    if (xml_printGrainTransitionStateFlux.length == 1) {\n        printGrainTransitionStateFluxInput.checked = true;\n        control.setPrintGrainTransitionStateFlux(new (0, $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab)());\n    } else if (xml_printGrainTransitionStateFlux.length > 1) console.warn(\"xml_printGrainTransitionStateFlux.length=\" + xml_printGrainTransitionStateFlux.length);\n    printGrainTransitionStateFluxInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintGrainTransitionStateFlux(new (0, $d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab)());\n            else control.removePrintGrainTransitionStateFlux();\n        }\n    });\n    // me:printReactionOperatorSize\n    let printReactionOperatorSizeDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printReactionOperatorSizeDiv);\n    let xml_printReactionOperatorSize = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$8420ab6988728a65).tagName);\n    // Create a input checkbox for the PrintReactionOperatorSize.\n    let printReactionOperatorSizeLabel = document.createElement(\"label\");\n    printReactionOperatorSizeDiv.appendChild(printReactionOperatorSizeLabel);\n    printReactionOperatorSizeLabel.textContent = (0, $d0ae5bc6e682c29f$export$8420ab6988728a65).tagName;\n    let printReactionOperatorSizeInput = document.createElement(\"input\");\n    printReactionOperatorSizeDiv.appendChild(printReactionOperatorSizeInput);\n    printReactionOperatorSizeInput.type = \"checkbox\";\n    printReactionOperatorSizeInput.id = (0, $d0ae5bc6e682c29f$export$8420ab6988728a65).tagName;\n    if (xml_printReactionOperatorSize.length == 1) {\n        printReactionOperatorSizeInput.checked = true;\n        control.setPrintReactionOperatorSize(new (0, $d0ae5bc6e682c29f$export$8420ab6988728a65)());\n    } else if (xml_printReactionOperatorSize.length > 1) console.warn(\"xml_printReactionOperatorSize.length=\" + xml_printReactionOperatorSize.length);\n    printReactionOperatorSizeInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintReactionOperatorSize(new (0, $d0ae5bc6e682c29f$export$8420ab6988728a65)());\n            else control.removePrintReactionOperatorSize();\n        }\n    });\n    // me:printSpeciesProfile\n    let printSpeciesProfileDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printSpeciesProfileDiv);\n    let xml_printSpeciesProfile = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1).tagName);\n    // Create a input checkbox for the PrintSpeciesProfile.\n    let printSpeciesProfileLabel = document.createElement(\"label\");\n    printSpeciesProfileDiv.appendChild(printSpeciesProfileLabel);\n    printSpeciesProfileLabel.textContent = (0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1).tagName;\n    let printSpeciesProfileInput = document.createElement(\"input\");\n    printSpeciesProfileDiv.appendChild(printSpeciesProfileInput);\n    printSpeciesProfileInput.type = \"checkbox\";\n    printSpeciesProfileInput.id = (0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1).tagName;\n    if (xml_printSpeciesProfile.length == 1) {\n        printSpeciesProfileInput.checked = true;\n        control.setPrintSpeciesProfile(new (0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1)());\n    } else if (xml_printSpeciesProfile.length > 1) console.warn(\"xml_printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n    printSpeciesProfileInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintSpeciesProfile(new (0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1)());\n            else control.removePrintSpeciesProfile();\n        }\n    });\n    // me:printPhenomenologicalEvolution\n    let printPhenomenologicalEvolutionDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printPhenomenologicalEvolutionDiv);\n    let xml_printPhenomenologicalEvolution = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$9f7939759d8efd9f).tagName);\n    // Create a input checkbox for the PrintPhenomenologicalEvolution.\n    let printPhenomenologicalEvolutionLabel = document.createElement(\"label\");\n    printPhenomenologicalEvolutionDiv.appendChild(printPhenomenologicalEvolutionLabel);\n    printPhenomenologicalEvolutionLabel.textContent = (0, $d0ae5bc6e682c29f$export$9f7939759d8efd9f).tagName;\n    let printPhenomenologicalEvolutionInput = document.createElement(\"input\");\n    printPhenomenologicalEvolutionDiv.appendChild(printPhenomenologicalEvolutionInput);\n    printPhenomenologicalEvolutionInput.type = \"checkbox\";\n    printPhenomenologicalEvolutionInput.id = (0, $d0ae5bc6e682c29f$export$9f7939759d8efd9f).tagName;\n    if (xml_printPhenomenologicalEvolution.length == 1) {\n        printPhenomenologicalEvolutionInput.checked = true;\n        control.setPrintPhenomenologicalEvolution(new (0, $d0ae5bc6e682c29f$export$9f7939759d8efd9f)());\n    } else if (xml_printPhenomenologicalEvolution.length > 1) console.warn(\"xml_printPhenomenologicalEvolution.length=\" + xml_printPhenomenologicalEvolution.length);\n    printPhenomenologicalEvolutionInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintPhenomenologicalEvolution(new (0, $d0ae5bc6e682c29f$export$9f7939759d8efd9f)());\n            else control.removePrintPhenomenologicalEvolution();\n        }\n    });\n    // me:printTunnelingCoefficients\n    let printTunnelingCoefficientsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printTunnelingCoefficientsDiv);\n    let xml_printTunnelingCoefficients = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$fc99460819e23ac5).tagName);\n    // Create a input checkbox for the PrintTunnelingCoefficients.\n    let printTunnelingCoefficientsLabel = document.createElement(\"label\");\n    printTunnelingCoefficientsDiv.appendChild(printTunnelingCoefficientsLabel);\n    printTunnelingCoefficientsLabel.textContent = (0, $d0ae5bc6e682c29f$export$fc99460819e23ac5).tagName;\n    let printTunnelingCoefficientsInput = document.createElement(\"input\");\n    printTunnelingCoefficientsDiv.appendChild(printTunnelingCoefficientsInput);\n    printTunnelingCoefficientsInput.type = \"checkbox\";\n    printTunnelingCoefficientsInput.id = (0, $d0ae5bc6e682c29f$export$fc99460819e23ac5).tagName;\n    if (xml_printTunnelingCoefficients.length == 1) {\n        printTunnelingCoefficientsInput.checked = true;\n        control.setPrintTunnelingCoefficients(new (0, $d0ae5bc6e682c29f$export$fc99460819e23ac5)());\n    } else if (xml_printTunnelingCoefficients.length > 1) console.warn(\"xml_printTunnelingCoefficients.length=\" + xml_printTunnelingCoefficients.length);\n    printTunnelingCoefficientsInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintTunnelingCoefficients(new (0, $d0ae5bc6e682c29f$export$fc99460819e23ac5)());\n            else control.removePrintTunnelingCoefficients();\n        }\n    });\n    // me:printCrossingCoefficients\n    let printCrossingCoefficientsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(printCrossingCoefficientsDiv);\n    let xml_printCrossingCoefficients = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$2f2eaac8983031ef).tagName);\n    // Create a input checkbox for the PrintCrossingCoefficients.\n    let printCrossingCoefficientsLabel = document.createElement(\"label\");\n    printCrossingCoefficientsDiv.appendChild(printCrossingCoefficientsLabel);\n    printCrossingCoefficientsLabel.textContent = (0, $d0ae5bc6e682c29f$export$2f2eaac8983031ef).tagName;\n    let printCrossingCoefficientsInput = document.createElement(\"input\");\n    printCrossingCoefficientsDiv.appendChild(printCrossingCoefficientsInput);\n    printCrossingCoefficientsInput.type = \"checkbox\";\n    printCrossingCoefficientsInput.id = (0, $d0ae5bc6e682c29f$export$2f2eaac8983031ef).tagName;\n    if (xml_printCrossingCoefficients.length == 1) {\n        printCrossingCoefficientsInput.checked = true;\n        control.setPrintCrossingCoefficients(new (0, $d0ae5bc6e682c29f$export$2f2eaac8983031ef)());\n    } else if (xml_printCrossingCoefficients.length > 1) console.warn(\"xml_printCrossingCoefficients.length=\" + xml_printCrossingCoefficients.length);\n    printCrossingCoefficientsInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setPrintCrossingCoefficients(new (0, $d0ae5bc6e682c29f$export$2f2eaac8983031ef)());\n            else control.removePrintCrossingCoefficients();\n        }\n    });\n    // me:testDOS\n    let testDOSDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(testDOSDiv);\n    let xml_testDOS = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$a3d7e677521f681f).tagName);\n    // Create a input checkbox for the TestDOS.\n    let testDOSLabel = document.createElement(\"label\");\n    testDOSDiv.appendChild(testDOSLabel);\n    testDOSLabel.textContent = (0, $d0ae5bc6e682c29f$export$a3d7e677521f681f).tagName;\n    let testDOSInput = document.createElement(\"input\");\n    testDOSDiv.appendChild(testDOSInput);\n    testDOSInput.type = \"checkbox\";\n    testDOSInput.id = (0, $d0ae5bc6e682c29f$export$a3d7e677521f681f).tagName;\n    if (xml_testDOS.length == 1) {\n        testDOSInput.checked = true;\n        control.setTestDOS(new (0, $d0ae5bc6e682c29f$export$a3d7e677521f681f)());\n    } else if (xml_testDOS.length > 1) console.warn(\"xml_testDOS.length=\" + xml_testDOS.length);\n    testDOSInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setTestDOS(new (0, $d0ae5bc6e682c29f$export$a3d7e677521f681f)());\n            else control.removeTestDOS();\n        }\n    });\n    // me:testRateConstants\n    let testRateConstantsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(testRateConstantsDiv);\n    let xml_testRateConstants = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$724a5a49739f4b4a).tagName);\n    // Create a input checkbox for the TestRateConstants.\n    let testRateConstantsLabel = document.createElement(\"label\");\n    testRateConstantsDiv.appendChild(testRateConstantsLabel);\n    testRateConstantsLabel.textContent = (0, $d0ae5bc6e682c29f$export$724a5a49739f4b4a).tagName;\n    let testRateConstantsInput = document.createElement(\"input\");\n    testRateConstantsDiv.appendChild(testRateConstantsInput);\n    testRateConstantsInput.type = \"checkbox\";\n    testRateConstantsInput.id = (0, $d0ae5bc6e682c29f$export$724a5a49739f4b4a).tagName;\n    if (xml_testRateConstants.length == 1) {\n        testRateConstantsInput.checked = true;\n        control.setTestRateConstants(new (0, $d0ae5bc6e682c29f$export$724a5a49739f4b4a)());\n    } else if (xml_testRateConstants.length > 1) console.warn(\"xml_testRateConstants.length=\" + xml_testRateConstants.length);\n    testRateConstantsInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setTestRateConstants(new (0, $d0ae5bc6e682c29f$export$724a5a49739f4b4a)());\n            else control.removeTestRateConstants();\n        }\n    });\n    // me:useTheSameCellNumberForAllConditions\n    let useTheSameCellNumberForAllConditionsDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(useTheSameCellNumberForAllConditionsDiv);\n    let xml_useTheSameCellNumberForAllConditions = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$5d7dbeba4bf49655).tagName);\n    // Create a input checkbox for the UseTheSameCellNumberForAllConditions.\n    let useTheSameCellNumberForAllConditionsLabel = document.createElement(\"label\");\n    useTheSameCellNumberForAllConditionsDiv.appendChild(useTheSameCellNumberForAllConditionsLabel);\n    useTheSameCellNumberForAllConditionsLabel.textContent = (0, $d0ae5bc6e682c29f$export$5d7dbeba4bf49655).tagName;\n    let useTheSameCellNumberForAllConditionsInput = document.createElement(\"input\");\n    useTheSameCellNumberForAllConditionsDiv.appendChild(useTheSameCellNumberForAllConditionsInput);\n    useTheSameCellNumberForAllConditionsInput.type = \"checkbox\";\n    useTheSameCellNumberForAllConditionsInput.id = (0, $d0ae5bc6e682c29f$export$5d7dbeba4bf49655).tagName;\n    if (xml_useTheSameCellNumberForAllConditions.length == 1) {\n        useTheSameCellNumberForAllConditionsInput.checked = true;\n        control.setUseTheSameCellNumberForAllConditions(new (0, $d0ae5bc6e682c29f$export$5d7dbeba4bf49655)());\n    } else if (xml_useTheSameCellNumberForAllConditions.length > 1) console.warn(\"xml_useTheSameCellNumberForAllConditions.length=\" + xml_useTheSameCellNumberForAllConditions.length);\n    useTheSameCellNumberForAllConditionsInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setUseTheSameCellNumberForAllConditions(new (0, $d0ae5bc6e682c29f$export$5d7dbeba4bf49655)());\n            else control.removeUseTheSameCellNumberForAllConditions();\n        }\n    });\n    // me:hideInactive\n    let hideInactiveDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(hideInactiveDiv);\n    let xml_hideInactive = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6).tagName);\n    // Create a input checkbox for the HideInactive.\n    let hideInactiveLabel = document.createElement(\"label\");\n    hideInactiveDiv.appendChild(hideInactiveLabel);\n    hideInactiveLabel.textContent = (0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6).tagName;\n    let hideInactiveInput = document.createElement(\"input\");\n    hideInactiveDiv.appendChild(hideInactiveInput);\n    hideInactiveInput.type = \"checkbox\";\n    hideInactiveInput.id = (0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6).tagName;\n    if (xml_hideInactive.length == 1) {\n        hideInactiveInput.checked = true;\n        control.setHideInactive(new (0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6)());\n    } else if (xml_hideInactive.length > 1) console.warn(\"xml_hideInactive.length=\" + xml_hideInactive.length);\n    hideInactiveInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setHideInactive(new (0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6)());\n            else control.removeHideInactive();\n        }\n    });\n    // me:ForceMacroDetailedBalance\n    let forceMacroDetailedBalanceDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(forceMacroDetailedBalanceDiv);\n    let xml_forceMacroDetailedBalance = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$6ffea14bdffd427f).tagName);\n    // Create a input checkbox for the ForceMacroDetailedBalance.\n    let forceMacroDetailedBalanceLabel = document.createElement(\"label\");\n    forceMacroDetailedBalanceDiv.appendChild(forceMacroDetailedBalanceLabel);\n    forceMacroDetailedBalanceLabel.textContent = (0, $d0ae5bc6e682c29f$export$6ffea14bdffd427f).tagName;\n    let forceMacroDetailedBalanceInput = document.createElement(\"input\");\n    forceMacroDetailedBalanceDiv.appendChild(forceMacroDetailedBalanceInput);\n    forceMacroDetailedBalanceInput.type = \"checkbox\";\n    forceMacroDetailedBalanceInput.id = (0, $d0ae5bc6e682c29f$export$6ffea14bdffd427f).tagName;\n    if (xml_forceMacroDetailedBalance.length == 1) {\n        forceMacroDetailedBalanceInput.checked = true;\n        control.setForceMacroDetailedBalance(new (0, $d0ae5bc6e682c29f$export$6ffea14bdffd427f)());\n    } else if (xml_forceMacroDetailedBalance.length > 1) console.warn(\"xml_forceMacroDetailedBalance.length=\" + xml_forceMacroDetailedBalance.length);\n    forceMacroDetailedBalanceInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) control.setForceMacroDetailedBalance(new (0, $d0ae5bc6e682c29f$export$6ffea14bdffd427f)());\n            else control.removeForceMacroDetailedBalance();\n        }\n    });\n    // me:testMicroRates\n    let testMicroRatesDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(testMicroRatesDiv);\n    let xml_testMicroRates = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName);\n    // Create a input checkbox for the TestMicroRates.\n    let testMicroRatesLabel = document.createElement(\"label\");\n    testMicroRatesDiv.appendChild(testMicroRatesLabel);\n    testMicroRatesLabel.textContent = (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName;\n    let testMicroRatesInput = document.createElement(\"input\");\n    testMicroRatesDiv.appendChild(testMicroRatesInput);\n    testMicroRatesInput.type = \"checkbox\";\n    testMicroRatesInput.id = (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName;\n    let testMicroRatesAttributes;\n    let testMicroRates;\n    if (xml_testMicroRates.length == 1) {\n        testMicroRatesInput.checked = true;\n        testMicroRatesAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_testMicroRates[0]);\n        testMicroRates = new (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31)(testMicroRatesAttributes);\n        control.setTestMicroRates(testMicroRates);\n    } else {\n        testMicroRatesAttributes = new Map();\n        testMicroRatesAttributes.set(\"Tmax\", \"\");\n        testMicroRatesAttributes.set(\"Tmin\", \"\");\n        testMicroRatesAttributes.set(\"Tstep\", \"\");\n        testMicroRates = new (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31)(testMicroRatesAttributes);\n    }\n    testMicroRatesInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestMicroRates(testMicroRates);\n                // Tmax.\n                let idTmax = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName + \"_Tmax\";\n                // Remove any exising div for tMax.\n                let existingTmaxDiv = document.getElementById(idTmax);\n                if (existingTmaxDiv != null) existingTmaxDiv.remove();\n                // Create a new div for tMax.\n                let tMax = testMicroRates.getTmax();\n                let tMaxInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", idTmax + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                            testMicroRates.setTmax(parseFloat(event.target.value));\n                            console.log(\"Set Tmax to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, tMax.toString(), \"Tmax\");\n                tMaxInputDiv.id = idTmax;\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tMaxInputDiv.querySelector(\"input\"));\n                testMicroRatesDiv.appendChild(tMaxInputDiv);\n                // Tmin.\n                let idTmin = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName + \"_tMin\";\n                // Remove any exising div for tMin.\n                let existingTminDiv = document.getElementById(idTmin);\n                if (existingTminDiv != null) existingTminDiv.remove();\n                // Create a new div for the tMin.\n                let tMin = testMicroRates.getTmin();\n                let tMinInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", idTmin + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                            testMicroRates.setTmin(parseFloat(event.target.value));\n                            console.log(\"Set Tmin to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, tMin.toString(), \"Tmin\");\n                tMinInputDiv.id = idTmin;\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tMinInputDiv.querySelector(\"input\"));\n                testMicroRatesDiv.appendChild(tMinInputDiv);\n                // Tstep.\n                let idTstep = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName + \"_tStep\";\n                // Remove any exising div for tStep.\n                let existingTstepDiv = document.getElementById(idTstep);\n                if (existingTstepDiv != null) existingTstepDiv.remove();\n                // Create a new div for the tStep.\n                let tStep = testMicroRates.getTstep();\n                let tStepInputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", idTstep + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(event.target.value)) {\n                            testMicroRates.setTstep(parseFloat(event.target.value));\n                            console.log(\"Set Tstep to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, tStep.toString(), \"Tstep\");\n                tStepInputDiv.id = idTstep;\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(tStepInputDiv.querySelector(\"input\"));\n                testMicroRatesDiv.appendChild(tStepInputDiv);\n            } else {\n                control.removeTestMicroRates();\n                // Tmax.\n                let idTmax = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName + \"_Tmax\";\n                // Remove any exising div for tMax.\n                let existingTmaxDiv = document.getElementById(idTmax);\n                if (existingTmaxDiv != null) existingTmaxDiv.remove();\n                // Tmin.\n                let idTmin = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName + \"_tMin\";\n                // Remove any exising div for tMin.\n                let existingTminDiv = document.getElementById(idTmin);\n                if (existingTminDiv != null) existingTminDiv.remove();\n                // Tstep.\n                let idTstep = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName + \"_tStep\";\n                // Remove any exising div for tStep.\n                let existingTstepDiv = document.getElementById(idTstep);\n                if (existingTstepDiv != null) existingTstepDiv.remove();\n            }\n        }\n    });\n    // me:calcMethod\n    let calcMethodDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(calcMethodDiv);\n    let xml_calcMethod = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).tagName);\n    // Create a input checkbox for the CalcMethod.\n    let calcMethodLabel = document.createElement(\"label\");\n    calcMethodDiv.appendChild(calcMethodLabel);\n    calcMethodLabel.textContent = (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).tagName;\n    let calcMethodInput = document.createElement(\"input\");\n    calcMethodDiv.appendChild(calcMethodInput);\n    calcMethodInput.type = \"checkbox\";\n    calcMethodInput.id = (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).tagName;\n    let calcMethodAttributes;\n    let calcMethod;\n    if (xml_calcMethod.length == 1) {\n        calcMethodInput.checked = true;\n        calcMethodAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_calcMethod[0]);\n        let value = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_calcMethod[0]));\n        calcMethod = new (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d)(calcMethodAttributes, value);\n        control.setCalcMethod(calcMethod);\n    } else {\n        calcMethodInput.checked = false;\n        calcMethodAttributes = new Map();\n        calcMethod = new (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d)(calcMethodAttributes, \"\");\n    }\n    calcMethodInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setCalcMethod(calcMethod);\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).tagName + \"_select\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n                // Create a new div.\n                let value = calcMethod.value;\n                let selectElement = (0, $2cda23d1e44619db$export$b89bf4b169286865)((0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).options, value, id, $22c7fca7c69edc03$var$boundary1);\n                selectElement.addEventListener(\"change\", (event)=>{\n                    if (event.target instanceof HTMLSelectElement) {\n                        calcMethod.value = event.target.value;\n                        (0, $2cda23d1e44619db$export$fdd146df37959fe8)(event.target);\n                    }\n                });\n                (0, $2cda23d1e44619db$export$fdd146df37959fe8)(selectElement);\n                calcMethodDiv.appendChild(selectElement);\n            } else {\n                control.removeCalcMethod();\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$f0bfd84d03c3a22d).tagName + \"_select\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n            }\n        }\n    });\n    // me:eigenvalues\n    let eigenvaluesDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(eigenvaluesDiv);\n    let xml_eigenvalues = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName);\n    // Create a input checkbox for the Eigenvalues.\n    let eigenvaluesLabel = document.createElement(\"label\");\n    eigenvaluesDiv.appendChild(eigenvaluesLabel);\n    eigenvaluesLabel.textContent = (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName;\n    let eigenvaluesInput = document.createElement(\"input\");\n    eigenvaluesDiv.appendChild(eigenvaluesInput);\n    eigenvaluesInput.type = \"checkbox\";\n    eigenvaluesInput.id = (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName;\n    let eigenvalues;\n    let eigenvaluesAttributes;\n    if (xml_eigenvalues.length == 1) {\n        eigenvaluesInput.checked = true;\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_eigenvalues[0])));\n        eigenvaluesAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_eigenvalues[0]);\n        eigenvalues = new (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7)(eigenvaluesAttributes, value);\n        control.setEigenvalues(eigenvalues);\n        let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName + \"_number\";\n        // Create a new div for the eigenvalues.\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(eigenvalues, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, eigenvalues.value.toString(), (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n        inputDiv.id = id;\n        eigenvaluesDiv.appendChild(inputDiv);\n    } else {\n        eigenvaluesInput.checked = false;\n        eigenvaluesAttributes = new Map();\n        eigenvalues = new (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7)(eigenvaluesAttributes, NaN);\n    }\n    eigenvaluesInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setEigenvalues(eigenvalues);\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n                // Create a new div for the eigenvalues.\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level0, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(eigenvalues, event.target);\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, eigenvalues.value.toString(), (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n                inputDiv.id = id;\n                eigenvaluesDiv.appendChild(inputDiv);\n            } else {\n                control.removeEigenvalues();\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n            }\n        }\n    });\n    // me:shortestTimeOfInterest\n    let shortestTimeOfInterestDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(shortestTimeOfInterestDiv);\n    let xml_shortestTimeOfInterest = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName);\n    // Create a input checkbox for the ShortestTimeOfInterest.\n    let shortestTimeOfInterestLabel = document.createElement(\"label\");\n    shortestTimeOfInterestDiv.appendChild(shortestTimeOfInterestLabel);\n    shortestTimeOfInterestLabel.textContent = (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName;\n    let shortestTimeOfInterestInput = document.createElement(\"input\");\n    shortestTimeOfInterestDiv.appendChild(shortestTimeOfInterestInput);\n    shortestTimeOfInterestInput.type = \"checkbox\";\n    shortestTimeOfInterestInput.id = (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName;\n    let shortestTimeOfInterest;\n    let shortestTimeOfInterestAttributes;\n    if (xml_shortestTimeOfInterest.length == 1) {\n        shortestTimeOfInterestInput.checked = true;\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_shortestTimeOfInterest[0])));\n        shortestTimeOfInterestAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_shortestTimeOfInterest[0]);\n        shortestTimeOfInterest = new (0, $d0ae5bc6e682c29f$export$421603058c6718db)(shortestTimeOfInterestAttributes, value);\n        control.setShortestTimeOfInterest(shortestTimeOfInterest);\n        let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName + \"_number\";\n        // Create a new div for the shortestTimeOfInterest.\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(shortestTimeOfInterest, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, shortestTimeOfInterest.value.toString(), (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n        inputDiv.id = id;\n        shortestTimeOfInterestDiv.appendChild(inputDiv);\n    } else {\n        shortestTimeOfInterestInput.checked = false;\n        shortestTimeOfInterestAttributes = new Map();\n        shortestTimeOfInterest = new (0, $d0ae5bc6e682c29f$export$421603058c6718db)(shortestTimeOfInterestAttributes, NaN);\n    }\n    shortestTimeOfInterestInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setShortestTimeOfInterest(shortestTimeOfInterest);\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n                // Create a new div for the shortestTimeOfInterest.\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(shortestTimeOfInterest, event.target);\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, shortestTimeOfInterest.value.toString(), (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n                inputDiv.id = id;\n                shortestTimeOfInterestDiv.appendChild(inputDiv);\n            } else {\n                control.removeShortestTimeOfInterest();\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$421603058c6718db).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n            }\n        }\n    });\n    // me:MaximumEvolutionTime\n    let maximumEvolutionTimeDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(maximumEvolutionTimeDiv);\n    let xml_maximumEvolutionTime = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName);\n    // Create a input checkbox for the MaximumEvolutionTime.\n    let maximumEvolutionTimeLabel = document.createElement(\"label\");\n    maximumEvolutionTimeDiv.appendChild(maximumEvolutionTimeLabel);\n    maximumEvolutionTimeLabel.textContent = (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName;\n    let maximumEvolutionTimeInput = document.createElement(\"input\");\n    maximumEvolutionTimeDiv.appendChild(maximumEvolutionTimeInput);\n    maximumEvolutionTimeInput.type = \"checkbox\";\n    maximumEvolutionTimeInput.id = (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName;\n    let maximumEvolutionTime;\n    let maximumEvolutionTimeAttributes;\n    if (xml_maximumEvolutionTime.length == 1) {\n        maximumEvolutionTimeInput.checked = true;\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_maximumEvolutionTime[0])));\n        maximumEvolutionTimeAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_maximumEvolutionTime[0]);\n        maximumEvolutionTime = new (0, $d0ae5bc6e682c29f$export$b51d7314540831ed)(maximumEvolutionTimeAttributes, value);\n        control.setMaximumEvolutionTime(maximumEvolutionTime);\n        let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName + \"_number\";\n        // Create a new div for the maximumEvolutionTime.\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(maximumEvolutionTime, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, maximumEvolutionTime.value.toString(), (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n        inputDiv.id = id;\n        maximumEvolutionTimeDiv.appendChild(inputDiv);\n    } else {\n        maximumEvolutionTimeInput.checked = false;\n        maximumEvolutionTimeAttributes = new Map();\n        maximumEvolutionTime = new (0, $d0ae5bc6e682c29f$export$b51d7314540831ed)(maximumEvolutionTimeAttributes, NaN);\n    }\n    maximumEvolutionTimeInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setMaximumEvolutionTime(maximumEvolutionTime);\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n                // Create a new div for the maximumEvolutionTime.\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(maximumEvolutionTime, event.target);\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, maximumEvolutionTime.value.toString(), (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n                inputDiv.id = id;\n                maximumEvolutionTimeDiv.appendChild(inputDiv);\n            } else {\n                control.removeMaximumEvolutionTime();\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$b51d7314540831ed).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n            }\n        }\n    });\n    // me:automaticallySetMaxEne\n    let automaticallySetMaxEneDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(automaticallySetMaxEneDiv);\n    let xml_automaticallySetMaxEne = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName);\n    // Create a input checkbox for the AutomaticallySetMaxEne.\n    let automaticallySetMaxEneLabel = document.createElement(\"label\");\n    automaticallySetMaxEneDiv.appendChild(automaticallySetMaxEneLabel);\n    automaticallySetMaxEneLabel.textContent = (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName;\n    let automaticallySetMaxEneInput = document.createElement(\"input\");\n    automaticallySetMaxEneDiv.appendChild(automaticallySetMaxEneInput);\n    automaticallySetMaxEneInput.type = \"checkbox\";\n    automaticallySetMaxEneInput.id = (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName;\n    let automaticallySetMaxEneAttributes;\n    let automaticallySetMaxEne;\n    if (xml_automaticallySetMaxEne.length == 1) {\n        automaticallySetMaxEneInput.checked = true;\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_automaticallySetMaxEne[0])));\n        automaticallySetMaxEneAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_automaticallySetMaxEne[0]);\n        automaticallySetMaxEne = new (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b)(automaticallySetMaxEneAttributes, value);\n        control.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n    } else {\n        automaticallySetMaxEneInput.checked = false;\n        automaticallySetMaxEneAttributes = new Map();\n        automaticallySetMaxEne = new (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b)(automaticallySetMaxEneAttributes, NaN);\n    }\n    automaticallySetMaxEneInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n                // Create a new div for the automaticallySetMaxEne.\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(automaticallySetMaxEne, event.target);\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, automaticallySetMaxEne.value.toString(), (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n                inputDiv.id = id;\n                automaticallySetMaxEneDiv.appendChild(inputDiv);\n            } else {\n                control.removeAutomaticallySetMaxEne();\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$576b56ca6e34780b).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n            }\n        }\n    });\n    // me:diagramEnergyOffset\n    let diagramEnergyOffsetDiv = (0, $2cda23d1e44619db$export$78253536c0178a32)($22c7fca7c69edc03$var$level1);\n    controlsDiv.appendChild(diagramEnergyOffsetDiv);\n    let xml_diagramEnergyOffset = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName);\n    // Create a input checkbox for the DiagramEnergyOffset.\n    let diagramEnergyOffsetLabel = document.createElement(\"label\");\n    diagramEnergyOffsetDiv.appendChild(diagramEnergyOffsetLabel);\n    diagramEnergyOffsetLabel.textContent = (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName;\n    let diagramEnergyOffsetInput = document.createElement(\"input\");\n    diagramEnergyOffsetDiv.appendChild(diagramEnergyOffsetInput);\n    diagramEnergyOffsetInput.type = \"checkbox\";\n    diagramEnergyOffsetInput.id = (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName;\n    let diagramEnergyOffset;\n    let diagramEnergyOffsetAttributes;\n    if (xml_diagramEnergyOffset.length == 1) {\n        diagramEnergyOffsetInput.checked = true;\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffsetAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_diagramEnergyOffset[0]);\n        diagramEnergyOffset = new (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a)(diagramEnergyOffsetAttributes, value);\n        control.setDiagramEnergyOffset(diagramEnergyOffset);\n        let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName + \"_number\";\n        // Create a new div for the diagramEnergyOffset.\n        let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n            if (event.target instanceof HTMLInputElement) {\n                $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(diagramEnergyOffset, event.target);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n            }\n        }, diagramEnergyOffset.value.toString(), (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName);\n        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n        inputDiv.id = id;\n        diagramEnergyOffsetDiv.appendChild(inputDiv);\n    } else {\n        diagramEnergyOffsetInput.checked = false;\n        diagramEnergyOffsetAttributes = new Map();\n        diagramEnergyOffset = new (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a)(diagramEnergyOffsetAttributes, NaN);\n    }\n    diagramEnergyOffsetInput.addEventListener(\"change\", (event)=>{\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setDiagramEnergyOffset(diagramEnergyOffset);\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n                // Create a new div for the diagramEnergyOffset.\n                let inputDiv = (0, $2cda23d1e44619db$export$4e9ec2b27757d9dd)(\"number\", id + \"_input\", $22c7fca7c69edc03$var$boundary1, $22c7fca7c69edc03$var$level1, (event)=>{\n                    if (event.target instanceof HTMLInputElement) {\n                        $22c7fca7c69edc03$export$b1e4cbf5b56e0e21(diagramEnergyOffset, event.target);\n                        (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(event.target);\n                    }\n                }, diagramEnergyOffset.value.toString(), (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName);\n                (0, $2cda23d1e44619db$export$d43d96a9a8ad3e51)(inputDiv.querySelector(\"input\"));\n                inputDiv.id = id;\n                diagramEnergyOffsetDiv.appendChild(inputDiv);\n            } else {\n                control.removeDiagramEnergyOffset();\n                let id = (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName + \"_\" + (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv = document.getElementById(id);\n                if (existingDiv != null) existingDiv.remove();\n            }\n        }\n    });\n    return controlsDiv;\n}\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */ function $22c7fca7c69edc03$var$drawReactionDiagram(canvas, dark, font, lw, lwc) {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx = canvas.getContext(\"2d\");\n    //ctx.fillStyle = background;\n    // Get text height for font size.\n    let th = (0, $d2b4a77a4d44562c$export$c398604a09be5382)(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants = [];\n    let products = new Set();\n    let intProducts = new Set();\n    let transitionStates = new Set();\n    let orders = new Map();\n    let energies = new Map();\n    let i = 0;\n    let energyMin = Number.MAX_VALUE;\n    let energyMax = Number.MIN_VALUE;\n    $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n        // Get TransitionStates.\n        let reactionTransitionStates = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel = reaction.getReactantsLabel();\n        if (reactantsLabel != undefined) {\n            reactants.push(reactantsLabel);\n            if (products.has(reactantsLabel)) intProducts.add(reactantsLabel);\n            let energy = reaction.getReactantsEnergy($22c7fca7c69edc03$var$molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(reactantsLabel, energy);\n            if (!orders.has(reactantsLabel)) {\n                orders.set(reactantsLabel, i);\n                i++;\n            }\n        }\n        let productsLabel = reaction.getProductsLabel();\n        if (productsLabel != undefined) {\n            products.add(productsLabel);\n            let energy = reaction.getProductsEnergy($22c7fca7c69edc03$var$molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(productsLabel, energy);\n            if (orders.has(productsLabel)) {\n                i--;\n                let j = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(orders, productsLabel);\n                // Move product to end and shift everything back.\n                orders.forEach(function(value, key) {\n                    if (value > j) orders.set(key, value - 1);\n                });\n                // Insert transition states.\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function(ts) {\n                        let ref = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = $22c7fca7c69edc03$var$molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                    orders.set(productsLabel, i);\n                    i++;\n                }\n            } else {\n                if (reactionTransitionStates != undefined) reactionTransitionStates.forEach(function(ts) {\n                    let ref = ts.getMolecule().ref;\n                    transitionStates.add(ref);\n                    orders.set(ref, i);\n                    energy = $22c7fca7c69edc03$var$molecules.get(ref)?.getEnergy() ?? 0;\n                    energyMin = Math.min(energyMin, energy);\n                    energyMax = Math.max(energyMax, energy);\n                    energies.set(ref, energy);\n                    i++;\n                });\n                orders.set(productsLabel, i);\n                i++;\n            }\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n    // Create a lookup from order to label.\n    let reorders = [];\n    orders.forEach(function(value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0 = 0;\n    let y0;\n    let x1;\n    let y1;\n    let xmax = 0;\n    let tw;\n    let textSpacing = 5; // Spacing between end of line and start of text.\n    let stepSpacing = 10; // Spacing between steps.\n    let reactantsInXY = new Map();\n    let reactantsOutXY = new Map();\n    let productsInXY = new Map();\n    let productsOutXY = new Map();\n    let transitionStatesInXY = new Map();\n    let transitionStatesOutXY = new Map();\n    reorders.forEach(function(value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max((0, $d2b4a77a4d44562c$export$37827d046293d309)(ctx, energy.toString(), font), (0, $d2b4a77a4d44562c$export$37827d046293d309)(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines, but\n        // the code is left here commented out for code comprehension.)\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [\n            x0,\n            y0\n        ]);\n        reactantsOutXY.set(value, [\n            x1,\n            y1\n        ]);\n        if (products.has(value)) {\n            productsInXY.set(value, [\n                x0,\n                y0\n            ]);\n            productsOutXY.set(value, [\n                x1,\n                y1\n            ]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [\n                x0,\n                y0\n            ]);\n            transitionStatesOutXY.set(value, [\n                x1,\n                y1\n            ]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + 4 * th + 2 * lw;\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n    let originalCanvasHeight = canvas.height;\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder);\n    // Go through reactions and draw connecting lines.\n    $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let reactionTransitionStates = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel = reaction.getReactantsLabel();\n        let productsLabel = reaction.getProductsLabel();\n        let reactantOutXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsOutXY, reactantsLabel);\n        let productInXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsInXY, productsLabel);\n        if (reactionTransitionStates.length > 0) reactionTransitionStates.forEach(function(ts) {\n            let transitionStateLabel = ts.getMolecule().ref;\n            let transitionStateInXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesInXY, transitionStateLabel);\n            (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0], transitionStateInXY[1]);\n            let transitionStateOutXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesOutXY, transitionStateLabel);\n            (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1], productInXY[0], productInXY[1]);\n        });\n        else (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], productInXY[0], productInXY[1]);\n    });\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function(value) {\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsInXY, value)[0];\n        let y = energyRescaled + lw;\n        let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsOutXY, value)[0];\n        let energyString = energy.toString();\n        (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function(value) {\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsInXY, value)[0];\n        let y = energyRescaled + lw;\n        let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsOutXY, value)[0];\n        let energyString = energy.toString();\n        if (intProducts.has(value)) (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        else (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    transitionStates.forEach(function(value) {\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesInXY, value)[0];\n        let y = energyRescaled + lw;\n        let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesOutXY, value)[0];\n        let energyString = energy.toString();\n        (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n/**\n * Display reactions diagram.\n */ function $22c7fca7c69edc03$var$displayReactionsDiagram() {\n    if ($22c7fca7c69edc03$var$reactions.size > 0) {\n        let reactionsDiv = document.getElementById(\"reactions\");\n        let id = \"reactionsDiagram\";\n        // Remove any existing canvas.\n        let existingCanvas = document.getElementById(id);\n        if (existingCanvas != null) existingCanvas.remove();\n        // Create a new canvas.\n        let canvas = document.createElement(\"canvas\");\n        canvas.id = id;\n        canvas.width = 800;\n        canvas.height = 400;\n        canvas.style.border = \"1px solid black\";\n        let font = \"14px Arial\";\n        let dark = true;\n        let lw = 4;\n        let lwc = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            $22c7fca7c69edc03$var$drawReactionDiagram(canvas, dark, font, lw, lwc);\n        }\n        // Add the canvas to the document.\n        reactionsDiv.appendChild(canvas);\n    }\n}\n/**\n * Save to XML file.\n */ function $22c7fca7c69edc03$var$saveXML() {\n    console.log(\"saveXML\");\n    const pad = \"  \";\n    // Create a Blob object from the data\n    let blob = new Blob([\n        (0, $762f625c179c0279$export$692079bb871c6039).header,\n        $22c7fca7c69edc03$var$mesmer.toXML(pad, pad)\n    ], {\n        type: \"text/plain\"\n    });\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    let title = $22c7fca7c69edc03$var$mesmer.getTitle()?.value;\n    a.download = title.replace(/[^a-z0-9]/gi, \"_\") + \".xml\";\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n}\n\n\n//# sourceMappingURL=index.2b97b273.js.map\n","\n//import * as $3Dmol from '3dmol';\n\nimport { get, isNumeric, rescale } from './util.js';\n\nimport {\n    getFirstElement, getFirstChildNode, getNodeValue, getInputString, getAttributes,\n    getSingularElement, NumberArrayNode, NumberNode\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property, AtomArray, BondArray,\n    PropertyList, PropertyScalar, PropertyArray, ExtraDOSCMethod, BondRef, HinderedRotorPotential,\n    PotentialPoint, Periodicity, ReservoirSize, ZPE, RotConsts, VibFreqs\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, ReactionMolecule, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, Tunneling, TInfinity, ExcessReactantConc\n} from './reaction.js';\n\nimport { arrayToString, toNumberArray } from './util.js';\n\nimport {\n    createLabelWithInput, makeCollapsible, getCollapsibleDiv, resizeInputElement, createSelectElement,\n    resizeSelectElement, createFlexDiv, createButton, remove, createLabel, createInputWithFunction, createInput, createLabelWithSelectElement, createDiv\n} from './html.js';\n\nimport { drawLevel, drawLine, getTextHeight, getTextWidth } from './canvas.js';\n\nimport { BathGas, Conditions, ExperimentRate, PTpair, PTs } from './conditions.js';\n\nimport { EnergyAboveTheTopHill, GrainSize, MaxTemperature, ModelParameters } from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset, Eigenvalues, HideInactive, TestDOS, PrintSpeciesProfile,\n    TestMicroRates, TestRateConstants, PrintGrainDOS, PrintCellDOS, PrintReactionOperatorColumnSums,\n    PrintTunnelingCoefficients, PrintGrainkfE, PrintGrainBoltzmann, PrintGrainkbE, CalculateRateCoefficientsOnly,\n    PrintCellTransitionStateFlux, PrintTSsos, PrintGrainedSpeciesProfile, PrintGrainTransitionStateFlux,\n    PrintReactionOperatorSize, PrintPhenomenologicalEvolution, PrintCrossingCoefficients,\n    UseTheSameCellNumberForAllConditions, ForceMacroDetailedBalance, CalcMethod, ShortestTimeOfInterest,\n    MaximumEvolutionTime, AutomaticallySetMaxEne\n} from './control.js';\n\nimport { Mesmer, MoleculeList, ReactionList, Title } from './mesmer.js';\n\n/**\n * The font sizes for different levels of the GUI.\n */\nlet fontSize1: string = \"1.5em\";\nlet fontSize2: string = \"1.25em\";\nlet fontSize3: string = \"1.0em\";\nlet fontSize4: string = \"0.75em\";\n\n/**\n * Margins for spacing GUI components.\n */\n//let margin0: string = \"0px\";\nlet margin1: string = \"1px\";\nlet margin2: string = \"2px\";\nlet margin3: string = \"3px\";\nlet margin5: string = \"5px\";\nlet margin25: string = \"25px\";\nlet margin50: string = \"50px\";\nlet margin75: string = \"75px\";\nlet margin100: string = \"100px\";\nlet margin125: string = \"125px\";\nlet level0 = { marginTop: margin1, marginBottom: margin1 };\nlet level1 = { marginLeft: margin25, marginTop: margin1, marginBottom: margin1 };\nlet level2 = { marginLeft: margin50, marginTop: margin1, marginBottom: margin1 };\nlet level3 = { marginLeft: margin75, marginTop: margin1, marginBottom: margin1 };\nlet level4 = { marginLeft: margin100, marginTop: margin1, marginBottom: margin1 };\nlet level5 = { marginLeft: margin125, marginTop: margin1, marginBottom: margin1 };\nlet boundary1 = { marginLeft: margin1, marginTop: margin1, marginBottom: margin1, marginRight: margin1 };\nlet boundary3 = { marginLeft: margin3, marginTop: margin3, marginBottom: margin3, marginRight: margin3 };\n\n/**\n * Symbology for the GUI.\n */\nlet addString: string = \"add\";\nlet addSymbol: string = \"\\uFF0B\";\nlet removeString: string = \"remove\";\nlet removeSymbol: string = \"\\u2715\";\nlet addFromSpreadsheetString: string = \"Add from spreadsheet\";\n\n/**\n * Units for different things.\n */\nlet unitsEnergy: string[] = [\"kJ/mol\", \"cm-1\", \"kcal/mol\", \"Hartree\"];\nlet unitsRotConsts: string[] = [\"cm-1\", \"GHz\"];\nlet unitsPressure: string[] = [\"Torr\", \"PPCC\", \"atm\", \"mbar\", \"psi\", \"mols/cc\"];\n\n/**\n * For mesmer.\n */\nlet mesmer: Mesmer;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map();\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map();\n\n/**\n * Once the DOM is loaded, add a load button.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    // Create load button\n    let loadButton = createButton('Load', boundary1);\n    loadButton.addEventListener('click', load);\n\n    // Append loadButton to menu and set the display style of the menu.\n    let menuDiv: HTMLDivElement = document.getElementById('menu') as HTMLDivElement;\n    if (menuDiv) {\n        menuDiv.appendChild(loadButton);\n    }\n    menuDiv.style.display = 'flex';\n});\n\n/**\n * Prompts the user for a MESMER XML file, initiates the parsing of the chosen file, and \n * creates a save button for saving a new XML file.\n */\nfunction load() {\n    let inputElement: HTMLInputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            let inputFilename: string = file.name;\n            let reader = new FileReader();\n            let chunkSize = 1024 * 1024; // 1MB\n            let start = 0;\n            let contents = '';\n            reader.onload = function (e) {\n                if (e.target == null) {\n                    throw new Error('Event target is null');\n                }\n                contents += (e.target as FileReader).result as string;\n                if (file != null) {\n                    if (start < file.size) {\n                        // Read the next chunk\n                        let blob = file.slice(start, start + chunkSize);\n                        reader.readAsText(blob);\n                        start += chunkSize;\n                    } else {\n                        // All chunks have been read\n                        contents = contents.trim();\n                        displayXML(inputFilename, contents);\n                        let parser = new DOMParser();\n                        let xml = parser.parseFromString(contents, \"text/xml\");\n                        parse(xml);\n                        /*\n                        // Sending to the server for validation is no longer implemented as there is currently no server.\n                        // Send XML to the server\n                        fetch('http://localhost:1234/', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'text/xml',\n                            },\n                            body: contents,\n                        })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error(`HTTP error! status: ${response.status}`);\n                                }\n                                return response.text();\n                            })\n                            .then(data => {\n                                console.log('Server response:', data);\n                            })\n                            .catch(error => {\n                                console.error('There was a problem with the fetch operation:', error);\n                            });\n                        */\n                    }\n                }\n            };\n            // Read the first chunk\n            let blob = file.slice(start, start + chunkSize);\n            reader.readAsText(blob);\n            start += chunkSize;\n            // Create save button.\n            let saveButtonId = 'saveButtonId';\n            remove(saveButtonId);\n            let saveButton = createButton('Save', boundary1);\n            saveButton.id = saveButtonId;\n            saveButton.addEventListener('click', saveXML);\n            let menuDiv: HTMLDivElement = document.getElementById('menu') as HTMLDivElement;\n            menuDiv.appendChild(saveButton);\n        }\n    };\n    inputElement.click();\n}\n\n/**\n * Parse an XMLDocument and create the mesmer object.\n * @param xml The XML.\n */\nfunction parse(xml: XMLDocument) {\n    console.log(\"parse: \" + xml);\n\n    // Process the XML.\n    let xml_mesmer: Element = getSingularElement(xml, Mesmer.tagName);\n    mesmer = new Mesmer(getAttributes(xml_mesmer));\n\n    // Title.\n    let xml_title: HTMLCollectionOf<Element> = xml.getElementsByTagName(Title.tagName) as HTMLCollectionOf<Element>;\n    if (xml_title.length != 1) {\n        throw new Error('Multiple ' + Title.tagName + ' tags found');\n    } else {\n        let title: string = (xml_title[0].childNodes[0].nodeValue as string).trim();\n        let titleNode: Title = new Title(getAttributes(xml_title[0]), title);\n        let titleElement: HTMLElement = document.getElementById(\"title\") as HTMLElement;\n        let titleString: string = titleNode.value;\n        mesmer.setTitle(titleNode);\n        let titleId = 'titleId';\n        // Remove any existing titleDiv.\n        remove(titleId);\n        // Create input element.\n        let titleDiv: HTMLDivElement = createLabelWithInput(\"text\", titleId + \"Input\", boundary1, level0, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                titleNode.value = event.target.value;\n                console.log(titleNode.tagName + \" changed to \" + titleNode.value);\n                resizeInputElement(event.target);\n            }\n        }, titleString, \"Title\", fontSize1);\n        titleDiv.id = titleId;\n        //let input: HTMLInputElement = titleDiv.querySelector('input') as HTMLInputElement;\n        //input.style.fontSize = fontSize1;\n        //input.value = titleString;\n        //resizeInputElement(input, 0);\n        // Insert.\n        titleElement.parentNode?.insertBefore(titleDiv, titleElement);\n    }\n\n    // Molecules.\n    let moleculesElement: HTMLElement | null = document.getElementById(\"molecules\");\n    let moleculesDivId = 'moleculesDivId';\n    // If there is an existing moleculesDiv remove it.\n    remove(moleculesDivId);\n    if (moleculesElement == null) {\n        // Create a molecules section from scratch?\n    } else {\n        let moleculesDiv: HTMLDivElement = processMoleculeList(xml);\n        moleculesDiv.id = moleculesDivId;\n        moleculesElement.appendChild(\n            getCollapsibleDiv({\n                content: moleculesDiv,\n                buttonLabel: \"Molecules\",\n                buttonFontSize: fontSize1,\n                boundary: boundary1,\n                level: level0,\n                contentDivId: moleculesDivId\n            })\n        );\n        mesmer.setMoleculeList(new MoleculeList(getAttributes(moleculesDiv), Array.from(molecules.values())));\n    }\n\n    // Reactions.\n    let reactionsElement: HTMLElement | null = document.getElementById(\"reactions\");\n    let reactionsDivId = 'reactionsDivId';\n    // If there is an existing reactionsDiv remove it.\n    remove(reactionsDivId);\n    if (reactionsElement == null) {\n        // Create a reactions section from scratch?\n    } else {\n        let reactionsDiv: HTMLDivElement = processReactionList(xml);\n        reactionsDiv.id = reactionsDivId;\n        reactionsElement.appendChild(\n            getCollapsibleDiv({\n                content: reactionsDiv,\n                buttonLabel: \"Reactions\",\n                buttonFontSize: fontSize1,\n                boundary: boundary1,\n                level: level0,\n                contentDivId: reactionsDivId\n            })\n        );\n        mesmer.setReactionList(new ReactionList(getAttributes(reactionsDiv), Array.from(reactions.values())));\n    }\n    \n    // Display reaction diagram. \n    displayReactionsDiagram();\n\n    // Conditions\n    let conditionsElement: HTMLElement | null = document.getElementById(\"conditions\");\n    let conditionsDivId = 'conditionsDivId';\n    // If there is an existing conditionsDiv remove it.\n    remove(conditionsDivId);\n    if (conditionsElement == null) {\n        // Create a conditions section from scratch?\n    } else {\n        let conditionsDiv: HTMLDivElement = processConditions(xml);\n        conditionsDiv.id = conditionsDivId;\n        conditionsElement.appendChild(\n            getCollapsibleDiv({\n                content: conditionsDiv,\n                buttonLabel: \"Conditions\",\n                buttonFontSize: fontSize1,\n                boundary: boundary1,\n                level: level0,\n                contentDivId: conditionsDivId\n            })\n        );\n    }\n\n    // Model Parameters.\n    let modelParametersElement: HTMLElement | null = document.getElementById(\"modelParameters\");\n    let modelParametersDivId = 'modelParametersDivId';\n    // If there is an existing modelParametersDiv remove it.\n    remove(modelParametersDivId);\n    if (modelParametersElement == null) {\n        // Create a model parameters section from scratch?\n    } else {\n        let modelParametersDiv: HTMLDivElement = processModelParameters(xml);\n        modelParametersDiv.id = modelParametersDivId;\n        modelParametersElement.appendChild(\n            getCollapsibleDiv({\n                content: modelParametersDiv,\n                buttonLabel: \"Model Parameters\",\n                buttonFontSize: fontSize1,\n                boundary: boundary1,\n                level: level0,\n                contentDivId: modelParametersDivId\n            })\n        );\n    }\n\n    // Control.\n    let controlElement: HTMLElement | null = document.getElementById(\"control\");\n    let controlDivId = 'controlDivId';\n    // If there is an existing controlDiv remove it.\n    remove(controlDivId);\n    if (controlElement == null) {\n        // Create a control section from scratch?\n    } else {\n        let controlDiv: HTMLDivElement = processControl(xml);\n        controlDiv.id = controlDivId;\n        controlElement.appendChild(\n            getCollapsibleDiv({\n                content: controlDiv,\n                buttonLabel: \"Control\",\n                buttonFontSize: fontSize1,\n                boundary: boundary1,\n                level: level0,\n                contentDivId: controlDivId\n            })\n        );\n    }\n\n    // Initiate action listeners for collapsible content.\n    makeCollapsible();\n}\n\n/**\n * Parse XML and create HTMLDivElement for molecules.\n * @param xml The XML.\n * @returns The HTMLDivElement.\n */\nfunction processMoleculeList(xml: XMLDocument): HTMLDivElement {\n    // Create div to contain the molecules list.\n    let moleculeListDiv: HTMLDivElement = document.createElement(\"div\");\n    // Get the XML \"moleculeList\" element.\n    let xml_moleculeList: Element = getSingularElement(xml, MoleculeList.tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(Molecule.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"molecule\" elements.\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName(Molecule.tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        let moleculeDiv: HTMLDivElement = document.createElement(\"div\");\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n        // Init atomsNode.\n        let atomsNode: AtomArray | Atom | undefined;\n        // There can be an individual atom not in an atom array, or an attom array.\n        let xml_atomArrays: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(AtomArray.tagName);\n        if (xml_atomArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + AtomArray.tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        }\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms: HTMLCollectionOf<Element> = xml_atomArray.getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length < 2) {\n                throw new Error(\"Expecting 2 or more atoms in \" + AtomArray.tagName + \", but finding \" + xml_atoms.length + \"!\");\n            }\n            let atoms: Atom[] = [];\n            for (let j = 0; j < xml_atoms.length; j++) {\n                atoms.push(new Atom(getAttributes(xml_atoms[j])));\n            }\n            atomsNode = new AtomArray(getAttributes(xml_atomArray), atoms);\n            moleculeTagNames.delete(AtomArray.tagName);\n        } else {\n            let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length == 1) {\n                atomsNode = new Atom(getAttributes(xml_atoms[0]));\n            } else if (xml_atoms.length > 1) {\n                throw new Error(\"Expecting 1 \" + Atom.tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + AtomArray.tagName + \"?\");\n            }\n        }\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete(Atom.tagName);\n        // Init bondsNode.\n        let bondsNode: BondArray | Bond | undefined;\n        // There can be an individual bond not in a bond array, or a bond array.\n        let xml_bondArrays: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(BondArray.tagName);\n        if (xml_bondArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + BondArray.tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n        }\n        if (xml_bondArrays.length == 1) {\n            let xml_bondArray = xml_bondArrays[0];\n            let xml_bonds: HTMLCollectionOf<Element> = xml_bondArray.getElementsByTagName(Bond.tagName);\n            // There may be only 1 bond in a BondArray.\n            let bonds: Bond[] = [];\n            for (let j = 0; j < xml_bonds.length; j++) {\n                bonds.push(new Bond(getAttributes(xml_bonds[j])));\n            }\n            bondsNode = new BondArray(getAttributes(xml_bondArray), bonds);\n            moleculeTagNames.delete(BondArray.tagName);\n        } else {\n            let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Bond.tagName);\n            if (xml_bonds.length == 1) {\n                bondsNode = new Bond(getAttributes(xml_bonds[0]));\n            } else if (xml_bonds.length > 1) {\n                throw new Error(\"Expecting 1 \" + Bond.tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + BondArray.tagName + \"?\");\n            }\n        }\n        moleculeTagNames.delete(Bond.tagName);\n\n        // Create molecule.\n        let molecule = new Molecule(attributes, atomsNode, bondsNode);\n        molecules.set(molecule.id, molecule);\n\n        // Organise PropertyList or individual Property.\n        // (There can be an individual property not in a propertyList?)\n        // If there is a PropertyList, then create a property list.\n        let xml_PLs: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(PropertyList.tagName);\n        if (xml_PLs.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_PLs.length + \"!\");\n        }\n        if (xml_PLs.length == 1) {\n            // Create a new collapsible div for the PropertyList.\n            let plDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let contentDivId: string = molecule.id + \"_\" + PropertyList.tagName + \"_\";\n            let collapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: plDiv,\n                buttonLabel: PropertyList.tagName,\n                buttonFontSize: fontSize3,\n                boundary: boundary1,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            moleculeDiv.appendChild(collapsibleDiv);\n            // Create a new PropertyList.\n            let pl: PropertyList = new PropertyList(getAttributes(xml_PLs[0]));\n            molecule.setProperties(pl);\n            let xml_Ps: HTMLCollectionOf<Element> = xml_PLs[0].getElementsByTagName(Property.tagName);\n            for (let j = 0; j < xml_Ps.length; j++) {\n                let p: Property = new Property(getAttributes(xml_Ps[j]));\n                pl.setProperty(p);\n                molecule.setProperties(pl);\n                if (p.dictRef == ZPE.dictRef) {\n                    processProperty(p, unitsEnergy, molecule, xml_Ps[j], plDiv, boundary1, level3);\n                } else if (p.dictRef == RotConsts.dictRef) {\n                    processProperty(p, unitsRotConsts, molecule, xml_Ps[j], plDiv, boundary1, level3);\n                } else {\n                    processProperty(p, undefined, molecule, xml_Ps[j], plDiv, boundary1, level3);\n                }\n            }\n            moleculeTagNames.delete(PropertyList.tagName);\n        } else {\n            // If there is a Property on its own, then create a property on its own.\n            let xml_Ps: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Property.tagName);\n            if (xml_Ps.length != 1) {\n                throw new Error(\"Expecting 1 \" + Property.tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + PropertyList.tagName + \"?\");\n            }\n            // Create a new Property.\n            let p: Property = new Property(getAttributes(xml_Ps[0]));\n            molecule.setProperties(p);\n            if (p.dictRef == ZPE.dictRef) {\n                processProperty(p, unitsEnergy, molecule, xml_Ps[0], moleculeDiv, boundary1, level2);\n            } else if (p.dictRef == RotConsts.dictRef) {\n                processProperty(p, unitsRotConsts, molecule, xml_Ps[0], moleculeDiv, boundary1, level2);\n            } else {\n                processProperty(p, undefined, molecule, xml_Ps[0], moleculeDiv, boundary1, level2);\n            }\n            moleculeTagNames.delete(Property.tagName);\n        }\n        // Organise EnergyTransferModel.\n        let xml_ETMs: HTMLCollectionOf<Element> | null = xml_molecules[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (xml_ETMs.length > 0) {\n            if (xml_ETMs.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + EnergyTransferModel.tagName + \" but finding \" + xml_ETMs.length + \"!\");\n            }\n            let etm = new EnergyTransferModel(getAttributes(xml_ETMs[0]));\n            processEnergyTransferModel(etm, molecule, xml_ETMs[0], moleculeDiv, margin75);\n            moleculeTagNames.delete(EnergyTransferModel.tagName);\n        }\n        // Organise DOSCMethod.\n        let xml_DOSCMethod: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(DOSCMethod.tagName);\n        if (xml_DOSCMethod.length > 0) {\n            if (xml_DOSCMethod.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + DOSCMethod.tagName + \" but finding \" + xml_DOSCMethod.length + \"!\");\n            }\n            let dOSCMethod = new DOSCMethod(getAttributes(xml_DOSCMethod[0]));\n            processDOSCMethod(dOSCMethod, molecule, moleculeDiv);\n            moleculeTagNames.delete(DOSCMethod.tagName);\n        }\n        // Organise ExtraDOSCMethod.\n        let xml_ExtraDOSCMethod = xml_molecules[i].getElementsByTagName(ExtraDOSCMethod.tagName);\n        if (xml_ExtraDOSCMethod.length > 0) {\n            if (xml_ExtraDOSCMethod.length != 1) {\n                throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + xml_ExtraDOSCMethod.length);\n            }\n\n            //console.warn(\"ExtraDOSCMethod detected: This is not displayed in the GUI - more coding needed!\");\n\n            let extraDOSCMethod: ExtraDOSCMethod = new ExtraDOSCMethod(getAttributes(xml_DOSCMethod[0]));\n            // Create a new collapsible div for the ExtraDOSCMethod.\n            let extraDOSCMethodDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let contentDivId: string = molecule.id + \"_\" + ExtraDOSCMethod.tagName + \"_\";\n            let extraDOSCMethodCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: extraDOSCMethodDiv,\n                buttonLabel: ExtraDOSCMethod.tagName,\n                buttonFontSize: fontSize3,\n                boundary: boundary1,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            moleculeDiv.appendChild(extraDOSCMethodCollapsibleDiv);\n            // Read bondRef.\n            let xml_bondRefs: HTMLCollectionOf<Element> = xml_ExtraDOSCMethod[0].getElementsByTagName(BondRef.tagName);\n            if (xml_bondRefs.length > 0) {\n                if (xml_bondRefs.length != 1) {\n                    throw new Error(\"Expecting only 1 bondRef, but there are \" + xml_bondRefs.length);\n                }\n                let container: HTMLDivElement = createFlexDiv(level3);\n                let label: HTMLLabelElement = document.createElement(\"label\");\n                label.textContent = BondRef.tagName + \": \";\n                container.appendChild(label);\n                let bondRef: BondRef = new BondRef(getAttributes(xml_bondRefs[0]), getNodeValue(getFirstChildNode(xml_bondRefs[0])));\n                extraDOSCMethod.setBondRef(bondRef);\n                // Create a HTMLSelectElement to select the bondRef.\n                let bondIds: Set<string> = (molecule.getBonds() as BondArray).getBondIds();\n                let selectElement: HTMLSelectElement = createSelectElement(bondIds, bondRef.value, molecule.id + \"_\" + BondRef.tagName, boundary1);\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        bondRef.value = event.target.value;\n                        resizeSelectElement(event.target);\n                    }\n                });\n                resizeSelectElement(selectElement);\n                container.appendChild(selectElement);\n                extraDOSCMethodDiv.appendChild(container);\n            }\n            // Read hinderedRotorPotential.\n            let xml_hinderedRotorPotentials: HTMLCollectionOf<Element> = xml_ExtraDOSCMethod[0].getElementsByTagName(HinderedRotorPotential.tagName);\n            if (xml_hinderedRotorPotentials.length > 0) {\n                if (xml_hinderedRotorPotentials.length != 1) {\n                    throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + xml_hinderedRotorPotentials.length);\n                }\n                let hinderedRotorPotentialAttributes: Map<string, string> = getAttributes(xml_hinderedRotorPotentials[0]);\n                let hinderedRotorPotential: HinderedRotorPotential = new HinderedRotorPotential(hinderedRotorPotentialAttributes);\n                // Create a new collapsible div for the HinderedRotorPotential.\n                let hinderedRotorPotentialDiv: HTMLDivElement = createFlexDiv(boundary1);\n                let contentDivId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName;\n                let hinderedRotorPotentialCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                    content: hinderedRotorPotentialDiv,\n                    buttonLabel: HinderedRotorPotential.tagName,\n                    buttonFontSize: fontSize3,\n                    boundary: boundary1,\n                    level: level3,\n                    contentDivId: contentDivId\n                });\n                extraDOSCMethodDiv.appendChild(hinderedRotorPotentialCollapsibleDiv);\n                // Formats\n                let formatLabel: HTMLLabelElement = createLabel(\"Format:\", level4);\n                hinderedRotorPotentialDiv.appendChild(formatLabel);\n                let selectElement: HTMLSelectElement = createSelectElement(HinderedRotorPotential.formats,\n                    hinderedRotorPotential.format, molecule.id + \"_\" + HinderedRotorPotential.tagName, boundary1);\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        hinderedRotorPotential.format = event.target.value;\n                        resizeSelectElement(event.target);\n                    }\n                });\n                resizeSelectElement(selectElement);\n                hinderedRotorPotentialDiv.appendChild(selectElement);\n                // Add any units.\n                let unitsLabel: HTMLLabelElement = createLabel(\"Units:\", boundary1);\n                hinderedRotorPotentialDiv.appendChild(unitsLabel);\n                addAnyUnits(HinderedRotorPotential.units, hinderedRotorPotentialAttributes, hinderedRotorPotentialDiv,\n                    molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName,\n                    HinderedRotorPotential.tagName, boundary1);\n                // Add expansionSize.\n                let expansionSizeLabel: HTMLLabelElement = createLabel(\"Expansion size:\", boundary1);\n                hinderedRotorPotentialDiv.appendChild(expansionSizeLabel);\n                let expansionSizeInputElementId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName + \"_expansionSize\";\n                let expansionSizeInputElement: HTMLInputElement = createInput(\"number\", expansionSizeInputElementId, boundary1);\n                expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                expansionSizeInputElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the input is a number.\n                        if (isNumeric(event.target.value)) {\n                            hinderedRotorPotential.setExpansionSize(parseInt(event.target.value));\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Expansion size input is not a number, resetting...\");\n                            expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                        }\n                        resizeInputElement(expansionSizeInputElement);\n                    }\n                });\n                expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                resizeInputElement(expansionSizeInputElement);\n                hinderedRotorPotentialDiv.appendChild(expansionSizeInputElement);\n                // Add useSineTerms.\n                let useSineTermsLabel: HTMLLabelElement = createLabel(\"Use sine terms:\", boundary1);\n                hinderedRotorPotentialDiv.appendChild(useSineTermsLabel);\n                let useSineTermsInputId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName + \"_useSineTerms\";\n                let useSineTermsInput: HTMLInputElement = createInput(\"checkbox\", useSineTermsInputId, boundary1);\n                useSineTermsInput.checked = hinderedRotorPotential.getUseSineTerms();\n                useSineTermsInput.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        hinderedRotorPotential.setUseSineTerms(event.target.checked);\n                    }\n                });\n                hinderedRotorPotentialDiv.appendChild(useSineTermsInput);\n                // Load PotentialPoints.\n                // Create a new collapsible div for the potential points.\n                let potentialPointsDiv: HTMLDivElement = document.createElement(\"div\");\n                let potentialPointContentDivId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName + \"_\" + PotentialPoint.tagName;\n                let potentialPointCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                    content: potentialPointsDiv,\n                    buttonLabel: PotentialPoint.tagName,\n                    buttonFontSize: fontSize3,\n                    boundary: boundary1,\n                    level: level4,\n                    contentDivId: potentialPointContentDivId\n                });\n                hinderedRotorPotentialDiv.appendChild(potentialPointCollapsibleDiv);\n                let potentialPoints: PotentialPoint[] = [];\n                let xml_potentialPoints: HTMLCollectionOf<Element> = xml_hinderedRotorPotentials[0].getElementsByTagName(PotentialPoint.tagName);\n                for (let k = 0; k < xml_potentialPoints.length; k++) {\n                    let potentialPoint: PotentialPoint = new PotentialPoint(getAttributes(xml_potentialPoints[k]));\n                    potentialPoints.push(potentialPoint);\n                    let potentialPointDiv: HTMLDivElement = createFlexDiv(level5);\n                    potentialPointCollapsibleDiv.appendChild(potentialPointDiv);\n                    // Process angle\n                    let angleLabel: HTMLLabelElement = createLabel(\"Angle:\", boundary1);\n                    potentialPointDiv.appendChild(angleLabel);\n                    let angleInputElementId: string = molecule.id + \"_\" + PotentialPoint.tagName + \"_angle\";\n                    let angleInputElement: HTMLInputElement = createInput(\"number\", angleInputElementId, boundary1);\n                    angleInputElement.addEventListener('change', (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            // Check the input is a number.\n                            if (isNumeric(event.target.value)) {\n                                let value: number = parseFloat(event.target.value);\n                                potentialPoint.setAngle(parseFloat(event.target.value));\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Angle input is not a number, resetting...\");\n                                angleInputElement.value = potentialPoint.getAngle().toString();\n                            }\n                            resizeInputElement(angleInputElement);\n                        }\n                    });\n                    angleInputElement.value = potentialPoint.getAngle().toString();\n                    resizeInputElement(angleInputElement);\n                    potentialPointDiv.appendChild(angleInputElement);\n                    // Create a new div element for the potential.\n                    let potentialLabel: HTMLLabelElement = createLabel(\"Potential:\", boundary1);\n                    potentialPointDiv.appendChild(potentialLabel);\n                    let potentialInputElementId = molecule.id + \"_\" + PotentialPoint.tagName + \"_potential\";\n                    let potentialInputElement: HTMLInputElement = createInput(\"number\", potentialInputElementId, boundary1);\n                    potentialInputElement.addEventListener('change', (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            // Check the input is a number.\n                            if (isNumeric(event.target.value)) {\n                                let value: number = parseFloat(event.target.value);\n                                potentialPoint.setPotential(value);\n                                console.log(\"Set \" + PotentialPoint.tagName + \" to \" + value.toString());\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Potential input is not a number, resetting...\");\n                                potentialInputElement.value = potentialPoint.getPotential().toString();\n                            }\n                            resizeInputElement(potentialInputElement);\n                        }\n                    });\n                    potentialInputElement.value = potentialPoint.getPotential().toString();\n                    resizeInputElement(potentialInputElement);\n                    potentialPointDiv.appendChild(potentialInputElement);\n                    potentialPointsDiv.appendChild(potentialPointDiv);\n                }\n                potentialPointCollapsibleDiv.appendChild(potentialPointsDiv);\n                hinderedRotorPotential.setPotentialPoints(potentialPoints);\n                extraDOSCMethod.setHinderedRotorPotential(hinderedRotorPotential);\n            }\n\n            // Read periodicities.\n            let xml_periodicities: HTMLCollectionOf<Element> = xml_DOSCMethod[0].getElementsByTagName(Periodicity.tagName);\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) {\n                    throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                }\n                let valueString: string = getNodeValue(getFirstChildNode(xml_periodicities[0]));\n                let periodicity: Periodicity = new Periodicity(getAttributes(xml_periodicities[0]), parseFloat(valueString));\n                extraDOSCMethod.setPeriodicity(periodicity);\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + Periodicity.tagName, boundary1, level3, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        valueString = event.target.value;\n                        if (isNumeric(valueString)) {\n                            let value: number = parseFloat(valueString);\n                            periodicity.value = value;\n                            (extraDOSCMethod.getPeriodicity() as Periodicity).value = value;\n                            console.log(\"Set \" + Periodicity.tagName + \" to \" + value);\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Periodicity input is not a number, resetting...\");\n                            event.target.value = periodicity.value.toString();\n                        }\n                    }\n                }, valueString, Periodicity.tagName);\n                extraDOSCMethodDiv.appendChild(inputDiv);\n            }\n            molecule.setExtraDOSCMethod(extraDOSCMethod);\n            moleculeTagNames.delete(ExtraDOSCMethod.tagName);\n        }\n\n        // Organise ReservoirSize.\n        moleculeTagNames.delete(ReservoirSize.tagName);\n        let xml_ReservoirSize = xml_molecules[i].getElementsByTagName(ReservoirSize.tagName);\n        if (xml_ReservoirSize.length > 0) {\n            if (xml_ReservoirSize.length != 1) {\n                throw new Error(\"Expecting only 1 reservoirSize, but there are \" + xml_ReservoirSize.length);\n            }\n            let valueString: string = getNodeValue(getFirstChildNode(xml_ReservoirSize[0]));\n            let value: number = parseFloat(valueString);\n            let reservoirSizeAttributes: Map<string, string> = getAttributes(xml_ReservoirSize[0]);\n            let reservoirSize: ReservoirSize = new ReservoirSize(reservoirSizeAttributes, value);\n            molecule.setReservoirSize(reservoirSize);\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + ReservoirSize.tagName, boundary1, level2, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    reservoirSize.value = parseFloat(event.target.value);\n                    resizeInputElement(event.target);\n                }\n            }, valueString, ReservoirSize.tagName);\n            moleculeDiv.appendChild(inputDiv);\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.warn(x));\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        // Create a molstar molecule visualisation\n        let molstarDiv: HTMLDivElement = document.createElement(\"div\");\n        molstarDiv.id = molecule.id + \"_molstar\";\n        moleculeDiv.appendChild(molstarDiv);\n\n        // Create a new collapsible div for the molecule.\n        let collapsibleDiv = getCollapsibleDiv({\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonFontSize: fontSize2,\n            boundary: boundary1,\n            level: level1,\n            contentDivId: molecule.tagName + \"_\" + molecule.id\n        });\n        // Append the collapsibleDiv to the moleculeListDiv.\n        moleculeListDiv.appendChild(collapsibleDiv);\n    }\n    return moleculeListDiv;\n}\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xmlFilename: string, xml: string) {\n    let xmlDiv: HTMLDivElement = document.getElementById(\"xml\") as HTMLDivElement;\n    // xmlHeading\n    let xmlHeadingId: string = \"xmlHeading\";\n    remove(xmlHeadingId);\n    let xmlHeading: HTMLHeadingElement = document.createElement(\"h2\");\n    xmlHeading.textContent = xmlFilename;\n    xmlDiv.appendChild(xmlHeading);\n    // xmlParagraph\n    let xmlParagraphId: string = \"xmlParagraph\";\n    remove(xmlParagraphId);\n    let xmlPre: HTMLPreElement = document.createElement(\"pre\");\n    xmlPre.textContent = xml;\n    xmlDiv.appendChild(xmlPre);\n}\n\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n * @param boundary The boundary to go around components.\n * @param level The level of the component.\n */\nfunction processProperty(p: Property, units: string[] | undefined, molecule: Molecule, element: Element, moleculeDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n) {\n    // Handle scalar or array property\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalar.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalar.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let value: number = parseFloat(inputString);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        let ps: PropertyScalar = new PropertyScalar(psAttributes, value);\n        p.setProperty(ps);\n        let label: string = p.dictRef;\n        // Create a new div element for the input.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + p.dictRef, boundary1, level, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(ps, event.target);\n            }\n        }, inputString, label);\n        let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n        //inputElement.value = inputString;\n        resizeInputElement(inputElement);\n        inputElement.addEventListener('change', (event) => {\n            let eventTarget = event.target as HTMLInputElement;\n            inputString = eventTarget.value;\n            ps = p.getProperty() as PropertyScalar;\n            ps.value = parseFloat(inputString);\n            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n            resizeInputElement(inputElement);\n            if (p.dictRef == ZPE.dictRef) {\n                // Update the min and max molecule energy.\n                if (value < minMoleculeEnergy) {\n                    minMoleculeEnergy = value;\n                }\n                if (value > maxMoleculeEnergy) {\n                    maxMoleculeEnergy = value;\n                }\n                // Update the molecule energy diagram.\n                displayReactionsDiagram();\n            }\n        });\n        addAnyUnits(units, psAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n        moleculeDiv.appendChild(inputDiv);\n    } else {\n        let arrayNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyArray.tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) {\n                throw new Error(\"Expecting 1 \" + PropertyArray.tagName + \" but finding \" + arrayNodes.length + \"!\");\n            }\n            let inputString: string = getInputString(arrayNodes[0]);\n            let values: number[] = toNumberArray(inputString.split(/\\s+/));\n            let paAttributes: Map<string, string> = getAttributes(arrayNodes[0]);\n            let pa: PropertyArray = new PropertyArray(paAttributes, values);\n            p.setProperty(pa);\n            let label: string = p.dictRef;\n            // Create a new div element for the input.\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"text\", molecule.id + \"_\" + p.dictRef, boundary, level, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    setNumberArrayNode(pa, event.target);\n                }\n            }, inputString, label);\n            let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n            inputElement.value = inputString;\n            resizeInputElement(inputElement);\n            inputElement.addEventListener('change', (event) => {\n                let eventTarget = event.target as HTMLInputElement;\n                inputString = eventTarget.value;\n                pa = p.getProperty() as PropertyArray;\n                values = toNumberArray(inputString.split(/\\s+/));\n                pa.values = values;\n                console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                resizeInputElement(inputElement);\n            });\n            addAnyUnits(units, paAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary);\n            moleculeDiv.appendChild(inputDiv);\n        } else {\n            throw new Error(\"Expecting \" + PropertyScalar.tagName + \" or \" + PropertyArray.tagName);\n        }\n    }\n}\n\n/**\n * If there are a choice of units, then add a new select element to display/select them.\n * @param units The possible units.\n * @param attributes The attributes.\n * @param inputDiv The input div.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n */\nfunction addAnyUnits(units: string[] | undefined, attributes: Map<string, string>, inputDiv: HTMLDivElement,\n    id: string, tagOrDictRef: string, boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    if (units != undefined) {\n        let unitsSelectElement: HTMLSelectElement | undefined = getUnitsSelectElement(units, attributes, id, tagOrDictRef);\n        if (unitsSelectElement != undefined) {\n            Object.assign(unitsSelectElement.style, boundary);\n            inputDiv.appendChild(unitsSelectElement);\n        }\n    } else {\n        let attributesUnits: string | undefined = attributes.get(\"units\");\n        if (attributesUnits != undefined) {\n            let label: HTMLLabelElement = createLabel(attributesUnits, boundary);\n            inputDiv.appendChild(label);\n        }\n    }\n}\n\n/**\n * @param attributes The attributes.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @returns A select element for setting the units or undefined if there is not attribute for units.\n */\nfunction getUnitsSelectElement(units: string[], attributes: Map<string, string>, id: string, tagOrDictRef: string): HTMLSelectElement | undefined {\n    let psUnits: string | undefined = attributes.get(\"units\");\n    if (psUnits != undefined) {\n        // Get a select element for setting the units.\n        let selectElement: HTMLSelectElement = createSelectElement(units, \"Units\", id, boundary1);\n        // Set the initial value to the units.\n        selectElement.value = psUnits;\n        // Add event listener to selectElement.\n        resizeSelectElement(selectElement);\n        selectElement.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLSelectElement) {\n                attributes.set(\"units\", event.target.value);\n                console.log(\"Set \" + tagOrDictRef + \" units to \" + event.target.value);\n            }\n            resizeSelectElement(selectElement);\n        });\n        return selectElement;\n    }\n    return undefined;\n}\n\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param margin The margin.\n * @param moleculeDiv The molecule div.\n */\nfunction processDOSCMethod(dOSCMethod: DOSCMethod, molecule: Molecule, moleculeDiv: HTMLDivElement): void {\n    let label: HTMLLabelElement = document.createElement('label');\n    label.textContent = DOSCMethod.tagName + \": \";\n    let container: HTMLDivElement = document.createElement('div');\n    container.appendChild(label);\n    // Create a HTMLSelectElement to select the DOSCMethod.\n    let options: string[] = [\"ClassicalRotors\", \"me:QMRotors\", \"QMRotors\"];\n    let selectElement: HTMLSelectElement = createSelectElement(options, \"DOSCMethod\", molecule.id + \"_\" + 'Select_DOSCMethod', boundary1);\n    // Set the initial value to the DOSCMethod.\n    selectElement.value = dOSCMethod.getXsiType();\n    // Add event listener to selectElement.\n    selectElement.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLSelectElement) {\n            dOSCMethod.setXsiType(event.target.value);\n            console.log(\"Set DOSCMethod to \" + event.target.value);\n        }\n    });\n    molecule.setDOSCMethod(dOSCMethod);\n    container.appendChild(selectElement);\n    Object.assign(container.style, level2);\n    moleculeDiv.appendChild(container);\n}\n\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */\nfunction processEnergyTransferModel(etm: EnergyTransferModel, molecule: Molecule, element: Element, moleculeDiv: HTMLDivElement, margin: string) {\n    let xml_deltaEDowns: HTMLCollectionOf<Element> = element.getElementsByTagName(DeltaEDown.tagName);\n    if (xml_deltaEDowns.length > 0) {\n        // Create a new collapsible div for the energyTransferModel.\n        let etmDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n        let contentDivId: string = molecule.id + \"_\" + EnergyTransferModel.tagName;\n        let collapsibleDiv = getCollapsibleDiv({\n            content: etmDiv,\n            buttonLabel: EnergyTransferModel.tagName,\n            buttonFontSize: fontSize3,\n            boundary: boundary1,\n            level: level2,\n            contentDivId: contentDivId\n        });\n        moleculeDiv.appendChild(collapsibleDiv);\n        let deltaEDowns: DeltaEDown[] = [];\n        for (let k = 0; k < xml_deltaEDowns.length; k++) {\n            let inputString: string = getInputString(xml_deltaEDowns[k]);\n            let value: number = parseFloat(inputString);\n            let deltaEDownAttributes: Map<string, string> = getAttributes(xml_deltaEDowns[k]);\n            let deltaEDown: DeltaEDown = new DeltaEDown(deltaEDownAttributes, value);\n            deltaEDowns.push(deltaEDown);\n            let label: string = DeltaEDown.tagName;\n            // Create a new div element for the input.\n            let id = molecule.id + \"_\" + EnergyTransferModel.tagName + \"_\" + DeltaEDown.tagName + \"_\" + k;\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    setNumberNode(deltaEDown, event.target);\n                    inputString = event.target.value;\n                    deltaEDowns[k].setValue(parseFloat(inputString));\n                    console.log(\"Set \" + id + \" to \" + inputString);\n                    resizeInputElement(event.target);\n                }\n            }, inputString, label);\n            etmDiv.appendChild(inputDiv);\n            let unitsLabel: HTMLLabelElement = document.createElement('label');\n            unitsLabel.textContent = \"cm-1\";\n            inputDiv.appendChild(unitsLabel);\n        }\n        etm.setDeltaEDowns(deltaEDowns);\n        molecule.setEnergyTransferModel(etm);\n    }\n}\n\n/**\n * Set a molecule property array when the input value is changed.\n * @param dictRef The dictionary reference of the property.\n * @param input The input element.\n */\nexport function setNumberArrayNode(node: NumberArrayNode, input: HTMLInputElement): void {\n    let inputString: string = input.value.trim();\n    if (inputString == \"\") {\n        alert(\"Empty input resetting...\");\n        input.value = arrayToString(node.values, \" \");\n        return;\n    }\n    let inputStrings: string[] = inputString.split(/\\s+/);\n    let values: number[] = [];\n    let success: boolean = true;\n    inputStrings.forEach(function (value) {\n        if (!isNumeric(value)) {\n            success = false;\n        }\n        values.push(parseFloat(value));\n    });\n    if (!success) {\n        alert(\"An input is not a number, resetting...\");\n        input.value = arrayToString(node.values, \" \");\n        return;\n    }\n    //console.log(\"propertyArray=\" + propertyArray);\n    if (values.length == node.values.length) {\n        console.log(\"Changed \" + node.tagName + \" from: \\\"\" + inputString + \"\\\" to: \\\"\" + arrayToString(node.values, \" \") + \"\\\"\");\n        //console.log(\"molecule=\" + molecule);\n    } else {\n        alert(\"Expecting \" + node.values.length + \" values for, but finding \" + values.length + \" resetting...\");\n        input.value = arrayToString(node.values, \" \");\n    }\n}\n\n(window as any).setNumberArrayNode = setNumberArrayNode;\n\n/**\n * Set a molecule number node when the input value is changed.\n * @param node The number node.\n * @param input The input element.\n */\nexport function setNumberNode(node: NumberNode, input: HTMLInputElement): void {\n    if (isNumeric(input.value)) {\n        let inputNumber: number = parseFloat(input.value);\n        node.value = inputNumber;\n        console.log(\"Value set to \" + inputNumber);\n    } else {\n        alert(\"Value is not numeric, resetting...\");\n        input.value = node.value.toString();\n    }\n}\n\n(window as any).set = setNumberNode;\n\n/**\n * Parse XML and create HTMLDivElement for reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction processReactionList(xml: XMLDocument): HTMLDivElement {\n    // Create div to contain the reaction list.\n    let reactionListDiv: HTMLDivElement = createFlexDiv(boundary1);\n    // Get the XML \"reactionList\" element.\n    let xml_reactionList: Element = getSingularElement(xml, ReactionList.tagName);\n    // Check the XML \"reactionList\" element has one or more \"reaction\" elements and no other elements.\n    let reactionListTagNames: Set<string> = new Set();\n    xml_reactionList.childNodes.forEach(function (node) {\n        reactionListTagNames.add(node.nodeName);\n    });\n    if (reactionListTagNames.size != 1) {\n        if (!(reactionListTagNames.size == 2 && reactionListTagNames.has(\"#text\"))) {\n            console.error(\"reactionListTagNames:\");\n            reactionListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in reactionList:\");\n        }\n    }\n    if (!reactionListTagNames.has(Reaction.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Reaction.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"reaction\" elements.\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    //xml_reactions.forEach(function (xml_reaction) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_reactions.length; i++) {\n        let reactionDiv: HTMLDivElement = createDiv(boundary1);\n        // Set attributes.\n        let reactionAttributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_reactions[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!reactionTagNames.has(cn.nodeName)) {\n                reactionTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n\n        // Create reaction.\n        let reaction = new Reaction(reactionAttributes);\n        reactions.set(reaction.id, reaction);\n\n        // Reactions typically have one or more reactant and product. They may also have one or more \"me:transitionState\" and other things...\n        // Load reactants.\n        let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n        reactionTagNames.delete(Reactant.tagName);\n        //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n        if (xml_reactants.length > 0) {\n            // Create a new div for the reactants.\n            let reactantsDiv: HTMLDivElement = document.createElement(\"div\");\n            let reactants: Reactant[] = [];\n            for (let j = 0; j < xml_reactants.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let reactant: Reactant = new Reactant(getAttributes(xml_reactants[j]), molecule);\n                reactants.push(reactant);\n                // Create a new div for the role.\n                let container: HTMLDivElement = document.createElement(\"div\");\n                let label: HTMLLabelElement = document.createElement('label');\n                label.textContent = molecule.ref + \" role: \";\n                container.appendChild(label);\n                // Create a HTMLSelectElement to select the Role.\n                let options: string[] = [\"deficientReactant\", \"excessReactant\", \"modelled\"];\n                let selectElement: HTMLSelectElement = createSelectElement(options, \"Role\", molecule.ref + \"_\" + 'Select_Role', boundary1);\n                // Set the initial value.\n                selectElement.value = molecule.role;\n                // Add event listener to selectElement.\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        molecule.setRole(event.target.value);\n                        console.log(\"Set Role to \" + event.target.value);\n                    }\n                });\n                container.appendChild(selectElement);\n                Object.assign(container.style, level3);\n                reactantsDiv.appendChild(container);\n            }\n            reaction.setReactants(reactants);\n            // Create a new collapsible div for the reactants.\n            let contentDivId: string = reaction.id + \"_\" + Reactant.tagName;\n            let reactantCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: reactantsDiv,\n                buttonLabel: \"Reactants\",\n                buttonFontSize: fontSize3,\n                boundary: boundary1,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(reactantCollapsibleDiv);\n        }\n        // Load products.\n        let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n        reactionTagNames.delete(Product.tagName);\n        //console.log(\"xml_products.length=\" + xml_products.length);\n        if (xml_products.length > 0) {\n            let productsDiv: HTMLDivElement = document.createElement(\"div\");\n            let products: Product[] = [];\n            for (let j = 0; j < xml_products.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_products[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let product: Product = new Product(getAttributes(xml_products[j]), molecule);\n                products.push(product);\n                let options: string[] = [\"modelled\", \"sink\"];\n                let container: HTMLDivElement = createLabelWithSelectElement(molecule.ref + \" role:\", options,\n                    molecule.ref + \"_\" + 'Select_Role', \"Role\", boundary1);\n                let selectElement: HTMLSelectElement = container.querySelector('select') as HTMLSelectElement;\n                selectElement.value = molecule.role;\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        molecule.setRole(event.target.value);\n                        console.log(\"Set Role to \" + event.target.value);\n                    }\n                });\n                Object.assign(container.style, level3);\n                productsDiv.appendChild(container);\n            }\n            reaction.setProducts(products);\n            // Create collapsible div for the products.\n            let contentDivId: string = reaction.id + \"_\" + Product.tagName;\n            let productCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: productsDiv,\n                buttonLabel: \"Products\",\n                buttonFontSize: fontSize3,\n                boundary: boundary1,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(productCollapsibleDiv);\n        }\n        // Load tunneling.\n        let xml_tunneling = xml_reactions[i].getElementsByTagName(Tunneling.tagName);\n        if (xml_tunneling.length > 0) {\n            if (xml_tunneling.length > 1) {\n                throw new Error(\"Expecting 1 \" + Tunneling.tagName + \" but finding \" + xml_tunneling.length + \"!\");\n            }\n            let tunneling: Tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            reaction.setTunneling(tunneling);\n            // Create a new div for the tunneling.\n            let container: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let label: HTMLLabelElement = document.createElement('label');\n            label.textContent = Tunneling.tagName + \": \";\n            container.appendChild(label);\n            // Create a HTMLSelectElement to select the Tunneling.\n            let options: string[] = [\"Eckart\", \"WKB\"];\n            let selectElement: HTMLSelectElement = createSelectElement(options, \"Tunneling\", reaction.id + \"_\" + 'Select_Tunneling', boundary1);\n            // Set the initial value.\n            selectElement.value = tunneling.getName();\n            // Add event listener to selectElement.\n            selectElement.addEventListener('change', (event) => {\n                if (event.target instanceof HTMLSelectElement) {\n                    tunneling.setName(event.target.value);\n                    console.log(\"Set Tunneling to \" + event.target.value);\n                }\n            });\n            container.appendChild(selectElement);\n            Object.assign(container.style, level2);\n            reactionDiv.appendChild(container);\n        }\n        // Load transition states.\n        let xml_transitionStates: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(TransitionState.tagName);\n        //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n        if (xml_transitionStates.length > 0) {\n            let transitionStatesDiv: HTMLDivElement = document.createElement(\"div\");\n            let transitionStates: TransitionState[] = [];\n            for (let j = 0; j < xml_transitionStates.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_transitionStates[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let transitionState: TransitionState = new TransitionState(getAttributes(xml_transitionStates[j]), molecule);\n                transitionStates.push(transitionState);\n                // Create a label for the Transition State.\n                let label: HTMLLabelElement = createLabel(molecule.ref + \" role: transitionState\", level3);\n                transitionStatesDiv.appendChild(label);\n            }\n            reaction.setTransitionStates(transitionStates);\n            // Create a new collapsible div for the transition states.\n            let contentDivId: string = reaction.id + \"_\" + TransitionState.tagName;\n            let transitionStatesCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: transitionStatesDiv,\n                buttonLabel: \"Transition States\",\n                buttonFontSize: fontSize3,\n                boundary: boundary1,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(transitionStatesCollapsibleDiv);\n        }\n        // Load MCRCMethod.\n        //console.log(\"Load MCRCMethod...\");\n        let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n        //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n        //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n        if (xml_MCRCMethod.length > 0) {\n            if (xml_MCRCMethod.length > 1) {\n                throw new Error(\"Expecting 1 \" + MCRCMethod.tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n            } else {\n                let mCRCMethodDiv: HTMLDivElement = document.createElement(\"div\");\n                let mCRCMethod: MCRCMethod;\n                let mCRCMethodAttributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                let name: string | undefined = mCRCMethodAttributes.get(\"name\");\n                //console.log(MCRCMethod.tagName + \" name=\" + name);\n                if (name == undefined || name == MesmerILT.xsiType2) {\n                    let type: string = mCRCMethodAttributes.get(\"xsi:type\") as string;\n                    mCRCMethod = new MesmerILT(mCRCMethodAttributes);\n                    //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                    if (type == MesmerILT.xsiType || type == MesmerILT.xsiType2) {\n                        let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                        if (xml_preExponential != null) {\n                            if (xml_preExponential[0] != null) {\n                                let inputString: string = getInputString(xml_preExponential[0]);\n                                let value: number = parseFloat(inputString);\n                                let preExponentialAttributes: Map<string, string> = getAttributes(xml_preExponential[0]);\n                                let preExponential: PreExponential = new PreExponential(preExponentialAttributes, value);\n                                (mCRCMethod as MesmerILT).setPreExponential(preExponential);\n                                let label: string = PreExponential.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + PreExponential.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(preExponential, event.target);\n                                    }\n                                }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    preExponential.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, preExponentialAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + PreExponential.tagName,\n                                    PreExponential.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"preExponential \" + preExponential);\n                        let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                        if (xml_activationEnergy != null) {\n                            if (xml_activationEnergy[0] != null) {\n                                let inputString: string = getInputString(xml_activationEnergy[0]);\n                                let value: number = parseFloat(inputString);\n                                let activationEnergyAttributes: Map<string, string> = getAttributes(xml_activationEnergy[0]);\n                                let activationEnergy: ActivationEnergy = new ActivationEnergy(activationEnergyAttributes, value);\n                                (mCRCMethod as MesmerILT).setActivationEnergy(activationEnergy);\n                                let label: string = ActivationEnergy.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + ActivationEnergy.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(activationEnergy, event.target);\n                                    }\n                                }, inputString, label);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    activationEnergy.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, activationEnergyAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + ActivationEnergy.tagName,\n                                    ActivationEnergy.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"activationEnergy \" + activationEnergy);\n                        let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(TInfinity.tagName);\n                        if (xml_tInfinity != null) {\n                            if (xml_tInfinity[0] != null) {\n                                let inputString: string = getInputString(xml_tInfinity[0]);\n                                let value: number = parseFloat(inputString);\n                                let tInfinityAttributes: Map<string, string> = getAttributes(xml_tInfinity[0]);\n                                let tInfinity: TInfinity = new TInfinity(tInfinityAttributes, value);\n                                (mCRCMethod as MesmerILT).setTInfinity(tInfinity);\n                                let label: string = TInfinity.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + TInfinity.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(tInfinity, event.target);\n                                    }\n                                }, inputString, label);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    tInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, tInfinityAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + TInfinity.tagName,\n                                    TInfinity.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"tInfinity \" + tInfinity);\n                        let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(NInfinity.tagName);\n                        if (xml_nInfinity != null) {\n                            if (xml_nInfinity[0] != null) {\n                                let inputString: string = getInputString(xml_nInfinity[0]);\n                                let value: number = parseFloat(inputString);\n                                let nInfinityAttributes: Map<string, string> = getAttributes(xml_nInfinity[0]);\n                                let nInfinity: NInfinity = new NInfinity(nInfinityAttributes, value);\n                                (mCRCMethod as MesmerILT).setNInfinity(nInfinity);\n                                let label: string = NInfinity.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + NInfinity.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(nInfinity, event.target);\n                                    }\n                                }, inputString, label);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    nInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, nInfinityAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + NInfinity.tagName, NInfinity.tagName,\n                                    boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"nInfinity \" + nInfinity);\n                        // Create a new collapsible div for the MCRCMethod.\n                        let contentDivId: string = reaction.id + \"_\" + MCRCMethod.tagName;\n                        let mCRCMethodCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                            content: mCRCMethodDiv,\n                            buttonLabel: MCRCMethod.tagName,\n                            buttonFontSize: fontSize3,\n                            boundary: boundary1,\n                            level: level2,\n                            contentDivId: contentDivId\n                        });\n                        reactionDiv.appendChild(mCRCMethodCollapsibleDiv);\n                    } else {\n                        throw new Error(\"Unexpected xsi:type=\" + type);\n                    }\n                } else {\n                    mCRCMethod = new MCRCMethod(mCRCMethodAttributes);\n                    let mCRCMethodLabel: HTMLLabelElement = document.createElement('label');\n                    mCRCMethodLabel.textContent = MCRCMethod.tagName + \": \" + mCRCMethodAttributes.get(\"name\") as string;\n                    Object.assign(mCRCMethodLabel.style, level2);\n                    mCRCMethodDiv.appendChild(mCRCMethodLabel);\n                    reactionDiv.appendChild(mCRCMethodDiv);\n                }\n                reaction.setMCRCMethod(mCRCMethod);\n            }\n        }\n\n        // Load excessReactantConc\n        let xml_excessReactantConc = xml_reactions[i].getElementsByTagName(ExcessReactantConc.tagName);\n        if (xml_excessReactantConc.length > 0) {\n            if (xml_excessReactantConc.length > 1) {\n                throw new Error(\"Expecting 1 \" + ExcessReactantConc.tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n            }\n            let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_excessReactantConc[0])));\n            let excessReactantConc: ExcessReactantConc = new ExcessReactantConc(getAttributes(xml_excessReactantConc[0]), value);\n            reaction.setExcessReactantConc(excessReactantConc);\n            let id = reaction.id + \"_\" + ExcessReactantConc.tagName;\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level2, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    setNumberNode(excessReactantConc, event.target);\n                }\n            }, value.toString(), ExcessReactantConc.tagName);\n            reactionDiv.appendChild(inputDiv);\n        }\n\n        // Create a new collapsible div for the reaction.\n        let reactionCollapsibleDiv = getCollapsibleDiv({\n            content: reactionDiv,\n            buttonLabel: reaction.id + \"(\" + reaction.getLabel() + \")\",\n            buttonFontSize: fontSize2,\n            boundary: boundary1,\n            level: level1,\n            contentDivId: reaction.tagName + \"_\" + reaction.id\n        });\n\n        // Append the collapsibleDiv to the reactionListDiv.\n        reactionListDiv.appendChild(reactionCollapsibleDiv);\n\n    }\n    return reactionListDiv;\n}\n\n/**\n * Parse xml to initialise conditions.\n * @param xml The XML document.\n * @returns The conditions div.\n */\nfunction processConditions(xml: XMLDocument): HTMLDivElement {\n    console.log(Conditions.tagName);\n    // Create div to contain the conditions.\n    let conditionsDiv: HTMLDivElement = document.createElement(\"div\");\n    // Get the XML \"moleculeList\" element.\n    let xml_conditions: Element = getSingularElement(xml, Conditions.tagName);\n    let conditions: Conditions = new Conditions(getAttributes(xml_conditions));\n    mesmer.setConditions(conditions);\n\n    // Bath Gases\n    let bathGasesDiv: HTMLDivElement = document.createElement(\"div\");\n    conditionsDiv.appendChild(bathGasesDiv);\n    // Add collapsible div.\n    conditionsDiv.appendChild(getCollapsibleDiv({\n        content: bathGasesDiv,\n        buttonLabel: BathGas.name,\n        buttonFontSize: fontSize2,\n        boundary: boundary1,\n        level: level1,\n        contentDivId: BathGas.tagName\n    }));\n\n    // Add add button.\n    let addBathGasButton: HTMLButtonElement = createButton(addString, level2);\n    bathGasesDiv.appendChild(addBathGasButton);\n    addBathGasButton.addEventListener('click', () => {\n        let bathGas: BathGas = new BathGas(new Map(), \"\");\n        conditions.addBathGas(bathGas);\n        let containerDiv: HTMLDivElement = createFlexDiv(level2);\n        let bathGasLabel: HTMLLabelElement = createLabel(BathGas.tagName, boundary1);\n        containerDiv.appendChild(bathGasLabel);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs: Set<string> = new Set(molecules.keys());\n        let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName,\n            Conditions.tagName + \"_\" + BathGas.tagName, boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Added \" + event.target.value + \" as a \" + BathGas.tagName);\n                resizeSelectElement(event.target);\n            }\n        });\n        selectElement.style.marginLeft = margin2;\n        resizeSelectElement(selectElement);\n        containerDiv.appendChild(selectElement);\n        // Add a remove button.\n        let removeButton: HTMLButtonElement = createButton(removeString, boundary1);\n        removeButton.addEventListener('click', () => {\n            bathGasesDiv.removeChild(containerDiv);\n            conditions.removeBathGas(bathGas);\n        });\n        containerDiv.appendChild(removeButton);\n        bathGasesDiv.appendChild(containerDiv);\n    });\n\n    // Process any \"bathGas\" elements that are immediate children of xml_conditions.\n    let xml_bathGases: Element[] = Array.from(xml_conditions.children).filter(child => child.tagName === BathGas.tagName);\n    if (xml_bathGases.length > 0) {\n        for (let i = 0; i < xml_bathGases.length; i++) {\n            let attributes: Map<string, string> = getAttributes(xml_bathGases[i]);\n            let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGases[i]));\n            let bathGas: BathGas = new BathGas(attributes, moleculeID);\n            console.log(\"bathGas\" + bathGas.toString());\n            conditions.addBathGas(bathGas);\n            let containerDiv: HTMLDivElement = createFlexDiv(level2);\n            let bathGasLabel: HTMLLabelElement = createLabel(BathGas.tagName, boundary1);\n            containerDiv.appendChild(bathGasLabel);\n            // Create a HTMLSelectInput for the BathGas.\n            // Get the ids of all the molecules.\n            let moleculeIDs: Set<string> = new Set(molecules.keys());\n            let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName, Conditions.tagName + \"_\" + BathGas.tagName, boundary1);\n            // Set the initial value.\n            selectElement.value = bathGas.value;\n            // Add event listener to selectElement.\n            selectElement.addEventListener('change', (event) => {\n                if (event.target instanceof HTMLSelectElement) {\n                    bathGas.value = event.target.value;\n                    console.log(\"Set \" + PTpair.tagName + \"_\" + BathGas.tagName + \" to \" + event.target.value);\n                    resizeSelectElement(event.target);\n                }\n            });\n            resizeSelectElement(selectElement);\n            containerDiv.appendChild(selectElement);\n            // Add a remove button.\n            let removeButton: HTMLButtonElement = createButton(removeString, boundary1);\n            removeButton.addEventListener('click', () => {\n                bathGasesDiv.removeChild(containerDiv);\n                conditions.removeBathGas(bathGas);\n            });\n            containerDiv.appendChild(removeButton);\n            bathGasesDiv.appendChild(containerDiv);\n        }\n    }\n\n    // PTs\n    let pTsDiv: HTMLDivElement = document.createElement(\"div\");\n    conditionsDiv.appendChild(pTsDiv);\n    let pTs: PTs = new PTs(new Map());\n    // Add collapsible div.\n    conditionsDiv.appendChild(getCollapsibleDiv({\n        content: pTsDiv,\n        buttonLabel: PTs.name,\n        buttonFontSize: fontSize2,\n        boundary: boundary1,\n        level: level1,\n        contentDivId: BathGas.tagName\n    }));\n    // Create an add button to add a new PTpair.\n    let addButton: HTMLButtonElement = createButton(addString, level2);\n    pTsDiv.appendChild(addButton);\n    // Add event listener to the addButton.\n    addButton.addEventListener('click', () => {\n        // Create a new PTpair.\n        let pTPairAttributes: Map<string, string> = new Map();\n        pTPairAttributes.set(\"units\", \"Torr\");\n        let pTPair: PTpair = new PTpair(pTPairAttributes);\n        let pTPairIndex: number = pTs.addPTpair(pTPair);\n        let pTPairDiv: HTMLDivElement = createFlexDiv(level2);\n        addP(pTPairDiv, pTPair);\n        addT(pTPairDiv, pTPair);\n        addAnyUnits(undefined, pTPairAttributes, pTPairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n        // Create an add button for adding details.\n        let addDetailsButton: HTMLButtonElement = createButton(addString + \" details\", boundary1);\n        pTPairDiv.appendChild(addDetailsButton);\n        // Add event listener to the addDetailsButton.\n        addDetailsButton.addEventListener('click', () => {\n            let detailsDiv: HTMLDivElement = document.createElement(\"div\");\n            addExcessReactantConc(pTPairDiv, pTPair);\n            addPercentExcessReactantConc(pTPairDiv, pTPair);\n            addPrecision(pTPairDiv, pTPair);\n            addBathGas(pTPairDiv, pTPair);\n            addExperimentRateButton(pTPairDiv, pTPair);\n\n            pTPairDiv.insertBefore(detailsDiv, addDetailsButton);\n            pTPairDiv.removeChild(addDetailsButton);\n        });\n\n\n        /*\n        addExperimentRateButton.addEventListener('click', () => {\n            let experimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n            let experimentRate: ExperimentRate = new ExperimentRate(new Map(), NaN);\n            pTPair.setExperimentRate(experimentRate);\n            let experimentRateLabel: HTMLLabelElement = document.createElement('label');\n            experimentRateLabel.textContent = ExperimentRate.tagName + \": \";\n            experimentRateDiv.appendChild(experimentRateLabel);\n            pTPairDiv.insertBefore(experimentRateDiv, addExperimentRateButton);\n            pTPairDiv.removeChild(addExperimentRateButton);\n        });\n        pTPairDiv.appendChild(addExperimentRateDiv);\n        */\n\n\n        // Add a remove button.\n        let removeButton: HTMLButtonElement = createButton(removeString, boundary1);\n        removeButton.addEventListener('click', () => {\n            pTsDiv.removeChild(pTPairDiv);\n            pTs.removePTpair(pTPairIndex);\n            pTPair.removeBathGas();\n        });\n        pTPairDiv.appendChild(removeButton);\n        pTsDiv.appendChild(pTPairDiv);\n    });\n    // Create an add from spreadsheet button to add multiple PTPairs.\n    let addMultipleButton: HTMLButtonElement = createButton(addFromSpreadsheetString, boundary1);\n    pTsDiv.appendChild(addMultipleButton);\n    // Add event listener to the addMultipleButton.\n    addMultipleButton.addEventListener('click', () => {\n        // Add a new text input for the user to paste the PTPairs.\n        let inputDiv: HTMLDivElement = createFlexDiv(level2);\n        let addFromSpreadsheetId = PTs.tagName + \"_\" + \"addFromSpreadsheet\";\n        let inputElement: HTMLInputElement = createInput(\"text\", addFromSpreadsheetId, level2);\n        inputDiv.appendChild(inputElement);\n        pTsDiv.insertBefore(inputDiv, addButton);\n        // Add an event listener to the inputElement.\n        inputElement.addEventListener('change', () => {\n            console.log(\"inputElement.value=\" + inputElement.value);\n            console.log(\"inputElement.value.length=\" + inputElement.value.length);\n            if (inputElement.value.length > 0) {\n                let pTPairsArray: string[] = inputElement.value.split(\" \");\n                console.log(\"pTPairsArray.length=\" + pTPairsArray.length);\n                for (let i = 0; i < pTPairsArray.length; i++) {\n                    let pTPairAttributes: Map<string, string> = new Map();\n                    pTPairAttributes.set(\"units\", \"Torr\");\n                    let pTPair: PTpair = new PTpair(pTPairAttributes);\n                    let pTPairArray: string[] = pTPairsArray[i].split(\"\\t\");\n                    if (pTPairArray.length == 2) {\n                        let p: number = parseFloat(pTPairArray[0]);\n                        let t: number = parseFloat(pTPairArray[1]);\n                        pTPair.setP(p);\n                        pTPair.setT(t);\n                        console.log(\"pTPair=\" + pTPair);\n                    } else {\n                        console.warn(\"pTPairArray.length=\" + pTPairArray.length);\n                    }\n                    let pTPairDiv: HTMLDivElement = createFlexDiv(level2);\n                    addP(pTPairDiv, pTPair);\n                    addT(pTPairDiv, pTPair);\n                    addAnyUnits(undefined, pTPairAttributes, pTPairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n                    addExcessReactantConc(pTPairDiv, pTPair);\n                    addPercentExcessReactantConc(pTPairDiv, pTPair);\n                    addPrecision(pTPairDiv, pTPair);\n                    addBathGas(pTPairDiv, pTPair);\n                    console.log(addButton);  // Check the value of addButton\n                    console.log(pTsDiv);  // Check the value of pTsDiv\n                    pTsDiv.insertBefore(pTPairDiv, addButton);\n                    pTs.addPTpair(pTPair);\n                }\n                //pTs.addPTpairs(pTPairs);\n                pTsDiv.removeChild(inputDiv);\n            }\n        });\n    });\n\n    let xml_PTss: HTMLCollectionOf<Element> = xml_conditions.getElementsByTagName(PTs.tagName);\n    if (xml_PTss.length > 0) {\n        if (xml_PTss.length > 1) {\n            throw new Error(\"Expecting 1 \" + PTs.tagName + \" but finding \" + xml_PTss.length + \"!\");\n        }\n        let pTsDiv: HTMLDivElement = document.createElement(\"div\");\n        conditionsDiv.appendChild(pTsDiv);\n        let attributes: Map<string, string> = getAttributes(xml_PTss[0]);\n        let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTss[0].getElementsByTagName(PTpair.tagName);\n        if (xml_PTPairs.length == 0) {\n            throw new Error(\"Expecting 1 or more \" + PTpair.tagName + \" but finding 0!\");\n        } else {\n            let pTs: PTs = new PTs(attributes);\n            for (let i = 0; i < xml_PTPairs.length; i++) {\n                let pTPair = new PTpair(getAttributes(xml_PTPairs[i]));\n                // Create a container div for P, T and units.\n                let pTPairDiv: HTMLDivElement = createFlexDiv(level2);\n                pTsDiv.appendChild(pTPairDiv);\n                // Add any optional BathGas\n                let xml_bathGass: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(BathGas.tagName);\n                if (xml_bathGass.length > 0) {\n                    if (xml_bathGass.length > 1) {\n                        console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n                    }\n                    // Add a label for the BathGas.\n                    let bathGasLabel: HTMLLabelElement = document.createElement('label');\n                    bathGasLabel.textContent = BathGas.tagName + \": \";\n                    pTPairDiv.appendChild(bathGasLabel);\n                    let bathGasValue = getNodeValue(getFirstChildNode(xml_bathGass[0]));\n                    let bathGas: BathGas = new BathGas(getAttributes(xml_bathGass[0]), bathGasValue);\n                    pTPair.setBathGas(bathGas);\n                    // Create a HTMLSelectInput for the BathGas.\n                    // Get the ids of all the molecules.\n                    let moleculeIDs: Set<string> = new Set(molecules.keys());\n                    let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName, PTpair.tagName + \"_\" + BathGas.tagName, boundary1);\n                    // Set the initial value.\n                    selectElement.value = bathGas.value;\n                    // Add event listener to selectElement.\n                    selectElement.addEventListener('change', (event) => {\n                        if (event.target instanceof HTMLSelectElement) {\n                            bathGas.value = event.target.value;\n                            console.log(\"Set \" + PTpair.tagName + \"_\" + BathGas.tagName + \" to \" + event.target.value);\n                            resizeSelectElement(event.target);\n                        }\n                    });\n                    resizeSelectElement(selectElement);\n                    pTPairDiv.appendChild(selectElement);\n                }\n                // Add any optional ExperimentRate\n                let xml_experimentRates: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(ExperimentRate.tagName);\n                if (xml_experimentRates.length > 0) {\n                    if (xml_experimentRates.length > 1) {\n                        console.warn(\"xml_experimentRates.length=\" + xml_experimentRates.length);\n                    }\n                    let valueString: string = getNodeValue(getFirstChildNode(xml_experimentRates[0]));\n                    let experimentRate: ExperimentRate = new ExperimentRate(getAttributes(xml_experimentRates[0]), parseFloat(valueString));\n                    pTPair.setExperimentRate(experimentRate);\n                    // Create a new div for the ExperimentRate.\n                    let id = PTpair.tagName + \"_\" + ExperimentRate.tagName;\n                    let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level0, (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            setNumberNode(experimentRate, event.target);\n                        }\n                    }, experimentRate.value.toString(), ExperimentRate.tagName);\n                    pTPairDiv.appendChild(inputDiv);\n                }\n                addP(pTPairDiv, pTPair);\n                addT(pTPairDiv, pTPair);\n                addAnyUnits(undefined, getAttributes(xml_PTPairs[i]), pTPairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n                addExcessReactantConc(pTPairDiv, pTPair);\n                addPercentExcessReactantConc(pTPairDiv, pTPair);\n                addPrecision(pTPairDiv, pTPair);\n                addBathGas(pTPairDiv, pTPair);\n\n                pTs.addPTpair(pTPair);\n                // Add the pTPairDiv to the pTsDiv.\n                pTsDiv.appendChild(pTPairDiv);\n            }\n            conditions.setPTs(pTs);\n        }\n    }\n    return conditionsDiv;\n}\n\n/**\n * @param containerDiv The container div.\n * @param pTPair The PTpair.\n */\nfunction addP(containerDiv: HTMLDivElement, pTPair: PTpair): void {\n    let pInputDiv: HTMLDivElement = createLabelWithInput(\"number\", PTpair.tagName + \"_\" + \"P\", boundary1, level0, (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (isNumeric(event.target.value)) {\n                pTPair.setP(parseFloat(event.target.value));\n                console.log(\"Set P to \" + event.target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                event.target.value = pTPair.getP().toString();\n            }\n            resizeInputElement(event.target);\n        }\n    }, pTPair.getP().toString(), \"P\");\n    let pInputElement: HTMLInputElement = pInputDiv.querySelector('input') as HTMLInputElement;\n    pInputElement.value = pTPair.getP().toString();\n    resizeInputElement(pInputElement);\n    containerDiv.appendChild(pInputDiv);\n}\n\n/**\n * @param containerDiv The container div.\n * @param pTPair The PTpair.\n */\nfunction addT(containerDiv: HTMLDivElement, pTPair: PTpair): void {\n    let tInputDiv: HTMLDivElement = createLabelWithInput(\"number\", PTpair.tagName + \"_\" + \"T\", boundary1, level0, (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (isNumeric(event.target.value)) {\n                pTPair.setT(parseFloat(event.target.value));\n                console.log(\"Set T to \" + event.target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                event.target.value = pTPair.getT().toString();\n            }\n            resizeInputElement(event.target);\n        }\n    }, pTPair.getT().toString(), \"T\");\n    let tInputElement: HTMLInputElement = tInputDiv.querySelector('input') as HTMLInputElement;\n    tInputElement.value = pTPair.getT().toString();\n    resizeInputElement(tInputElement);\n    containerDiv.appendChild(tInputDiv);\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addExcessReactantConc(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + ExcessReactantConc.tagName, boundary1);\n    pTPairDiv.append(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let excessReactantConcLabel: HTMLLabelElement = document.createElement('label');\n        excessReactantConcLabel.textContent = \"excessReactantConc: \";\n        pTPairDiv.appendChild(excessReactantConcLabel);\n        let excessReactantConcInput: HTMLInputElement = createInput(\"number\", PTpair.tagName + \"_\" + ExcessReactantConc.tagName, boundary1) as HTMLInputElement;\n        excessReactantConcInput.value = NaN.toString();\n        excessReactantConcInput.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setExcessReactantConc(event.target.value);\n                console.log(\"Set excessReactantConc to \" + event.target.value);\n                resizeInputElement(event.target);\n            }\n        });\n        resizeInputElement(excessReactantConcInput);\n        pTPairDiv.appendChild(excessReactantConcInput);\n        // Add a remove button.\n        let removeButton: HTMLButtonElement = createButton(removeSymbol, boundary1);\n        removeButton.addEventListener('click', () => {\n            pTPairDiv.removeChild(excessReactantConcLabel);\n            pTPairDiv.removeChild(excessReactantConcInput);\n            pTPairDiv.removeChild(removeButton);\n            addExcessReactantConc(pTPairDiv, pTPair)\n        });\n        pTPairDiv.appendChild(removeButton);\n        // Remove the add button.\n        pTPairDiv.removeChild(button);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addPercentExcessReactantConc(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" percentExcessReactantConc\", boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let percentExcessReactantConcLabel: HTMLLabelElement = document.createElement('label');\n        percentExcessReactantConcLabel.textContent = \"percentExcessReactantConc: \";\n        pTPairDiv.appendChild(percentExcessReactantConcLabel);\n        let percentExcessReactantConcInput: HTMLInputElement = createInput(\"number\", PTpair.tagName + \"_\" + \"percentExcessReactantConc\", boundary1) as HTMLInputElement;\n        percentExcessReactantConcInput.value = NaN.toString();\n        percentExcessReactantConcInput.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setPercentExcessReactantConc(event.target.value);\n                console.log(\"Set percentExcessReactantConc to \" + event.target.value);\n                resizeInputElement(event.target);\n            }\n        });\n        resizeInputElement(percentExcessReactantConcInput);\n        pTPairDiv.appendChild(percentExcessReactantConcInput);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addPrecision(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + \"precision\", boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let precisionLabel: HTMLLabelElement = document.createElement('label');\n        precisionLabel.textContent = \"Precision: \";\n        pTPairDiv.appendChild(precisionLabel);\n        let precisionInput: HTMLInputElement = createInput(\"number\", PTpair.tagName + \"_\" + \"precision\", boundary1) as HTMLInputElement;\n        precisionInput.value = NaN.toString();\n        precisionInput.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setPrecision(event.target.value);\n                console.log(\"Set Precision to \" + event.target.value);\n                resizeInputElement(event.target);\n            }\n        });\n        resizeInputElement(precisionInput);\n        pTPairDiv.appendChild(precisionInput);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addBathGas(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + BathGas.tagName, boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let bathGasDiv: HTMLDivElement = document.createElement(\"div\");\n        let bathGas: BathGas = new BathGas(new Map(), \"\");\n        pTPair.setBathGas(bathGas);\n        let bathGasLabel: HTMLLabelElement = document.createElement('label');\n        bathGasLabel.textContent = BathGas.tagName + \": \";\n        bathGasDiv.appendChild(bathGasLabel);\n        pTPairDiv.insertBefore(bathGasDiv, button);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs: Set<string> = new Set(molecules.keys());\n        let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName,\n            PTs.tagName + \"_\" + BathGas.tagName, boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Added \" + event.target.value + \" as a \" + BathGas.tagName);\n                resizeSelectElement(event.target);\n            }\n        });\n        resizeSelectElement(selectElement);\n        bathGasDiv.appendChild(selectElement);\n        pTPairDiv.insertBefore(bathGasDiv, button);\n        pTPairDiv.removeChild(button);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addExperimentRateButton(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + ExperimentRate.tagName, boundary1);\n    //let addExperimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n    //addExperimentRateDiv.appendChild(addExperimentRateButton);\n    // Add event listener to the addExperimentRateButton.\n    button.addEventListener('click', () => {\n        let experimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n        experimentRateDiv.style.marginLeft = margin5;\n        let experimentRate: ExperimentRate = new ExperimentRate(new Map(), NaN);\n        pTPair.setExperimentRate(experimentRate);\n        // Create a new div element for the input.\n        let id = PTpair.tagName + \"_\" + ExperimentRate.tagName;\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level3, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(experimentRate, event.target);\n            }\n        }, \"\", ExperimentRate.tagName);\n        pTPairDiv.insertBefore(experimentRateDiv, button);\n        pTPairDiv.removeChild(button);\n    });\n    /*\n    pTsDiv.appendChild(button);\n    pTPairDiv.appendChild(button);\n    // Add the pTPairDiv to the pTsDiv.\n    pTsDiv.insertBefore(pTPairDiv, addButton);\n    */\n}\n\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */\nfunction processModelParameters(xml: XMLDocument): HTMLDivElement {\n    console.log(ModelParameters.tagName);\n    let modelParametersDiv: HTMLDivElement = document.createElement(\"div\");\n    let xml_modelParameters: Element = getSingularElement(xml, ModelParameters.tagName);\n    let modelParameters: ModelParameters = new ModelParameters(getAttributes(xml_modelParameters));\n    mesmer.setModelParameters(modelParameters);\n    // Process any \"me:grainSize\" element.\n    let xml_grainSizes: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(GrainSize.tagName);\n    if (xml_grainSizes.length > 0) {\n        if (xml_grainSizes.length > 1) {\n            throw new Error(\"Expecting 1 \" + GrainSize.tagName + \" but finding \" + xml_grainSizes.length + \"!\");\n        }\n        let grainSizeAttributes: Map<string, string> = getAttributes(xml_grainSizes[0]);\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSizes[0])));\n        let grainSize: GrainSize = new GrainSize(grainSizeAttributes, value);\n        modelParameters.setGrainSize(grainSize);\n        let grainSizeDiv: HTMLDivElement = createFlexDiv(level1);\n        // Create a new div for the grainSize.\n        let grainSizeId = ModelParameters.tagName + \"_\" + GrainSize.tagName;\n        let grainSizeInputDiv: HTMLDivElement = createLabelWithInput(\"number\", grainSizeId, boundary1, level1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(grainSize, event.target);\n                resizeInputElement(event.target);\n            }\n        }, value.toString(), GrainSize.tagName);\n        resizeInputElement(grainSizeInputDiv.querySelector('input') as HTMLInputElement);\n        grainSizeDiv.appendChild(grainSizeInputDiv);\n        // Add any units\n        addAnyUnits(undefined, grainSizeAttributes, grainSizeDiv, ModelParameters.tagName + \"_\" + GrainSize.tagName, GrainSize.tagName, boundary1);\n        modelParametersDiv.appendChild(grainSizeDiv);\n    }\n    // Process any \"me:automaticallySetMaxEne\" element.\n    let xml_automaticallySetMaxEnes: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(AutomaticallySetMaxEne.tagName);\n    if (xml_automaticallySetMaxEnes.length > 0) {\n        if (xml_automaticallySetMaxEnes.length > 1) {\n            throw new Error(\"Expecting 1 \" + AutomaticallySetMaxEne.tagName + \" but finding \" + xml_automaticallySetMaxEnes.length + \"!\");\n        }\n        let automaticallySetMaxEneAttributes: Map<string, string> = getAttributes(xml_automaticallySetMaxEnes[0]);\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_automaticallySetMaxEnes[0])));\n        let automaticallySetMaxEne: AutomaticallySetMaxEne = new AutomaticallySetMaxEne(automaticallySetMaxEneAttributes, value);\n        modelParameters.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n        // Create a new div for the automaticallySetMaxEne.\n        let automaticallySetMaxEneId = ModelParameters.tagName + \"_\" + AutomaticallySetMaxEne.tagName;\n        let automaticallySetMaxEneInputDiv: HTMLDivElement = createLabelWithInput(\"number\", automaticallySetMaxEneId, boundary1, level0, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(automaticallySetMaxEne, event.target);\n                resizeInputElement(event.target);\n            }\n        }, value.toString(), AutomaticallySetMaxEne.tagName);\n        resizeInputElement(automaticallySetMaxEneInputDiv.querySelector('input') as HTMLInputElement);\n        Object.assign(automaticallySetMaxEneInputDiv.style, level1);\n        modelParametersDiv.appendChild(automaticallySetMaxEneInputDiv);\n        // Add any units\n        addAnyUnits(undefined, automaticallySetMaxEneAttributes, modelParametersDiv, ModelParameters.tagName + \"_\" + AutomaticallySetMaxEne.tagName, AutomaticallySetMaxEne.tagName, boundary1);\n    }\n\n    // Process any \"me:energyAboveTheTopHill\" element.\n    let xml_energyAboveTheTopHills: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(EnergyAboveTheTopHill.tagName);\n    if (xml_energyAboveTheTopHills.length > 0) {\n        if (xml_energyAboveTheTopHills.length > 1) {\n            throw new Error(\"Expecting 1 \" + EnergyAboveTheTopHill.tagName + \" but finding \" + xml_energyAboveTheTopHills.length + \"!\");\n        }\n        let energyAboveTheTopHillAttributes: Map<string, string> = getAttributes(xml_energyAboveTheTopHills[0]);\n        let energyAboveTheTopHillValue: number = parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHills[0])));\n        let energyAboveTheTopHill: EnergyAboveTheTopHill = new EnergyAboveTheTopHill(energyAboveTheTopHillAttributes,\n            energyAboveTheTopHillValue);\n        modelParameters.setEnergyAboveTheTopHill(energyAboveTheTopHill);\n        // Create a new div for the energyAboveTheTopHill.\n        let energyAboveTheTopHillId = ModelParameters.tagName + \"_\" + EnergyAboveTheTopHill.tagName;\n        let energyAboveTheTopHillInputDiv: HTMLDivElement = createLabelWithInput(\"number\", energyAboveTheTopHillId, boundary1, level2, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(energyAboveTheTopHill, event.target);\n                resizeInputElement(event.target);\n            }\n        }, energyAboveTheTopHill.value.toString(), EnergyAboveTheTopHill.tagName);\n        resizeInputElement(energyAboveTheTopHillInputDiv.querySelector('input') as HTMLInputElement);\n        modelParametersDiv.appendChild(energyAboveTheTopHillInputDiv);\n        // Add any units\n        addAnyUnits(undefined, energyAboveTheTopHillAttributes, modelParametersDiv, ModelParameters.tagName + \"_\" + EnergyAboveTheTopHill.tagName, EnergyAboveTheTopHill.tagName, boundary1);\n    }\n\n    // Process any \"me:maxTemperature\" element.\n    let xml_maxTemperatures: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(MaxTemperature.tagName);\n    if (xml_maxTemperatures.length > 0) {\n        if (xml_maxTemperatures.length > 1) {\n            throw new Error(\"Expecting 1 \" + MaxTemperature.tagName + \" but finding \" + xml_maxTemperatures.length + \"!\");\n        }\n        let maxTemperatureAttributes: Map<string, string> = getAttributes(xml_maxTemperatures[0]);\n        let maxTemperatureValue: number = parseFloat(getNodeValue(getFirstChildNode(xml_maxTemperatures[0])));\n        let maxTemperature: MaxTemperature = new MaxTemperature(maxTemperatureAttributes, maxTemperatureValue);\n        modelParameters.setMaxTemperature(maxTemperature);\n        // Create a new div for the maxTemperature.\n        let maxTemperatureId = ModelParameters.tagName + \"_\" + MaxTemperature.tagName;\n        let maxTemperatureInputDiv: HTMLDivElement = createLabelWithInput(\"number\", maxTemperatureId, boundary1, level1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(maxTemperature, event.target);\n                resizeInputElement(event.target);\n            }\n        }, maxTemperature.value.toString(), MaxTemperature.tagName);\n        resizeInputElement(maxTemperatureInputDiv.querySelector('input') as HTMLInputElement);\n        modelParametersDiv.appendChild(maxTemperatureInputDiv);\n        // Add any units\n        addAnyUnits(undefined, maxTemperatureAttributes, modelParametersDiv, ModelParameters.tagName + \"_\" + MaxTemperature.tagName, MaxTemperature.tagName, boundary1);\n    }\n\n    return modelParametersDiv;\n}\n\n/**\n * Parses xml to initialise controls.\n * @param xml The XML document.\n * @returns The controls div.\n * \n * Tag control options:\n * me:calculateRateCoefficientsOnly\n * me:printCellDOS\n * me:printCellTransitionStateFlux\n * me:printReactionOperatorColumnSums\n * me:printGrainBoltzmann\n * me:printGrainDOS\n * me:printGrainkbE\n * me:printGrainkfE\n * me:printTSsos\n * me:printGrainedSpeciesProfile\n * me:printGrainTransitionStateFlux\n * me:printReactionOperatorSize\n * me:printSpeciesProfile\n * me:printPhenomenologicalEvolution\n * me:printTunnelingCoefficients\n * me:printCrossingCoefficients\n * me:testDOS\n * me:testRateConstants\n * me:useTheSameCellNumberForAllConditions\n * me:hideInactive\n * me:ForceMacroDetailedBalance\n * \n * TagWithAttribute control options:\n * me:testMicroRates\n * \n * StringNode control options:\n * me:calcMethod \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\"\n * \n * NumberNode control options:\n * me:eigenvalues\n * me:shortestTimeOfInterest\n * me:MaximumEvolutionTime\n * me:automaticallySetMaxEne\n * me:diagramEnergyOffset\n */\nfunction processControl(xml: XMLDocument): HTMLDivElement {\n    console.log(Control.tagName);\n    // Create div to contain the controls.\n    let controlsDiv: HTMLDivElement = document.createElement(\"div\");\n    // Get the XML \"me:control\" element.\n    let xml_control: Element = getSingularElement(xml, Control.tagName);\n    let control: Control = new Control(getAttributes(xml_control));\n    mesmer.setControl(control);\n\n    // me:calculateRateCoefficientsOnly\n    let calculateRateCoefficientsOnlyDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(calculateRateCoefficientsOnlyDiv);\n    let xml_calculateRateCoefficientsOnly: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(CalculateRateCoefficientsOnly.tagName);\n    // Create a input checkbox for the CalculateRateCoefficientsOnly.\n    let calculateRateCoefficientsOnlyLabel: HTMLLabelElement = document.createElement(\"label\");\n    calculateRateCoefficientsOnlyDiv.appendChild(calculateRateCoefficientsOnlyLabel);\n    calculateRateCoefficientsOnlyLabel.textContent = CalculateRateCoefficientsOnly.tagName;\n    let calculateRateCoefficientsOnlyInput: HTMLInputElement = document.createElement(\"input\");\n    calculateRateCoefficientsOnlyDiv.appendChild(calculateRateCoefficientsOnlyInput);\n    calculateRateCoefficientsOnlyInput.type = \"checkbox\";\n    calculateRateCoefficientsOnlyInput.id = CalculateRateCoefficientsOnly.tagName;\n    if (xml_calculateRateCoefficientsOnly.length == 1) {\n        calculateRateCoefficientsOnlyInput.checked = true;\n        control.setCalculateRateCoefficientsOnly(new CalculateRateCoefficientsOnly());\n    } else {\n        if (xml_calculateRateCoefficientsOnly.length > 1) {\n            console.warn(\"xml_calculateRateCoefficientsOnly.length=\" + xml_calculateRateCoefficientsOnly.length);\n        }\n    }\n    calculateRateCoefficientsOnlyInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setCalculateRateCoefficientsOnly(new CalculateRateCoefficientsOnly());\n            } else {\n                control.removeCalculateRateCoefficientsOnly();\n            }\n        }\n    });\n\n    // me:printCellDOS\n    let printCellDOSDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printCellDOSDiv);\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellDOS.tagName);\n    // Create a input checkbox for the PrintCellDOS.\n    let printCellDOSLabel: HTMLLabelElement = document.createElement(\"label\");\n    printCellDOSDiv.appendChild(printCellDOSLabel);\n    printCellDOSLabel.textContent = PrintCellDOS.tagName;\n    let printCellDOSInput: HTMLInputElement = document.createElement(\"input\");\n    printCellDOSDiv.appendChild(printCellDOSInput);\n    printCellDOSInput.type = \"checkbox\";\n    printCellDOSInput.id = PrintCellDOS.tagName;\n    if (xml_printCellDOS.length == 1) {\n        printCellDOSInput.checked = true;\n        control.setPrintCellDOS(new PrintCellDOS());\n    } else {\n        if (xml_printCellDOS.length > 1) {\n            console.warn(\"xml_printCellDOS.length=\" + xml_printCellDOS.length);\n        }\n    }\n    printCellDOSInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintCellDOS(new PrintCellDOS());\n            } else {\n                control.removePrintCellDOS();\n            }\n        }\n    });\n\n    // me:printCellTransitionStateFlux\n    let printCellTransitionStateFluxDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printCellTransitionStateFluxDiv);\n    let xml_printCellTransitionStateFlux: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellTransitionStateFlux.tagName);\n    // Create a input checkbox for the PrintCellTransitionStateFlux.\n    let printCellTransitionStateFluxLabel: HTMLLabelElement = document.createElement(\"label\");\n    printCellTransitionStateFluxDiv.appendChild(printCellTransitionStateFluxLabel);\n    printCellTransitionStateFluxLabel.textContent = PrintCellTransitionStateFlux.tagName;\n    let printCellTransitionStateFluxInput: HTMLInputElement = document.createElement(\"input\");\n    printCellTransitionStateFluxDiv.appendChild(printCellTransitionStateFluxInput);\n    printCellTransitionStateFluxInput.type = \"checkbox\";\n    printCellTransitionStateFluxInput.id = PrintCellTransitionStateFlux.tagName;\n    if (xml_printCellTransitionStateFlux.length == 1) {\n        printCellTransitionStateFluxInput.checked = true;\n        control.setPrintCellTransitionStateFlux(new PrintCellTransitionStateFlux());\n    } else {\n        if (xml_printCellTransitionStateFlux.length > 1) {\n            console.warn(\"xml_printCellTransitionStateFlux.length=\" + xml_printCellTransitionStateFlux.length);\n        }\n    }\n    printCellTransitionStateFluxInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintCellTransitionStateFlux(new PrintCellTransitionStateFlux());\n            } else {\n                control.removePrintCellTransitionStateFlux();\n            }\n        }\n    });\n\n    // me:printReactionOperatorColumnSums\n    let printReactionOperatorColumnSumsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printReactionOperatorColumnSumsDiv);\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorColumnSums.tagName);\n    // Create a input checkbox for the PrintReactionOperatorColumnSums.\n    let printReactionOperatorColumnSumsLabel: HTMLLabelElement = document.createElement(\"label\");\n    printReactionOperatorColumnSumsDiv.appendChild(printReactionOperatorColumnSumsLabel);\n    printReactionOperatorColumnSumsLabel.textContent = PrintReactionOperatorColumnSums.tagName;\n    let printReactionOperatorColumnSumsInput: HTMLInputElement = document.createElement(\"input\");\n    printReactionOperatorColumnSumsDiv.appendChild(printReactionOperatorColumnSumsInput);\n    printReactionOperatorColumnSumsInput.type = \"checkbox\";\n    printReactionOperatorColumnSumsInput.id = PrintReactionOperatorColumnSums.tagName;\n    if (xml_printReactionOperatorColumnSums.length == 1) {\n        printReactionOperatorColumnSumsInput.checked = true;\n        control.setPrintReactionOperatorColumnSums(new PrintReactionOperatorColumnSums());\n    } else {\n        if (xml_printReactionOperatorColumnSums.length > 1) {\n            console.warn(\"xml_printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n        }\n    }\n    printReactionOperatorColumnSumsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintReactionOperatorColumnSums(new PrintReactionOperatorColumnSums());\n            } else {\n                control.removePrintReactionOperatorColumnSums();\n            }\n        }\n    });\n\n    // me:printGrainBoltzmann\n    let printGrainBoltzmannDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainBoltzmannDiv);\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainBoltzmann.tagName);\n    // Create a input checkbox for the PrintGrainBoltzmann.\n    let printGrainBoltzmannLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainBoltzmannDiv.appendChild(printGrainBoltzmannLabel);\n    printGrainBoltzmannLabel.textContent = PrintGrainBoltzmann.tagName;\n    let printGrainBoltzmannInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainBoltzmannDiv.appendChild(printGrainBoltzmannInput);\n    printGrainBoltzmannInput.type = \"checkbox\";\n    printGrainBoltzmannInput.id = PrintGrainBoltzmann.tagName;\n    if (xml_printGrainBoltzmann.length == 1) {\n        printGrainBoltzmannInput.checked = true;\n        control.setPrintGrainBoltzmann(new PrintGrainBoltzmann());\n    } else {\n        if (xml_printGrainBoltzmann.length > 1) {\n            console.warn(\"xml_printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n        }\n    }\n    printGrainBoltzmannInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainBoltzmann(new PrintGrainBoltzmann());\n            } else {\n                control.removePrintGrainBoltzmann();\n            }\n        }\n    });\n\n    // me:printGrainDOS\n    let printGrainDOSDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainDOSDiv);\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainDOS.tagName);\n    // Create a input checkbox for the PrintGrainDOS.\n    let printGrainDOSLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainDOSDiv.appendChild(printGrainDOSLabel);\n    printGrainDOSLabel.textContent = PrintGrainDOS.tagName;\n    let printGrainDOSInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainDOSDiv.appendChild(printGrainDOSInput);\n    printGrainDOSInput.type = \"checkbox\";\n    printGrainDOSInput.id = PrintGrainDOS.tagName;\n    if (xml_printGrainDOS.length == 1) {\n        printGrainDOSInput.checked = true;\n        control.setPrintGrainDOS(new PrintGrainDOS());\n    } else {\n        if (xml_printGrainDOS.length > 1) {\n            console.warn(\"xml_printGrainDOS.length=\" + xml_printGrainDOS.length);\n        }\n    }\n    printGrainDOSInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainDOS(new PrintGrainDOS());\n            } else {\n                control.removePrintGrainDOS();\n            }\n        }\n    });\n\n    // me:printGrainkbE\n    let printGrainkbEDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainkbEDiv);\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkbE.tagName);\n    // Create a input checkbox for the PrintGrainkbE.\n    let printGrainkbELabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainkbEDiv.appendChild(printGrainkbELabel);\n    printGrainkbELabel.textContent = PrintGrainkbE.tagName;\n    let printGrainkbEInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainkbEDiv.appendChild(printGrainkbEInput);\n    printGrainkbEInput.type = \"checkbox\";\n    printGrainkbEInput.id = PrintGrainkbE.tagName;\n    if (xml_printGrainkbE.length == 1) {\n        printGrainkbEInput.checked = true;\n        control.setPrintGrainkbE(new PrintGrainkbE());\n    } else {\n        if (xml_printGrainkbE.length > 1) {\n            console.warn(\"xml_printGrainkbE.length=\" + xml_printGrainkbE.length);\n        }\n    }\n    printGrainkbEInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainkbE(new PrintGrainkbE());\n            } else {\n                control.removePrintGrainkbE();\n            }\n        }\n    });\n\n    // me:printGrainkfE\n    let printGrainkfEDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainkfEDiv);\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkfE.tagName);\n    // Create a input checkbox for the PrintGrainkfE.\n    let printGrainkfELabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainkfEDiv.appendChild(printGrainkfELabel);\n    printGrainkfELabel.textContent = PrintGrainkfE.tagName;\n    let printGrainkfEInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainkfEDiv.appendChild(printGrainkfEInput);\n    printGrainkfEInput.type = \"checkbox\";\n    printGrainkfEInput.id = PrintGrainkfE.tagName;\n    if (xml_printGrainkfE.length == 1) {\n        printGrainkfEInput.checked = true;\n        control.setPrintGrainkfE(new PrintGrainkfE());\n    } else {\n        if (xml_printGrainkfE.length > 1) {\n            console.warn(\"xml_printGrainkfE.length=\" + xml_printGrainkfE.length);\n        }\n    }\n    printGrainkfEInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainkfE(new PrintGrainkfE());\n            } else {\n                control.removePrintGrainkfE();\n            }\n        }\n    });\n\n    // me:printTSsos\n    let printTSsosDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printTSsosDiv);\n    let xml_printTSsos: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTSsos.tagName);\n    // Create a input checkbox for the PrintTSsos.\n    let printTSsosLabel: HTMLLabelElement = document.createElement(\"label\");\n    printTSsosDiv.appendChild(printTSsosLabel);\n    printTSsosLabel.textContent = PrintTSsos.tagName;\n    let printTSsosInput: HTMLInputElement = document.createElement(\"input\");\n    printTSsosDiv.appendChild(printTSsosInput);\n    printTSsosInput.type = \"checkbox\";\n    printTSsosInput.id = PrintTSsos.tagName;\n    if (xml_printTSsos.length == 1) {\n        printTSsosInput.checked = true;\n        control.setPrintTSsos(new PrintTSsos());\n    } else {\n        if (xml_printTSsos.length > 1) {\n            console.warn(\"xml_printTSsos.length=\" + xml_printTSsos.length);\n        }\n    }\n    printTSsosInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintTSsos(new PrintTSsos());\n            } else {\n                control.removePrintTSsos();\n            }\n        }\n    });\n\n    // me:printGrainedSpeciesProfile\n    let printGrainedSpeciesProfileDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainedSpeciesProfileDiv);\n    let xml_printGrainedSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainedSpeciesProfile.tagName);\n    // Create a input checkbox for the PrintGrainedSpeciesProfile.\n    let printGrainedSpeciesProfileLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainedSpeciesProfileDiv.appendChild(printGrainedSpeciesProfileLabel);\n    printGrainedSpeciesProfileLabel.textContent = PrintGrainedSpeciesProfile.tagName;\n    let printGrainedSpeciesProfileInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainedSpeciesProfileDiv.appendChild(printGrainedSpeciesProfileInput);\n    printGrainedSpeciesProfileInput.type = \"checkbox\";\n    printGrainedSpeciesProfileInput.id = PrintGrainedSpeciesProfile.tagName;\n    if (xml_printGrainedSpeciesProfile.length == 1) {\n        printGrainedSpeciesProfileInput.checked = true;\n        control.setPrintGrainedSpeciesProfile(new PrintGrainedSpeciesProfile());\n    } else {\n        if (xml_printGrainedSpeciesProfile.length > 1) {\n            console.warn(\"xml_printGrainedSpeciesProfile.length=\" + xml_printGrainedSpeciesProfile.length);\n        }\n    }\n    printGrainedSpeciesProfileInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainedSpeciesProfile(new PrintGrainedSpeciesProfile());\n            } else {\n                control.removePrintGrainedSpeciesProfile();\n            }\n        }\n    });\n\n    // me:printGrainTransitionStateFlux\n    let printGrainTransitionStateFluxDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainTransitionStateFluxDiv);\n    let xml_printGrainTransitionStateFlux: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainTransitionStateFlux.tagName);\n    // Create a input checkbox for the PrintGrainTransitionStateFlux.\n    let printGrainTransitionStateFluxLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainTransitionStateFluxDiv.appendChild(printGrainTransitionStateFluxLabel);\n    printGrainTransitionStateFluxLabel.textContent = PrintGrainTransitionStateFlux.tagName;\n    let printGrainTransitionStateFluxInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainTransitionStateFluxDiv.appendChild(printGrainTransitionStateFluxInput);\n    printGrainTransitionStateFluxInput.type = \"checkbox\";\n    printGrainTransitionStateFluxInput.id = PrintGrainTransitionStateFlux.tagName;\n    if (xml_printGrainTransitionStateFlux.length == 1) {\n        printGrainTransitionStateFluxInput.checked = true;\n        control.setPrintGrainTransitionStateFlux(new PrintGrainTransitionStateFlux());\n    } else {\n        if (xml_printGrainTransitionStateFlux.length > 1) {\n            console.warn(\"xml_printGrainTransitionStateFlux.length=\" + xml_printGrainTransitionStateFlux.length);\n        }\n    }\n    printGrainTransitionStateFluxInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainTransitionStateFlux(new PrintGrainTransitionStateFlux());\n            } else {\n                control.removePrintGrainTransitionStateFlux();\n            }\n        }\n    });\n\n    // me:printReactionOperatorSize\n    let printReactionOperatorSizeDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printReactionOperatorSizeDiv);\n    let xml_printReactionOperatorSize: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorSize.tagName);\n    // Create a input checkbox for the PrintReactionOperatorSize.\n    let printReactionOperatorSizeLabel: HTMLLabelElement = document.createElement(\"label\");\n    printReactionOperatorSizeDiv.appendChild(printReactionOperatorSizeLabel);\n    printReactionOperatorSizeLabel.textContent = PrintReactionOperatorSize.tagName;\n    let printReactionOperatorSizeInput: HTMLInputElement = document.createElement(\"input\");\n    printReactionOperatorSizeDiv.appendChild(printReactionOperatorSizeInput);\n    printReactionOperatorSizeInput.type = \"checkbox\";\n    printReactionOperatorSizeInput.id = PrintReactionOperatorSize.tagName;\n    if (xml_printReactionOperatorSize.length == 1) {\n        printReactionOperatorSizeInput.checked = true;\n        control.setPrintReactionOperatorSize(new PrintReactionOperatorSize());\n    } else {\n        if (xml_printReactionOperatorSize.length > 1) {\n            console.warn(\"xml_printReactionOperatorSize.length=\" + xml_printReactionOperatorSize.length);\n        }\n    }\n    printReactionOperatorSizeInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintReactionOperatorSize(new PrintReactionOperatorSize());\n            } else {\n                control.removePrintReactionOperatorSize();\n            }\n        }\n    });\n\n    // me:printSpeciesProfile\n    let printSpeciesProfileDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printSpeciesProfileDiv);\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintSpeciesProfile.tagName);\n    // Create a input checkbox for the PrintSpeciesProfile.\n    let printSpeciesProfileLabel: HTMLLabelElement = document.createElement(\"label\");\n    printSpeciesProfileDiv.appendChild(printSpeciesProfileLabel);\n    printSpeciesProfileLabel.textContent = PrintSpeciesProfile.tagName;\n    let printSpeciesProfileInput: HTMLInputElement = document.createElement(\"input\");\n    printSpeciesProfileDiv.appendChild(printSpeciesProfileInput);\n    printSpeciesProfileInput.type = \"checkbox\";\n    printSpeciesProfileInput.id = PrintSpeciesProfile.tagName;\n    if (xml_printSpeciesProfile.length == 1) {\n        printSpeciesProfileInput.checked = true;\n        control.setPrintSpeciesProfile(new PrintSpeciesProfile());\n    } else {\n        if (xml_printSpeciesProfile.length > 1) {\n            console.warn(\"xml_printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n        }\n    }\n    printSpeciesProfileInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintSpeciesProfile(new PrintSpeciesProfile());\n            } else {\n                control.removePrintSpeciesProfile();\n            }\n        }\n    });\n\n    // me:printPhenomenologicalEvolution\n    let printPhenomenologicalEvolutionDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printPhenomenologicalEvolutionDiv);\n    let xml_printPhenomenologicalEvolution: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintPhenomenologicalEvolution.tagName);\n    // Create a input checkbox for the PrintPhenomenologicalEvolution.\n    let printPhenomenologicalEvolutionLabel: HTMLLabelElement = document.createElement(\"label\");\n    printPhenomenologicalEvolutionDiv.appendChild(printPhenomenologicalEvolutionLabel);\n    printPhenomenologicalEvolutionLabel.textContent = PrintPhenomenologicalEvolution.tagName;\n    let printPhenomenologicalEvolutionInput: HTMLInputElement = document.createElement(\"input\");\n    printPhenomenologicalEvolutionDiv.appendChild(printPhenomenologicalEvolutionInput);\n    printPhenomenologicalEvolutionInput.type = \"checkbox\";\n    printPhenomenologicalEvolutionInput.id = PrintPhenomenologicalEvolution.tagName;\n    if (xml_printPhenomenologicalEvolution.length == 1) {\n        printPhenomenologicalEvolutionInput.checked = true;\n        control.setPrintPhenomenologicalEvolution(new PrintPhenomenologicalEvolution());\n    } else {\n        if (xml_printPhenomenologicalEvolution.length > 1) {\n            console.warn(\"xml_printPhenomenologicalEvolution.length=\" + xml_printPhenomenologicalEvolution.length);\n        }\n    }\n    printPhenomenologicalEvolutionInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintPhenomenologicalEvolution(new PrintPhenomenologicalEvolution());\n            } else {\n                control.removePrintPhenomenologicalEvolution();\n            }\n        }\n    });\n\n    // me:printTunnelingCoefficients\n    let printTunnelingCoefficientsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printTunnelingCoefficientsDiv);\n    let xml_printTunnelingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTunnelingCoefficients.tagName);\n    // Create a input checkbox for the PrintTunnelingCoefficients.\n    let printTunnelingCoefficientsLabel: HTMLLabelElement = document.createElement(\"label\");\n    printTunnelingCoefficientsDiv.appendChild(printTunnelingCoefficientsLabel);\n    printTunnelingCoefficientsLabel.textContent = PrintTunnelingCoefficients.tagName;\n    let printTunnelingCoefficientsInput: HTMLInputElement = document.createElement(\"input\");\n    printTunnelingCoefficientsDiv.appendChild(printTunnelingCoefficientsInput);\n    printTunnelingCoefficientsInput.type = \"checkbox\";\n    printTunnelingCoefficientsInput.id = PrintTunnelingCoefficients.tagName;\n    if (xml_printTunnelingCoefficients.length == 1) {\n        printTunnelingCoefficientsInput.checked = true;\n        control.setPrintTunnelingCoefficients(new PrintTunnelingCoefficients());\n    } else {\n        if (xml_printTunnelingCoefficients.length > 1) {\n            console.warn(\"xml_printTunnelingCoefficients.length=\" + xml_printTunnelingCoefficients.length);\n        }\n    }\n    printTunnelingCoefficientsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintTunnelingCoefficients(new PrintTunnelingCoefficients());\n            } else {\n                control.removePrintTunnelingCoefficients();\n            }\n        }\n    });\n\n    // me:printCrossingCoefficients\n    let printCrossingCoefficientsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printCrossingCoefficientsDiv);\n    let xml_printCrossingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCrossingCoefficients.tagName);\n    // Create a input checkbox for the PrintCrossingCoefficients.\n    let printCrossingCoefficientsLabel: HTMLLabelElement = document.createElement(\"label\");\n    printCrossingCoefficientsDiv.appendChild(printCrossingCoefficientsLabel);\n    printCrossingCoefficientsLabel.textContent = PrintCrossingCoefficients.tagName;\n    let printCrossingCoefficientsInput: HTMLInputElement = document.createElement(\"input\");\n    printCrossingCoefficientsDiv.appendChild(printCrossingCoefficientsInput);\n    printCrossingCoefficientsInput.type = \"checkbox\";\n    printCrossingCoefficientsInput.id = PrintCrossingCoefficients.tagName;\n    if (xml_printCrossingCoefficients.length == 1) {\n        printCrossingCoefficientsInput.checked = true;\n        control.setPrintCrossingCoefficients(new PrintCrossingCoefficients());\n    } else {\n        if (xml_printCrossingCoefficients.length > 1) {\n            console.warn(\"xml_printCrossingCoefficients.length=\" + xml_printCrossingCoefficients.length);\n        }\n    }\n    printCrossingCoefficientsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintCrossingCoefficients(new PrintCrossingCoefficients());\n            } else {\n                control.removePrintCrossingCoefficients();\n            }\n        }\n    });\n\n    // me:testDOS\n    let testDOSDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(testDOSDiv);\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestDOS.tagName);\n    // Create a input checkbox for the TestDOS.\n    let testDOSLabel: HTMLLabelElement = document.createElement(\"label\");\n    testDOSDiv.appendChild(testDOSLabel);\n    testDOSLabel.textContent = TestDOS.tagName;\n    let testDOSInput: HTMLInputElement = document.createElement(\"input\");\n    testDOSDiv.appendChild(testDOSInput);\n    testDOSInput.type = \"checkbox\";\n    testDOSInput.id = TestDOS.tagName;\n    if (xml_testDOS.length == 1) {\n        testDOSInput.checked = true;\n        control.setTestDOS(new TestDOS());\n    } else {\n        if (xml_testDOS.length > 1) {\n            console.warn(\"xml_testDOS.length=\" + xml_testDOS.length);\n        }\n    }\n    testDOSInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestDOS(new TestDOS());\n            } else {\n                control.removeTestDOS();\n            }\n        }\n    });\n\n    // me:testRateConstants\n    let testRateConstantsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(testRateConstantsDiv);\n    let xml_testRateConstants: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestRateConstants.tagName);\n    // Create a input checkbox for the TestRateConstants.\n    let testRateConstantsLabel: HTMLLabelElement = document.createElement(\"label\");\n    testRateConstantsDiv.appendChild(testRateConstantsLabel);\n    testRateConstantsLabel.textContent = TestRateConstants.tagName;\n    let testRateConstantsInput: HTMLInputElement = document.createElement(\"input\");\n    testRateConstantsDiv.appendChild(testRateConstantsInput);\n    testRateConstantsInput.type = \"checkbox\";\n    testRateConstantsInput.id = TestRateConstants.tagName;\n    if (xml_testRateConstants.length == 1) {\n        testRateConstantsInput.checked = true;\n        control.setTestRateConstants(new TestRateConstants());\n    } else {\n        if (xml_testRateConstants.length > 1) {\n            console.warn(\"xml_testRateConstants.length=\" + xml_testRateConstants.length);\n        }\n    }\n    testRateConstantsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestRateConstants(new TestRateConstants());\n            } else {\n                control.removeTestRateConstants();\n            }\n        }\n    });\n\n    // me:useTheSameCellNumberForAllConditions\n    let useTheSameCellNumberForAllConditionsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(useTheSameCellNumberForAllConditionsDiv);\n    let xml_useTheSameCellNumberForAllConditions: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(UseTheSameCellNumberForAllConditions.tagName);\n    // Create a input checkbox for the UseTheSameCellNumberForAllConditions.\n    let useTheSameCellNumberForAllConditionsLabel: HTMLLabelElement = document.createElement(\"label\");\n    useTheSameCellNumberForAllConditionsDiv.appendChild(useTheSameCellNumberForAllConditionsLabel);\n    useTheSameCellNumberForAllConditionsLabel.textContent = UseTheSameCellNumberForAllConditions.tagName;\n    let useTheSameCellNumberForAllConditionsInput: HTMLInputElement = document.createElement(\"input\");\n    useTheSameCellNumberForAllConditionsDiv.appendChild(useTheSameCellNumberForAllConditionsInput);\n    useTheSameCellNumberForAllConditionsInput.type = \"checkbox\";\n    useTheSameCellNumberForAllConditionsInput.id = UseTheSameCellNumberForAllConditions.tagName;\n    if (xml_useTheSameCellNumberForAllConditions.length == 1) {\n        useTheSameCellNumberForAllConditionsInput.checked = true;\n        control.setUseTheSameCellNumberForAllConditions(new UseTheSameCellNumberForAllConditions());\n    } else {\n        if (xml_useTheSameCellNumberForAllConditions.length > 1) {\n            console.warn(\"xml_useTheSameCellNumberForAllConditions.length=\" + xml_useTheSameCellNumberForAllConditions.length);\n        }\n    }\n    useTheSameCellNumberForAllConditionsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setUseTheSameCellNumberForAllConditions(new UseTheSameCellNumberForAllConditions());\n            } else {\n                control.removeUseTheSameCellNumberForAllConditions();\n            }\n        }\n    });\n\n    // me:hideInactive\n    let hideInactiveDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(hideInactiveDiv);\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(HideInactive.tagName);\n    // Create a input checkbox for the HideInactive.\n    let hideInactiveLabel: HTMLLabelElement = document.createElement(\"label\");\n    hideInactiveDiv.appendChild(hideInactiveLabel);\n    hideInactiveLabel.textContent = HideInactive.tagName;\n    let hideInactiveInput: HTMLInputElement = document.createElement(\"input\");\n    hideInactiveDiv.appendChild(hideInactiveInput);\n    hideInactiveInput.type = \"checkbox\";\n    hideInactiveInput.id = HideInactive.tagName;\n    if (xml_hideInactive.length == 1) {\n        hideInactiveInput.checked = true;\n        control.setHideInactive(new HideInactive());\n    } else {\n        if (xml_hideInactive.length > 1) {\n            console.warn(\"xml_hideInactive.length=\" + xml_hideInactive.length);\n        }\n    }\n    hideInactiveInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setHideInactive(new HideInactive());\n            } else {\n                control.removeHideInactive();\n            }\n        }\n    });\n\n    // me:ForceMacroDetailedBalance\n    let forceMacroDetailedBalanceDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(forceMacroDetailedBalanceDiv);\n    let xml_forceMacroDetailedBalance: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(ForceMacroDetailedBalance.tagName);\n    // Create a input checkbox for the ForceMacroDetailedBalance.\n    let forceMacroDetailedBalanceLabel: HTMLLabelElement = document.createElement(\"label\");\n    forceMacroDetailedBalanceDiv.appendChild(forceMacroDetailedBalanceLabel);\n    forceMacroDetailedBalanceLabel.textContent = ForceMacroDetailedBalance.tagName;\n    let forceMacroDetailedBalanceInput: HTMLInputElement = document.createElement(\"input\");\n    forceMacroDetailedBalanceDiv.appendChild(forceMacroDetailedBalanceInput);\n    forceMacroDetailedBalanceInput.type = \"checkbox\";\n    forceMacroDetailedBalanceInput.id = ForceMacroDetailedBalance.tagName;\n    if (xml_forceMacroDetailedBalance.length == 1) {\n        forceMacroDetailedBalanceInput.checked = true;\n        control.setForceMacroDetailedBalance(new ForceMacroDetailedBalance());\n    } else {\n        if (xml_forceMacroDetailedBalance.length > 1) {\n            console.warn(\"xml_forceMacroDetailedBalance.length=\" + xml_forceMacroDetailedBalance.length);\n        }\n    }\n    forceMacroDetailedBalanceInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setForceMacroDetailedBalance(new ForceMacroDetailedBalance());\n            } else {\n                control.removeForceMacroDetailedBalance();\n            }\n        }\n    });\n\n    // me:testMicroRates\n    let testMicroRatesDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(testMicroRatesDiv);\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestMicroRates.tagName);\n    // Create a input checkbox for the TestMicroRates.\n    let testMicroRatesLabel: HTMLLabelElement = document.createElement(\"label\");\n    testMicroRatesDiv.appendChild(testMicroRatesLabel);\n    testMicroRatesLabel.textContent = TestMicroRates.tagName;\n    let testMicroRatesInput: HTMLInputElement = document.createElement(\"input\");\n    testMicroRatesDiv.appendChild(testMicroRatesInput);\n    testMicroRatesInput.type = \"checkbox\";\n    testMicroRatesInput.id = TestMicroRates.tagName;\n    let testMicroRatesAttributes: Map<string, string>;\n    let testMicroRates: TestMicroRates;\n    if (xml_testMicroRates.length == 1) {\n        testMicroRatesInput.checked = true;\n        testMicroRatesAttributes = getAttributes(xml_testMicroRates[0]);\n        testMicroRates = new TestMicroRates(testMicroRatesAttributes);\n        control.setTestMicroRates(testMicroRates);\n    } else {\n        testMicroRatesAttributes = new Map<string, string>();\n        testMicroRatesAttributes.set(\"Tmax\", \"\");\n        testMicroRatesAttributes.set(\"Tmin\", \"\");\n        testMicroRatesAttributes.set(\"Tstep\", \"\");\n        testMicroRates = new TestMicroRates(testMicroRatesAttributes);\n    }\n    testMicroRatesInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestMicroRates(testMicroRates);\n                // Tmax.\n                let idTmax = Control.tagName + \"_\" + TestMicroRates.tagName + \"_Tmax\";\n                // Remove any exising div for tMax.\n                let existingTmaxDiv: HTMLDivElement = document.getElementById(idTmax) as HTMLDivElement;\n                if (existingTmaxDiv != null) {\n                    existingTmaxDiv.remove();\n                }\n                // Create a new div for tMax.\n                let tMax: number = testMicroRates.getTmax();\n                let tMaxInputDiv: HTMLDivElement = createLabelWithInput(\"number\", idTmax + \"_input\", boundary1, level0, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if (isNumeric(event.target.value)) {\n                            testMicroRates.setTmax(parseFloat(event.target.value));\n                            console.log(\"Set Tmax to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        resizeInputElement(event.target);\n                    }\n                }, tMax.toString(), \"Tmax\");\n                tMaxInputDiv.id = idTmax;\n                resizeInputElement(tMaxInputDiv.querySelector('input') as HTMLInputElement);\n                testMicroRatesDiv.appendChild(tMaxInputDiv);\n                // Tmin.\n                let idTmin = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tMin\";\n                // Remove any exising div for tMin.\n                let existingTminDiv = document.getElementById(idTmin) as HTMLDivElement;\n                if (existingTminDiv != null) {\n                    existingTminDiv.remove();\n                }\n                // Create a new div for the tMin.\n                let tMin: number = testMicroRates.getTmin();\n                let tMinInputDiv: HTMLDivElement = createLabelWithInput(\"number\", idTmin + \"_input\", boundary1, level0, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if (isNumeric(event.target.value)) {\n                            testMicroRates.setTmin(parseFloat(event.target.value));\n                            console.log(\"Set Tmin to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        resizeInputElement(event.target);\n                    }\n                }, tMin.toString(), \"Tmin\");\n                tMinInputDiv.id = idTmin;\n                resizeInputElement(tMinInputDiv.querySelector('input') as HTMLInputElement);\n                testMicroRatesDiv.appendChild(tMinInputDiv);\n                // Tstep.\n                let idTstep = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tStep\";\n                // Remove any exising div for tStep.\n                let existingTstepDiv = document.getElementById(idTstep) as HTMLDivElement;\n                if (existingTstepDiv != null) {\n                    existingTstepDiv.remove();\n                }\n                // Create a new div for the tStep.\n                let tStep: number = testMicroRates.getTstep();\n                let tStepInputDiv: HTMLDivElement = createLabelWithInput(\"number\", idTstep + \"_input\", boundary1, level0, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if (isNumeric(event.target.value)) {\n                            testMicroRates.setTstep(parseFloat(event.target.value));\n                            console.log(\"Set Tstep to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        resizeInputElement(event.target);\n                    }\n                }, tStep.toString(), \"Tstep\");\n                tStepInputDiv.id = idTstep;\n                resizeInputElement(tStepInputDiv.querySelector('input') as HTMLInputElement);\n                testMicroRatesDiv.appendChild(tStepInputDiv);\n            } else {\n                control.removeTestMicroRates();\n                // Tmax.\n                let idTmax = Control.tagName + \"_\" + TestMicroRates.tagName + \"_Tmax\";\n                // Remove any exising div for tMax.\n                let existingTmaxDiv = document.getElementById(idTmax) as HTMLDivElement;\n                if (existingTmaxDiv != null) {\n                    existingTmaxDiv.remove();\n                }\n                // Tmin.\n                let idTmin = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tMin\";\n                // Remove any exising div for tMin.\n                let existingTminDiv = document.getElementById(idTmin) as HTMLDivElement;\n                if (existingTminDiv != null) {\n                    existingTminDiv.remove();\n                }\n                // Tstep.\n                let idTstep = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tStep\";\n                // Remove any exising div for tStep.\n                let existingTstepDiv = document.getElementById(idTstep) as HTMLDivElement;\n                if (existingTstepDiv != null) {\n                    existingTstepDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:calcMethod\n    let calcMethodDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(calcMethodDiv);\n    let xml_calcMethod: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(CalcMethod.tagName);\n    // Create a input checkbox for the CalcMethod.\n    let calcMethodLabel: HTMLLabelElement = document.createElement(\"label\");\n    calcMethodDiv.appendChild(calcMethodLabel);\n    calcMethodLabel.textContent = CalcMethod.tagName;\n    let calcMethodInput: HTMLInputElement = document.createElement(\"input\");\n    calcMethodDiv.appendChild(calcMethodInput);\n    calcMethodInput.type = \"checkbox\";\n    calcMethodInput.id = CalcMethod.tagName;\n    let calcMethodAttributes: Map<string, string>;\n    let calcMethod: CalcMethod;\n    if (xml_calcMethod.length == 1) {\n        calcMethodInput.checked = true;\n        calcMethodAttributes = getAttributes(xml_calcMethod[0]);\n        let value: string = getNodeValue(getFirstChildNode(xml_calcMethod[0]));\n        calcMethod = new CalcMethod(calcMethodAttributes, value);\n        control.setCalcMethod(calcMethod);\n    } else {\n        calcMethodInput.checked = false;\n        calcMethodAttributes = new Map<string, string>();\n        calcMethod = new CalcMethod(calcMethodAttributes, \"\");\n    }\n    calcMethodInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setCalcMethod(calcMethod);\n                let id = Control.tagName + \"_\" + CalcMethod.tagName + \"_select\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div.\n                let value: string = calcMethod.value;\n                let selectElement: HTMLSelectElement = createSelectElement(CalcMethod.options, value, id, boundary1);\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        calcMethod.value = event.target.value;\n                        resizeSelectElement(event.target);\n                    }\n                });\n                resizeSelectElement(selectElement);\n                calcMethodDiv.appendChild(selectElement);\n            } else {\n                control.removeCalcMethod();\n                let id = Control.tagName + \"_\" + CalcMethod.tagName + \"_select\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:eigenvalues\n    let eigenvaluesDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(eigenvaluesDiv);\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(Eigenvalues.tagName);\n    // Create a input checkbox for the Eigenvalues.\n    let eigenvaluesLabel: HTMLLabelElement = document.createElement(\"label\");\n    eigenvaluesDiv.appendChild(eigenvaluesLabel);\n    eigenvaluesLabel.textContent = Eigenvalues.tagName;\n    let eigenvaluesInput: HTMLInputElement = document.createElement(\"input\");\n    eigenvaluesDiv.appendChild(eigenvaluesInput);\n    eigenvaluesInput.type = \"checkbox\";\n    eigenvaluesInput.id = Eigenvalues.tagName;\n    let eigenvalues: Eigenvalues;\n    let eigenvaluesAttributes: Map<string, string>;\n    if (xml_eigenvalues.length == 1) {\n        eigenvaluesInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0])));\n        eigenvaluesAttributes = getAttributes(xml_eigenvalues[0]);\n        eigenvalues = new Eigenvalues(eigenvaluesAttributes, value);\n        control.setEigenvalues(eigenvalues);\n        let id = Control.tagName + \"_\" + Eigenvalues.tagName + \"_number\";\n        // Create a new div for the eigenvalues.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level0, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(eigenvalues, event.target);\n                resizeInputElement(event.target);\n            }\n        }, eigenvalues.value.toString(), Eigenvalues.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        eigenvaluesDiv.appendChild(inputDiv);\n    } else {\n        eigenvaluesInput.checked = false;\n        eigenvaluesAttributes = new Map<string, string>();\n        eigenvalues = new Eigenvalues(eigenvaluesAttributes, NaN);\n    }\n    eigenvaluesInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setEigenvalues(eigenvalues);\n                let id = Control.tagName + \"_\" + Eigenvalues.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the eigenvalues.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level0, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(eigenvalues, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, eigenvalues.value.toString(), Eigenvalues.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                eigenvaluesDiv.appendChild(inputDiv);\n            } else {\n                control.removeEigenvalues();\n                let id = Control.tagName + \"_\" + Eigenvalues.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:shortestTimeOfInterest\n    let shortestTimeOfInterestDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(shortestTimeOfInterestDiv);\n    let xml_shortestTimeOfInterest: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(ShortestTimeOfInterest.tagName);\n    // Create a input checkbox for the ShortestTimeOfInterest.\n    let shortestTimeOfInterestLabel: HTMLLabelElement = document.createElement(\"label\");\n    shortestTimeOfInterestDiv.appendChild(shortestTimeOfInterestLabel);\n    shortestTimeOfInterestLabel.textContent = ShortestTimeOfInterest.tagName;\n    let shortestTimeOfInterestInput: HTMLInputElement = document.createElement(\"input\");\n    shortestTimeOfInterestDiv.appendChild(shortestTimeOfInterestInput);\n    shortestTimeOfInterestInput.type = \"checkbox\";\n    shortestTimeOfInterestInput.id = ShortestTimeOfInterest.tagName;\n    let shortestTimeOfInterest: ShortestTimeOfInterest;\n    let shortestTimeOfInterestAttributes: Map<string, string>;\n    if (xml_shortestTimeOfInterest.length == 1) {\n        shortestTimeOfInterestInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_shortestTimeOfInterest[0])));\n        shortestTimeOfInterestAttributes = getAttributes(xml_shortestTimeOfInterest[0]);\n        shortestTimeOfInterest = new ShortestTimeOfInterest(shortestTimeOfInterestAttributes, value);\n        control.setShortestTimeOfInterest(shortestTimeOfInterest);\n        let id = Control.tagName + \"_\" + ShortestTimeOfInterest.tagName + \"_number\";\n        // Create a new div for the shortestTimeOfInterest.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(shortestTimeOfInterest, event.target);\n                resizeInputElement(event.target);\n            }\n        }, shortestTimeOfInterest.value.toString(), ShortestTimeOfInterest.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        shortestTimeOfInterestDiv.appendChild(inputDiv);\n    } else {\n        shortestTimeOfInterestInput.checked = false;\n        shortestTimeOfInterestAttributes = new Map<string, string>();\n        shortestTimeOfInterest = new ShortestTimeOfInterest(shortestTimeOfInterestAttributes, NaN);\n    }\n    shortestTimeOfInterestInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setShortestTimeOfInterest(shortestTimeOfInterest);\n                let id = Control.tagName + \"_\" + ShortestTimeOfInterest.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the shortestTimeOfInterest.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(shortestTimeOfInterest, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, shortestTimeOfInterest.value.toString(), ShortestTimeOfInterest.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                shortestTimeOfInterestDiv.appendChild(inputDiv);\n            } else {\n                control.removeShortestTimeOfInterest();\n                let id = Control.tagName + \"_\" + ShortestTimeOfInterest.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:MaximumEvolutionTime\n    let maximumEvolutionTimeDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(maximumEvolutionTimeDiv);\n    let xml_maximumEvolutionTime: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(MaximumEvolutionTime.tagName);\n    // Create a input checkbox for the MaximumEvolutionTime.\n    let maximumEvolutionTimeLabel: HTMLLabelElement = document.createElement(\"label\");\n    maximumEvolutionTimeDiv.appendChild(maximumEvolutionTimeLabel);\n    maximumEvolutionTimeLabel.textContent = MaximumEvolutionTime.tagName;\n    let maximumEvolutionTimeInput: HTMLInputElement = document.createElement(\"input\");\n    maximumEvolutionTimeDiv.appendChild(maximumEvolutionTimeInput);\n    maximumEvolutionTimeInput.type = \"checkbox\";\n    maximumEvolutionTimeInput.id = MaximumEvolutionTime.tagName;\n    let maximumEvolutionTime: MaximumEvolutionTime;\n    let maximumEvolutionTimeAttributes: Map<string, string>;\n    if (xml_maximumEvolutionTime.length == 1) {\n        maximumEvolutionTimeInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_maximumEvolutionTime[0])));\n        maximumEvolutionTimeAttributes = getAttributes(xml_maximumEvolutionTime[0]);\n        maximumEvolutionTime = new MaximumEvolutionTime(maximumEvolutionTimeAttributes, value);\n        control.setMaximumEvolutionTime(maximumEvolutionTime);\n        let id = Control.tagName + \"_\" + MaximumEvolutionTime.tagName + \"_number\";\n        // Create a new div for the maximumEvolutionTime.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(maximumEvolutionTime, event.target);\n                resizeInputElement(event.target);\n            }\n        }, maximumEvolutionTime.value.toString(), MaximumEvolutionTime.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        maximumEvolutionTimeDiv.appendChild(inputDiv);\n    } else {\n        maximumEvolutionTimeInput.checked = false;\n        maximumEvolutionTimeAttributes = new Map<string, string>();\n        maximumEvolutionTime = new MaximumEvolutionTime(maximumEvolutionTimeAttributes, NaN);\n    }\n    maximumEvolutionTimeInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setMaximumEvolutionTime(maximumEvolutionTime);\n                let id = Control.tagName + \"_\" + MaximumEvolutionTime.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the maximumEvolutionTime.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(maximumEvolutionTime, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, maximumEvolutionTime.value.toString(), MaximumEvolutionTime.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                maximumEvolutionTimeDiv.appendChild(inputDiv);\n            } else {\n                control.removeMaximumEvolutionTime();\n                let id = Control.tagName + \"_\" + MaximumEvolutionTime.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:automaticallySetMaxEne\n    let automaticallySetMaxEneDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(automaticallySetMaxEneDiv);\n    let xml_automaticallySetMaxEne: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(AutomaticallySetMaxEne.tagName);\n    // Create a input checkbox for the AutomaticallySetMaxEne.\n    let automaticallySetMaxEneLabel: HTMLLabelElement = document.createElement(\"label\");\n    automaticallySetMaxEneDiv.appendChild(automaticallySetMaxEneLabel);\n    automaticallySetMaxEneLabel.textContent = AutomaticallySetMaxEne.tagName;\n    let automaticallySetMaxEneInput: HTMLInputElement = document.createElement(\"input\");\n    automaticallySetMaxEneDiv.appendChild(automaticallySetMaxEneInput);\n    automaticallySetMaxEneInput.type = \"checkbox\";\n    automaticallySetMaxEneInput.id = AutomaticallySetMaxEne.tagName;\n    let automaticallySetMaxEneAttributes: Map<string, string>;\n    let automaticallySetMaxEne: AutomaticallySetMaxEne;\n    if (xml_automaticallySetMaxEne.length == 1) {\n        automaticallySetMaxEneInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_automaticallySetMaxEne[0])));\n        automaticallySetMaxEneAttributes = getAttributes(xml_automaticallySetMaxEne[0]);\n        automaticallySetMaxEne = new AutomaticallySetMaxEne(automaticallySetMaxEneAttributes, value);\n        control.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n    } else {\n        automaticallySetMaxEneInput.checked = false;\n        automaticallySetMaxEneAttributes = new Map<string, string>();\n        automaticallySetMaxEne = new AutomaticallySetMaxEne(automaticallySetMaxEneAttributes, NaN);\n    }\n    automaticallySetMaxEneInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n                let id = Control.tagName + \"_\" + AutomaticallySetMaxEne.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the automaticallySetMaxEne.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(automaticallySetMaxEne, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, automaticallySetMaxEne.value.toString(), AutomaticallySetMaxEne.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                automaticallySetMaxEneDiv.appendChild(inputDiv);\n            } else {\n                control.removeAutomaticallySetMaxEne();\n                let id = Control.tagName + \"_\" + AutomaticallySetMaxEne.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:diagramEnergyOffset\n    let diagramEnergyOffsetDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(diagramEnergyOffsetDiv);\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(DiagramEnergyOffset.tagName);\n    // Create a input checkbox for the DiagramEnergyOffset.\n    let diagramEnergyOffsetLabel: HTMLLabelElement = document.createElement(\"label\");\n    diagramEnergyOffsetDiv.appendChild(diagramEnergyOffsetLabel);\n    diagramEnergyOffsetLabel.textContent = DiagramEnergyOffset.tagName;\n    let diagramEnergyOffsetInput: HTMLInputElement = document.createElement(\"input\");\n    diagramEnergyOffsetDiv.appendChild(diagramEnergyOffsetInput);\n    diagramEnergyOffsetInput.type = \"checkbox\";\n    diagramEnergyOffsetInput.id = DiagramEnergyOffset.tagName;\n    let diagramEnergyOffset: DiagramEnergyOffset;\n    let diagramEnergyOffsetAttributes: Map<string, string>;\n    if (xml_diagramEnergyOffset.length == 1) {\n        diagramEnergyOffsetInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffsetAttributes = getAttributes(xml_diagramEnergyOffset[0]);\n        diagramEnergyOffset = new DiagramEnergyOffset(diagramEnergyOffsetAttributes, value);\n        control.setDiagramEnergyOffset(diagramEnergyOffset);\n        let id = Control.tagName + \"_\" + DiagramEnergyOffset.tagName + \"_number\";\n        // Create a new div for the diagramEnergyOffset.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(diagramEnergyOffset, event.target);\n                resizeInputElement(event.target);\n            }\n        }, diagramEnergyOffset.value.toString(), DiagramEnergyOffset.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        diagramEnergyOffsetDiv.appendChild(inputDiv);\n    } else {\n        diagramEnergyOffsetInput.checked = false;\n        diagramEnergyOffsetAttributes = new Map<string, string>();\n        diagramEnergyOffset = new DiagramEnergyOffset(diagramEnergyOffsetAttributes, NaN);\n    }\n    diagramEnergyOffsetInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setDiagramEnergyOffset(diagramEnergyOffset);\n                let id = Control.tagName + \"_\" + DiagramEnergyOffset.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the diagramEnergyOffset.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, level1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(diagramEnergyOffset, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, diagramEnergyOffset.value.toString(), DiagramEnergyOffset.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                diagramEnergyOffsetDiv.appendChild(inputDiv);\n            } else {\n                control.removeDiagramEnergyOffset();\n                let id = Control.tagName + \"_\" + DiagramEnergyOffset.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    return controlsDiv;\n}\n\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: string[] = [];\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionStates.\n        let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        if (reactantsLabel != undefined) {\n            reactants.push(reactantsLabel);\n            if (products.has(reactantsLabel)) {\n                intProducts.add(reactantsLabel);\n            }\n            let energy: number = reaction.getReactantsEnergy(molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(reactantsLabel, energy);\n            if (!orders.has(reactantsLabel)) {\n                orders.set(reactantsLabel, i);\n                i++;\n            }\n        }\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        if (productsLabel != undefined) {\n            products.add(productsLabel);\n            let energy = reaction.getProductsEnergy(molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(productsLabel, energy);\n            if (orders.has(productsLabel)) {\n                i--;\n                let j: number = get(orders, productsLabel);\n                // Move product to end and shift everything back.\n                orders.forEach(function (value, key) {\n                    if (value > j) {\n                        orders.set(key, value - 1);\n                    }\n                });\n                // Insert transition states.\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function (ts) {\n                        let ref: string = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                    orders.set(productsLabel, i);\n                    i++\n                }\n            } else {\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function (ts) {\n                        let ref: string = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                }\n                orders.set(productsLabel, i);\n                i++;\n            }\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines, but\n        // the code is left here commented out for code comprehension.)\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n    let originalCanvasHeight = canvas.height;\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (reactionTransitionStates.length > 0) {\n            reactionTransitionStates.forEach(function (ts) {\n                let transitionStateLabel: string = ts.getMolecule().ref;\n                let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                    transitionStateInXY[1]);\n                let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                    productInXY[0], productInXY[1]);\n            });\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 0) {\n        let reactionsDiv: HTMLDivElement = document.getElementById(\"reactions\") as HTMLDivElement;\n        let id = \"reactionsDiagram\";\n        // Remove any existing canvas.\n        let existingCanvas: HTMLCanvasElement = document.getElementById(id) as HTMLCanvasElement;\n        if (existingCanvas != null) {\n            existingCanvas.remove();\n        }\n        // Create a new canvas.\n        let canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.id = id;\n        canvas.width = 800;\n        canvas.height = 400;\n        canvas.style.border = \"1px solid black\";\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, dark, font, lw, lwc);\n        }\n        // Add the canvas to the document.\n        reactionsDiv.appendChild(canvas);\n    }\n}\n\n/**\n * Save to XML file.\n */\nfunction saveXML() {\n    console.log(\"saveXML\");\n    const pad: string = \"  \";\n    // Create a Blob object from the data\n    let blob = new Blob([Mesmer.header, mesmer.toXML(pad, pad)],\n        { type: \"text/plain\" });\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    let title: string = mesmer.getTitle()?.value as string;\n    a.download = title.replace(/[^a-z0-9]/gi, '_') + \".xml\";\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n}","/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @param delimiter The (optional) delimiter.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>, delimiter?: string): string {\n    if (map == null) {\n        return \"\";\n    }\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} set The set to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function setToString(set: Set<any>, delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(set).map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (isNumeric(s[i])) {\n            r.push(parseFloat(s[i]));\n        //} else {\n        //    throw new Error(`toNumberArray: ${s[i]} is not a number`);\n        }\n    }\n    return r;\n}\n\n/**\n * @param s The string to check.\n * @returns true iff s is a number.\n */\nexport function isNumeric(s: string) : boolean {\n    if (s === \"\") {\n      return false;\n    }\n    return !isNaN(Number(s))\n}","import {\n    getSelfClosingTag\n} from \"./html\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param element The xml element to search in.\n * @returns The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a Node throwing an Error if this is null.\n * @param node The node to get the nodeValue of.\n * @returns The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: Node): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * For convenience and to cope with when there is no node value as there is a blank.\n * @param e The Element\n * @returns The node value of the first child or \"\".\n */\nexport function getInputString(e: Element) {\n    let s: string;\n    let firstChildNode = getFirstChildNode(e);\n    if (firstChildNode) {\n        s = getNodeValue(firstChildNode).trim();\n    } else {\n        s = \"\";\n    }\n    return s;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(undefined, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }\n}\n\n/**\n * A class for representing A Tag with attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        if (this.attributes) {\n            this.attributes.forEach((value, key) => {\n                r += `${key}(${value}), `;\n            });\n        }\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n            for (let [k, v] of this.attributes) {\n                s += ' ' + k + '=\"' + v.toString() + '\"';\n            }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: number;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: number) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, tagName: string, values: number[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter != undefined) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): number {\n        this.nodes.set(this.nodes.size, node);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    override toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        if (this.nodes.size > 0) {\n            this.nodes.forEach((v) => {\n                if (v instanceof NodeWithNodes) {\n                    s += (v as NodeWithNodes).toXML(pad, padding1);\n                } else if (v instanceof TagWithAttributes) {\n                    s += (v as TagWithAttributes).toXML(padding1);\n                } else {\n                    s += (v as Tag).toXML(padding1);\n                }\n            });\n            return getTag(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s: string = getSelfClosingTag(this.attributes, this.tagName);\n            if (padding != undefined) {\n                return \"\\n\" + padding + s;\n            }\n            return s;\n        }\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param element The element to get the attributes of.\n * @returns The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param xml The XML document or element.\n * @param tagName The tag name.\n * @returns The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}","/**\n * Remove a top level element.\n * @param id The id of the element to remove.\n */\nexport function remove(id: string) {\n    let e: HTMLElement | null = document.getElementById(id);\n    if (e != null) {\n        e.parentNode?.removeChild(e);\n        //} else {\n        //    console.warn(\"remove: id=\" + id + \" not found.\");\n    }\n}\n\n/**\n * Create a collapsible div.\n * @param options The options for creating the collapsible div.\n * @returns A collapsible div.\n */\nexport function getCollapsibleDiv({\n    content,\n    buttonLabel,\n    buttonFontSize = '',\n    boundary = { marginLeft: '', marginTop: '', marginBottom: '', marginRight: '' },\n    level = { marginLeft: '', marginTop: '', marginBottom: '', marginRight: '' },\n    contentDivId = '',\n    contentDivClassName = ''\n}: {\n    content: HTMLElement,\n    buttonLabel: string,\n    buttonFontSize?: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string},\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string},\n    contentDivId?: string,\n    contentDivClassName?: string\n}): HTMLDivElement {\n    let contentDiv: HTMLDivElement = createDiv(boundary);\n    contentDiv.id = contentDivId;\n    contentDiv.className = contentDivClassName;\n    let button: HTMLButtonElement = document.createElement('button');\n    button.id = contentDivId + 'Button';\n    button.className = 'collapsible';\n    button.innerText = `${buttonLabel} ▼`;\n    button.addEventListener('click', function () {\n        button.innerText = button.innerText.includes('▼')\n            ? `${buttonLabel} ▲`\n            : `${buttonLabel} ▼`;\n    });\n    button.style.fontSize = buttonFontSize;\n    Object.assign(button.style, level);\n    contentDiv.appendChild(button);\n    contentDiv.appendChild(content);\n    return contentDiv;\n}\n\n/**\n * For making elements with the class \"collapsible\" collapsible.\n */\nexport function makeCollapsible(): void {\n    var collapsibleElements = document.getElementsByClassName(\"collapsible\");\n    for (var i = 0; i < collapsibleElements.length; i++) {\n        // Remove existing event listener\n        collapsibleElements[i].removeEventListener(\"click\", toggleCollapsible);\n        // Add new event listener\n        collapsibleElements[i].addEventListener(\"click\", toggleCollapsible);\n    }\n}\n\n/**\n * For toggling the collapsible content.\n */\nfunction toggleCollapsible(this: HTMLElement): void {\n    this.classList.toggle(\"active\");\n    let contentDiv = this.nextElementSibling as HTMLElement;\n    if (contentDiv.style.display === \"block\") {\n        contentDiv.style.display = \"none\";\n    } else {\n        contentDiv.style.display = \"block\";\n    }\n}\n\n/**\n * Create and return HTMLDivElement that contains an HTMLLabelElement and a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param boundary The boundary to go around the HTMLLabelElement and HTMLInputElement.\n * @param func The function called on a change to the input.\n * @param value The value of the input.\n * @param labelText The label text.\n * @param inputFontsize The font size of the input.\n * @param labelFontsize The font size of the label.\n * @returns A HTMLDivElement that contains a HTMLLabelElement and a HTMLInputElement.\n */\nexport function createLabelWithInput(type: string, id: string, \n    boundary: {marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string},\n    level: {marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string},\n    func: (event: Event) => any, value: string, labelContent: string, inputFontsize?: string, labelFontsize?: string): HTMLDivElement {\n    let input: HTMLInputElement = createInputWithFunction(type, id, boundary, func, value, inputFontsize);\n    Object.assign(input.style, boundary);\n    let label: HTMLLabelElement = createLabel(labelContent, boundary, labelFontsize);\n    label.htmlFor = id;\n    Object.assign(label.style, boundary);\n    let container: HTMLDivElement = createFlexDiv(level);\n    container.appendChild(label);\n    container.appendChild(input);\n    return container;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param func The function called on a change to the input.\n * @returns A HTMLInputElement.\n */\nexport function createInputWithFunction(type: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n},\n    func: (event: Event) => any, value: string, inputFontsize?: string): HTMLInputElement {\n    let input: HTMLInputElement = createInput(type, id, boundary);\n    input.onchange = func;\n    input.value = value;\n    if (inputFontsize != undefined) {\n        input.style.fontSize = inputFontsize;\n    }\n    resizeInputElement(input);\n    return input;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\", \"checkbox\").\n * @param id The id of the input.\n * @returns A HTMLInputElement.\n */\nexport function createInput(type: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLInputElement {\n    let input: HTMLInputElement = document.createElement('input');\n    input.type = type;\n    input.id = id;\n    Object.assign(input.style, boundary);\n    return input;\n}\n\n/**\n * Create a self closing tag.\n * @param attributes The attributes.\n * @param tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | undefined, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}\n\n/**\n * For resizing an HTMLInputElement to the width of what it contains.\n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeInputElement(input: HTMLInputElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 4;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}\n\n/**\n * For resizing an HTMLSelectElement to the width of what it contains.\n * \n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeSelectElement(input: HTMLSelectElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 6;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}\n\n/**\n * Create and return an HTMLSelectElement.\n * \n * @param options The options.\n * @param name The name.\n * @param id The id.\n * @returns An HTMLSelectElement.\n */\nexport function createSelectElement(options: string[] | Set<string>, name: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLSelectElement {\n    let selectElement: HTMLSelectElement = document.createElement('select');\n    options.forEach(option => {\n        selectElement.name = name;\n        selectElement.id = id;\n        let optionElement: HTMLOptionElement = document.createElement('option');\n        optionElement.value = option;\n        optionElement.text = option;\n        selectElement.appendChild(optionElement);\n    });\n    Object.assign(selectElement.style, boundary);\n    return selectElement;\n}\n\n/**\n * Create and return an HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n * \n * @param textContent The text content of the label.\n * @param options The options for the HTMLSelectElement.\n * @param name The name for the HTMLSelectElement.\n * @param id The id.\n * @param boundary The boundary to go around the HTMLLabelElement and HTMLSelectElement.\n * @returns A HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n */\nexport function createLabelWithSelectElement(textContent: string, options: string[] | Set<string>, name: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement('div');\n    let label: HTMLLabelElement = createLabel(textContent, boundary);\n    div.appendChild(label);\n    let selectElement: HTMLSelectElement = document.createElement('select');\n    div.appendChild(selectElement);\n    options.forEach(option => {\n        selectElement.name = name;\n        selectElement.id = id;\n        let optionElement: HTMLOptionElement = document.createElement('option');\n        optionElement.value = option;\n        optionElement.text = option;\n        selectElement.appendChild(optionElement);\n    });\n    Object.assign(selectElement.style, boundary);\n    return div;\n}\n\n/**\n * Create and return an HTMLButtonElement.\n * \n * @param textContent The text content of the button.\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin\n * @returns An HTMLButtonElement with the textContent and specified boundary.\n */\nexport function createButton(textContent: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLButtonElement {\n    let button: HTMLButtonElement = document.createElement('button');\n    button.textContent = textContent;\n    Object.assign(button.style, boundary);\n    return button;\n}\n\n/**\n * Create and return HTMLDivElement with a 'flex' display style.\n *\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createDiv(boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement(\"div\");\n    Object.assign(div.style, boundary);\n    return div;\n}\n\n/**\n * Create and return HTMLDivElement with a 'flex' display style.\n *\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createFlexDiv(boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLDivElement {\n    let div: HTMLDivElement = createDiv(boundary);\n    div.style.display = 'flex';\n    return div;\n}\n\n/**\n * Create and return HTMLLabelElement.\n *\n * @param textContent The text content of the label.\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin.\n * @param fontsize The font size.\n * @returns An HTMLLabelElement with specified boundary.\n */\nexport function createLabel(textContent: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}, fontsize?: string): HTMLLabelElement {\n    let label: HTMLLabelElement = document.createElement(\"label\");\n    Object.assign(label.style, boundary);\n    label.textContent = textContent;\n    if (fontsize != undefined) {\n        //console.log(\"fontsize=\" + fontsize);\n        label.style.fontSize = fontsize;\n    }\n    return label;\n}","import { get } from './util.js';\nimport {\n    TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode, StringNode\n} from './xml.js';\n\n\n/**\n * Atom data.\n * The examples can be used to compile this.\n * It is likely that only a small subset of atoms in the periodic table are of interest...\n */\n\n/**\n * Molecule data.\n * The examples can be used to compile this.\n * It would be good to use, have, provide ways of sharing and to be able to specify/edit molecules...\n * This would include data about atoms, bonds, molecule properties and other things...\n */\n\n/**\n * Atom instances must have an \"elementType\" attribute.\n * The attributes may include \"id\", \"x3\", \"y3\", \"z3\" - coordinates used to depict a molecule containing the atom.\n * In the XML, an \"atom\" node is typically a child of an \"atomArray\" parent node.\n * If there is only one atom, it may be a child of a \"molecule\" parent node.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * The id if specified, or the elementType.\n     */\n    id: string;\n\n    /**\n     * The element type.\n     */\n    elementType: string;\n\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     * If there is no \"id\" then \"this.id\" is set to the \"elementType\".\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Atom.tagName);\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            throw new Error('elementType is undefined');\n        }\n        this.elementType = elementType;\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            id = this.elementType;\n        }\n        this.id = id;\n    }\n}\n\n/**\n * A class for representing an atomArray.\n * There can be no attributes.\n * In the XML, a \"atomArray\" node is typically a child of a \"molecule\" parent node and has \"atom\" node children.\n */\nexport class AtomArray extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"atomArray\";\n\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */\n    constructor(attributes: Map<string, string>, atoms: Atom[]) {\n        super(attributes, AtomArray.tagName);\n        atoms.forEach(atom => {\n            this.nodes.set(this.nodes.size, atom);\n        });\n    }\n}\n\n/**\n * An atomic bond between two atoms in a molecule.\n * Instances must have a \"atomRefs2\" attribute - a space separated list of two atom ids.\n * The attributes may include \"order\" - presumed to be the order of the bond. Generally:\n *  order = (the number of bonding electrons) - ((the number of non-bonding electrons) / 2).\n * In the XML, a \"bond\" node is typically a child of a \"bondArray\" parent node.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * The key for the atomRefs2 attribute.\n     */\n    static readonly s_atomRefs2: string = \"atomRefs2\";\n\n    /**\n     * The key for the id attribute.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The key for the order attribute.\n     */\n    static readonly s_order: string = \"order\";\n\n    /**\n     * The atomRefs2 stored for convenience, this is also stored as an attribute.\n     */\n    atomRefs2: string;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Bond.tagName);\n        let atomRefs2: string | undefined = attributes.get(Bond.s_atomRefs2);\n        if (atomRefs2 == undefined) {\n            throw new Error(Bond.s_atomRefs2 + ' is undefined!');\n        }\n        this.atomRefs2 = atomRefs2;\n    }\n\n    /**\n     * @param atomRefs2 The atomRefs2 to set.\n     */\n    setAtomRefs2(atomRefs2: string): void {\n        this.atomRefs2 = atomRefs2;\n        this.attributes.set(Bond.s_atomRefs2, atomRefs2);\n    }\n\n    /**\n     * @returns The attribute value referred to by \"id\" or undefined.\n     */\n    getId(): string | undefined {\n        return this.attributes.get(Bond.s_id);\n    }\n\n    /**\n     * @param id The id to set the attribute value referred to by \"id\".\n     */\n    setId(id: string): void {\n        this.attributes.set(Bond.s_id, id);\n    }\n\n    /**\n     * @returns The attribute value referred to by \"order\" as a number or undefined.\n     */\n    getOrder(): number | undefined {\n        let order: string | undefined = this.attributes.get(Bond.s_order);\n        if (order != undefined) {\n            return parseFloat(order);\n        }\n    }\n\n    /**\n     * @param order The order to set the attribute value referred to by \"order\".\n     */\n    setOrder(order: number): void {\n        this.attributes.set(Bond.s_order, order.toString());\n    }\n\n}\n\n/**\n * There can be no attributes.\n * In the XML, a \"bondArray\" node is typically a child of a \"molecule\" parent node and has \"bond\" node children.\n */\nexport class BondArray extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bondArray\";\n\n\n    /**\n     * The bonds stored for convenience.\n     */\n    bonds: Bond[];\n\n    /**\n     * @param attributes The attributes.\n     * @param bonds A Map of bonds with keys as ids.\n     */\n    constructor(attributes: Map<string, string>, bonds: Bond[]) {\n        super(attributes, BondArray.tagName);\n        this.bonds = bonds;\n        bonds.forEach(bond => {\n            this.nodes.set(this.nodes.size, bond);\n        });\n    }\n\n    /**\n     * @param i The index of the bond.\n     * @returns The bond at the given index.\n     * @throws Error if this.bonds has no such index.\n     */\n    getBond(i: number): Bond | undefined {\n        return this.bonds[i];\n    }\n\n    /**\n     * @returns The bonds.\n     */\n    getBonds(): Bond[] {\n        return this.bonds;\n    }\n\n    /**\n     * Set the bond at the given index.\n     * @param i The index.\n     * @param bond The bond.\n     * @throws Error if this.bonds has no such index.\n     */\n    setBond(i: number, bond: Bond): void {\n        this.bonds[i] = bond;\n        this.nodes.set(i, bond);\n    }\n\n    /**\n     * Adds a bond to the array.\n     * @param bond The bond to add.\n     */\n    addBond(bond: Bond): void {\n        this.bonds.push(bond);\n        this.nodes.set(this.nodes.size, bond);\n    }\n\n    /**\n     * @param i The index of the bond to remove.\n     */\n    removeBond(i: number): void {\n        this.bonds.splice(i, 1);\n        this.nodes.delete(i);\n    }\n\n    /**\n     * Get a set of all the bond ids.\n     */\n    getBondIds(): Set<string> {\n        let bondIds: Set<string> = new Set();\n        this.bonds.forEach((bond) => {\n            bondIds.add(bond.getId() as string);\n        });\n        return bondIds;\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, a \"scalar\" node is a child of a \"property\" node.\n */\nexport class PropertyScalar extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PropertyScalar.tagName, value);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyScalar.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    //console.log('Units are not the same, changing units...');\n                    this.attributes.set(PropertyScalar.s_units, units);\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyArray extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"array\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyArray.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set(PropertyArray.s_units, units);\n                    console.log('Units changed from ' + existingUnits + ' to ' + units);\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes must contain \"dictRef\" which is a dictionary reference for a type of property.\n * In the XML, a \"property\" node has a \"propertyList\" parent and either a \"scalar\" or \"array\" or another type of child not yet implemented (there could be a \"matrix\" type).\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * The key for the dictRef attribute.\n     */\n    static readonly s_dictRef: string = \"dictRef\";\n\n    /**\n     * The dictRef.\n     */\n    dictRef: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property?: PropertyScalar | PropertyArray) {\n        super(attributes, Property.tagName);\n        let dictRef: string | undefined = attributes.get(Property.s_dictRef);\n        if (dictRef == undefined) {\n            throw new Error(Property.s_dictRef + ' is undefined!');\n        }\n        this.dictRef = dictRef;\n        if (property) {\n            this.nodes.set(0, property);\n        }\n    }\n\n    /**\n     * @returns The property.\n     */\n    getProperty(): PropertyScalar | PropertyArray {\n        return this.nodes.get(0) as PropertyScalar | PropertyArray;\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: PropertyScalar | PropertyArray): void {\n        this.nodes.set(0, property);\n    }\n\n}\n\n/**\n * The Zero Potential Energy.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[kJ/mol]).\n */\nexport class ZPE extends Property {\n\n    static readonly dictRef: string = \"me:ZPE\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"wavenumber\", \"kcal/mol\", \"Hartree\", \"au\"].\n     */\n    setUnits(units: string): void {\n        this.getProperty().updateUnits(units);\n    }\n}\n\n/**\n * \"me:frequenciesScaleFactor\" property.\n */\nexport class FrequenciesScaleFactor extends Property {\n\n    static readonly dictRef: string = \"me:frequenciesScaleFactor\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The vibration frequencies.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class VibFreqs extends Property {\n\n    static readonly dictRef: string = \"me:vibFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The rotation constants.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class RotConsts extends Property {\n\n    static readonly dictRef: string = \"me:rotConsts\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Molecular Weight.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[amu]).\n */\nexport class MW extends Property {\n\n    static readonly dictRef: string = \"me:MW\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:imFreqs\"\n */\nexport class ImFreqs extends Property {\n\n    static readonly dictRef: string = \"me:imFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * In the XML, a \"propertyList\" node is a child node of a \"molecule\" node and has one or more \"property\" child node.\n * There can be no attributes.\n */\nexport class PropertyList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"propertyList\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */\n    constructor(attributes: Map<string, string>, properties?: Property[]) {\n        super(attributes, PropertyList.tagName);\n        this.index = new Map();\n        if (properties != undefined) {\n            properties.forEach(property => {\n                this.nodes.set(this.nodes.size, property);\n                this.index.set(property.dictRef, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let i: number | undefined = this.index.get(dictRef);\n        if (i != undefined) {\n            return this.nodes.get(i) as Property;\n        } else {\n            throw new Error('Property ' + dictRef + ' does not exist');\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let i: number | undefined = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log('Property ' + property.dictRef + ' already exists, updating...');\n            this.nodes.set(i, property);\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include \"bathGas\", \"units\", \"lower\", \"upper\", and \"stepsize\".\n */\nexport class DeltaEDown extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * The key for the bathGas attribute.\n     */\n    static readonly s_bathGas: string = \"bathGas\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The key for the lower attribute.\n     */\n    static readonly s_lower: string = \"lower\";\n\n    /**\n     * The key for the upper attribute.\n     */\n    static readonly s_upper: string = \"upper\";\n\n    /**\n     * The key for the stepsize attribute.\n     */\n    static readonly s_stepsize: string = \"stepsize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */\n    getBathGas(): string | undefined {\n        return this.attributes.get(DeltaEDown.s_bathGas);\n    }\n\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */\n    setBathGas(bathGas: string): void {\n        this.attributes.set(DeltaEDown.s_bathGas, bathGas);\n    }\n\n    /**\n     * @returns The units of the DeltaEDown.\n     */\n    getUnits(): string | undefined {\n        return this.attributes.get(DeltaEDown.s_units);\n    }\n\n    /**\n     * @param units The units of the DeltaEDown.\n     */\n    setUnits(units: string): void {\n        this.attributes.set(DeltaEDown.s_units, units);\n    }\n\n    /**\n     * @returns The lower of the DeltaEDown.\n     */\n    getLower(): number | undefined {\n        return parseFloat(get(this.attributes, DeltaEDown.s_lower));\n    }\n\n    /**\n     * @param lower The lower of the DeltaEDown.\n     */\n    setLower(lower: number): void {\n        this.attributes.set(DeltaEDown.s_lower, lower.toString());\n    }\n\n    /**\n     * @returns The upper of the DeltaEDown.\n     */\n    getUpper(): number | undefined {\n        return parseFloat(get(this.attributes, DeltaEDown.s_upper));\n    }\n\n    /**\n     * @param upper The upper of the DeltaEDown.\n     */\n    setUpper(upper: number): void {\n        this.attributes.set(DeltaEDown.s_upper, upper.toString());\n    }\n\n    /**\n     * @returns The stepsize of the DeltaEDown.\n     */\n    getStepsize(): number | undefined {\n        return parseFloat(get(this.attributes, DeltaEDown.s_stepsize));\n    }\n\n    /**\n     * @param stepsize The stepsize of the DeltaEDown.\n     */\n    setStepsize(stepsize: number): void {\n        this.attributes.set(DeltaEDown.s_stepsize, stepsize.toString());\n    }\n\n    /**\n     * @param value The value of the DeltaEDown.\n     */\n    setValue(value: number): void {\n        this.value = value;\n    }\n}\n\n/**\n * In the XML, a \"me:energyTransferModel\" node is a child node of a \"molecule\" node.\n * It may have:\n * One or more \"me:deltaEDown\" child nodes.\n * Additional child nodes might include \"me:deltaEDownTExponent\".\n */\nexport class EnergyTransferModel extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns?: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        if (deltaEDowns != undefined) {\n            deltaEDowns.forEach(deltaEDown => {\n                this.nodes.set(this.nodes.size, deltaEDown);\n            });\n        }\n    }\n\n    /**\n     * @returns The DeltaEDowns.\n     */\n    getDeltaEDowns(): DeltaEDown[] {\n        let deltaEDowns: DeltaEDown[] = [];\n        this.nodes.forEach(node => {\n            if (node instanceof DeltaEDown) {\n                deltaEDowns.push(node);\n            }\n        });\n        return deltaEDowns;\n    }\n\n    /**\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    setDeltaEDowns(deltaEDowns: DeltaEDown[]): void {\n        this.nodes.clear();\n        deltaEDowns.forEach(deltaEDown => {\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */\n    getDeltaEDown(index: number): DeltaEDown {\n        if (index < 0 || index >= this.nodes.size) {\n            throw new Error('index out of range');\n        }\n        return this.nodes.get(index) as DeltaEDown;\n    }\n\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */\n    setDeltaEDown(index: number, deltaEDown: DeltaEDown): void {\n        this.nodes.set(index, deltaEDown);\n    }\n\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */\n    addDeltaEDown(deltaEDown: DeltaEDown): number {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\n\n/**\n * In the XML, a \"me:DOSCMethod\" node is a child node of a \"molecule\" node.\n * The attributes are expected to include either \"xsi:type\" or \"name\" - expected values are either \"ClassicalRotors\" or \"QMRotors\".\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    /**\n     * The key for the \"xsi:type\" attribute value.\n     */\n    static readonly s_xsi_type = \"xsi:type\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n        if (attributes.get(DOSCMethod.s_xsi_type) == undefined) {\n            let name: string | undefined = attributes.get(\"name\");\n            if (name == undefined) {\n                throw new Error('Neither xsi:type or name are defined.');\n            } else {\n                attributes.set(DOSCMethod.s_xsi_type, name);\n            }\n        }\n    }\n\n    /**\n     * @returns The xsi:type.\n     */\n    getXsiType(): string {\n        return this.attributes.get(DOSCMethod.s_xsi_type) as string;\n    }\n\n    /**\n     * @param xsiType The xsi:type.\n     */\n    setXsiType(xsiType: string): void {\n        this.attributes.set(DOSCMethod.s_xsi_type, xsiType);\n    }\n}\n\n/**\n * In the XML, a \"me:bondRef\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class BondRef extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bondRef\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.tagName, bondRef);\n    }\n}\n\n/**\n * In the XML, a \"me:PotentialPoint\" node is a child node of a \"me:HinderedRotorPotential\" node.\n * The attributes must include \"angle\" and \"potential\".\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PotentialPoint\";\n\n    /**\n     * The key angle attribute.\n     */\n    static readonly s_angle: string = \"angle\";\n\n    /**\n     * The key potential attribute.\n     */\n    static readonly s_potential: string = \"potential\";\n\n    /**\n     * The angle stored for convenience, this is also an attribute.\n     */\n    angle: number;\n\n    /**\n     * The potential stored for convenience, this is also an attribute.\n     */\n    potential: number;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.tagName);\n        let angle: string | undefined = attributes.get(PotentialPoint.s_angle);\n        if (angle == undefined) {\n            throw new Error(PotentialPoint.s_potential + ' is undefined!');\n        }\n        this.angle = parseFloat(angle);\n        let potential: string | undefined = attributes.get(PotentialPoint.s_potential);\n        if (potential == undefined) {\n            throw new Error(PotentialPoint.s_potential + ' is undefined!');\n        }\n        this.potential = parseFloat(potential);\n    }\n\n    /**\n     * @returns The angle.\n     */\n    getAngle(): number {\n        return this.angle;\n    }\n\n    /**\n     * @param angle The angle of the PotentialPoint.\n     */\n    setAngle(angle: number): void {\n        this.angle = angle;\n        this.attributes.set(PotentialPoint.s_angle, angle.toString());\n    }\n\n    /**\n     * @returns The potential.\n     */\n    getPotential(): number {\n        return this.potential;\n    }\n\n    /**\n     * @param potential The potential of the PotentialPoint.\n     */\n    setPotential(potential: number): void {\n        this.potential = potential;\n        this.attributes.set(PotentialPoint.s_potential, potential.toString());\n    }\n\n}\n\n/**\n * In the XML, a \"me:HinderedRotorPotential\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n * It may have one or more \"me:PotentialPoint\" child nodes.\n * The attributes must include \"format\" (with a value from [\"numerical\", \"analytical\"]) and \"units\" (with a value from [\"kJ/mol\", \"cm-1\", \"Hartree\"]).\n */\nexport class HinderedRotorPotential extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:HinderedRotorPotential\";\n\n    /**\n     * The permitted formats.\n     */\n    static readonly formats: string[] = [\"numerical\", \"analytical\"];\n\n    /**\n     * The permitted units.\n     */\n    static readonly units: string[] = [\"kJ/mol\", \"cm-1\", \"Hartree\"];\n\n    /**\n     * The key for the format attribute value.\n     */\n    static readonly s_format: string = \"format\";\n\n    /**\n     * The key for the units attribute value.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The key for the expansionSize attribute value.\n     */\n    static readonly s_expansionSize: string = \"expansionSize\";\n\n    /**\n     * The key for the useSineTerms attribute value.\n     */\n    static readonly s_useSineTerms: string = \"useSineTerms\";\n\n    /**\n     * The format stored for convenience, this is also an attribute.\n     */\n    format: string;\n\n    /**\n     * The units stored for convenience, this is also an attribute.\n     */\n    units: string;\n\n    /**\n     * The expansionSize stored for convenience, this is also an attribute.\n     */\n    expansionSize: number;\n\n    /**\n     * The useSineTerms stored for convenience, this is also an attribute.\n     */\n    useSineTerms: boolean;\n\n    /**\n     * @param attributes The attributes.\n     * @param potentialPoints The PotentialPoints.\n     */\n    constructor(attributes: Map<string, string>, potentialPoints?: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.tagName);\n        let format: string | undefined = attributes.get(HinderedRotorPotential.s_format);\n        if (format == undefined) {\n            throw new Error(HinderedRotorPotential.s_format + ' is undefined!');\n        }\n        this.format = format;\n        let units: string | undefined = attributes.get(HinderedRotorPotential.s_units);\n        if (units == undefined) {\n            throw new Error(HinderedRotorPotential.s_units + ' is undefined!');\n        }\n        this.units = units;\n        if (potentialPoints != undefined) {\n            potentialPoints.forEach(p => {\n                this.nodes.set(this.nodes.size, p);\n            });\n        }\n        let expansionSize: string | undefined = attributes.get(HinderedRotorPotential.s_expansionSize);\n        if (expansionSize == undefined) {\n            throw new Error(HinderedRotorPotential.s_expansionSize + ' is undefined!');\n        }\n        this.expansionSize = parseFloat(expansionSize);\n        let useSineTerms: string | undefined = attributes.get(HinderedRotorPotential.s_useSineTerms);\n        if (useSineTerms == undefined) {\n            throw new Error(HinderedRotorPotential.s_useSineTerms + ' is undefined!');\n        }\n        this.useSineTerms = (useSineTerms == \"yes\");\n    }\n\n    /**\n     * @returns The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    getFormat(): string {\n        return this.format;\n    }\n\n    /**\n     * @param format The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    setFormat(format: string): void {\n        this.format = format;\n        this.attributes.set(HinderedRotorPotential.s_format, format);\n    }\n\n    /**\n     * @returns The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */\n    getUnits(): string {\n        return this.units;\n    }\n\n    /**\n     * @param units The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */\n    setUnits(units: string): void {\n        this.units = units;\n        this.attributes.set(HinderedRotorPotential.s_units, units);\n    }\n\n    /**\n     * @returns The expansionSize of the HinderedRotorPotential.\n     */\n    getExpansionSize(): number {\n        return this.expansionSize;\n    }\n\n    /**\n     * @param expansionSize The expansionSize of the HinderedRotorPotential.\n     */\n    setExpansionSize(expansionSize: number): void {\n        this.expansionSize = expansionSize;\n        this.attributes.set(HinderedRotorPotential.s_expansionSize, expansionSize.toString());\n    }\n\n    /**\n     * @returns The useSineTerms of the HinderedRotorPotential.\n     */\n    getUseSineTerms(): boolean {\n        return this.useSineTerms;\n    }\n\n    /**\n     * @param useSineTerms The useSineTerms of the HinderedRotorPotential.\n     */\n    setUseSineTerms(useSineTerms: boolean): void {\n        this.useSineTerms = useSineTerms;\n        this.attributes.set(HinderedRotorPotential.s_useSineTerms, useSineTerms ? \"yes\" : \"no\");\n    }\n\n    /**\n     * @returns The potential point with the given index.\n     */\n    getPotentialPoint(i: number): PotentialPoint {\n        return this.nodes.get(i) as PotentialPoint;\n    }\n\n    /**\n     * Set the potential point at the given index.\n     * @param i The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */\n    setPotentialPoint(i: number, p: PotentialPoint): void {\n        this.nodes.set(i, p);\n    }\n\n    /**\n     * Sets the potential points.\n     * @param potentialPoints The potential points.\n     */\n    setPotentialPoints(potentialPoints: PotentialPoint[]): void {\n        this.nodes.clear();\n        potentialPoints.forEach(p => {\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */\n    addPotentialPoint(p: PotentialPoint): number {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @param i The index of the potential point to remove.\n     */\n    removePotentialPoint(i: number): void {\n        this.nodes.delete(i);\n    }\n}\n\n/**\n * In the XML, a \"me:periodicity\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class Periodicity extends NumberNode {\n\n    static readonly tagName: string = \"me:periodicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Periodicity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:ExtraDOSCMethod\" node is a child node of a \"molecule\" node.\n */\nexport class ExtraDOSCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */\n    constructor(attributes: Map<string, string>, bondRef?: BondRef,\n        hinderedRotorPotential?: HinderedRotorPotential,\n        periodicity?: Periodicity) {\n        super(attributes, ExtraDOSCMethod.tagName);\n        this.index = new Map();\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The bondRef.\n     */\n    getBondRef(): BondRef | undefined {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BondRef;\n        }\n    }\n\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */\n    setBondRef(bondRef: BondRef) {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bondRef);\n        } else {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */\n    getHinderedRotorPotential(): HinderedRotorPotential | undefined {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HinderedRotorPotential;\n        }\n    }\n\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */\n    setHinderedRotorPotential(hinderedRotorPotential: HinderedRotorPotential) {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hinderedRotorPotential);\n        } else {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The periodicity of the molecule.\n     */\n    getPeriodicity(): Periodicity | undefined {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Periodicity;\n        }\n    }\n\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */\n    setPeriodicity(periodicity: Periodicity) {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, periodicity);\n        } else {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n}\n\n/**\n * The attributes may include \"units\".\n * In the XML, a \"me:reservoirSize\" node is a child node of a \"molecule\" node.\n */\nexport class ReservoirSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:reservoirSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ReservoirSize.tagName, value);\n    }\n}\n\n\n/**\n * The attributes may include \"description\" and \"active\" (and possibly others).\n * In the XML, a \"molecule\" node is a child node of a \"moleculeList\" node.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The key for the id attribute value.\n     */\n    static readonly s_id = \"id\";\n\n    /**\n     * The key for the description attribute value.\n     */\n    static readonly s_description = \"description\";\n\n    /**\n     * The key for the active attribute value.\n     */\n    static readonly s_active = \"active\";\n\n    /**\n     * The index. The keys are the tag names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    // The molecule ID.\n    id: string;\n\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms?: Atom | AtomArray,\n        bonds?: Bond | BondArray,\n        properties?: PropertyList | Property,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod,\n        extraDOSCMethod?: ExtraDOSCMethod,\n        reservoirSize?: ReservoirSize) {\n        super(attributes, Molecule.tagName);\n        this.index = new Map();\n        let id: string | undefined = attributes.get(Molecule.s_id);\n        if (id == undefined) {\n            throw new Error(Molecule.s_id + ' is undefined');\n        }\n        this.id = id;\n        let i: number = 0;\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            if (atoms instanceof Atom) {\n                this.index.set(Atom.tagName, i);\n            } else {\n                this.index.set(AtomArray.tagName, i);\n            }\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set(BondArray.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set(PropertyList.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set(EnergyTransferModel.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set(DOSCMethod.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set(ExtraDOSCMethod.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set(ReservoirSize.tagName, i);\n        }\n    }\n\n    /**\n     * Get the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        return this.attributes.get(Molecule.s_description);\n    }\n\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */\n    setDescription(description: string): void {\n        this.attributes.set(Molecule.s_description, description);\n    }\n\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(Molecule.s_active);\n        if (active != undefined) {\n            if (active == \"true\") {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */\n    setActive(active: boolean): void {\n        this.attributes.set(Molecule.s_active, active.toString());\n    }\n\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */\n    getLabel(): string {\n        let label: string = this.id;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            label += \" (\" + description + \")\";\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active) {\n            label += \" (\" + Molecule.s_active + \")\";\n        }\n        return label;\n    }\n\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */\n    getAttributesAsString(): string {\n        return Array.from(this.attributes, ([key, value]) => `${key}=\\\"${value}\\\"`).join(', ');\n    }\n\n    /**\n     * @returns The properties of the molecule.\n     */\n    getProperties(): PropertyList | Property | undefined {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            i = this.index.get(Property.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as Property;\n            }\n        } else {\n            return this.nodes.get(i) as PropertyList;\n        }\n    }\n\n    /**\n     * @param properties The properties.\n     */\n    setProperties(properties: PropertyList | Property) {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            this.index.set(PropertyList.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else {\n            this.nodes.set(i, properties);\n        }\n    }\n\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                //console.log('PropertyList');\n                return properties.getProperty(dictRef);\n            } else {\n                //console.log('Property');\n                return properties;\n            }\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                properties.setProperty(property);\n            } else {\n                this.setProperties(properties);\n            }\n        } else {\n            this.setProperties(property);\n        }\n    }\n\n    /**\n     * @returns The atoms of the molecule.\n     */\n    getAtoms(): Atom | AtomArray | undefined {\n        let i: number | undefined = this.index.get(Atom.tagName);\n        if (i == undefined) {\n            i = this.index.get(AtomArray.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as AtomArray;\n            }\n        } else {\n            return this.nodes.get(i) as Atom;\n        }\n    }\n\n    /**\n     * @returns The bonds of the molecule.\n     */\n    getBonds(): BondArray | undefined {\n        let i: number | undefined = this.index.get(BondArray.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BondArray;\n        }\n    }\n\n    /**\n     * @returns The energy transfer model of the molecule.\n     */\n    getEnergyTransferModel(): EnergyTransferModel | undefined {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as EnergyTransferModel;\n        }\n    }\n\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */\n    setEnergyTransferModel(energyTransferModel: EnergyTransferModel) {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            this.index.set(EnergyTransferModel.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else {\n            this.nodes.set(i, energyTransferModel);\n        }\n    }\n\n    /**\n     * @returns The DOSC method of the molecule.\n     */\n    getDOSCMethod(): DOSCMethod | undefined {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DOSCMethod;\n        }\n    }\n\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */\n    setDOSCMethod(dOSCMethod: DOSCMethod) {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(DOSCMethod.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else {\n            this.nodes.set(i, dOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */\n    getExtraDOSCMethod(): ExtraDOSCMethod | undefined {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ExtraDOSCMethod;\n        }\n    }\n\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */\n    setExtraDOSCMethod(extraDOSCMethod: ExtraDOSCMethod) {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(ExtraDOSCMethod.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else {\n            this.nodes.set(i, extraDOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The reservoir size of the molecule.\n     */\n    getReservoirSize(): ReservoirSize | undefined {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ReservoirSize;\n        }\n    }\n\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */\n    setReservoirSize(reservoirSize: ReservoirSize) {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            this.index.set(ReservoirSize.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else {\n            this.nodes.set(i, reservoirSize);\n        }\n    }\n\n    /**\n     * Get the ZPE value of the molecule.\n     */\n    getEnergy(): number {\n        let p: Property | undefined = this.getProperty(ZPE.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error(ZPE.dictRef + ' property not found!');\n            //return 0;\n        }\n        return (p.getProperty() as PropertyScalar).value;\n    }\n}","import {\n    Molecule, ZPE\n} from './molecule.js';\n\nimport {\n    TagWithAttributes, NodeWithNodes, NumberNode, Tag, NumberArrayNode, StringNode\n} from './xml.js';\n\n/**\n * A reference to a molecule, not to be confused with a Molecule.\n * The attribute \"ref\" is the same as a Molecule ID for a molecule in the XML \"moleculeList\".\n * The attribute \"role\" is the role of the molecule in the reaction. Expected values are:\n * [\"deficientReactant\", \"excessReactant\", \"modelled\", \"transitionState\", \"sink\"], but this may depend on whether the molecule is a reactant, product or transition state.\n * In the XML, a \"molecule\" node is a child of a \"reactant\", \"product\" or \"me:transitionState\" node.\n */\nexport class ReactionMolecule extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The ref attribute.\n     */\n    ref: string;\n\n    /**\n     * The role attribute.\n     */\n    role: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, ReactionMolecule.tagName);\n        this.ref = attributes.get(\"ref\") as string;\n        this.role = attributes.get(\"role\") as string;\n    }\n\n    /**\n     * @param role The role of the molecule in the reaction.\n     */\n    setRole(role: string): void {\n        this.role = role;\n    }\n\n}\n\n/**\n * A molecule that reacts in a reaction.\n * In the XML, a \"reactant\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Reactant extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Reactant.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * A molecule produced in a reaction.\n * In the XML, a \"product\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Product extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Product.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n\n}\n\n/**\n * A molecule that is a transition state in a reaction.\n * In the XML, a \"me:transitionState\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class TransitionState extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, TransitionState.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * In the XML, a \"me:preExponential\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:activationEnergy\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:TInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:nInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * Extended classes indicate how microcanonical rate constant is to be treated.\n * In the XML, a \"me:MCRCMethod\" node is a child of a \"reaction\" node.\n * A simple MCRCMethod has an attribute name=\"RRKM\".\n * There are extended classed representing more complicated MCRCMethods:\n * \"me:MesmerILT\"\n * \"LandauZenerCrossing\"\n * \"ZhuNakamuraCrossing\"\n * \"me:CanonicalRateCoefficient\"\n * \"DefinedSumOfStates\"\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * The Inverse Laplace Transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The xsiType.\n     */\n    static readonly xsiType: string = \"me:MesmerILT\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsiType2: string = \"MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */\n    constructor(attributes: Map<string, string>, preExponential?: PreExponential,\n        activationEnergy?: ActivationEnergy, tInfinity?: TInfinity, nInfinity?: NInfinity) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(PreExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(ActivationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(TInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(NInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    /**\n     * @param preExponential The pre-exponential factor.\n     */\n    setPreExponential(preExponential: PreExponential): void {\n        let i = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            this.index.set(PreExponential.tagName, this.nodes.size);\n            this.addNode(preExponential);\n        } else {\n            this.nodes.set(i, preExponential);\n        }\n    }\n\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    /**\n     * @param activationEnergy The activation energy.\n     */\n    setActivationEnergy(activationEnergy: ActivationEnergy): void {\n        let i = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            this.index.set(ActivationEnergy.tagName, this.nodes.size);\n            this.addNode(activationEnergy);\n        } else {\n            this.nodes.set(i, activationEnergy);\n        }\n    }\n\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    /**\n     * @param tInfinity The TInfinity.\n     */\n    setTInfinity(tInfinity: TInfinity): void {\n        let i = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(TInfinity.tagName, this.nodes.size);\n            this.addNode(tInfinity);\n        } else {\n            this.nodes.set(i, tInfinity);\n        }\n    }\n\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n\n    /**\n     * @param nInfinity The NInfinity.\n     */\n    setNInfinity(nInfinity: NInfinity): void {\n        let i = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(NInfinity.tagName, this.nodes.size);\n            this.addNode(nInfinity);\n        } else {\n            this.nodes.set(i, nInfinity);\n        }\n    }\n}\n\n/**\n * In the XML, the \"me:tunneling\" node is a child of a \"reaction\" node.\n * The \"name\" attribute is one of: [Eckart, WKB].\n */\nexport class Tunneling extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * The key to the name attribute value.\n     */\n    static readonly s_name: string = \"name\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n\n    /**\n     * @returns The name of the tunneling method.\n     */\n    getName(): string {\n        return this.attributes.get(Tunneling.s_name) as string;\n    }\n\n    /**\n     * @param The name of the tunneling method.\n     */\n    setName(name: string): void {\n        this.attributes.set(Tunneling.s_name, name);\n    }\n}\n\n/**\n * In the XML, the \"me:excessReactantConc\" node is a child of a \"reaction\" node.\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n}\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The key to the id attribute value.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The index for the nodes.\n     * The key is the type of node.\n     * The value is the index of the node in the nodes array or if there are multiple nodes of this type, \n     * the value is a Map where the key of the map is the dictRef of the Node and the value is the respective node index for that specific thing.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The reactants index.\n     * The key is the ref of the reactant.\n     * The value is the index of the reactant in the nodes array.\n     */\n    reactantsIndex: Map<string, number>;\n\n    /**\n     * The products index.\n     * The key is the ref of the product.\n     * The value is the index of the product in the nodes array.\n     */\n    productsIndex: Map<string, number>;\n\n    /**\n     * The transition states index.\n     * The key is the ref of the transition state.\n     * The value is the index of the transition state in the nodes array.\n     */\n    transitionStatesIndex: Map<string, number>;\n\n    /**\n     * The id of the reaction.\n     */\n    id: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */\n    constructor(attributes: Map<string, string>,\n        reactants?: Reactant[], products?: Product[], tunneling?: Tunneling,\n        transitionStates?: TransitionState[], mCRCMethod?: MCRCMethod,\n        excessReactantConc?: ExcessReactantConc) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map();\n        this.reactantsIndex = new Map();\n        this.productsIndex = new Map();\n        this.transitionStatesIndex = new Map();\n        let id: string | undefined = attributes.get(Reaction.s_id);\n        if (id == undefined) {\n            throw new Error(Reaction.s_id + ' is undefined!');\n        }\n        this.id = id;\n        if (reactants != undefined) {\n            reactants.forEach(reactant => {\n                this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n                this.addNode(reactant);\n            });\n            this.index.set(Reactant.tagName, this.reactantsIndex);\n        }\n        if (products != undefined) {\n            products.forEach(product => {\n                this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n                this.addNode(product);\n            });\n            this.index.set(Product.tagName, this.productsIndex);\n        }\n        if (tunneling != undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach(transitionState => {\n                this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n                this.addNode(transitionState);\n            });\n            this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n\n    /**\n     * Add a node to the index.\n     */\n    addToIndex(tagName: string, node: NodeWithNodes): void {\n        let v: Map<string, number> | number | undefined = this.index.get(tagName);\n        if (v == undefined) {\n            this.index.set(tagName, this.nodes.size);\n        } else if (v instanceof Map) {\n            (v as Map<string, number>).set(node.tagName, this.nodes.size);\n        } else {\n            let map: Map<string, number> = new Map<string, number>();\n            map.set((this.nodes.get(v) as ReactionMolecule).ref, v as number);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n\n    /**\n     * @returns The reactants.\n     */\n    getReactants(): Reactant[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Reactant.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Reactant);\n        } else {\n            return [this.nodes.get(i) as Reactant];\n        }\n    }\n\n    /**\n     * Set the reactants.\n     */\n    setReactants(reactants: Reactant[]): void {\n        reactants.forEach(reactant => {\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n            this.addNode(reactant);\n        });\n        this.index.set(Reactant.tagName, this.reactantsIndex);\n    }\n\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */\n    getReactant(ref: string): Reactant {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Reactant;\n    }\n\n    /**\n     * @param reactant The reactant to add.\n     */\n    addReactant(reactant: Reactant): void {\n        this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n        this.addNode(reactant);\n    }\n\n    /**\n     * @param ref The ref of the reactant to remove.\n     */\n    removeReactant(ref: string): void {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.reactantsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The products.\n     */\n    getProducts(): Product[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Product.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Product);\n        } else {\n            return [this.nodes.get(i) as Product];\n        }\n    }\n\n    /**\n     * Set the products.\n     */\n    setProducts(products: Product[]): void {\n        products.forEach(product => {\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n            this.addNode(product);\n        });\n        this.index.set(Product.tagName, this.productsIndex);\n    }\n\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */\n    getProduct(ref: string): Product {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Product;\n    }\n\n    /**\n     * @param product The product to add.\n     */\n    addProduct(product: Product): void {\n        this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n        this.addNode(product);\n    }\n\n    /**\n     * @param ref The ref of the product to remove.\n     */\n    removeProduct(ref: string): void {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.productsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */\n    getTunneling(): Tunneling | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as Tunneling;\n    }\n\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */\n    setTunneling(tunneling: Tunneling): void {\n        let i = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, tunneling);\n            }\n        }\n    }\n\n    /**\n     * @returns The transition states.\n     */\n    getTransitionStates(): TransitionState[] {\n        let i: Map<string, number> | number | undefined = this.index.get(TransitionState.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as TransitionState);\n        } else {\n            return [this.nodes.get(i) as TransitionState];\n        }\n    }\n\n    /**\n     * Set the transition states.\n     */\n    setTransitionStates(transitionStates: TransitionState[]): void {\n        transitionStates.forEach(transitionState => {\n            this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n            this.addNode(transitionState);\n        });\n        this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n    }\n\n    /**\n     * @returns A particular TransitionState.\n     * @param ref The ref of the transition state to return.\n     * @returns The transition state at the given index.\n     */\n    getTransitionState(ref: string): TransitionState {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition state with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as TransitionState;\n    }\n\n    /**\n     * @param transitionState The transition state to add.\n     */\n    addTransitionState(transitionState: TransitionState): void {\n        this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n        this.addNode(transitionState);\n    }\n\n    /**\n     * @param ref The ref of the transition state to remove.\n     */\n    removeTransitionState(ref: string): void {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition State with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.transitionStatesIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as MCRCMethod;\n    }\n\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */\n    setMCRCMethod(mCRCMethod: MCRCMethod): void {\n        let i = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, mCRCMethod);\n            }\n        }\n    }\n\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */\n    getExcessReactantConc(): ExcessReactantConc | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as ExcessReactantConc;\n    }\n\n    /**\n     * Set the excess reactant concentration or create it if it is undefined.\n     */\n    setExcessReactantConc(excessReactantConc: ExcessReactantConc): void {\n        let i = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"ExcessReactantConc is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, excessReactantConc);\n            }\n        }\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return this.getReactants().map(reactant => reactant.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return this.getProducts().map(product => product.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */\n    getReactantsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map(reactant => {\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map(product => {\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */\n    get(tagName: string, dictRef: string): NodeWithNodes | TagWithAttributes | Tag | undefined {\n        if (this.index.has(tagName)) {\n            let i: number | Map<string, number> | undefined = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex: number | undefined = i.get(dictRef);\n                    if (nodeIndex != undefined) {\n                        return this.nodes.get(nodeIndex);\n                    }\n                } else {\n                    return this.nodes.get(i);\n                }\n            }\n        }\n    }\n\n}","/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    NodeWithNodes, NumberNode, StringNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:bathGas\".\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     */\n    constructor(attributes: Map<string, string>, moleculeID: string) {\n        super(attributes, BathGas.tagName, moleculeID);\n    }\n}\n\n/**\n * A class for \"me:experimentRate\".\n * The attributes may include ref1, ref2, refReaction, and error.\n */\nexport class ExperimentRate extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentRate\";\n\n    /**\n     * The key to the ref1 attribute value.\n     */\n    static readonly s_ref1: string = \"ref1\";\n\n    /**\n     * The key to the ref2 attribute value.\n     */\n    static readonly s_ref2: string = \"ref2\";\n\n    /**\n     * The key to the refReaction attribute value.\n     */\n    static readonly s_refReaction: string = \"refReaction\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentRate.tagName, value);\n    }\n\n    /**\n     * @returns The ref1 attribute or undefined if there is no ref1 attribute.\n     */\n    getRef1(): string | undefined {\n        return this.attributes.get(ExperimentRate.s_ref1);\n    }\n\n    /**\n     * Set the ref1 attribute.\n     * @param ref1 The ref1.\n     */\n    setRef1(ref1: string) {\n        this.attributes.set(ExperimentRate.s_ref1, ref1);\n    }\n\n    /**\n     * @returns The ref2 attribute or undefined if there is no ref2 attribute.\n     */\n    getRef2(): string | undefined {\n        return this.attributes.get(ExperimentRate.s_ref2);\n    }\n\n    /**\n     * Set the ref2 attribute.\n     * @param ref2 The ref2.\n     */\n    setRef2(ref2: string) {\n        this.attributes.set(ExperimentRate.s_ref2, ref2);\n    }\n\n    /**\n     * @returns The refReaction attribute or undefined if there is no refReaction attribute.\n     */\n    getRefReaction(): string | undefined {\n        return this.attributes.get(ExperimentRate.s_refReaction);\n    }\n\n    /**\n     * Set the refReaction attribute.\n     * @param refReaction The refReaction.\n     */\n    setRefReaction(refReaction: string) {\n        this.attributes.set(ExperimentRate.s_refReaction, refReaction);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number | undefined {\n        let error: string | undefined = this.attributes.get(ExperimentRate.s_error);\n        if (error != undefined) {\n            return parseFloat(error);\n        }\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        this.attributes.set(ExperimentRate.s_error, error.toString());\n    }\n}\n\n/**\n * A class for \"me:experimentalYield\".\n * The attributes may include:\n * ref:string\n * error: number\n * yieldTime: number.\n */\nexport class ExperimentalYield extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentalYield\";\n\n    /**\n     * The key to the ref attribute value.\n     */\n    static readonly s_ref: string = \"ref\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * The key to the yieldTime attribute value.\n     */\n    static readonly s_yieldTime: string = \"yieldTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentalYield.tagName, value);\n    }\n\n    /**\n     * @returns The ref attribute or undefined if there is no ref attribute.\n     */\n    getRef(): string | undefined {\n        return this.attributes.get(ExperimentalYield.s_ref);\n    }\n\n    /**\n     * Set the ref attribute.\n     * @param ref The ref.\n     */\n    setRef(ref: string) {\n        this.attributes.set(ExperimentalYield.s_ref, ref);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number | undefined {\n        let error: string | undefined = this.attributes.get(ExperimentalYield.s_error);\n        if (error != undefined) {\n            return parseFloat(error);\n        }\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        this.attributes.set(ExperimentalYield.s_error, error.toString());\n    }\n\n    /**\n     * @returns The yieldTime attribute or undefined if there is no yieldTime attribute.\n     */\n    getYieldTime(): number | undefined {\n        let yieldTime: string | undefined = this.attributes.get(ExperimentalYield.s_yieldTime);\n        if (yieldTime) {\n            return parseFloat(yieldTime);\n        }\n    }\n\n    /**\n     * Set the yieldTime attribute.\n     * @param yieldTime The yieldTime.\n     */\n    setYieldTime(yieldTime: number) {\n        this.attributes.set(ExperimentalYield.s_yieldTime, yieldTime.toString());\n    }\n}\n\n/**\n * A class for \"me:experimentalEigenvalue\".\n * The attributes may include:\n * EigenvalueID:string\n * error: number\n */\nexport class ExperimentalEigenvalue extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:experimentalEigenvalue\";\n\n    /**\n     * The key to the EigenvalueID attribute value.\n     */\n    static readonly s_EigenvalueID = \"EigenvalueID\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentalEigenvalue.tagName, value);\n    }\n\n    /**\n     * @returns The EigenvalueID attribute or undefined if there is no EigenvalueID attribute.\n     */\n    getEigenvalueID(): string | undefined {\n        return this.attributes.get(ExperimentalEigenvalue.s_EigenvalueID);\n    }\n\n    /**\n     * Set the EigenvalueID attribute.\n     * @param EigenvalueID The EigenvalueID.\n     */\n    setEigenvalueID(EigenvalueID: string) {\n        this.attributes.set(ExperimentalEigenvalue.s_EigenvalueID, EigenvalueID);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number | undefined {\n        let error: string | undefined = this.attributes.get(ExperimentalEigenvalue.s_error);\n        if (error != undefined) {\n            return parseFloat(error);\n        }\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        this.attributes.set(ExperimentalEigenvalue.s_error, error.toString());\n    }\n\n}\n\n/**\n * A class for \"me:excessReactantConc\".\n * The attributes may include:\n * percent: string (\"true\" or \"false\")\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * The key to the percent attribute value.\n     */\n    static readonly s_percent: string = \"percent\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n\n    /**\n     * @returns The percent attribute or undefined if there is no percent attribute.\n     */\n    getPercent(): string | undefined {\n        return this.attributes.get(ExcessReactantConc.s_percent);\n    }\n\n    /**\n     * Set the percent attribute.\n     * @param percent The percent.\n     */\n    setPercent(percent: string) {\n        this.attributes.set(ExcessReactantConc.s_percent, percent);\n    }\n}\n\n/**\n * A class for representing a Pressure and Temperature pair with optional additional things: BathGas and ExperimentRate.\n * Can there be multiple BathGases and ExperimentRates?\n * The attributes include:\n * units: string\n * P: number\n * T: number\n * And optionally:\n * percentExcessReactantConc: number\n * excessReactantConc: string\n * precision: number\n * bathGas: string\n * If excessReactantConc=\"true\" then the node contains a node of type \"me:excessReactantConc\".\n * \n */\nexport class PTpair extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTpair\";\n\n    /**\n     * The precision attribute potential values.\n     */\n    static readonly precisions: string[] = [\"d\", \"dd\", \"qd\", \"double\", \"double-double\", \"quad-double\"];\n\n    /**\n     * The key to the P attribute value.\n     */\n    static readonly s_P: string = \"P\";\n\n    /**\n     * The key to the T attribute value.\n     */\n    static readonly s_T: string = \"T\";\n\n    /**\n     * The key to the precision attribute value.\n     */\n    static readonly s_precision: string = \"precision\";\n\n    /**\n     * The key to the excessReactantConc attribute value.\n     */\n    static readonly s_excessReactantConc = \"excessReactantConc\";\n\n    /**\n     * The key to the percentExcessReactantConc attribute value.\n     */\n    static readonly s_percentExcessReactantConc = \"percentExcessReactantConc\";\n\n    /**\n     * The index. Keys are types and values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */\n    constructor(attributes: Map<string, string>, bathGas?: BathGas, experimentRate?: ExperimentRate,\n        excessReactantConc?: ExperimentalYield, experimentalEigenvalue?: ExperimentalEigenvalue) {\n        super(attributes, PTpair.tagName);\n        this.index = new Map();\n        if (bathGas != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate != undefined) {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExperimentalYield.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n        if (experimentalEigenvalue != undefined) {\n            this.index.set(ExperimentalEigenvalue.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n\n    /**\n     * @returns The Pressure.\n     */\n    getP(): number {\n        let p: string | undefined = this.attributes.get(PTpair.s_P);\n        if (p != undefined) {\n            return parseFloat(p);\n        }\n        return NaN;\n    }\n\n    /**\n     * Set The Pressure\n     */\n    setP(p: number) {\n        this.attributes.set(PTpair.s_P, p.toString());\n    }\n\n    /**\n     * @returns The Temperature.\n     */\n    getT(): number {\n        let t: string | undefined = this.attributes.get(PTpair.s_T);\n        if (t != undefined) {\n            return parseFloat(t);\n        }\n        return NaN;\n    }\n\n    /**\n     * Set The Temperature.\n     */\n    setT(t: number) {\n        this.attributes.set(PTpair.s_T, t.toString());\n    }\n\n    /**\n     * @returns The precision attribute or undefined if there is no precision attribute.\n     */\n    getPrecision(): string | undefined {\n        return this.attributes.get(PTpair.s_precision);\n    }\n\n    /**\n     * Set the precision attribute.\n     * @param precision The precision.\n     */\n    setPrecision(precision: string) {\n        this.attributes.set(PTpair.s_precision, precision);\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas | undefined {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BathGas;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas.\n     */\n    setBathGas(bathGas: BathGas) {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bathGas);\n        } else {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * Remove the bath gas.\n     */\n    removeBathGas() {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(BathGas.tagName);\n        }\n    }\n\n    /**\n     * @returns The experiment rate.\n     */\n    getExperimentRate(): ExperimentRate | undefined {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentRate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentRate The experiment rate.\n     */\n    setExperimentRate(experimentRate: ExperimentRate) {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentRate);\n        } else {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n\n    /**\n     * Remove the experiment rate.\n     */\n    removeExperimentRate() {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentRate.tagName);\n        }\n    }\n\n    /**\n     * @returns this.attributes.get(\"excessReactantConc\").\n     */\n    getExcessReactantConc(): string | undefined {\n            return this.attributes.get(PTpair.s_excessReactantConc);\n    }\n\n    /**\n     * this.attributes.set(\"excessReactantConc\", excessReactantConc).\n     */\n    setExcessReactantConc(excessReactantConc: string) {\n            this.attributes.set(PTpair.s_excessReactantConc, excessReactantConc);\n    }\n\n    /**\n     * @returns this.attributes.get(\"percentExcessReactantConc\").\n     */\n    getPercentExcessReactantConc(): string | undefined {\n            return this.attributes.get(PTpair.s_percentExcessReactantConc);\n    }\n\n    /**\n     * this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc).\n     */\n    setPercentExcessReactantConc(percentExcessReactantConc: string) {\n            this.attributes.set(PTpair.s_percentExcessReactantConc, percentExcessReactantConc);\n    }\n\n\n\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * The Pressure and Temperature pairs.\n     */\n    pTpairs: PTpair[];\n\n    /**\n     * @param attributes The attributes.\n     * @param pTs The PTs.\n     */\n    constructor(attributes: Map<string, string>, pTpairs?: PTpair[]) {\n        super(attributes, PTs.tagName);\n        if (pTpairs != undefined) {\n            pTpairs.forEach((pTpair) => {\n                this.addNode(pTpair);\n            });\n            this.pTpairs = pTpairs;\n        } else {\n            this.pTpairs = [];\n        }\n    }\n\n    /**\n     * @param i The index of the PTpair to return. \n     * @returns The PTpair at the given index or undefined if the index is out of range.\n     */\n    getPTpair(i: number): PTpair {\n        return this.pTpairs[i];\n    }\n\n    /**\n     * Set the PT at the given index.\n     * @param i The index.\n     * @returns The PT pairs.\n     */\n    setPTpair(i: number, pTpair: PTpair): void {\n        this.nodes.set(i, pTpair);\n        this.pTpairs[i] = pTpair;\n    }\n\n    /**\n     * Add a PTpair.\n     * @param pTPair The PTpair to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */\n    addPTpair(pTpair: PTpair): number {\n        this.addNode(pTpair);\n        this.pTpairs.push(pTpair);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     */\n    setPTpairs(pTpairs: PTpair[]): void {\n        this.nodes.clear();\n        pTpairs.forEach((pTpair) => {\n            this.addNode(pTpair);\n            this.pTpairs.push(pTpair);\n        });\n    }\n\n    /**\n     * Remove the PT at the given index.\n     * @param i The index.\n     */\n    removePTpair(i: number): void {\n        this.nodes.delete(i);\n        this.pTpairs.splice(i, 1);\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The bath gases index. The keys are the molecule IDs and the values are the node indexes.\n     */\n    bathGasesIndex: Map<string, number>;\n\n    /**\n     * The bath gases.\n     */\n    bathGases: Set<BathGas>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGases The bath gases.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */\n    constructor(attributes: Map<string, string>, bathGases?: Set<BathGas>, pTs?: PTs) {\n        super(attributes, Conditions.tagName);\n        this.index = new Map();\n        this.bathGasesIndex = new Map();\n        this.bathGases = new Set();\n        if (bathGases != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            bathGases.forEach((bathGas) => {\n                this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n                this.addNode(bathGas);\n                this.bathGases.add(bathGas);\n            });\n        }\n        if (pTs != undefined) {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n\n    /**\n     * @returns The bath gases.\n     */\n    getBathGases(): Set<BathGas> {\n        return this.bathGases;\n    }\n\n    /**\n     * @param bathGas The bath gas to add.\n     */\n    addBathGas(bathGas: BathGas) {\n        if (!this.bathGases.has(bathGas)) {\n            this.bathGases.add(bathGas);\n            this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas to remove.\n     */\n    removeBathGas(bathGas: BathGas) {\n        if (this.bathGases.has(bathGas)) {\n            this.bathGases.delete(bathGas);\n            this.nodes.delete(this.bathGasesIndex.get(bathGas.value) as number);\n        } else {\n            console.warn(\"Conditions.removeBathGas: bathGas not found to remove.\");\n        }\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs | undefined {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            return this.nodes.get(i) as PTs;\n        }\n    }\n\n    /**\n     * @param pTs The PTs.\n     */\n    setPTs(pTs: PTs) {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            this.nodes.set(i, pTs);\n        } else {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:grainSize\".\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, GrainSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:energyAboveTheTopHill\".\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:maxTemperature\".\n */\nexport class MaxTemperature extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:maxTemperature\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MaxTemperature.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    constructor(attributes: Map<string, string>, grainSize?: GrainSize, \n        automaticallySetMaxEne?: AutomaticallySetMaxEne, energyAboveTheTopHill?: EnergyAboveTheTopHill,\n        maxTemperature?: MaxTemperature) {\n        super(attributes, ModelParameters.tagName);\n        this.index = new Map<string, number>();\n        if (grainSize != undefined) {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n        if (automaticallySetMaxEne != undefined) {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n        if (energyAboveTheTopHill != undefined) {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n        if (maxTemperature != undefined) {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n\n    /**\n     * @returns The grain size or undefined.\n     */\n    getGrainSize(): GrainSize | undefined {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i) {\n            return this.nodes.get(i) as GrainSize;\n        }\n    }\n\n    /**\n     * @param grainSize The grain size.\n     */\n    setGrainSize(grainSize: GrainSize) {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i) {\n            this.nodes.set(i, grainSize);\n        } else {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n    }\n\n    /**\n     * @returns The automatically set max energy or undefined.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automatically set max energy.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * @returns The energy above the top hill or undefined.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill | undefined {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            return this.nodes.get(i) as EnergyAboveTheTopHill;\n        }\n    }\n\n    /**\n     * @param energyAboveTheTopHill The energy above the top hill.\n     */\n    setEnergyAboveTheTopHill(energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            this.nodes.set(i, energyAboveTheTopHill);\n        } else {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n    }\n\n    /**\n     * @returns The max temperature or undefined.\n     */\n    getMaxTemperature(): MaxTemperature | undefined {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            return this.nodes.get(i) as MaxTemperature;\n        }\n    }\n\n    /**\n     * @param maxTemperature The max temperature.\n     */\n    setMaxTemperature(maxTemperature: MaxTemperature) {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            this.nodes.set(i, maxTemperature);\n        } else {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n}","import {\n    Tag, NodeWithNodes, NumberNode, TagWithAttributes, StringNode\n} from \"./xml\";\n\n/**\n * A class for \"me:calculateRateCoefficientsOnly\".\n */\nexport class CalculateRateCoefficientsOnly extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calculateRateCoefficientsOnly\";\n\n    constructor() {\n        super(CalculateRateCoefficientsOnly.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellDOS\".\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellTransitionStateFlux\".\n */\nexport class PrintCellTransitionStateFlux extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printCellTransitionStateFlux\";\n\n    constructor() {\n        super(PrintCellTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorColumnSums\".\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainBoltzmann\".\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainDOS\".\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkbE\".\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkfE\".\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTSsos\".\n */\nexport class PrintTSsos extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printTSsos\";\n\n    constructor() {\n        super(PrintTSsos.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainedSpeciesProfile\".\n */\nexport class PrintGrainedSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainedSpeciesProfile\";\n\n    constructor() {\n        super(PrintGrainedSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainTransitionStateFlux\".\n */\nexport class PrintGrainTransitionStateFlux extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainTransitionStateFlux\";\n\n    constructor() {\n        super(PrintGrainTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorSize\".\n */\nexport class PrintReactionOperatorSize extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorSize\";\n\n    constructor() {\n        super(PrintReactionOperatorSize.tagName);\n    }\n}\n\n/**\n * A class for \"me:printSpeciesProfile\".\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printPhenomenologicalEvolution\".\n */\nexport class PrintPhenomenologicalEvolution extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printPhenomenologicalEvolution\";\n\n    constructor() {\n        super(PrintPhenomenologicalEvolution.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTunnelingCoefficients\".\n */\nexport class PrintTunnelingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnelingCoefficients\";\n\n    constructor() {\n        super(PrintTunnelingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCrossingCoefficients\".\n */\nexport class PrintCrossingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCrossingCoefficients\";\n\n    constructor() {\n        super(PrintCrossingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:testDOS\".\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:testRateConstant\".\n */\nexport class TestRateConstants extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstants\";\n\n    constructor() {\n        super(TestRateConstants.tagName);\n    }\n}\n\n/**\n * A class for \"me:useTheSameCellNumberForAllConditions.\n */\nexport class UseTheSameCellNumberForAllConditions extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:useTheSameCellNumberForAllConditions\";\n\n    constructor() {\n        super(UseTheSameCellNumberForAllConditions.tagName);\n    }\n}\n\n/**\n * A class for \"me:ForceMacroDetailedBalance\".\n */\nexport class ForceMacroDetailedBalance extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ForceMacroDetailedBalance\";\n\n    constructor() {\n        super(ForceMacroDetailedBalance.tagName);\n    }\n}\n\n/**\n * A class for \"me:hideInactive\".\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for \"me:calcMethod\".\n */\nexport class CalcMethod extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calcMethod\";\n\n    /**\n     * The possible values.\n     */\n    static readonly options: string[] = [\"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\",\n        \"ThermodynamicTable\", \"sensitivityAnalysis\"];\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, CalcMethod.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:eigenvalues\".\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:shortestTimeOfInterest\".\n */\nexport class ShortestTimeOfInterest extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:shortestTimeOfInterest\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ShortestTimeOfInterest.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MaximumEvolutionTime\".\n */\nexport class MaximumEvolutionTime extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MaximumEvolutionTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MaximumEvolutionTime.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:diagramEnergyOffset\".\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    /**\n      * @param attributes The attributes.\n      * @param value The value.\n      */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:testMicroRates\".\n * Expected numerical attributes: Tmin, Tmax, Tstep.\n */\nexport class TestMicroRates extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    /**\n     * The minimum temperature.\n     */\n    tMin: number;\n\n    /**\n     * The maximum temperature.\n     */\n    tMax: number;\n\n    /**\n     * The temperature step.\n     */\n    tStep: number;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, TestMicroRates.tagName);\n        this.tMin = parseFloat(attributes.get(\"Tmin\") as string);\n        this.tMax = parseFloat(attributes.get(\"Tmax\") as string);\n        this.tStep = parseFloat(attributes.get(\"Tstep\") as string);\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmin(): number {\n        return this.tMin;\n    }\n\n    /**\n     * @param tMin The minimum temperature.\n     */\n    setTmin(tMin: number) {\n        this.tMin = tMin;\n        this.attributes?.set(\"Tmin\", tMin.toString());\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmax(): number {\n        return this.tMax;\n    }\n\n    /**\n     * @param tMax The maximum temperature.\n     */\n    setTmax(tMax: number) {\n        this.tMax = tMax;\n        this.attributes?.set(\"Tmax\", tMax.toString());\n    }\n\n    /**\n     * @returns The temperature step.\n     */\n    getTstep(): number {\n        return this.tStep;\n    }\n\n    /**\n     * @param tStep The temperature step.\n     */\n    setTstep(tStep: number) {\n        this.tStep = tStep;\n        this.attributes?.set(\"Tstep\", tStep.toString());\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Control.tagName);\n        this.index = new Map<string, number>();\n    }\n\n    /**\n     * @returns The calculateRateCoefficientsOnly or undefined.\n     */\n    getCalculateRateCoefficientsOnly(): CalculateRateCoefficientsOnly | undefined {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalculateRateCoefficientsOnly;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calculateRateCoefficientsOnly The calculateRateCoefficientsOnly.\n     */\n    setCalculateRateCoefficientsOnly(calculateRateCoefficientsOnly: CalculateRateCoefficientsOnly) {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calculateRateCoefficientsOnly);\n        } else {\n            this.index.set(CalculateRateCoefficientsOnly.tagName, this.nodes.size);\n            this.addNode(calculateRateCoefficientsOnly);\n        }\n    }\n\n    /**\n     * Remove the calculateRateCoefficientsOnly.\n     */\n    removeCalculateRateCoefficientsOnly() {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalculateRateCoefficientsOnly.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellDOS or undefined.\n     */\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellDOS The printCellDOS.\n     */\n    setPrintCellDOS(printCellDOS: PrintCellDOS) {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellDOS);\n        } else {\n            this.index.set(PrintCellDOS.tagName, this.nodes.size);\n            this.addNode(printCellDOS);\n        }\n    }\n\n    /**\n     * Remove the printCellDOS.\n     */\n    removePrintCellDOS() {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellTransitionStateFlux or undefined.\n     */\n    getPrintCellTransitionStateFlux(): PrintCellTransitionStateFlux | undefined {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellTransitionStateFlux The printCellTransitionStateFlux.\n     */\n    setPrintCellTransitionStateFlux(printCellTransitionStateFlux: PrintCellTransitionStateFlux) {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellTransitionStateFlux);\n        } else {\n            this.index.set(PrintCellTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printCellTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printCellTransitionStateFlux.\n     */\n    removePrintCellTransitionStateFlux() {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorColumnSums or undefined.\n     */\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     */\n    setPrintReactionOperatorColumnSums(printReactionOperatorColumnSums: PrintReactionOperatorColumnSums) {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorColumnSums);\n        } else {\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorColumnSums);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorColumnSums.\n     */\n    removePrintReactionOperatorColumnSums() {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorColumnSums.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainBoltzmann or undefined.\n     */\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     */\n    setPrintGrainBoltzmann(printGrainBoltzmann: PrintGrainBoltzmann) {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainBoltzmann);\n        } else {\n            this.index.set(PrintGrainBoltzmann.tagName, this.nodes.size);\n            this.addNode(printGrainBoltzmann);\n        }\n    }\n\n    /**\n     * Remove the printGrainBoltzmann.\n     */\n    removePrintGrainBoltzmann() {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainBoltzmann.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainDOS or undefined.\n     */\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainDOS The printGrainDOS.\n     */\n    setPrintGrainDOS(printGrainDOS: PrintGrainDOS) {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainDOS);\n        } else {\n            this.index.set(PrintGrainDOS.tagName, this.nodes.size);\n            this.addNode(printGrainDOS);\n        }\n    }\n\n    /**\n     * Remove the printGrainDOS.\n     */\n    removePrintGrainDOS() {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkbE or undefined.\n     */\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkbE The printGrainkbE.\n     */\n    setPrintGrainkbE(printGrainkbE: PrintGrainkbE) {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkbE);\n        } else {\n            this.index.set(PrintGrainkbE.tagName, this.nodes.size);\n            this.addNode(printGrainkbE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkbE.\n     */\n    removePrintGrainkbE() {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkbE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkfE or undefined.\n     */\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkfE The printGrainkfE.\n     */\n    setPrintGrainkfE(printGrainkfE: PrintGrainkfE) {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkfE);\n        } else {\n            this.index.set(PrintGrainkfE.tagName, this.nodes.size);\n            this.addNode(printGrainkfE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkfE.\n     */\n    removePrintGrainkfE() {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkfE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTSsos or undefined.\n     */\n    getPrintTSsos(): PrintTSsos | undefined {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTSsos;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTSsos The printTSsos.\n     */\n    setPrintTSsos(printTSsos: PrintTSsos) {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTSsos);\n        } else {\n            this.index.set(PrintTSsos.tagName, this.nodes.size);\n            this.addNode(printTSsos);\n        }\n    }\n\n    /**\n     * Remove the printTSsos.\n     */\n    removePrintTSsos() {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTSsos.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainedSpeciesProfile or undefined.\n     */\n    getPrintGrainedSpeciesProfile(): PrintGrainedSpeciesProfile | undefined {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainedSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainedSpeciesProfile The printGrainedSpeciesProfile.\n     */\n    setPrintGrainedSpeciesProfile(printGrainedSpeciesProfile: PrintGrainedSpeciesProfile) {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainedSpeciesProfile);\n        } else {\n            this.index.set(PrintGrainedSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printGrainedSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printGrainedSpeciesProfile.\n     */\n    removePrintGrainedSpeciesProfile() {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainedSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainTransitionStateFlux or undefined.\n     */\n    getPrintGrainTransitionStateFlux(): PrintGrainTransitionStateFlux | undefined {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainTransitionStateFlux The printGrainTransitionStateFlux.\n     */\n    setPrintGrainTransitionStateFlux(printGrainTransitionStateFlux: PrintGrainTransitionStateFlux) {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainTransitionStateFlux);\n        } else {\n            this.index.set(PrintGrainTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printGrainTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printGrainTransitionStateFlux.\n     */\n    removePrintGrainTransitionStateFlux() {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorSize or undefined.\n     */\n    getPrintReactionOperatorSize(): PrintReactionOperatorSize | undefined {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorSize;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorSize The printReactionOperatorSize.\n     */\n    setPrintReactionOperatorSize(printReactionOperatorSize: PrintReactionOperatorSize) {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorSize);\n        } else {\n            this.index.set(PrintReactionOperatorSize.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorSize);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorSize.\n     */\n    removePrintReactionOperatorSize() {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The printSpeciesProfile or undefined.\n     */\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printSpeciesProfile The printSpeciesProfile.\n     */\n    setPrintSpeciesProfile(printSpeciesProfile: PrintSpeciesProfile) {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printSpeciesProfile);\n        } else {\n            this.index.set(PrintSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printSpeciesProfile.\n     */\n    removePrintSpeciesProfile() {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printPhenomenologicalEvolution or undefined.\n     */\n    getPrintPhenomenologicalEvolution(): PrintPhenomenologicalEvolution | undefined {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintPhenomenologicalEvolution;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printPhenomenologicalEvolution The printPhenomenologicalEvolution.\n     */\n    setPrintPhenomenologicalEvolution(printPhenomenologicalEvolution: PrintPhenomenologicalEvolution) {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printPhenomenologicalEvolution);\n        } else {\n            this.index.set(PrintPhenomenologicalEvolution.tagName, this.nodes.size);\n            this.addNode(printPhenomenologicalEvolution);\n        }\n    }\n\n    /**\n     * Remove the printPhenomenologicalEvolution.\n     */\n    removePrintPhenomenologicalEvolution() {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintPhenomenologicalEvolution.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTunnelingCoefficients or undefined.\n     */\n    getPrintTunnelingCoefficients(): PrintTunnelingCoefficients | undefined {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTunnelingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTunnelingCoefficients The printTunnelingCoefficients.\n     */\n    setPrintTunnelingCoefficients(printTunnelingCoefficients: PrintTunnelingCoefficients) {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTunnelingCoefficients);\n        } else {\n            this.index.set(PrintTunnelingCoefficients.tagName, this.nodes.size);\n            this.addNode(printTunnelingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printTunnelingCoefficients.\n     */\n    removePrintTunnelingCoefficients() {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTunnelingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCrossingCoefficients or undefined.\n     */\n    getPrintCrossingCoefficients(): PrintCrossingCoefficients | undefined {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCrossingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCrossingCoefficients The printCrossingCoefficients.\n     */\n    setPrintCrossingCoefficients(printCrossingCoefficients: PrintCrossingCoefficients) {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCrossingCoefficients);\n        } else {\n            this.index.set(PrintCrossingCoefficients.tagName, this.nodes.size);\n            this.addNode(printCrossingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printCrossingCoefficients.\n     */\n    removePrintCrossingCoefficients() {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCrossingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The testDOS or undefined.\n     */\n    getTestDOS(): TestDOS | undefined {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testDOS The testDOS.\n     */\n    setTestDOS(testDOS: TestDOS) {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testDOS);\n        } else {\n            this.index.set(TestDOS.tagName, this.nodes.size);\n            this.addNode(testDOS);\n        }\n    }\n\n    /**\n     * Remove the testDOS.\n     */\n    removeTestDOS() {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The testRateConstant or undefined.\n     */\n    getTestRateConstants(): TestRateConstants | undefined {\n        let i = this.index.get(TestRateConstants.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestRateConstants;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testRateConstant The testRateConstant.\n     */\n    setTestRateConstants(testRateConstant: TestRateConstants) {\n        let i = this.index.get(TestRateConstants.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testRateConstant);\n        } else {\n            this.index.set(TestRateConstants.tagName, this.nodes.size);\n            this.addNode(testRateConstant);\n        }\n    }\n\n    /**\n     * Remove the testRateConstant.\n     */\n    removeTestRateConstants() {\n        let i = this.index.get(TestRateConstants.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestRateConstants.tagName);\n        }\n    }\n\n    /**\n     * @returns The useTheSameCellNumberForAllConditions or undefined.\n     */\n    getUseTheSameCellNumberForAllConditions(): UseTheSameCellNumberForAllConditions | undefined {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as UseTheSameCellNumberForAllConditions;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param useTheSameCellNumberForAllConditions The useTheSameCellNumberForAllConditions.\n     */\n    setUseTheSameCellNumberForAllConditions(useTheSameCellNumberForAllConditions: UseTheSameCellNumberForAllConditions) {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, useTheSameCellNumberForAllConditions);\n        } else {\n            this.index.set(UseTheSameCellNumberForAllConditions.tagName, this.nodes.size);\n            this.addNode(useTheSameCellNumberForAllConditions);\n        }\n    }\n\n    /**\n     * Remove the useTheSameCellNumberForAllConditions.\n     */\n    removeUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(UseTheSameCellNumberForAllConditions.tagName);\n        }\n    }\n\n    /**\n     * @returns The hideInactive or undefined.\n     */\n    getHideInactive(): HideInactive | undefined {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HideInactive;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param hideInactive The hideInactive.\n     */\n    setHideInactive(hideInactive: HideInactive) {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hideInactive);\n        } else {\n            this.index.set(HideInactive.tagName, this.nodes.size);\n            this.addNode(hideInactive);\n        }\n    }\n\n    /**\n     * Remove the hideInactive.\n     */\n    removeHideInactive() {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(HideInactive.tagName);\n        }\n    }\n\n    /**\n     * @returns The ForceMacroDetailedBalance or undefined.\n     */\n    getForceMacroDetailedBalance(): ForceMacroDetailedBalance | undefined {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ForceMacroDetailedBalance;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param forceMacroDetailedBalance The forceMacroDetailedBalance.\n     */\n    setForceMacroDetailedBalance(forceMacroDetailedBalance: ForceMacroDetailedBalance) {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, forceMacroDetailedBalance);\n        } else {\n            this.index.set(ForceMacroDetailedBalance.tagName, this.nodes.size);\n            this.addNode(forceMacroDetailedBalance);\n        }\n    }\n\n    /**\n     * Remove the forceMacroDetailedBalance.\n     */\n    removeForceMacroDetailedBalance() {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ForceMacroDetailedBalance.tagName);\n        }\n    }\n\n    /**\n     * @returns The calcMethod or undefined.\n     */\n    getCalcMethod(): CalcMethod | undefined {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalcMethod;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calcMethod The calcMethod.\n     */\n    setCalcMethod(calcMethod: CalcMethod) {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calcMethod);\n        } else {\n            this.index.set(CalcMethod.tagName, this.nodes.size);\n            this.addNode(calcMethod);\n        }\n    }\n\n    /**\n     * Remove the calcMethod.\n     */\n    removeCalcMethod() {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalcMethod.tagName);\n        }\n    }\n\n    /**\n     * @returns The eigenvalues or undefined.\n     */\n    getEigenvalues(): Eigenvalues | undefined {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param eigenvalues The eigenvalues.\n     */\n    setEigenvalues(eigenvalues: Eigenvalues) {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, eigenvalues);\n        } else {\n            this.index.set(Eigenvalues.tagName, this.nodes.size);\n            this.addNode(eigenvalues);\n        }\n    }\n\n    /**\n     * Remove the eigenvalues.\n     */\n    removeEigenvalues() {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Eigenvalues.tagName);\n        }\n    }\n\n    /**\n     * @returns The shortestTimeOfInterest.\n     */\n    getShortestTimeOfInterest(): ShortestTimeOfInterest | undefined {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ShortestTimeOfInterest;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param shortestTimeOfInterest The shortestTimeOfInterest.\n     */\n    setShortestTimeOfInterest(shortestTimeOfInterest: ShortestTimeOfInterest) {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, shortestTimeOfInterest);\n        } else {\n            this.index.set(ShortestTimeOfInterest.tagName, this.nodes.size);\n            this.addNode(shortestTimeOfInterest);\n        }\n    }\n\n    /**\n     * Remove the shortestTimeOfInterest.\n     */\n    removeShortestTimeOfInterest() {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ShortestTimeOfInterest.tagName);\n        }\n    }\n\n    /**\n     * @returns The MaximumEvolutionTime.\n     */\n    getMaximumEvolutionTime(): MaximumEvolutionTime | undefined {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MaximumEvolutionTime;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param MaximumEvolutionTime The MaximumEvolutionTime.\n     */\n    setMaximumEvolutionTime(MaximumEvolutionTime: MaximumEvolutionTime) {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, MaximumEvolutionTime);\n        } else {\n            this.index.set(MaximumEvolutionTime.tagName, this.nodes.size);\n            this.addNode(MaximumEvolutionTime);\n        }\n    }\n\n    /**\n     * Remove the MaximumEvolutionTime.\n     */\n    removeMaximumEvolutionTime() {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MaximumEvolutionTime.tagName);\n        }\n    }\n\n    /**\n     * @returns The automaticallySetMaxEne.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automaticallySetMaxEne.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * Remove the automaticallySetMaxEne.\n     */\n    removeAutomaticallySetMaxEne() {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(AutomaticallySetMaxEne.tagName);\n        }\n    }\n\n    /**\n     * @returns The diagramEnergyOffset.\n     */\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    setDiagramEnergyOffset(diagramEnergyOffset: DiagramEnergyOffset) {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, diagramEnergyOffset);\n        } else {\n            this.index.set(DiagramEnergyOffset.tagName, this.nodes.size);\n            this.addNode(diagramEnergyOffset);\n        }\n    }\n\n    /**\n     * Remove the diagramEnergyOffset.\n     */\n    removeDiagramEnergyOffset() {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(DiagramEnergyOffset.tagName);\n        }\n    }\n\n    /**\n     * @returns The testMicroRates or undefined.\n     */\n    getTestMicroRates(): TestMicroRates | undefined {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testMicroRates The testMicroRates.\n     */\n    setTestMicroRates(testMicroRates: TestMicroRates) {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testMicroRates);\n        } else {\n            this.index.set(TestMicroRates.tagName, this.nodes.size);\n            this.addNode(testMicroRates);\n        }\n    }\n\n    /**\n     * Remove the testMicroRates.\n     */\n    removeTestMicroRates() {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestMicroRates.tagName);\n        }\n    }\n\n}","import { Conditions } from \"./conditions.js\";\nimport { Control } from \"./control.js\";\nimport { ModelParameters } from \"./modelParameters.js\";\nimport { Molecule } from \"./molecule.js\";\nimport { Reaction } from \"./reaction.js\";\nimport { NodeWithNodes, StringNode } from \"./xml.js\";\n\n/**\n * The title.\n */\nexport class Title extends StringNode {\n\n    static readonly tagName: string = \"me:title\";\n\n    /**\n     * @param value \n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Title.tagName, value);\n    }\n\n}\n\n\n/**\n * A class for representing a \"moleculeList\".\n * In the XML, a \"moleculeList\" node is a child node of the \"me:mesmer\" node and has \"molecule\" node children.\n */\nexport class MoleculeList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"moleculeList\";\n\n    /**\n     * The index. The keys are the molecule ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecules?: Molecule[]) {\n        super(attributes, MoleculeList.tagName);\n        this.index = new Map();\n        if (molecules != undefined) {\n            molecules.forEach(molecule => {\n                this.nodes.set(this.nodes.size, molecule);\n                this.index.set(molecule.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */\n    getMolecule(id: string): Molecule | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Molecule;\n    }\n\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */\n    removeMolecule(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */\n    addMolecule(molecule: Molecule): void {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log('Replaced molecule with id ' + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"reactionList\".\n * In the XML, a \"reactionList\" node is a child node of a \"me:mesmer\" node and has \"reaction\" node children.\n */\nexport class ReactionList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactionList\";\n\n    /**\n     * The index. The keys are the reaction ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */\n    constructor(attributes: Map<string, string>, reactions?: Reaction[]) {\n        super(attributes, ReactionList.tagName);\n        this.index = new Map();\n        if (reactions != undefined) {\n            reactions.forEach(reaction => {\n                this.nodes.set(this.nodes.size, reaction);\n                this.index.set(reaction.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */\n    getReaction(id: string): Reaction | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Reaction;\n    }\n\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */\n    removeReaction(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */\n    addReaction(reaction: Reaction): void {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log('Replaced reaction with id ' + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * The \"me:mesmer\" node contains a \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \n * \"me:modelParameters\" and \"me:control\".\n */\nexport class Mesmer extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:mesmer\";\n\n    /**\n     * The header of the XML file.\n     */\n    static header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeList The molecule list.\n     * @param reactionList The reaction list.\n     * @param conditions The conditions.\n     * @param modelParameters The model parameters.\n     * @param control The control.\n     */\n    constructor(attributes: Map<string, string>, title?: Title, moleculeList?: MoleculeList, reactionList?: ReactionList,\n        conditions?: Conditions, modelParameters?: ModelParameters, control?: Control) {\n        super(attributes, Mesmer.tagName);\n        this.index = new Map();\n        if (title != undefined) {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (moleculeList != undefined) {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        if (conditions != undefined) {\n            this.index.set(Conditions.tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n        if (modelParameters != undefined) {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        if (control != undefined) {\n            this.index.set(Control.tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n\n    /**\n     * @returns The title.\n     */\n    getTitle() {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Title;\n    }\n\n    /**\n     * Set the title.\n     * @param title The title.\n     */\n    setTitle(title: Title) {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, title);\n        } else {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n\n    /**\n     * @returns The molecule list.\n     */\n    getMoleculeList() {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as MoleculeList;\n    }\n\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */\n    setMoleculeList(moleculeList: MoleculeList) {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, moleculeList);\n        } else {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n\n    /**\n     * @returns The reaction list.\n     */\n    getReactionList() {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ReactionList;\n    }\n\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */\n    setReactionList(reactionList: ReactionList) {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, reactionList);\n        } else {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n\n    /**\n     * @returns The conditions.\n     */\n    getConditions() {\n        let i: number | undefined = this.index.get(Conditions.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Conditions;\n    }\n\n    /**\n     * Set the conditions.\n     * @param conditions The conditions.\n     */\n    setConditions(conditions: Conditions) {\n        let i: number | undefined = this.index.get(Conditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, conditions);\n        } else {\n            this.index.set(Conditions.tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n\n    /**\n     * @returns The model parameters.\n     */\n    getModelParameters() {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ModelParameters;\n    }\n\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */\n    setModelParameters(modelParameters: ModelParameters) {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, modelParameters);\n        } else {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n\n    /**\n     * @returns The control.\n     */\n    getControl() {\n        let i: number | undefined = this.index.get(Control.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Control;\n    }\n\n    /**\n     * Set the control.\n     * @param control The control.\n     */\n    setControl(control: Control) {\n        let i: number | undefined = this.index.get(Control.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, control);\n        } else {\n            this.index.set(Control.tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n}"],"names":["$22c7fca7c69edc03$var$mesmer","$dcf293d9ee452407$export$3988ae62b71be9a3","map","key","has","Error","get","$dcf293d9ee452407$export$4323cc4280d5be7","array","delimiter","undefined","value","toString","join","$dcf293d9ee452407$export$8cfbaad830aa9e0a","s","r","i","length","$dcf293d9ee452407$export$e90fb89750dba83f","push","parseFloat","isNaN","Number","$2cda23d1e44619db$export$cd7f480d6b8286c3","id","e","document","getElementById","parentNode","removeChild","$2cda23d1e44619db$export$8b2cd46c11844202","content","buttonLabel","buttonFontSize","boundary","marginLeft","marginTop","marginBottom","marginRight","level","contentDivId","contentDivClassName","contentDiv","$2cda23d1e44619db$export$331ff980f0d45cff","className","button","createElement","innerText","addEventListener","includes","style","fontSize","Object","assign","appendChild","$2cda23d1e44619db$var$toggleCollapsible","classList","toggle","nextElementSibling","display","$2cda23d1e44619db$export$4e9ec2b27757d9dd","type","func","labelContent","inputFontsize","labelFontsize","input","$2cda23d1e44619db$export$d80fffb1deb3b97e","onchange","$2cda23d1e44619db$export$d43d96a9a8ad3e51","label","$2cda23d1e44619db$export$f2839682b8c07f35","htmlFor","container","$2cda23d1e44619db$export$78253536c0178a32","$2cda23d1e44619db$export$ff083c49da8fe0f9","attributes","tagName","minSize","width","$2cda23d1e44619db$export$fdd146df37959fe8","$2cda23d1e44619db$export$b89bf4b169286865","options","name","selectElement","forEach","option","optionElement","text","$2cda23d1e44619db$export$9b6d6ca62970729f","textContent","div","fontsize","$6648a11f147a5c05$export$91e73a91db22e6a2","element","el","getElementsByTagName","$6648a11f147a5c05$export$4e07613bf412feb7","cn","childNodes","$6648a11f147a5c05$export$13cb40e9b656ab9e","node","nodeValue","$6648a11f147a5c05$export$433c819efd6b1ea5","firstChildNode","trim","$6648a11f147a5c05$export$3288d34c523a1192","constructor","toXML","padding","$6648a11f147a5c05$export$ca4ceee82ec565dc","k","v","$6648a11f147a5c05$export$8f67221c6fb2ad09","$6648a11f147a5c05$export$dad497fe1f6e27c0","$6648a11f147a5c05$export$82583fad49645fc9","$6648a11f147a5c05$export$38d8ebe2767f8865","values","setDelimiter","replaceAll","$6648a11f147a5c05$export$bd431b64ad3b0433","nodes","Map","addNode","set","size","pad","padding1","padValue","startTag","$6648a11f147a5c05$export$2cd488e9ab180ce2","$6648a11f147a5c05$export$fe94072fee8a6976","attributeNames","getAttributeNames","attributeName","attributeValue","getAttribute","$6648a11f147a5c05$export$b7531b8ff18dc588","xml","$7cb8c0739b32549c$export$80986e6afdd7e0cb","elementType","$7cb8c0739b32549c$export$9cea715eceba39a0","atoms","atom","$7cb8c0739b32549c$export$153327fc99ac0c53","s_atomRefs2","s_id","s_order","atomRefs2","setAtomRefs2","getId","setId","getOrder","order","setOrder","$7cb8c0739b32549c$export$746fba2e30d93fe6","bonds","bond","getBond","getBonds","setBond","addBond","removeBond","splice","delete","getBondIds","bondIds","Set","add","$7cb8c0739b32549c$export$d29b345ea2be5072","s_units","updateUnits","units","existingUnits","$7cb8c0739b32549c$export$9f93a3fdf2490572","console","log","$7cb8c0739b32549c$export$41b04b3a73e7216d","s_dictRef","property","dictRef","getProperty","setProperty","$7cb8c0739b32549c$export$95174cf0748f45cd","setUnits","$7cb8c0739b32549c$export$1288989e9be37590","$7cb8c0739b32549c$export$2762c8fbc03043ca","$7cb8c0739b32549c$export$984abe26ded13ee0","$7cb8c0739b32549c$export$a3772f6eb527275b","$7cb8c0739b32549c$export$22995ecd2bdeb2","$7cb8c0739b32549c$export$4e0d1ad7ad6a0802","properties","index","$7cb8c0739b32549c$export$16fc56ab40b12b45","s_bathGas","s_lower","s_upper","s_stepsize","getBathGas","setBathGas","bathGas","getUnits","getLower","setLower","lower","getUpper","setUpper","upper","getStepsize","setStepsize","stepsize","setValue","$7cb8c0739b32549c$export$499950da20810ac9","deltaEDowns","deltaEDown","getDeltaEDowns","setDeltaEDowns","clear","getDeltaEDown","setDeltaEDown","addDeltaEDown","$7cb8c0739b32549c$export$bbdce6c921702068","s_xsi_type","getXsiType","setXsiType","xsiType","$7cb8c0739b32549c$export$aef8e5ad5552fd72","bondRef","$7cb8c0739b32549c$export$86ca5149fcde8feb","s_angle","s_potential","angle","potential","getAngle","setAngle","getPotential","setPotential","$7cb8c0739b32549c$export$9b8e857b9a081d2","formats","s_format","s_expansionSize","s_useSineTerms","potentialPoints","format","p","expansionSize","useSineTerms","getFormat","setFormat","getExpansionSize","setExpansionSize","getUseSineTerms","setUseSineTerms","getPotentialPoint","setPotentialPoint","setPotentialPoints","addPotentialPoint","removePotentialPoint","$7cb8c0739b32549c$export$9513c16afdf7d852","$7cb8c0739b32549c$export$ae98b7db6376163d","hinderedRotorPotential","periodicity","getBondRef","setBondRef","getHinderedRotorPotential","setHinderedRotorPotential","getPeriodicity","setPeriodicity","$7cb8c0739b32549c$export$97850fe2f2906f00","$7cb8c0739b32549c$export$3da9759ad07746a3","s_description","s_active","energyTransferModel","dOSCMethod","extraDOSCMethod","reservoirSize","getDescription","setDescription","description","getActive","active","setActive","getLabel","getAttributesAsString","Array","from","getProperties","setProperties","getAtoms","getEnergyTransferModel","setEnergyTransferModel","getDOSCMethod","setDOSCMethod","getExtraDOSCMethod","setExtraDOSCMethod","getReservoirSize","setReservoirSize","getEnergy","$381c11e38cac5410$export$e8a062bb2fc9e2ba","ref","role","setRole","$381c11e38cac5410$export$dcfd4302d04b7fb6","molecule","getMolecule","$381c11e38cac5410$export$264ad599d7cef668","$381c11e38cac5410$export$145c1ed87b1a2216","$381c11e38cac5410$export$38ce90ac8b004d85","$381c11e38cac5410$export$1bdc69d2439d749d","$381c11e38cac5410$export$8d95dd32819bc86c","$381c11e38cac5410$export$d08982dd841d496f","$381c11e38cac5410$export$6fa70ee10f356b6","$381c11e38cac5410$export$191e95ebb11cc88","xsiType2","preExponential","activationEnergy","tInfinity","nInfinity","getPreExponential","setPreExponential","getActivationEnergy","setActivationEnergy","getTInfinity","setTInfinity","getNInfinity","setNInfinity","$381c11e38cac5410$export$c3cf6f96dac11421","s_name","getName","setName","$381c11e38cac5410$export$284227145ed02b04","$381c11e38cac5410$export$d2ae4167a30cf6bb","reactants","products","tunneling","transitionStates","mCRCMethod","excessReactantConc","reactantsIndex","productsIndex","transitionStatesIndex","reactant","product","transitionState","addToIndex","getReactants","setReactants","getReactant","addReactant","removeReactant","getProducts","setProducts","getProduct","addProduct","removeProduct","getTunneling","setTunneling","getTransitionStates","setTransitionStates","getTransitionState","addTransitionState","removeTransitionState","getMCRCMethod","setMCRCMethod","getExcessReactantConc","setExcessReactantConc","getReactantsLabel","getProductsLabel","getReactantsEnergy","molecules","reduce","a","b","getProductsEnergy","nodeIndex","$d2b4a77a4d44562c$export$479ac392a7fb4419","ctx","strokeStyle","strokewidth","x0","y0","x1","y1","font","th","energyString","x_centre","$d2b4a77a4d44562c$export$bec150f75a9b8f11","tw","$d2b4a77a4d44562c$export$37827d046293d309","$d2b4a77a4d44562c$export$819db45aec5fcbe5","x2","y2","beginPath","lineWidth","moveTo","lineTo","stroke","colour","x","y","save","translate","scale","fillStyle","fillText","restore","measureText","$613b909b2797b099$export$b33a132661f4be58","moleculeID","$613b909b2797b099$export$ea088383ce76fc5a","s_ref1","s_ref2","s_refReaction","s_error","getRef1","setRef1","ref1","getRef2","setRef2","ref2","getRefReaction","setRefReaction","refReaction","getError","error","setError","$613b909b2797b099$export$c291f4faacd745a6","s_ref","s_yieldTime","getRef","setRef","getYieldTime","yieldTime","setYieldTime","$613b909b2797b099$export$ed9dfbc127680fd1","s_EigenvalueID","getEigenvalueID","setEigenvalueID","EigenvalueID","$613b909b2797b099$export$284227145ed02b04","s_percent","getPercent","setPercent","percent","$613b909b2797b099$export$3fe97ecb6b172244","precisions","s_P","s_T","s_precision","s_excessReactantConc","s_percentExcessReactantConc","experimentRate","experimentalEigenvalue","getP","NaN","setP","getT","t","setT","getPrecision","setPrecision","precision","removeBathGas","getExperimentRate","setExperimentRate","removeExperimentRate","getPercentExcessReactantConc","setPercentExcessReactantConc","percentExcessReactantConc","$613b909b2797b099$export$3be0efe793283834","pTpairs","pTpair","getPTpair","setPTpair","addPTpair","setPTpairs","removePTpair","$613b909b2797b099$export$363c7374d425f4ad","bathGases","pTs","bathGasesIndex","getBathGases","addBathGas","warn","getPTs","setPTs","$9a96fbd0df1ae67b$export$26e33f0df9ce919d","$9a96fbd0df1ae67b$export$576b56ca6e34780b","$9a96fbd0df1ae67b$export$aa73446724166cdb","$9a96fbd0df1ae67b$export$f9c72965e4ddfc8e","$9a96fbd0df1ae67b$export$77f098867dc64198","grainSize","automaticallySetMaxEne","energyAboveTheTopHill","maxTemperature","getGrainSize","setGrainSize","getAutomaticallySetMaxEne","setAutomaticallySetMaxEne","getEnergyAboveTheTopHill","setEnergyAboveTheTopHill","getMaxTemperature","setMaxTemperature","$d0ae5bc6e682c29f$export$7d9247c9879133fb","$d0ae5bc6e682c29f$export$60b233651e162b60","$d0ae5bc6e682c29f$export$7e63e5104be309ff","$d0ae5bc6e682c29f$export$a915db169f144f37","$d0ae5bc6e682c29f$export$e7fff349901f700d","$d0ae5bc6e682c29f$export$d23243bda4dfae2b","$d0ae5bc6e682c29f$export$55888ef4e813a34d","$d0ae5bc6e682c29f$export$f8d814a406a0ff5b","$d0ae5bc6e682c29f$export$3627f2b606ffd3cb","$d0ae5bc6e682c29f$export$c5481d114fddc81c","$d0ae5bc6e682c29f$export$ec7c00ae1b17b2ab","$d0ae5bc6e682c29f$export$8420ab6988728a65","$d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1","$d0ae5bc6e682c29f$export$9f7939759d8efd9f","$d0ae5bc6e682c29f$export$fc99460819e23ac5","$d0ae5bc6e682c29f$export$2f2eaac8983031ef","$d0ae5bc6e682c29f$export$a3d7e677521f681f","$d0ae5bc6e682c29f$export$724a5a49739f4b4a","$d0ae5bc6e682c29f$export$5d7dbeba4bf49655","$d0ae5bc6e682c29f$export$6ffea14bdffd427f","$d0ae5bc6e682c29f$export$9d51752a8549e2d6","$d0ae5bc6e682c29f$export$f0bfd84d03c3a22d","$d0ae5bc6e682c29f$export$2453e311f702d9c7","$d0ae5bc6e682c29f$export$421603058c6718db","$d0ae5bc6e682c29f$export$b51d7314540831ed","$d0ae5bc6e682c29f$export$576b56ca6e34780b","$d0ae5bc6e682c29f$export$159b5d3263f1049a","$d0ae5bc6e682c29f$export$1f37c7c73e401f31","tMin","tMax","tStep","getTmin","setTmin","getTmax","setTmax","getTstep","setTstep","$d0ae5bc6e682c29f$export$7a7fa4424cb20976","getCalculateRateCoefficientsOnly","setCalculateRateCoefficientsOnly","calculateRateCoefficientsOnly","removeCalculateRateCoefficientsOnly","getPrintCellDOS","setPrintCellDOS","printCellDOS","removePrintCellDOS","getPrintCellTransitionStateFlux","setPrintCellTransitionStateFlux","printCellTransitionStateFlux","removePrintCellTransitionStateFlux","getPrintReactionOperatorColumnSums","setPrintReactionOperatorColumnSums","printReactionOperatorColumnSums","removePrintReactionOperatorColumnSums","getPrintGrainBoltzmann","setPrintGrainBoltzmann","printGrainBoltzmann","removePrintGrainBoltzmann","getPrintGrainDOS","setPrintGrainDOS","printGrainDOS","removePrintGrainDOS","getPrintGrainkbE","setPrintGrainkbE","printGrainkbE","removePrintGrainkbE","getPrintGrainkfE","setPrintGrainkfE","printGrainkfE","removePrintGrainkfE","getPrintTSsos","setPrintTSsos","printTSsos","removePrintTSsos","getPrintGrainedSpeciesProfile","setPrintGrainedSpeciesProfile","printGrainedSpeciesProfile","removePrintGrainedSpeciesProfile","getPrintGrainTransitionStateFlux","setPrintGrainTransitionStateFlux","printGrainTransitionStateFlux","removePrintGrainTransitionStateFlux","getPrintReactionOperatorSize","setPrintReactionOperatorSize","printReactionOperatorSize","removePrintReactionOperatorSize","getPrintSpeciesProfile","setPrintSpeciesProfile","printSpeciesProfile","removePrintSpeciesProfile","getPrintPhenomenologicalEvolution","setPrintPhenomenologicalEvolution","printPhenomenologicalEvolution","removePrintPhenomenologicalEvolution","getPrintTunnelingCoefficients","setPrintTunnelingCoefficients","printTunnelingCoefficients","removePrintTunnelingCoefficients","getPrintCrossingCoefficients","setPrintCrossingCoefficients","printCrossingCoefficients","removePrintCrossingCoefficients","getTestDOS","setTestDOS","testDOS","removeTestDOS","getTestRateConstants","setTestRateConstants","testRateConstant","removeTestRateConstants","getUseTheSameCellNumberForAllConditions","setUseTheSameCellNumberForAllConditions","useTheSameCellNumberForAllConditions","removeUseTheSameCellNumberForAllConditions","getHideInactive","setHideInactive","hideInactive","removeHideInactive","getForceMacroDetailedBalance","setForceMacroDetailedBalance","forceMacroDetailedBalance","removeForceMacroDetailedBalance","getCalcMethod","setCalcMethod","calcMethod","removeCalcMethod","getEigenvalues","setEigenvalues","eigenvalues","removeEigenvalues","getShortestTimeOfInterest","setShortestTimeOfInterest","shortestTimeOfInterest","removeShortestTimeOfInterest","getMaximumEvolutionTime","setMaximumEvolutionTime","MaximumEvolutionTime","removeMaximumEvolutionTime","removeAutomaticallySetMaxEne","getDiagramEnergyOffset","setDiagramEnergyOffset","diagramEnergyOffset","removeDiagramEnergyOffset","getTestMicroRates","setTestMicroRates","testMicroRates","removeTestMicroRates","$762f625c179c0279$export$f99233281efd08a0","$762f625c179c0279$export$19d70f3647dee606","removeMolecule","addMolecule","$762f625c179c0279$export$44466a39ca846289","reactions","reaction","getReaction","removeReaction","addReaction","$762f625c179c0279$export$692079bb871c6039","header","title","moleculeList","reactionList","conditions","modelParameters","control","getTitle","setTitle","getMoleculeList","setMoleculeList","getReactionList","setReactionList","getConditions","setConditions","getModelParameters","setModelParameters","getControl","setControl","$22c7fca7c69edc03$var$fontSize1","$22c7fca7c69edc03$var$fontSize2","$22c7fca7c69edc03$var$fontSize3","$22c7fca7c69edc03$var$level0","$22c7fca7c69edc03$var$level1","$22c7fca7c69edc03$var$level2","$22c7fca7c69edc03$var$level3","$22c7fca7c69edc03$var$level4","$22c7fca7c69edc03$var$level5","$22c7fca7c69edc03$var$boundary1","$22c7fca7c69edc03$var$removeString","$22c7fca7c69edc03$var$unitsEnergy","$22c7fca7c69edc03$var$unitsRotConsts","$22c7fca7c69edc03$var$molecules","$22c7fca7c69edc03$var$maxMoleculeEnergy","Infinity","$22c7fca7c69edc03$var$minMoleculeEnergy","$22c7fca7c69edc03$var$reactions","$22c7fca7c69edc03$var$load","inputElement","files","file","inputFilename","reader","FileReader","start","contents","onload","target","result","blob","slice","readAsText","xmlDiv","xmlHeading","xmlPre","$22c7fca7c69edc03$var$parse","xml_mesmer","xml_title","titleNode","titleElement","titleString","titleId","titleDiv","event","HTMLInputElement","insertBefore","moleculesElement","moleculesDivId","moleculesDiv","$22c7fca7c69edc03$var$processMoleculeList","moleculeListDiv","xml_moleculeList","moleculeListTagNames","nodeName","xml_molecules","atomsNode","bondsNode","moleculeDiv","moleculeTagNames","cns","j","xml_atomArrays","xml_atomArray","xml_atoms","xml_bondArrays","xml_bondArray","xml_bonds","xml_PLs","plDiv","collapsibleDiv","pl","xml_Ps","$22c7fca7c69edc03$var$processProperty","xml_ETMs","$22c7fca7c69edc03$var$processEnergyTransferModel","etm","margin","xml_deltaEDowns","etmDiv","inputString","inputDiv","$22c7fca7c69edc03$export$b1e4cbf5b56e0e21","unitsLabel","$22c7fca7c69edc03$var$margin75","xml_DOSCMethod","$22c7fca7c69edc03$var$processDOSCMethod","HTMLSelectElement","xml_ExtraDOSCMethod","extraDOSCMethodDiv","extraDOSCMethodCollapsibleDiv","xml_bondRefs","xml_hinderedRotorPotentials","hinderedRotorPotentialAttributes","hinderedRotorPotentialDiv","hinderedRotorPotentialCollapsibleDiv","formatLabel","$22c7fca7c69edc03$var$addAnyUnits","expansionSizeLabel","expansionSizeInputElement","parseInt","alert","useSineTermsLabel","useSineTermsInput","checked","potentialPointsDiv","potentialPointContentDivId","potentialPointCollapsibleDiv","xml_potentialPoints","potentialPoint","potentialPointDiv","angleLabel","angleInputElement","potentialLabel","potentialInputElement","xml_periodicities","valueString","xml_ReservoirSize","molstarDiv","reactionsElement","reactionsDivId","reactionsDiv","$22c7fca7c69edc03$var$processReactionList","reactionListDiv","xml_reactionList","reactionListTagNames","xml_reactions","reactionDiv","reactionAttributes","reactionTagNames","xml_reactants","reactantsDiv","reactantCollapsibleDiv","xml_products","productsDiv","querySelector","productCollapsibleDiv","xml_tunneling","xml_transitionStates","transitionStatesDiv","transitionStatesCollapsibleDiv","xml_MCRCMethod","mCRCMethodDiv","mCRCMethodAttributes","xml_preExponential","preExponentialAttributes","eventTarget","xml_activationEnergy","activationEnergyAttributes","xml_tInfinity","tInfinityAttributes","xml_nInfinity","nInfinityAttributes","mCRCMethodCollapsibleDiv","mCRCMethodLabel","xml_excessReactantConc","reactionCollapsibleDiv","$22c7fca7c69edc03$var$displayReactionsDiagram","conditionsElement","conditionsDivId","conditionsDiv","$22c7fca7c69edc03$var$processConditions","xml_conditions","bathGasesDiv","addBathGasButton","containerDiv","bathGasLabel","keys","removeButton","xml_bathGases","children","filter","child","pTsDiv","addButton","pTPairAttributes","pTPair","pTPairIndex","pTPairDiv","$22c7fca7c69edc03$var$addP","$22c7fca7c69edc03$var$addT","addDetailsButton","$22c7fca7c69edc03$var$addString","detailsDiv","$22c7fca7c69edc03$var$addExcessReactantConc","$22c7fca7c69edc03$var$addPercentExcessReactantConc","$22c7fca7c69edc03$var$addPrecision","$22c7fca7c69edc03$var$addBathGas","experimentRateDiv","addMultipleButton","pTPairsArray","split","pTPairArray","xml_PTss","xml_PTPairs","xml_bathGass","bathGasValue","xml_experimentRates","modelParametersElement","modelParametersDivId","modelParametersDiv","$22c7fca7c69edc03$var$processModelParameters","xml_modelParameters","xml_grainSizes","grainSizeAttributes","grainSizeDiv","grainSizeInputDiv","xml_automaticallySetMaxEnes","automaticallySetMaxEneAttributes","automaticallySetMaxEneInputDiv","xml_energyAboveTheTopHills","energyAboveTheTopHillAttributes","energyAboveTheTopHillInputDiv","xml_maxTemperatures","maxTemperatureAttributes","maxTemperatureInputDiv","controlElement","controlDivId","controlDiv","$22c7fca7c69edc03$var$processControl","testMicroRatesAttributes","maximumEvolutionTime","controlsDiv","xml_control","calculateRateCoefficientsOnlyDiv","xml_calculateRateCoefficientsOnly","calculateRateCoefficientsOnlyLabel","calculateRateCoefficientsOnlyInput","printCellDOSDiv","xml_printCellDOS","printCellDOSLabel","printCellDOSInput","printCellTransitionStateFluxDiv","xml_printCellTransitionStateFlux","printCellTransitionStateFluxLabel","printCellTransitionStateFluxInput","printReactionOperatorColumnSumsDiv","xml_printReactionOperatorColumnSums","printReactionOperatorColumnSumsLabel","printReactionOperatorColumnSumsInput","printGrainBoltzmannDiv","xml_printGrainBoltzmann","printGrainBoltzmannLabel","printGrainBoltzmannInput","printGrainDOSDiv","xml_printGrainDOS","printGrainDOSLabel","printGrainDOSInput","printGrainkbEDiv","xml_printGrainkbE","printGrainkbELabel","printGrainkbEInput","printGrainkfEDiv","xml_printGrainkfE","printGrainkfELabel","printGrainkfEInput","printTSsosDiv","xml_printTSsos","printTSsosLabel","printTSsosInput","printGrainedSpeciesProfileDiv","xml_printGrainedSpeciesProfile","printGrainedSpeciesProfileLabel","printGrainedSpeciesProfileInput","printGrainTransitionStateFluxDiv","xml_printGrainTransitionStateFlux","printGrainTransitionStateFluxLabel","printGrainTransitionStateFluxInput","printReactionOperatorSizeDiv","xml_printReactionOperatorSize","printReactionOperatorSizeLabel","printReactionOperatorSizeInput","printSpeciesProfileDiv","xml_printSpeciesProfile","printSpeciesProfileLabel","printSpeciesProfileInput","printPhenomenologicalEvolutionDiv","xml_printPhenomenologicalEvolution","printPhenomenologicalEvolutionLabel","printPhenomenologicalEvolutionInput","printTunnelingCoefficientsDiv","xml_printTunnelingCoefficients","printTunnelingCoefficientsLabel","printTunnelingCoefficientsInput","printCrossingCoefficientsDiv","xml_printCrossingCoefficients","printCrossingCoefficientsLabel","printCrossingCoefficientsInput","testDOSDiv","xml_testDOS","testDOSLabel","testDOSInput","testRateConstantsDiv","xml_testRateConstants","testRateConstantsLabel","testRateConstantsInput","useTheSameCellNumberForAllConditionsDiv","xml_useTheSameCellNumberForAllConditions","useTheSameCellNumberForAllConditionsLabel","useTheSameCellNumberForAllConditionsInput","hideInactiveDiv","xml_hideInactive","hideInactiveLabel","hideInactiveInput","forceMacroDetailedBalanceDiv","xml_forceMacroDetailedBalance","forceMacroDetailedBalanceLabel","forceMacroDetailedBalanceInput","testMicroRatesDiv","xml_testMicroRates","testMicroRatesLabel","testMicroRatesInput","idTmax","existingTmaxDiv","remove","tMaxInputDiv","idTmin","existingTminDiv","tMinInputDiv","idTstep","existingTstepDiv","tStepInputDiv","calcMethodDiv","xml_calcMethod","calcMethodLabel","calcMethodInput","existingDiv","eigenvaluesDiv","xml_eigenvalues","eigenvaluesLabel","eigenvaluesInput","shortestTimeOfInterestDiv","xml_shortestTimeOfInterest","shortestTimeOfInterestLabel","shortestTimeOfInterestInput","maximumEvolutionTimeDiv","xml_maximumEvolutionTime","maximumEvolutionTimeLabel","maximumEvolutionTimeInput","automaticallySetMaxEneDiv","xml_automaticallySetMaxEne","automaticallySetMaxEneLabel","automaticallySetMaxEneInput","diagramEnergyOffsetDiv","xml_diagramEnergyOffset","diagramEnergyOffsetLabel","diagramEnergyOffsetInput","collapsibleElements","getElementsByClassName","removeEventListener","parser","DOMParser","parseFromString","saveButtonId","saveButton","$22c7fca7c69edc03$var$saveXML","menuDiv","click","scalarNodes","psAttributes","ps","arrayNodes","paAttributes","pa","$22c7fca7c69edc03$export$819b5ff7dff3652c","tagOrDictRef","unitsSelectElement","$22c7fca7c69edc03$var$getUnitsSelectElement","psUnits","attributesUnits","inputStrings","success","inputNumber","pInputDiv","pInputElement","tInputDiv","tInputElement","append","excessReactantConcLabel","excessReactantConcInput","percentExcessReactantConcLabel","percentExcessReactantConcInput","precisionLabel","precisionInput","bathGasDiv","existingCanvas","canvas","height","border","$22c7fca7c69edc03$var$drawReactionDiagram","dark","lw","lwc","fontMetric","black","getContext","actualBoundingBoxAscent","actualBoundingBoxDescent","intProducts","orders","energies","energyMin","MAX_VALUE","energyMax","MIN_VALUE","reactionTransitionStates","reactantsLabel","energy","Math","min","max","productsLabel","ts","energyRange","reorders","xmax","reactantsInXY","reactantsOutXY","productsInXY","productsOutXY","transitionStatesInXY","transitionStatesOutXY","energyRescaled","range","canvasHeightWithBorder","originalCanvasHeight","transform","reactantOutXY","productInXY","transitionStateLabel","transitionStateInXY","transitionStateOutXY","Blob","url","URL","createObjectURL","href","download","replace","body","loadButton","window","setNumberArrayNode"],"version":3,"file":"index.2b97b273.js.map"}