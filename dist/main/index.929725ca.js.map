{"mappings":"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","sources":["src/ts/app.ts","src/ts/util.ts","node_modules/big.js/big.js","src/ts/xml.ts","src/ts/html.ts","src/ts/gui_menu.ts","src/ts/librarymols.ts","src/ts/xml_mesmer.ts","src/ts/xml_analysis.ts","src/ts/xml_conditions.ts","src/ts/xml_control.ts","src/ts/xml_metadata.ts","src/ts/xml_modelParameters.ts","src/ts/xml_molecule.ts","src/ts/xml_range.ts","src/ts/gui_moleculeList.ts","src/ts/defaults.ts","src/ts/gui_reactionList.ts","src/ts/xml_reaction.ts","src/ts/gui_ConditionsList.ts","src/ts/gui_ModelParametersList.ts","src/ts/gui_ControlList.ts","src/ts/gui_reactionDiagram.ts","src/ts/canvas.ts"],"sourcesContent":["// Imports from MXG modules.\nimport { arrayToString, getID, isNumeric, mapToString } from './util.js';\nimport { getFirstChildNode, getAttributes, getSingularElement, NumberNode } from './xml.js';\nimport {\n    createLabelWithInput, getCollapsibleDiv, resizeInputElement, resizeSelectElement,\n    createFlexDiv, createButton, createLabel, createInput, createLabelWithSelect, createDiv,\n    s_button, createTable, addTableRow\n} from './html.js';\nimport { Molecule } from './xml_molecule.js';\nimport { Reaction } from './xml_reaction.js';\nimport { createMenu } from './gui_menu.js';\nimport { Conditions } from './xml_conditions.js';\nimport { ModelParameters } from './xml_modelParameters.js';\nimport { Control } from './xml_control.js';\nimport { Mesmer, MoleculeList, ReactionList, Title, Description } from './xml_mesmer.js';\nimport {\n    Analysis, Eigenvalue, EigenvalueList, FirstOrderLoss, FirstOrderRate, Pop, Population,\n    PopulationList, RateList\n} from './xml_analysis.js';\nimport { DCCreator, MetadataList, DCSource, DCDate, DCContributor } from './xml_metadata.js';\nimport { Defaults } from './defaults.js';\nimport { getAddFromLibraryButton, getAddMoleculeButton, processMoleculeList, setMoleculeID } from './gui_moleculeList.js';\nimport { getAddReactionButton, processReactionList } from './gui_reactionList.js';\nimport { createAddConditionsButton, processConditions } from './gui_ConditionsList.js';\nimport { createAddModelParametersButton, processModelParameters } from './gui_ModelParametersList.js';\nimport { createAddControlButton, processControl } from './gui_ControlList.js';\nimport { createReactionDiagram, drawReactionDiagram } from './gui_reactionDiagram.js';\n// Imports from 3rd party modules.\n//import { openDB } from 'idb';\nimport { Big } from 'big.js';\nimport { clear } from 'console';\nimport { removeAllListeners } from 'process';\n//import * as $3Dmol from '$3Dmol';\n\n/**\n * Big.js.\n */\n// Set the number toString() format for Big.js. The default is Big.PE = 21, so this change means that Big numbers\n// with an order of magnitude of greater than 6 (e.g. 1000000) are presented as 1.0e+7.\nBig.PE = 7;\n\n/**\n * The filename of the MESMER XML file.\n */\nlet filename: string;\n\n/**\n * fontSize is set to a relative measure so that component text is resizeable.\n */\nlet fontSize: string = \"1.0em\";\n\n/**\n * Margins for spacing GUI components.\n */\nlet s_0px: string = \"0px\";\nlet s_1px: string = \"1px\";\nlet s_25px: string = \"25px\";\nexport let level0 = { marginLeft: s_0px, marginTop: s_1px, marginBottom: s_1px, marginRight: s_0px };\nexport let level1 = { marginLeft: s_25px, marginTop: s_1px, marginBottom: s_1px, marginRight: s_0px };\nexport let boundary1 = { marginLeft: s_1px, marginTop: s_1px, marginBottom: s_1px, marginRight: s_1px };\n\n/**\n * Symbology for the GUI.\n */\n// Symbols.\nexport const sy_add: string = \"\\uFF0B\"; // ＋\nexport const sy_edit: string = \"\\u270E\"; // ✎\nexport const sy_deselected: string = \" \\u2717\"; // ✗\n//const sy_refresh: string = \"\\u27F3\"; // ⟳\nconst sy_remove: string = \"\\u2715\"; // ✕\nexport const sy_selected: string = \" \\u2713\"; // ✓\n\n// Strings.\nexport const s_Add_sy_add: string = \"Add \" + sy_add;\nexport const s_Add_from_library: string = \"Add from library \" + sy_add;\nexport const s_Add_from_spreadsheet: string = \"Add from spreadsheet \" + sy_add;\nconst s_analysis: string = \"analysis\";\nconst s_conditions: string = \"conditions\";\nexport const s_container: string = \"container\";\nconst s_control: string = \"control\";\nexport const s_description: string = \"description\";\nconst s_graph: string = \"graph\";\nexport const s_input: string = \"input\";\nconst s_menu: string = \"menu\";\nconst s_metadata: string = \"metadata\";\nconst s_modelParameters: string = \"modelParameters\";\nexport const s_molecules: string = \"molecules\";\nexport const s_optionOn = 'optionOn';\nexport const s_optionOff = 'optionOff';\nexport const s_Products: string = \"Products\";\nexport const s_Reactants: string = \"Reactants\";\nexport const s_reactions: string = \"reactions\";\nconst s_reactionsDiagram: string = \"reactionsDiagram\";\nexport const s_Remove_sy_remove: string = \"Remove \" + sy_remove;\nexport const s_save: string = \"save\";\n//const s_select: string = \"select\";\nexport const s_selectOption: string = \"Select an option (press a letter key to cycle through options for it)...\";\nexport const s_table: string = \"table\";\nconst s_title: string = \"title\";\nexport const s_Transition_States: string = \"Transition States\";\nexport const s_textarea: string = \"textarea\";\nexport const s_Tunneling: string = \"Tunneling\";\nexport const s_undefined: string = \"undefined\";\nexport const s_units: string = \"units\";\nconst s_xml: string = \"xml\";\nexport const s_viewer: string = \"viewer\";\nconst s_welcome: string = \"welcome\";\n\n/**\n * allIDs is a set of all IDs used in the GUI.\n * This is used to ensure that all IDs are unique.\n * If an ID is not unique, an error is thrown.\n */\nlet allIDs: Set<string> = new Set();\n\n/**\n * A set of all IDs to be removed when loading a MESMER file.\n */\nlet rIDs: Set<string> = new Set();\n\n/**\n * Add an ID to the set of IDs.\n * @param parts The parts of the ID.\n */\nexport function addID(...parts: (string | number)[]): string {\n    let validID: string = getID(...parts);\n    if (allIDs.has(validID)) {\n        throw new Error(validID + \" already exists!\");\n        //console.warn(validID + \" already exists!\");\n    }\n    allIDs.add(validID);\n    //console.log(\"addID: \\\"\" + validID + \"\\\"\");\n    return validID;\n}\n\n/**\n * Add an ID to the set of IDs.\n * @param parts The parts of the ID.\n */\nexport function addRID(...parts: (string | number)[]): string {\n    let validID: string = addID(...parts);\n    rIDs.add(validID);\n    return validID;\n}\n\n/**\n * Remove an element with the given id.\n * @param id The id of the element to remove.\n */\nexport function remove(id: string) {\n    let e: HTMLElement | null = document.getElementById(id);\n    if (e != null) {\n        e.remove();\n    }\n    rIDs.delete(id);\n    allIDs.delete(id);\n}\n\n// index.html IDs\nexport const menuDivID: string = addID(s_menu);\nconst titleDivID: string = addID(s_title);\nconst moleculesDivID: string = addID(s_molecules);\nconst reactionsDivID: string = addID(s_reactions);\nconst reactionsDiagramDivID: string = addID(s_reactionsDiagram);\nconst conditionsDivID: string = addID(s_conditions);\nconst modelParametersDivID: string = addID(s_modelParameters);\nconst controlDivID: string = addID(s_control);\nconst metadataListDivID: string = addID(s_metadata);\nconst analysisDivID: string = addID(s_analysis);\nconst xmlDivID: string = addID(s_xml);\n//const welcomeDivID: string = addID(s_welcome);\n\n// For dark/light mode.\nlet dark: boolean;\n\n// Numbers\nexport const big0: Big = new Big(0);\n\n/*\nconst db = await openDB('my-db', 1, {\n    upgrade(db) {\n        db.createObjectStore('keyval');\n    },\n});\n\nlet darkModePreference = await db.get('keyval', 'darkMode');\ndark = (darkModePreference === 'true');\nconsole.log(\"dark=\" + dark);\n*/\n\n/**\n * For ID management.\n */\nexport class IDManager {\n\n    /**\n     * A map of IDs with the key ID as the key and a set of IDs as the value.\n     */\n    private ids: Map<string, Set<string>> = new Map();\n\n    /**\n     * Adds an ID to the map.\n     * @param iD The key ID.\n     * @param parts The parts of the ID to be created.\n     * @returns The ID created.\n     */\n    addID(iD: string, ...parts: (string | number)[]): string {\n        let id: string = addRID(iD, ...parts);\n        if (!this.ids.has(iD)) {\n            this.ids.set(iD, new Set());\n        }\n        this.ids.get(iD)?.add(id);\n        return id;\n    }\n\n    /**\n     * Remove the IDs to the map.\n     * @param iD The key ID.\n     * @param parts The parts of the ID to be created.\n     * @returns The ID created.\n     */\n    private removeID(iD: string): void {\n        rIDs.delete(iD);\n        allIDs.delete(iD);\n    }\n\n    /**\n     * Removes the IDs.\n     * @param iD The ID key for the IDs to remove.\n     */\n    removeIDs(iD: string): void {\n        if (!this.ids.has(iD)) {\n            return;\n        }\n        this.ids.get(iD)!.forEach(id => {\n            console.log(\"remove id \" + id);\n            this.removeID(id);\n        });\n        this.ids.delete(iD);\n    }\n\n    /**\n     * Remove all IDs.\n     */\n    removeAllIDs(): void {\n        this.ids.forEach((value, key) => {\n            this.removeIDs(key);\n        });\n    }\n}\n\n/**\n * For moleculeList Div ID management.\n */\nlet mIDM: IDManager;\n\n/**\n * For reactionList Div ID management.\n */\nlet rIDM: IDManager;\n\n/**\n * For conditionsList Div ID management.\n */\nlet conditionsIDM: IDManager;\n\n/**\n * For ModelParametersList Div ID management.\n */\nlet mpIDM: IDManager;\n\n/**\n * For ControlList Div ID management.\n */\nlet controlIDM: IDManager;\n\n/**\n * For mesmer.\n */\nexport let mesmer: Mesmer;\n\n/**\n * For the defaults loaded from defaults.xml.\n */\nexport let defaults: Defaults;\n\n/**\n * For storing molecules loaded from files.\n */\nexport let libmols: Map<string, Molecule>;\n\n/**\n * For initialising the libmols map.\n * @param m The map of molecules to set.\n */\nexport function setLibmols(m: Map<string, Molecule>): void {\n    libmols = m;\n}\n\n/**\n * Adds a molecule to the map of molecules.\n * The molecule label is updated if the molecule attribute id is not unique. \n * @param m The molecule to add\n * @param ms The map of molecules to add the molecule to.\n */\nexport function addMolecule(ask: boolean, m: Molecule, ms: Map<string, Molecule>): void {\n    let mid = setMoleculeID(ask, m.getID(), m, ms);\n    ms.set(mid, m);\n}\n\n/**\n * A map of molecules with id as key and Molecule as value.\n * The key is a composite of the molecule ID and the index.\n */\nlet molecules: Map<string, Molecule>;\n\n/**\n * Get the keys of the molecules. The keys are a composite of the molecule ID and the index.\n * @returns The keys of the molecules.\n */\nexport function getMoleculeKeys(molecules: Map<string, Molecule>): Set<string> {\n    let keys: Set<string> = new Set();\n    molecules.forEach((v, k) => {\n        let id = v.getID();\n        if (keys.has(id)) {\n            keys.add(id + \"-\" + k.toString());\n        } else {\n            keys.add(id);\n        }\n    });\n    return keys;\n}\n\n/**\n * This returns the molecule found with the given label from ms.\n * @param id The id of the molecule to find.\n * @param ms The map of molecules to search.\n * @returns The molecule with the lable in ms.\n */\nexport function getMolecule(id: string, ms: Map<string, Molecule>): Molecule | null {\n    for (let [key, value] of ms) {\n        //if (value.label == label) {\n        if (value.id == id) {\n            return value;\n        }\n    }\n    return null;\n}\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction>;\n\n/**\n * For storing any scatter plots.\n */\nlet scatterPlots: ScatterPlot[];\n\n/**\n * Reaction Diagram variables.\n */\n// IDs.\nexport const s_Reactions_Diagram: string = \"Reactions Diagram\";\nconst rddDivID: string = addRID(s_Reactions_Diagram);\nconst rddcID: string = addRID(rddDivID, \"Canvas\");\n//let rd_canvas_width: number = 800;\nlet rdcHeight: number = 400;\nlet rd_lw: number = 4; // Line width of reactants, transition states and products.\nlet rd_lwc: number = 2; // Line width of connectors.\nlet rd_font: string = \"1em SensSerif\";\nlet rdWindow: Window | null;\n\n// Scatterplot font.\nlet sp_font: string = \"2em SensSerif\";\n\n/**\n * Once the DOM is loaded, add the menu and collapsed buttons for content\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    // Update the page styles based on the user's preference.\n    document.body.className = dark ? 'dark-mode' : 'light-mode';\n\n    /* It is not allowed to use localStorage with a Service Worker!\n    let darkModePreference = localStorage.getItem('darkMode');\n    dark = (darkModePreference === 'true');\n    console.log(\"dark=\" + dark);\n    */\n\n    // Initialise mesmer.\n    let mesmerAttributes: Map<string, string> = new Map();\n    mesmerAttributes.set(\"xmlns\", \"http://www.xml-cml.org/schema\");\n    mesmerAttributes.set(\"xmlns:me\", \"http://www.chem.leeds.ac.uk/mesmer\");\n    mesmerAttributes.set(\"xmlns:xsi\", \"http://www.w3.org/2001/XMLSchema-instance\");\n    mesmer = new Mesmer(mesmerAttributes);\n\n    // Create the menu.\n    createMenu();\n\n    // StartAfresh\n    startAfresh();\n});\n\n/**\n * (Re)Initialise the main GUI and IDManagers.\n */\nfunction initialise(): void {\n    // Clear content.\n    rIDs.forEach(id => {\n        remove(id);\n    });\n    // Initialise\n    rIDs = new Set();\n    mIDM = new IDManager();\n    rIDM = new IDManager();\n    conditionsIDM = new IDManager();\n    mpIDM = new IDManager();\n    controlIDM = new IDManager();\n    // libmols is not reinitialised on purpose. To completely start again, reload the app.\n    //libmols = new Map();\n    defaults = new Defaults();\n    molecules = new Map();\n    reactions = new Map();\n    scatterPlots = [];\n}\n\n/**\n * Load interface.\n */\nexport function startAfresh() {\n\n    initialise();\n\n    // Title.\n    let title: string = \"Example_title\";\n    let attributes: Map<string, string> = new Map<string, string>();\n    createTitle(title, attributes);\n\n    // Molecules.\n    let moleculesDiv: HTMLDivElement = document.getElementById(moleculesDivID) as HTMLDivElement;\n    let mlDivID = addRID(MoleculeList.tagName);\n    let mlDiv: HTMLDivElement = createDiv(mlDivID);\n    moleculesDiv.appendChild(mlDiv);\n    // Create collapsible content.\n    let mlcDiv: HTMLDivElement = getCollapsibleDiv(mlDivID, moleculesDiv, null, mlDiv,\n        MoleculeList.tagName, boundary1, level0);\n    // Add add molecule button.\n    let mb: HTMLButtonElement = getAddMoleculeButton(mlDiv, mIDM, molecules);\n    // Add add from library button.\n    let lb: HTMLButtonElement = getAddFromLibraryButton(mlDiv, mb, mIDM, molecules);\n\n    // Reactions.\n    let reactionsDiv: HTMLDivElement = document.getElementById(reactionsDivID) as HTMLDivElement;\n    let rlDivID: string = addRID(ReactionList.tagName);\n    let rlDiv: HTMLDivElement = createDiv(rlDivID);\n    reactionsDiv.appendChild(rlDiv);\n    // Create collapsible content.\n    let rlcDiv: HTMLDivElement = getCollapsibleDiv(rlDivID, reactionsDiv, null, rlDiv,\n        ReactionList.tagName, boundary1, level0);\n    // Add add reaction button.\n    let rb: HTMLButtonElement = getAddReactionButton(rIDM, rlDiv, reactions, molecules);\n\n    // Reactions Diagram.\n    let rddDiv: HTMLDivElement = document.getElementById(reactionsDiagramDivID) as HTMLDivElement;\n    let rdDivID: string = addRID(s_Reactions_Diagram);\n    let rdDiv: HTMLDivElement = createDiv(rdDivID);\n    rddDiv.appendChild(rdDiv);\n    // Create collapsible content.\n    let rdcDiv: HTMLDivElement = getCollapsibleDiv(rdDivID, rddDiv, null, rdDiv,\n        s_Reactions_Diagram, boundary1, level0);\n    createReactionDiagram(rdDiv, rddcID, rdcHeight, dark, rd_font, rd_lw, rd_lwc, rdWindow, molecules, reactions, true);\n\n    // Conditions.\n    let conditionsDiv: HTMLDivElement = document.getElementById(conditionsDivID) as HTMLDivElement;\n    let cdlDivID: string = addRID(Conditions.tagName);\n    let cdlDiv: HTMLDivElement = createDiv(cdlDivID);\n    conditionsDiv.appendChild(cdlDiv);\n    // Create a div for the conditionss.\n    let conditionssDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Create an add button to add a conditions.\n    createAddConditionsButton(conditionssDiv, conditionsIDM, molecules);\n    // Create collapsible content.\n    let cdlcDiv: HTMLDivElement = getCollapsibleDiv(cdlDivID, cdlDiv, null, conditionssDiv,\n        \"ConditionsList\", boundary1, level0);\n\n    // Model Parameters.\n    let modelParametersDiv: HTMLDivElement = document.getElementById(modelParametersDivID) as HTMLDivElement;\n    let mplDivID: string = addRID(ModelParameters.tagName, \"list\");\n    let mplDiv: HTMLDivElement = createDiv(mplDivID);\n    modelParametersDiv.appendChild(mplDiv);\n    // Create a div for the model parameterss.\n    let modelParameterssDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Create an add button to add a model parameters.\n    createAddModelParametersButton(modelParameterssDiv, mpIDM);\n    // Create collapsible content.\n    let mplcDiv: HTMLDivElement = getCollapsibleDiv(mplDivID, mplDiv, null, modelParameterssDiv,\n        \"ModelParametersList\", boundary1, level0);\n\n    // Control.\n    let controlDiv: HTMLDivElement = document.getElementById(controlDivID) as HTMLDivElement;\n    let clDivID: string = addRID(Control.tagName);\n    let clDiv: HTMLDivElement = createDiv(clDivID);\n    controlDiv.appendChild(clDiv);\n    // Create a div for the controls.\n    let controlsDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Create an add button to add a control.\n    createAddControlButton(controlsDiv, controlIDM);\n    // Create collapsible content.\n    let controlcDiv: HTMLDivElement = getCollapsibleDiv(clDivID, clDiv, null, controlsDiv,\n        \"ControlList\", boundary1, level0);\n\n    /*\n    // MetadataList.\n    let metadataListDiv: HTMLDivElement = document.getElementById(metadataListDivID) as HTMLDivElement;\n    let mdDivID: string = addRID(MetadataList.tagName);\n    let mdDiv: HTMLDivElement = createDiv(mdDivID);\n    metadataListDiv.appendChild(mdDiv);\n    // Create collapsible content.\n    let mdcDiv: HTMLDivElement = getCollapsibleDiv(mdDivID, metadataListDiv, null, mdDiv,\n        MetadataList.tagName, boundary1, level0);\n\n    // Analysis.\n    let analysisDiv: HTMLDivElement = document.getElementById(analysisDivID) as HTMLDivElement;\n    let aDivID: string = addRID(Analysis.tagName);\n    let aDiv: HTMLDivElement = createDiv(aDivID);\n    analysisDiv.appendChild(aDiv);\n    // Create collapsible content.\n    let acDiv: HTMLDivElement = getCollapsibleDiv(aDivID, analysisDiv, null, aDiv,\n        Analysis.tagName, boundary1, level0);\n\n    // XML.\n    let xmlDiv: HTMLDivElement = document.getElementById(xmlDivID) as HTMLDivElement;\n    let xDivID: string = addRID(s_xml, 2);\n    let xDiv: HTMLDivElement = createDiv(xDivID);\n    xmlDiv.appendChild(xDiv);\n    // Create collapsible content.\n    let xcDiv: HTMLDivElement = getCollapsibleDiv(xDivID, xmlDiv, null, xDiv,\n        s_xml, boundary1, level0);\n    */\n}\n\n/**\n * Create the title input.\n */\nfunction createTitle(title: string, attributes: Map<string, string>) {\n    let titleNode: Title = new Title(attributes, title);\n    mesmer.setTitle(titleNode);\n    let titleDiv: HTMLDivElement = document.getElementById(titleDivID) as HTMLDivElement;\n    let lwiId: string = addRID('titleDiv');\n    // Remove any existing lwiId HTMLDivElement.\n    remove(lwiId);\n    // Create input element.\n    let lwi: HTMLDivElement = createLabelWithInput(\"text\", addRID(lwiId, s_input), boundary1, level0,\n        (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            titleNode.value = target.value;\n            console.log(titleNode.tagName + \" changed to \" + titleNode.value);\n            resizeInputElement(target);\n        }, title, Title.tagName);\n    lwi.id = lwiId;\n    titleDiv.appendChild(lwi);\n}\n\n/**\n * Redraw the reactions diagram.\n */\nexport function redrawReactionsDiagram() {\n    if (rdWindow == null) {\n        let rdCanvas: HTMLCanvasElement = document.getElementById(rddcID) as HTMLCanvasElement;\n        drawReactionDiagram(rdCanvas, rdcHeight, dark, rd_font, rd_lw, rd_lwc, molecules, reactions);\n    } else {\n        let c: HTMLCanvasElement = rdWindow.document.getElementById(rddcID) as HTMLCanvasElement;\n        drawReactionDiagram(c, rdcHeight, dark, rd_font, rd_lw, rd_lwc, molecules, reactions);\n    }\n}\n\n/**\n * Redraw any scatterplots.\n */\nfunction redrawScatterPlots(): void {\n    scatterPlots.forEach((scatterPlot) => {\n        scatterPlot.draw(sp_font);\n    });\n}\n\n/**\n * Prompts the user for a MESMER XML file, and initiates the parsing of the chosen file.\n */\nexport function load() {\n    // Before loading a new file, remove existing content and initialise data containers.\n    initialise();\n    // Create a file input element to prompt the user to select a file.\n    let input: HTMLInputElement = document.createElement('input');\n    input.type = 'file';\n    input.onchange = function () {\n        if (input.files) {\n            for (let i = 0; i < input.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + input.files[i]);\n            }\n            let file: File | null = input.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            filename = file.name;\n            let reader = new FileReader();\n            let chunkSize = 1024 * 1024; // 1MB\n            let start = 0;\n            let contents = '';\n            reader.onload = function (e) {\n                if (e.target == null) {\n                    throw new Error('Event target is null');\n                }\n                contents += (e.target as FileReader).result as string;\n                if (file != null) {\n                    if (start < file.size) {\n                        // Read the next chunk\n                        let blob = file.slice(start, start + chunkSize);\n                        reader.readAsText(blob);\n                        start += chunkSize;\n                    } else {\n                        // All chunks have been read\n                        contents = contents.trim();\n                        displayXML(filename, contents);\n                        let parser = new DOMParser();\n                        let xml = parser.parseFromString(contents, \"text/xml\");\n                        parse(xml);\n                    }\n                }\n            };\n            // Read the first chunk\n            let blob = file.slice(start, start + chunkSize);\n            reader.readAsText(blob);\n            start += chunkSize;\n        }\n    };\n    input.click();\n}\n\n/**\n * Parse an XMLDocument and create the mesmer object.\n * @param xml The XML.\n */\nfunction parse(xml: XMLDocument) {\n    console.log(\"parse: \" + xml);\n\n    // Process the XML.\n    let xml_mesmer: Element = getSingularElement(xml, Mesmer.tagName);\n    mesmer = new Mesmer(getAttributes(xml_mesmer));\n\n    // Title.\n    let xml_title: HTMLCollectionOf<Element> = xml.getElementsByTagName(Title.tagName) as HTMLCollectionOf<Element>;\n    let title: string;\n    let attributes: Map<string, string>;\n    if (xml_title.length > 0) {\n        if (xml_title.length > 1) {\n            console.warn('Multiple ' + Title.tagName + ' tags found, using the first.');\n        }\n        title = (xml_title[0].childNodes[0].nodeValue as string).trim();\n        attributes = getAttributes(xml_title[0]);\n    } else {\n        title = filename\n        console.warn('No ' + Title.tagName + ' tag found, using the filename: ' + filename + ' as the title.');\n        attributes = new Map<string, string>();\n    }\n    createTitle(title, attributes);\n\n    // moleculeList.\n    let mlDiv: HTMLDivElement = document.getElementById(moleculesDivID) as HTMLDivElement;\n    let mlDivID = addRID(MoleculeList.tagName);\n    // Remove any existing mlDivID HTMLDivElement.\n    remove(mlDivID);\n    // Create collapsible content.\n    let mlcDiv: HTMLDivElement = getCollapsibleDiv(mlDivID, mlDiv, null, processMoleculeList(xml, mIDM, molecules),\n        MoleculeList.tagName, boundary1, level0);\n    //document.body.appendChild(mlcDiv);\n\n    // reactionList.\n    let rsDiv: HTMLDivElement = document.getElementById(reactionsDivID) as HTMLDivElement;\n    let rsDivID: string = addRID(ReactionList.tagName);\n    // Remove any existing rlDivID HTMLDivElement.\n    remove(rsDivID);\n    let rlcDiv: HTMLDivElement = getCollapsibleDiv(rsDivID, rsDiv, null, processReactionList(xml, rIDM, rsDivID, reactions, molecules),\n        ReactionList.tagName, boundary1, level0);\n    // Reactions Diagram.\n    let rddDiv: HTMLDivElement = document.getElementById(reactionsDiagramDivID) as HTMLDivElement;\n    let rdDivID: string = addRID(s_Reactions_Diagram);\n    // Destroy any existing rdWindow.\n    if (rdWindow != null) {\n        rdWindow.close();\n        rdWindow = null;\n    }\n    // If rdDiv already exists, remove it.\n    remove(rdDivID);\n    // Create collapsible content.\n    let rdDiv: HTMLDivElement = createDiv(rdDivID, level1);\n    let rdcDiv: HTMLDivElement = getCollapsibleDiv(rdDivID, rddDiv, null, rdDiv,\n        s_Reactions_Diagram, boundary1, level0);\n    createReactionDiagram(rdDiv, rddcID, rdcHeight, dark, rd_font, rd_lw, rd_lwc, rdWindow, molecules, reactions, true);\n\n    // ConditionsList.\n    let cdlDiv: HTMLDivElement = document.getElementById(conditionsDivID) as HTMLDivElement;\n    let cdlDivID: string = addRID(Conditions.tagName);\n    // Remove any existing cdlDivID HTMLDivElement.\n    remove(cdlDivID);\n    // Create collapsible content.\n    let cdlcDiv: HTMLDivElement = getCollapsibleDiv(cdlDivID, cdlDiv, null, processConditions(xml, conditionsIDM, molecules),\n        \"ConditionsList\", boundary1, level0);\n\n    // ModelParametersList.\n    let mplDiv: HTMLDivElement = document.getElementById(modelParametersDivID) as HTMLDivElement;\n    let mplDivID: string = addRID(ModelParameters.tagName, \"list\");\n    // Remove any existing mpDivID HTMLDivElement.\n    remove(mplDivID);\n    // Create collapsible content.\n    let mplcDiv: HTMLDivElement = getCollapsibleDiv(mplDivID, mplDiv, null, processModelParameters(xml, mpIDM),\n        \"ModelParametersList\", boundary1, level0);\n\n    // ControlList.\n    let clDiv: HTMLDivElement = document.getElementById(controlDivID) as HTMLDivElement;\n    let clDivID: string = addRID(Control.tagName);\n    // Remove any existing clDivID HTMLDivElement.\n    remove(clDivID);\n    // Create collapsible content.\n    let controlcDiv: HTMLDivElement = getCollapsibleDiv(clDivID, clDiv, null, processControl(xml, controlIDM),\n        \"ControlList\", boundary1, level0);\n\n    // MetadataList.\n    // Check if xml contains metadata.\n    if (xml.getElementsByTagName(MetadataList.tagName).length > 0) {\n        let mdDiv: HTMLDivElement = document.getElementById(metadataListDivID) as HTMLDivElement;\n        let mdDivID: string = addRID(MetadataList.tagName);\n        // Remove any existing mdDivID HTMLDivElement.\n        remove(mdDivID);\n        // Create collapsible content.\n        let mdcDiv: HTMLDivElement = getCollapsibleDiv(mdDivID, mdDiv, null, processMetadataList(xml),\n            MetadataList.tagName, boundary1, level0);\n    }\n\n    // Analysis.\n    // Check if xml contains analysis.\n    if (xml.getElementsByTagName(Analysis.tagName).length > 0) {\n        let aDiv: HTMLDivElement = document.getElementById(analysisDivID) as HTMLDivElement;\n        let aDivID: string = addRID(Analysis.tagName);\n        // Remove any existing aDivID HTMLDivElement.\n        remove(aDivID);\n        // Create collapsible content.\n        let acDiv: HTMLDivElement = getCollapsibleDiv(aDivID, aDiv, null, processAnalysis(xml),\n            Analysis.tagName, boundary1, level0);\n    }\n}\n\n/**\n * @param className The className of Elements to update\n * @param optionToRemove The option value to remove.\n */\nexport function removeOptionByClassName(className: string, optionToRemove: string): void {\n    let elements: HTMLCollectionOf<Element> = document.getElementsByClassName(className);\n    for (let i = 0; i < elements.length; i++) {\n        if (elements[i] instanceof HTMLSelectElement) {\n            let options: HTMLOptionsCollection = (elements[i] as HTMLSelectElement).options;\n            let selectValue: string = (elements[i] as HTMLSelectElement).value;\n            Array.from(options).forEach((option) => {\n                if (option.value == optionToRemove) {\n                    option.remove();\n                    if (selectValue == optionToRemove) {\n                        // Create a new event\n                        let event = new Event('change');\n                        // Dispatch the event\n                        (elements[i] as HTMLSelectElement).dispatchEvent(event);\n                    }\n                }\n            });\n        }\n    }\n}\n\n/**\n * @param className The className of Elements to update\n * @param optionToAdd  The option value to add.\n */\nexport function addOptionByClassName(className: string, optionToAdd: string): void {\n    let elements: HTMLCollectionOf<Element> = document.getElementsByClassName(className);\n    console.log(\"n elements with className \" + className + \"=\" + elements.length);\n    for (let i = 0; i < elements.length; i++) {\n        let select: HTMLSelectElement = elements[i] as HTMLSelectElement;\n        if (elements[i] instanceof HTMLSelectElement) {\n            let option: HTMLOptionElement = document.createElement('option');\n            option.value = optionToAdd;\n            option.text = optionToAdd;\n            select.add(option);\n        }\n    }\n}\n\n/**\n * For adding or removing s_selectOption.\n * @param options The options.\n * @param add If true then a new option is added with an instruction to select another option.\n * If false then this option is removed if it is present.\n */\nexport function addOrRemoveInstructions(options: string[], add: boolean): void {\n    if (add) {\n        options.push(s_selectOption);\n    } else {\n        // remove selectOption if present.\n        let index = options.indexOf(s_selectOption);\n        if (index > -1) {\n            options.splice(index, 1);\n        }\n    }\n}\n\n/**\n * Process a numerical variable.\n * @param id The id.\n * @param tIDM The IDManager.\n * @param name The name of the variable.\n * @param getter The getter function.\n * @param setter The setter function.\n * @param margin The margin.\n * @returns A div element.\n */\nexport function processNumber(id: string, tIDM: IDManager, name: string,\n    getter: () => Big | undefined, setter: (value: Big) => void, remover: (name: string) => void,\n    marginComponent: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(id, margin);\n    let buttonTextContentSelected: string = name + sy_selected;\n    let buttonTextContentDeselected: string = name + sy_deselected;\n    //let idb: string = tIDM.addID(id, name, s_button);\n    let idb: string = getID(id, name, s_button);\n    let button = createButton(buttonTextContentDeselected, idb, marginComponent);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    //let inputId: string = tIDM.addID(id, name, s_input)\n    let inputId: string = getID(id, name, s_input)\n    let value: Big | undefined = getter();\n    if (value == undefined) {\n        //remover(name);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addNumber(div, inputId, name, value, getter, setter, marginComponent);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(inputId) == null) {\n            console.log(\"Adding \" + inputId);\n            addNumber(div, inputId, name, value, getter, setter, marginComponent);\n            // Invoke the setter function.\n            let input: HTMLInputElement = div.querySelector(s_input) as HTMLInputElement;\n            // Enact a change event on input.\n            input.value = value!.toString();\n            let event = new Event('change');\n            input.dispatchEvent(event);\n            //setter;\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove existing HTMLElement.\n            document.getElementById(inputId)?.remove();\n            // Remove node.\n            //remover();\n            remover(name);\n            console.log(\"Removed \" + inputId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n    return div;\n}\n\n/**\n * @param div The div to add the input to.\n * @param id The id.\n * @param name The name of the input.\n * @param value The numerical value.\n * @param setter The setter function to call.\n * @param boundary The boundary.\n * @param level The level.\n */\nfunction addNumber(div: HTMLDivElement, id: string, name: string, value: Big | undefined,\n    getter: () => Big | undefined, setter: (value: Big) => void,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string;\n    if (value == undefined) {\n        valueString = \"\";\n    } else {\n        valueString = value.toString();\n    }\n    //let input: HTMLInputElement = createInput(\"number\", id, boundary);\n    let input: HTMLInputElement = createInput(\"text\", id, boundary);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        try {\n            setter(new Big(target.value));\n            console.log(name + \" changed from \" + value + \" to \" + target.value);\n        } catch (e) {\n            alert(\"Input invalid, resetting...\");\n            target.value = getter()!.toString();\n        }\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    //setter(new Big(valueString));\n    resizeInputElement(input);\n    div.appendChild(input);\n}\n\n/**\n * @param div The div to append the button to.\n * @param removeFunction The function to call when the button is clicked.\n * @param args The parameters passed to the removeFunction.\n * @param margin The margin to go around the button.\n * @returns The button.\n */\nexport function addRemoveButton(div: HTMLDivElement,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    removeFunction: (...args: any[]) => void, ...args: any[]): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Remove_sy_remove, undefined, margin);\n    div.appendChild(button);\n    button.addEventListener('click', () => {\n        removeFunction(...args);\n        div.remove();\n        remove(div.id);\n    });\n    return button;\n}\n\n/**\n * Process a string variable.\n * @param id The id.\n * @param iDs The set of IDs to add to.\n * @param name The name of the variable.\n * @param getter The getter function.\n * @param setter The setter function.\n * @param margin The margin.\n */\nexport function processString(id: string, iDs: Set<string>, name: string,\n    getter: () => string | undefined, setter: (value: string) => void, remover: () => void,\n    marginComponent: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(id, margin);\n    let buttonTextContentSelected: string = name + sy_selected;\n    let buttonTextContentDeselected: string = name + sy_deselected;\n    let idb = addRID(id, s_button);\n    iDs.add(idb);\n    let button = createButton(buttonTextContentDeselected, idb, marginComponent);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let inputId: string = addRID(id, name, s_input)\n    iDs.add(inputId);\n    let value: string | undefined = getter();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addString(div, inputId, name, value, setter, marginComponent);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(inputId) == null) {\n            addString(div, inputId, name, value, setter, marginComponent);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove existing.\n            document.getElementById(inputId)?.remove();\n            // \n            remover();\n            console.log(\"Removed \" + inputId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n    return div;\n}\n\n/**\n * @param div The div to add the input to.\n * @param id The id.\n * @param name The name of the input.\n * @param value The numerical value.\n * @param setter The setter function to call.\n * @param boundary The boundary.\n * @param level The level.\n */\nfunction addString(div: HTMLDivElement, id: string, name: string, value: string | undefined,\n    setter: (value: string) => void,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string;\n    if (value == undefined) {\n        valueString = \"\";\n    } else {\n        valueString = value.toString();\n    }\n    //let input: HTMLInputElement = createInput(\"number\", id, boundary);\n    let input: HTMLInputElement = createInput(\"text\", id, boundary);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setter(target.value);\n        console.log(name + \" changed from \" + value + \" to \" + target.value);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    div.appendChild(input);\n}\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xmlFilename: string, xml: string) {\n    let xmlDiv: HTMLDivElement = document.getElementById(xmlDivID) as HTMLDivElement;\n    let xml2DivID = addRID(xmlDivID, 2);\n    // Remove any existing mlDivID HTMLDivElement.\n    remove(xml2DivID);\n    // Create collapsible content.\n    let xml2Div: HTMLDivElement = createDiv(xml2DivID, level1);\n    let xmlcDiv: HTMLDivElement = getCollapsibleDiv(xml2DivID, xmlDiv, null, xml2Div,\n        xmlFilename, boundary1, level0);\n    let xmlPre: HTMLPreElement = document.createElement(\"pre\");\n    xmlPre.textContent = xml;\n    xml2Div.appendChild(xmlPre);\n}\n\n/**\n * If there is a choice of units, then a HTMLDivElement is appended containing an HTMLLabelElement and a HTMLSelectElement.\n * If there is no choice of units, a HTMLLabelElement is appended.\n * @param units The possible units.\n * @param attributes The attributes.\n * @param divToAddTo The input div.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @param boundary The boundary.\n * @param level The level.\n */\nexport function addAnyUnits(units: string[] | undefined, attributes: Map<string, string>, divToAddTo: HTMLDivElement,\n    elementToInsertBefore: HTMLElement | null, id: string, tagOrDictRef: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    if (units != undefined) {\n        let lws: HTMLDivElement | undefined = getUnitsLabelWithSelect(units, attributes, id, tagOrDictRef, boundary, level);\n        if (lws != undefined) {\n            divToAddTo.insertBefore(lws, elementToInsertBefore);\n        }\n    } else {\n        let attributesUnits: string | undefined = attributes.get(\"units\");\n        if (attributesUnits != undefined) {\n            let label: HTMLLabelElement = createLabel(\"units \" + attributesUnits, level);\n            divToAddTo.insertBefore(label, elementToInsertBefore);\n        }\n    }\n}\n\n/**\n * @param attributes The attributes.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @returns A select element for setting the units or undefined if there is not attribute for units.\n */\nfunction getUnitsLabelWithSelect(units: string[], attributes: Map<string, string>, id: string, tagOrDictRef: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement | undefined {\n    let psUnits: string | undefined = attributes.get(\"units\");\n    if (psUnits != undefined) {\n        // Get a select element for setting the units.\n        let lws: HTMLDivElement = createLabelWithSelect(\"units\", units, \"units\", psUnits, id, boundary, level);\n        let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n        // Set the initial value to the units.\n        select.value = psUnits;\n        // Add event listener to selectElement.\n        resizeSelectElement(select);\n        select.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            attributes.set(\"units\", target.value);\n            console.log(\"Set \" + tagOrDictRef + \" units to \" + target.value);\n            resizeSelectElement(target);\n        });\n        return lws;\n    }\n    return undefined;\n}\n\n/**\n * For getting a positive integer.\n * @param message The message for the user prompt.\n * @returns A positive integer.\n */\nexport function getN(message: string): number {\n    let n: number = 0;\n    let nset = false;\n    while (!nset) {\n        let nString: string | null = prompt(message, \"0\");\n        if (nString != null) {\n            if (isNumeric(nString)) {\n                n = parseInt(nString);\n                if (n > 0) {\n                    nset = true;\n                }\n            }\n        }\n    }\n    return n;\n}\n\n/**\n * @param options The options.\n * @param select The select element.\n */\nexport function selectAnotherOptionEventListener(options: string[], select: HTMLSelectElement) {\n    select.addEventListener('click', (event: MouseEvent) => {\n        if (options[options.length - 1] == s_selectOption) {\n            options.pop();\n        }\n        let lastIndex: number = select.options.length - 1;\n        if (select.options[lastIndex].value == s_selectOption) {\n            select.remove(lastIndex);\n        }\n    });\n}\n\n/**\n * Parses xml to initialise metadataList.\n * @param xml The XML document.\n */\nfunction processMetadataList(xml: XMLDocument): HTMLDivElement {\n    console.log(MetadataList.tagName);\n    let mlDiv: HTMLDivElement = createDiv(addRID(MetadataList.tagName, 0), boundary1);\n    let xml_mls: HTMLCollectionOf<Element> = xml.getElementsByTagName(MetadataList.tagName);\n    if (xml_mls.length > 0) {\n        if (xml_mls.length > 1) {\n            console.warn(\"More than one MetadataList element - showing the last.\");\n        }\n        let ml: MetadataList = new MetadataList(getAttributes(xml_mls[xml_mls.length - 1]));\n        mesmer.setMetadataList(ml);\n        function handleElement(tagName: string, constructor: any, setter: any) {\n            let xml_elements: HTMLCollectionOf<Element> = xml_mls[xml_mls.length - 1].getElementsByTagName(tagName);\n            if (xml_elements.length > 0) {\n                if (xml_elements.length == 1) {\n                    let s: string = getFirstChildNode(xml_elements[0])?.nodeValue ?? \"\";\n                    let n = new constructor(getAttributes(xml_elements[0]), s);\n                    let cDiv: HTMLDivElement = createDiv(undefined, level1);\n                    mlDiv.appendChild(cDiv);\n                    cDiv.appendChild(createLabel(n.tagName + \" \" + s, boundary1));\n                    //console.log(n.tagName + \" \" + s);\n                    setter.call(ml, n);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        handleElement(DCSource.tagName, DCSource, ml.setSource);\n        handleElement(DCCreator.tagName, DCCreator, ml.setCreator);\n        handleElement(DCDate.tagName, DCDate, ml.setDate);\n        handleElement(DCContributor.tagName, DCContributor, ml.setContributor);\n    }\n    return mlDiv;\n}\n\n/**\n * Parses xml to initialise analysis.\n * @param xml The XML document.\n */\nfunction processAnalysis(xml: XMLDocument): HTMLDivElement {\n    console.log(Analysis.tagName);\n    let aDivID: string = addRID(Analysis.tagName, 0);\n    let aDiv: HTMLDivElement = createDiv(aDivID, boundary1);\n    let xml_as: HTMLCollectionOf<Element> = xml.getElementsByTagName(Analysis.tagName);\n    if (xml_as.length > 0) {\n        if (xml_as.length > 1) {\n            throw new Error(\"More than one Analysis element.\");\n        }\n        let a: Analysis = new Analysis(getAttributes(xml_as[0]));\n        mesmer.setAnalysis(a);\n        // \"me:description\".\n        let xml_d: HTMLCollectionOf<Element> = xml_as[0].getElementsByTagName(Description.tagName);\n        if (xml_d.length > 0) {\n            if (xml_d.length == 1) {\n                let s: string = getFirstChildNode(xml_d[0])?.nodeValue ?? \"\";\n                let d: Description = new Description(getAttributes(xml_d[0]), s);\n                let dDiv: HTMLDivElement = createDiv(addRID(aDivID, Description.tagName), level1);\n                aDiv.appendChild(dDiv);\n                dDiv.appendChild(createLabel(d.tagName + \" \" + s, boundary1));\n                a.setDescription(d);\n            } else {\n                throw new Error(\"More than one Description element.\");\n            }\n        }\n        // \"me:eigenvalueList\".\n        let xml_el: HTMLCollectionOf<Element> = xml_as[0].getElementsByTagName(EigenvalueList.tagName);\n        // Create a new collapsible div for the EigenvalueLists.\n        let elDivID = addRID(aDivID, EigenvalueList.tagName);\n        let elDiv: HTMLDivElement = createDiv(elDivID, level1);\n        let elcDiv: HTMLDivElement = getCollapsibleDiv(elDivID, aDiv, null, elDiv,\n            EigenvalueList.tagName + \"s\", boundary1, level1);\n        if (xml_el.length > 0) {\n            for (let i: number = 0; i < xml_el.length; i++) {\n                let el_attributes: Map<string, string> = getAttributes(xml_el[i]);\n                let el: EigenvalueList = new EigenvalueList(el_attributes);\n                let labelText: string = el.tagName + \" \" + i.toString() + \" \" + mapToString(el_attributes);\n                // Create a new collapsible div for the EigenvalueList.\n                let eDivID: string = addRID(elDiv.id, i.toString());\n                let eDiv: HTMLDivElement = createDiv(elDivID, level1);\n                let ecDiv: HTMLDivElement = getCollapsibleDiv(eDivID, elDiv, null, eDiv,\n                    labelText, boundary1, level0);\n                //eDiv.appendChild(createLabel(labelText, boundary1));\n                a.addEigenvalueList(el);\n                // \"me:eigenvalue\".\n                let evs: Big[] = [];\n                let xml_ei: HTMLCollectionOf<Element> = xml_el[i].getElementsByTagName(Eigenvalue.tagName);\n                if (xml_ei.length > 0) {\n                    for (let j: number = 0; j < xml_ei.length; j++) {\n                        let ev: Big = new Big(getFirstChildNode(xml_ei[j])?.nodeValue as string);\n                        evs.push(ev);\n                        el.addEigenvalue(new Eigenvalue(getAttributes(xml_ei[j]), ev));\n                    }\n                }\n                eDiv.appendChild(createLabel(arrayToString(evs, \", \"), boundary1));\n            }\n        }\n        // \"me:populationList\".\n        let xml_pl: HTMLCollectionOf<Element> = xml_as[0].getElementsByTagName(PopulationList.tagName);\n        // Create a new collapsible div for the PopulationLists.\n        let plDivID = addRID(aDivID, PopulationList.tagName);\n        let plDiv: HTMLDivElement = createDiv(plDivID, level1);\n        let plcDiv: HTMLDivElement = getCollapsibleDiv(plDivID, aDiv, null, plDiv,\n            PopulationList.tagName + \"s\", boundary1, level1);\n        if (xml_pl.length > 0) {\n            // Create a new collapsible div for the PopulationList.\n            for (let i: number = 0; i < xml_pl.length; i++) {\n                let pl_attributes: Map<string, string> = getAttributes(xml_pl[i]);\n\n                let T: Big = pl_attributes.get(\"T\") != undefined ? new Big(pl_attributes.get(\"T\") as string) : big0;\n                let conc: Big = pl_attributes.get(\"conc\") != undefined ? new Big(pl_attributes.get(\"conc\") as string) : big0;\n\n                let pl: PopulationList = new PopulationList(pl_attributes);\n                let labelText: string = pl.tagName + \" \" + i.toString() + \" \" + mapToString(pl_attributes);\n                let plDivID: string = addRID(aDiv.id, PopulationList.tagName, i.toString());\n                // Create a new collapsible div for the EigenvalueList.\n                let pDivID: string = addRID(plDivID, i.toString());\n                let pDiv: HTMLDivElement = createDiv(plDivID, level1);\n                let pcDiv: HTMLDivElement = getCollapsibleDiv(pDivID, plDiv, null, pDiv,\n                    labelText, boundary1, level0);\n                a.addPopulationList(pl);\n\n                // \"me:population\".\n                //let lt_ref_pop : Map<Big, Map<string, Big>> = new Map(); // Change to calculate the log of the time when creating the plots.\n                let t_ref_pop: Map<Big, Map<string, Big>> = new Map();\n                let refs: string[] = [];\n                refs.push(\"time\");\n\n                let xml_pn: HTMLCollectionOf<Element> = xml_pl[i].getElementsByTagName(Population.tagName);\n                if (xml_pn.length > 0) {\n                    for (let j: number = 0; j < xml_pn.length; j++) {\n                        let pn_attributes: Map<string, string> = getAttributes(xml_pn[j]);\n\n                        let population: Population = new Population(pn_attributes, []);\n                        pl.addPopulation(population);\n\n                        let t: Big = pn_attributes.get(\"time\") != undefined ? new Big(pn_attributes.get(\"time\") as string) : big0;\n                        //let lt: Big = pn_attributes.get(\"logTime\") != undefined ? new Big(pn_attributes.get(\"logTime\") as string) : big0; \n\n                        let ref_pop: Map<string, Big> = new Map();\n\n                        //lt_ref_pop.set(lt, ref_pop);\n                        t_ref_pop.set(t, ref_pop);\n\n                        let xml_pop: HTMLCollectionOf<Element> = xml_pn[j].getElementsByTagName(Pop.tagName);\n                        if (xml_pop.length > 0) {\n                            for (let k: number = 0; k < xml_pop.length; k++) {\n                                let pop_attributes: Map<string, string> = getAttributes(xml_pop[k]);\n                                let ref: string = pop_attributes.get(\"ref\") as string;\n                                if (j == 0) {\n                                    refs.push(ref);\n                                }\n                                let p: Big = new Big(getFirstChildNode(xml_pop[k])?.nodeValue as string);\n                                let pop: Pop = new Pop(pop_attributes, p);\n                                population.addPop(pop);\n                                ref_pop.set(ref, p);\n                            }\n                        }\n                    }\n                }\n                // Create graph.\n                let graphDiv: HTMLDivElement = createDiv(addRID(pDivID, s_graph), boundary1);\n                pDiv.appendChild(graphDiv);\n                let canvas: HTMLCanvasElement = document.createElement('canvas') as HTMLCanvasElement;\n                graphDiv.appendChild(canvas);\n                // Create an scatter plot.\n                let scatterPlot: ScatterPlot = new ScatterPlot(canvas, t_ref_pop, sp_font);\n                // Add the scatter plot to the collection.\n                scatterPlots.push(scatterPlot);\n                //scatterPlot.draw();\n                // Add a save to PNG button.\n                addSaveAsPNGButton(canvas, pDiv, graphDiv, labelText);\n\n                // Create Table.\n                let tableDiv: HTMLDivElement = createDiv(addRID(pDivID, s_table), boundary1);\n                pDiv.appendChild(tableDiv);\n                let tab = createTable(addRID(plDivID, s_table), boundary1);\n                addTableRow(tab, refs);\n                t_ref_pop.forEach((ref_pop, t) => {\n                    let row: string[] = [];\n                    row.push(t.toString());\n                    ref_pop.forEach((p, ref) => {\n                        row.push(p.toString());\n                    });\n                    addTableRow(tab, row);\n                });\n                tableDiv.appendChild(tab);\n                // Insert a save as csv button.\n                addSaveAsCSVButton(() => tableToCSV(tab), pDiv, tableDiv, labelText, boundary1);\n            }\n        }\n        // me:rateList.\n        let xml_rl: HTMLCollectionOf<Element> = xml_as[0].getElementsByTagName(RateList.tagName);\n        // Create a new collapsible div for the RateLists.\n        let rlDivID = addRID(aDivID, RateList.tagName);\n        let rlDiv: HTMLDivElement = createDiv(rlDivID, level1);\n        let rlcDiv: HTMLDivElement = getCollapsibleDiv(rlDivID, aDiv, null, rlDiv,\n            RateList.tagName + \"s\", boundary1, level1);\n        if (xml_rl.length > 0) {\n            // Create Table.\n            let tableDiv: HTMLDivElement = createDiv(addRID(rlDivID, s_table), boundary1);\n            rlDiv.appendChild(tableDiv);\n            let tab = createTable(addRID(plDivID, s_table), boundary1);\n            // Table Header\n            let th: string[] = [\"T\", \"conc\"];\n            for (let i: number = 0; i < xml_rl.length; i++) {\n                let rl_attributes: Map<string, string> = getAttributes(xml_rl[i]);\n                let values: string[] = [];\n                values.push(rl_attributes.get(\"T\") as string);\n                values.push(rl_attributes.get(\"conc\") as string);\n                /*if (i == 0) {\n                    Array.from(rl_attributes.keys()).forEach((key) => {\n                        refs.push(key);\n                    });\n                }*/\n                let rl: RateList = new RateList(rl_attributes);\n                a.addRateList(rl);\n                /*\n                let labelText: string = rl.tagName + \" \" + i.toString() + \" \" + mapToString(rl_attributes);\n                let rlDivID: string = addID(aDiv.id, RateList.tagName, i.toString());\n                // Create a new collapsible div for the RateList.\n                let rDivID: string = addID(rlDivID, i.toString());\n                let rDiv: HTMLDivElement = createDiv(rlDivID, level1);\n                let rcDiv: HTMLDivElement = getCollapsibleDiv(rDivID, rlDiv, null, rDiv,\n                    labelText, boundary1, level0);\n                */\n                // \"me:firstOrderRate\".\n                let xml_for: HTMLCollectionOf<Element> = xml_rl[i].getElementsByTagName(FirstOrderRate.tagName);\n                if (xml_for.length > 0) {\n                    //console.log(\"me:firstOrderRate length \" + xml_for.length);\n                    for (let j: number = 0; j < xml_for.length; j++) {\n                        let forate_attributes: Map<string, string> = getAttributes(xml_for[j]);\n                        if (i == 0) {\n                            let fromRef: string = forate_attributes.get(\"fromRef\") as string;\n                            let toRef: string = forate_attributes.get(\"toRef\") as string;\n                            th.push(fromRef + \"->\" + toRef);\n                        }\n                        let s: string = (getFirstChildNode(xml_for[j])?.nodeValue ?? \"\").trim();\n                        values.push(s);\n                        let forate: FirstOrderRate = new FirstOrderRate(forate_attributes, new Big(s));\n                        rl.addFirstOrderRate(forate);\n                    }\n                }\n                // \"me:firstOrderLoss\".\n                let xml_fol: HTMLCollectionOf<Element> = xml_rl[i].getElementsByTagName(FirstOrderLoss.tagName);\n                if (xml_fol.length > 0) {\n                    //console.log(\"me:firstOrderLoss length \" + xml_fol.length);\n                    for (let j: number = 0; j < xml_fol.length; j++) {\n                        let fol_attributes: Map<string, string> = getAttributes(xml_fol[j]);\n                        if (i == 0) {\n                            Array.from(fol_attributes.values()).forEach((v) => {\n                                th.push(\"loss of \" + v);\n                            });\n                        }\n                        let s: string = (getFirstChildNode(xml_fol[j])?.nodeValue ?? \"\").trim();\n                        values.push(s);\n                        let fol: FirstOrderLoss = new FirstOrderLoss(fol_attributes, new Big(s));\n                        rl.addFirstOrderLoss(fol);\n                    }\n                }\n                if (i == 0) {\n                    addTableRow(tab, th);\n                }\n                addTableRow(tab, values);\n                //rDiv.appendChild(createDiv(undefined, boundary1).appendChild(createLabel(th.join(\",\"), boundary1)));\n                //rDiv.appendChild(createDiv(undefined, boundary1).appendChild(createLabel(values.join(\",\"), boundary1)));\n            }\n            //console.log(refs);\n            tableDiv.appendChild(tab);\n            // Insert a save as csv button.\n            addSaveAsCSVButton(() => tableToCSV(tab), rlDiv, tableDiv, \"Bartis-Widom Phenomenological Rate Coefficients\", boundary1);\n        }\n    }\n    return aDiv;\n}\n\n/**\n * A class for creating a scatter plot.\n */\nclass ScatterPlot {\n\n    private canvas: HTMLCanvasElement;\n    private data: Map<Big, Map<string, Big>>;\n\n    constructor(canvas: HTMLCanvasElement, data: Map<Big, Map<string, Big>>, font: string) {\n        this.canvas = canvas;\n        this.data = data;\n        // Create a new scatter plot.\n        this.draw(font);\n    }\n\n    /**\n     * Draw the scatter plot.\n     */\n    draw(font: string): void {\n        this.canvas.width = 800; // Set the width of the canvas\n        this.canvas.height = 400; // Set the height of the canvas\n        const ctx: CanvasRenderingContext2D = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        //const ctx: CanvasRenderingContext2D = this.canvas.getContext(\"2d\") as CanvasRenderingContext2D;        \n        ctx.font = font;\n        ctx.clearRect(0, 0, this.canvas.width, this.canvas.height); // Clear the canvas.\n        let width: number = this.canvas.width;\n        let height: number = this.canvas.height;\n        let xMin: number = Number.MAX_VALUE;\n        let xMax: number = Number.MIN_VALUE;\n        //let yMin: number = Number.MAX_VALUE;\n        //let yMax: number = Number.MIN_VALUE;\n        let yMin: number = 0;\n        let yMax: number = 1;\n        let maxRefWidth: number = 0;\n        this.data.forEach((ref_pop, x) => {\n            let logx = Math.log10(x.toNumber());\n            xMin = Math.min(xMin, logx);\n            xMax = Math.max(xMax, logx);\n            ref_pop.forEach((p, ref) => {\n                maxRefWidth = Math.max(maxRefWidth, ctx.measureText(ref).width);\n            });\n            /*\n            ref_pop.forEach((p, ref) => {\n                yMin = Math.min(yMin, p.toNumber());\n                yMax = Math.max(yMax, p.toNumber());\n            });\n            */\n        });\n\n        // Calculate the width of the largest tick label\n        let yTicks: number = 2;\n        let yTickSpacing: number = 1;\n        let maxTickLabelWidth = 0;\n        for (let i: number = 0; i < yTicks; i++) {\n            let yTick: number = 1 - i * yTickSpacing;\n            let tickLabelWidth = ctx.measureText(yTick.toString()).width;\n            maxTickLabelWidth = Math.max(maxTickLabelWidth, tickLabelWidth);\n        }\n        // Calculate the height of the largest tick label\n        let metrics = ctx.measureText('0');\n        let th = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;\n        let xmargin: number = (th * 4);\n        // Set the margin based on the width of the largest tick label\n        let ymargin: number = maxTickLabelWidth + th + 20; // Add 20 for some extra space\n        let x0: number = ymargin;\n        let y0: number = height - (ymargin + (th * 3));\n        let x1: number = width - (xmargin + maxRefWidth + 20);\n        let y1: number = xmargin;\n\n        let xScale: number = (x1 - x0) / (xMax - xMin);\n        let yScale: number = (y1 - y0) / (yMax - yMin);\n        // Draw x-axis.\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x1, y0);\n        ctx.stroke();\n        // Draw y-axis.\n        ctx.beginPath();\n        ctx.moveTo(x0, y0);\n        ctx.lineTo(x0, y1);\n        ctx.stroke();\n        // Define an array of colors for different styles\n        let colors = [\"red\", \"green\", \"blue\", \"orange\", \"purple\", \"grey\", \"cyan\", \"magenta\", \"lightblue\", \"lightgreen\", \"pink\", \"yellow\", \"brown\", \"black\"];\n        let refToColor: Map<string, string> = new Map();\n        // Draw data points.\n        this.data.forEach((ref_pop, x) => {\n            // Define a reference id for each color\n            let i: number = 0;\n            ref_pop.forEach((p, ref) => {\n                let logx = Math.log10(x.toNumber());\n                let xPixel: number = x0 + ((logx - xMin) * xScale);\n                let pn: number = p.toNumber();\n                if (pn < 1) {\n                    let yPixel: number = y0 + ((pn - yMin) * yScale);\n                    if (yPixel > 0) {\n                        ctx.beginPath();\n                        ctx.arc(xPixel, yPixel, 2, 0, 2 * Math.PI); // Points\n                        // Use the ref index to select a color\n                        let color: string = colors[i % colors.length];\n                        refToColor.set(ref, color);\n                        ctx.fillStyle = color;\n                        ctx.fill();\n                    }\n                }\n                i++;\n            });\n        });\n        // Draw x-axis labels.\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"top\";\n        ctx.fillStyle = \"black\";\n        let xLabel: string = \"log10(time/secs)\";\n        ctx.fillText(xLabel, x0 + (x1 - x0) / 2, y0 + xmargin / 2);\n        // Draw y-axis labels.\n        ctx.save();\n        ctx.rotate(-Math.PI / 2);\n        ctx.textAlign = \"center\";\n        ctx.textBaseline = \"top\";\n        let yLabel: string = \"fractional population\";\n        ctx.fillText(yLabel, -y0 - (y1 - y0) / 2, x0 - ymargin);\n        ctx.restore();\n        // Draw x-axis ticks.\n        let xrange: number = xMax - xMin;\n        //console.log(\"xrange=\" + xrange);\n        let orderOfMagnitude = Math.floor(Math.log10(xrange));\n        //console.log(\"orderOfMagnitude=\" + orderOfMagnitude);\n        let xTickSpacing: number = Math.abs(Math.ceil(xrange / Math.pow(10, orderOfMagnitude)));\n        //console.log(\"xTickSpacing=\" + xTickSpacing);\n        let i: number = Math.ceil(xMin / xTickSpacing);\n        let xTick: number = i * xTickSpacing;;\n        // Draw x-axis ticks > 0.\n        while (xTick < xMax) {\n            //console.log(\"xTick=\" + xTick);\n            let xPixel: number = x0 + ((xTick - xMin) * xScale); // Convert xTick to pixel scale\n            ctx.beginPath();\n            ctx.moveTo(xPixel, y0);\n            ctx.lineTo(xPixel, y0 + 5);\n            ctx.stroke();\n            ctx.fillText(xTick.toString(), xPixel, y0 + 5);\n            xTick += xTickSpacing;\n        }\n        // Draw y-axis ticks.\n        for (let i: number = 0; i < yTicks; i++) {\n            let yTick: number = y0 - i * yTickSpacing;\n            ctx.beginPath();\n            ctx.moveTo(x0, yTick);\n            ctx.lineTo(x0 - 5, yTick);\n            ctx.stroke();\n        }\n        // Add a legend.\n        // Calculate the maxiimum text height of a ref.\n        let maxth = 0;\n        refToColor.forEach((color, ref) => {\n            let metrics = ctx.measureText(ref);\n            let th = metrics.actualBoundingBoxAscent + metrics.actualBoundingBoxDescent;\n            maxth = Math.max(maxth, th);\n        });\n\n        // Calculate the position of the legend.\n        let legendX = x1 + 20; // Position the legend 20 pixels to the right of the graph\n        let legendY = y1; // Position the legend at the top of the graph\n        let legendYSpacing = maxth; // Adjust as needed\n\n        // Draw a legend for each ref.\n        i = 0;\n        refToColor.forEach((color, ref) => {\n\n            let legendYPos = legendY + i * legendYSpacing;\n            ctx.fillStyle = color;\n            ctx.fillRect(legendX, legendYPos, maxth / 2, maxth / 2); // Draw a small rectangle of the ref's color\n\n            ctx.fillStyle = \"black\";\n            ctx.fillText(ref, legendX + th + (ctx.measureText(ref).width / 2), legendYPos - maxth / 2); // Draw the ref's name\n            i++;\n\n        });\n    }\n}\n\n\n/**\n * Convert an HTMLTableElement to a CSV string.\n */\nfunction tableToCSV(t: HTMLTableElement): string {\n    let csv: string = \"\";\n    let rows: HTMLCollectionOf<HTMLTableRowElement> = t.rows;\n    for (let i: number = 0; i < rows.length; i++) {\n        let row: HTMLTableRowElement = rows[i];\n        let cells: HTMLCollectionOf<HTMLTableCellElement> = row.cells;\n        for (let j: number = 0; j < cells.length; j++) {\n            csv += cells[j].textContent;\n            if (j < cells.length - 1) {\n                csv += \",\";\n            }\n        }\n        csv += \"\\n\";\n    }\n    return csv;\n}\n\n/**\n * For saving data to a file.\n * \n * @param data The data.\n * @param dataType The data type.\n * @param filename The filename.\n * @param isDataURL A boolean indicating whether the data is a data URL.\n */\nfunction saveDataAsFile(data: string, dataType: string, filename: string, isDataURL: boolean = false) {\n    let a = document.createElement('a');\n    a.href = isDataURL ? data : `data:${dataType};charset=utf-8,` + encodeURIComponent(data);\n    a.download = filename;\n    document.body.appendChild(a); // Append the anchor to the body.\n    a.click(); // Programmatically click the anchor to trigger the download.\n    document.body.removeChild(a); // Remove the anchor from the body after triggering the download.\n}\n\n/**\n * Save the Mesmer object as XML.\n */\nexport function saveXML() {\n    if (mesmer == null) {\n        alert(\"No Mesmer object to save.\");\n        return;\n    } else {\n        /**\n         * Organise mesmer nodes to be in order:\n         * title\n         * moleculeList\n         * reactionList\n         * conditions\n         * modelParameters\n         * control\n         * metadataList\n         * analysis\n         */\n        let mesmerOrdered: Mesmer = new Mesmer(mesmer.attributes);\n        mesmerOrdered.setTitle(mesmer.getTitle()!);\n        if (molecules != undefined) {\n            mesmerOrdered.setMoleculeList(new MoleculeList(new Map(), Array.from(molecules.values())));\n        }\n        if (reactions != undefined) {\n            mesmerOrdered.setReactionList(new ReactionList(new Map(), Array.from(reactions.values())));\n        }\n        if (mesmer.getConditionss() != undefined) {\n            mesmerOrdered.setConditionss(mesmer.getConditionss());\n        }\n        if (mesmer.getModelParameterss() != undefined) {\n            mesmerOrdered.setModelParameterss(mesmer.getModelParameterss());\n        }\n        if (mesmer.getControls() != undefined) {\n            mesmerOrdered.setControls(mesmer.getControls());\n        }\n        let mdl: MetadataList | undefined = mesmer.getMetadataList();\n        if (mdl != undefined) {\n            mesmerOrdered.setMetadataList(mdl);\n        }\n        let analysis: Analysis | undefined = mesmer.getAnalysis();\n        if (analysis != undefined) {\n            mesmerOrdered.setAnalysis(analysis);\n        }\n        console.log(\"saveXML\");\n        const pad: string = \"  \";\n        let xmlData = Mesmer.header + mesmerOrdered.toXML(pad, \"\");\n        let title: string = mesmerOrdered.getTitle()?.value as string;\n        saveDataAsFile(xmlData, 'text/xml', getFilename(title) + \".xml\");\n    }\n}\n\n/**\n * Convert name into a filename.\n */\nfunction getFilename(name: string): string {\n    return name.replace(/[^a-z0-9]/gi, '_');\n}\n\n/**\n * Create and append a Save as PNG button.\n * \n * @param canvas The canvas to save as an image.\n * @param divToAddTo The div to add the button to.\n * @param elementToInsertBefore The element to insert before.\n * @param name The name to be appended to the file.\n */\nexport function addSaveAsPNGButton(canvas: HTMLCanvasElement, divToAddTo: HTMLElement, elementToInsertBefore: HTMLElement | null, name: string) {\n    // Add a save button to save the canvas as an image.\n    let saveButtonID = addRID(divToAddTo.id, 'saveButton');\n    let saveButton: HTMLButtonElement = createButton(\"Save as PNG\", saveButtonID, boundary1);\n    if (elementToInsertBefore != null) {\n        divToAddTo.insertBefore(saveButton, elementToInsertBefore);\n    } else {\n        divToAddTo.appendChild(saveButton);\n    }\n    saveButton.addEventListener('click', () => {\n        let dataURL = canvas.toDataURL();\n        let title: string = mesmer.getTitle()?.value as string;\n        saveDataAsFile(dataURL, 'image/png', getFilename(title + \"_\" + name) + \".png\", true);\n    });\n}\n\n/**\n * Create and append a Save as CSV button.\n * \n * @param toCSV The function to convert to CSV.\n * @param divToAddTo The div to add the button to.\n * @param elementToInsertBefore The element to insert before.\n * @param name The name to be appended to the file.\n */\nexport function addSaveAsCSVButton(toCSV: Function, divToAddTo: HTMLElement, elementToInsertBefore: HTMLElement, name: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let bID = addRID(divToAddTo.id, s_button, s_save);\n    let b: HTMLButtonElement = createButton(\"Save as CSV\", bID, margin);\n    divToAddTo.insertBefore(b, elementToInsertBefore);\n    b.addEventListener('click', () => {\n        let csv: string = toCSV();\n        let title: string = mesmer.getTitle()?.value as string;\n        let fn: string = getFilename(title + \"_\" + name) + \".csv\";\n        saveDataAsFile(csv, 'text/csv', fn);\n        console.log(\"Saved \" + fn);\n    });\n}\n\n/**\n * Set a number node when the input value is changed.\n * @param node The number node.\n * @param input The input element.\n */\nexport function setNumberNode(node: NumberNode, input: HTMLInputElement): void {\n    try {\n        let value: Big = new Big(input.value);\n        //node.setValue(value);\n        node.value = value;\n    } catch (e) {\n        alert(\"Value invalid, resetting...\");\n    }\n    input.value = node.value.toString();\n}","import Big from 'big.js';\n\n/**\n * Get the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * For getting a valid HTML id. HTML id attribute values must contain at least one character and must not \n * contain any space characters. They also cannot start with a digit, two hyphens, or a hyphen followed by\n * a digit.\n * @param parts The parts of the ID.\n * @return A string ID composed of the parts joined by the delimiter.\n */\nexport function getID(...parts: (string | number)[]): string {\n    // Convert the components to strings.\n    let sparts = parts.map((part) => part.toString());\n    // Join the parts with a hyphen.\n    let id = sparts.join(\"-\");\n    // Replace any character that is not a letter (upper or lower case), a digit, a hyphen, or an underscore \n    // with an underscore. \n    let validId = id.replace(/[^a-zA-Z-_0-9]/g, '_');\n    // If the first character is a digit, two hyphens, or a hyphen followed by a digit, add an underscore to \n    // the beginning of the ID.\n    if (/^[0-9]|^--|-^[0-9]/.test(validId)) {\n        validId = '_' + validId;\n    }\n    return validId;\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0)) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @param delimiter The (optional) delimiter.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>, delimiter?: string): string {\n    if (map == null) {\n        return \"\";\n    }\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} set The set to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function setToString(set: Set<any>, delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(set).map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n * @throws An error if any string in the array is not a number.\n */\nexport function toNumberArray(s: string[]): Big[] {\n    let r: Big[] = [];\n    for (let i = 0; i < s.length; i++) {\n        r.push(new Big(s[i]));\n    }\n    return r;\n}\n\n/**\n * @param s The string to check.\n * @returns true iff s is a number.\n */\nexport function isNumeric(s: string): boolean {\n    try {\n        let x = new Big(s);\n        return true;\n    } catch (e) {\n        return false;\n    }\n}\n\n/**\n * For converting a string array to a number array.\n * @param xs The string to convert to a number array.\n * @returns A number array.\n */\nexport function bigArrayToString(s: Big[], delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ' ';\n    }\n    return s.map((value) => value.toString()).join(delimiter);\n}\n\n/**\n * @param x A number to check.\n * @param y Another number to check.\n * @returns The maximum of x and y.\n */\nexport function max(x: Big | null, y: Big): Big {\n    if (x == null) {\n        return y;\n    }\n    if (x.lt(y)) {\n        return y;\n    }\n    return x;\n}\n\n/**\n * @param x A number to check.\n * @param y Another number to check.\n * @returns The minimum of x and y.\n */\nexport function min(x: Big | null, y: Big): Big {\n    if (x == null) {\n        return y;\n    }\n    if (x.gt(y)) {\n        return y;\n    }\n    return x;\n}","/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n;(function (GLOBAL) {\r\n  'use strict';\r\n  var Big,\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n    // The default values below must be integers within the stated ranges.\r\n\r\n    /*\r\n     * The maximum number of decimal places (DP) of the results of operations involving division:\r\n     * div and sqrt, and pow with negative exponents.\r\n     */\r\n    DP = 20,            // 0 to MAX_DP\r\n\r\n    /*\r\n     * The rounding mode (RM) used when rounding to the above decimal places.\r\n     *\r\n     *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n     *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n     *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n     *  3  Away from zero.                                  (ROUND_UP)\r\n     */\r\n    RM = 1,             // 0, 1, 2 or 3\r\n\r\n    // The maximum value of DP and Big.DP.\r\n    MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n    // The maximum magnitude of the exponent argument to the pow method.\r\n    MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n    /*\r\n     * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n     * (JavaScript numbers: -7)\r\n     * -1000000 is the minimum recommended exponent value of a Big.\r\n     */\r\n    NE = -7,            // 0 to -1000000\r\n\r\n    /*\r\n     * The positive exponent (PE) at and above which toString returns exponential notation.\r\n     * (JavaScript numbers: 21)\r\n     * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n     */\r\n    PE = 21,            // 0 to 1000000\r\n\r\n    /*\r\n     * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n     * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n     * primitive number without a loss of precision.\r\n     */\r\n    STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n    // Error messages.\r\n    NAME = '[big.js] ',\r\n    INVALID = NAME + 'Invalid ',\r\n    INVALID_DP = INVALID + 'decimal places',\r\n    INVALID_RM = INVALID + 'rounding mode',\r\n    DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n    // The shared prototype object.\r\n    P = {},\r\n    UNDEFINED = void 0,\r\n    NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n  /*\r\n   * Create and return a Big constructor.\r\n   */\r\n  function _Big_() {\r\n\r\n    /*\r\n     * The Big constructor and exported function.\r\n     * Create and return a new instance of a Big number object.\r\n     *\r\n     * n {number|string|Big} A numeric value.\r\n     */\r\n    function Big(n) {\r\n      var x = this;\r\n\r\n      // Enable constructor usage without new.\r\n      if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n      // Duplicate.\r\n      if (n instanceof Big) {\r\n        x.s = n.s;\r\n        x.e = n.e;\r\n        x.c = n.c.slice();\r\n      } else {\r\n        if (typeof n !== 'string') {\r\n          if (Big.strict === true && typeof n !== 'bigint') {\r\n            throw TypeError(INVALID + 'value');\r\n          }\r\n\r\n          // Minus zero?\r\n          n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n        }\r\n\r\n        parse(x, n);\r\n      }\r\n\r\n      // Retain a reference to this Big constructor.\r\n      // Shadow Big.prototype.constructor which points to Object.\r\n      x.constructor = Big;\r\n    }\r\n\r\n    Big.prototype = P;\r\n    Big.DP = DP;\r\n    Big.RM = RM;\r\n    Big.NE = NE;\r\n    Big.PE = PE;\r\n    Big.strict = STRICT;\r\n    Big.roundDown = 0;\r\n    Big.roundHalfUp = 1;\r\n    Big.roundHalfEven = 2;\r\n    Big.roundUp = 3;\r\n\r\n    return Big;\r\n  }\r\n\r\n\r\n  /*\r\n   * Parse the number or string value passed to a Big constructor.\r\n   *\r\n   * x {Big} A Big number instance.\r\n   * n {number|string} A numeric value.\r\n   */\r\n  function parse(x, n) {\r\n    var e, i, nl;\r\n\r\n    if (!NUMERIC.test(n)) {\r\n      throw Error(INVALID + 'number');\r\n    }\r\n\r\n    // Determine sign.\r\n    x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n    // Decimal point?\r\n    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n    // Exponential form?\r\n    if ((i = n.search(/e/i)) > 0) {\r\n\r\n      // Determine exponent.\r\n      if (e < 0) e = i;\r\n      e += +n.slice(i + 1);\r\n      n = n.substring(0, i);\r\n    } else if (e < 0) {\r\n\r\n      // Integer.\r\n      e = n.length;\r\n    }\r\n\r\n    nl = n.length;\r\n\r\n    // Determine leading zeros.\r\n    for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n    if (i == nl) {\r\n\r\n      // Zero.\r\n      x.c = [x.e = 0];\r\n    } else {\r\n\r\n      // Determine trailing zeros.\r\n      for (; nl > 0 && n.charAt(--nl) == '0';);\r\n      x.e = e - i - 1;\r\n      x.c = [];\r\n\r\n      // Convert string to array of digits without leading/trailing zeros.\r\n      for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n   *\r\n   * x {Big} The Big to round.\r\n   * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n   * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   * [more] {boolean} Whether the result of division was truncated.\r\n   */\r\n  function round(x, sd, rm, more) {\r\n    var xc = x.c;\r\n\r\n    if (rm === UNDEFINED) rm = x.constructor.RM;\r\n    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n      throw Error(INVALID_RM);\r\n    }\r\n\r\n    if (sd < 1) {\r\n      more =\r\n        rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n        rm === 1 && xc[0] >= 5 ||\r\n        rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n      );\r\n\r\n      xc.length = 1;\r\n\r\n      if (more) {\r\n\r\n        // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n        x.e = x.e - sd + 1;\r\n        xc[0] = 1;\r\n      } else {\r\n\r\n        // Zero.\r\n        xc[0] = x.e = 0;\r\n      }\r\n    } else if (sd < xc.length) {\r\n\r\n      // xc[sd] is the digit after the digit that may be rounded up.\r\n      more =\r\n        rm === 1 && xc[sd] >= 5 ||\r\n        rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n          (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n        rm === 3 && (more || !!xc[0]);\r\n\r\n      // Remove any digits after the required precision.\r\n      xc.length = sd;\r\n\r\n      // Round up?\r\n      if (more) {\r\n\r\n        // Rounding up may mean the previous digit has to be rounded up.\r\n        for (; ++xc[--sd] > 9;) {\r\n          xc[sd] = 0;\r\n          if (sd === 0) {\r\n            ++x.e;\r\n            xc.unshift(1);\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // Remove trailing zeros.\r\n      for (sd = xc.length; !xc[--sd];) xc.pop();\r\n    }\r\n\r\n    return x;\r\n  }\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of Big x in normal or exponential notation.\r\n   * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n   */\r\n  function stringify(x, doExponential, isNonzero) {\r\n    var e = x.e,\r\n      s = x.c.join(''),\r\n      n = s.length;\r\n\r\n    // Exponential notation?\r\n    if (doExponential) {\r\n      s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n    // Normal notation.\r\n    } else if (e < 0) {\r\n      for (; ++e;) s = '0' + s;\r\n      s = '0.' + s;\r\n    } else if (e > 0) {\r\n      if (++e > n) {\r\n        for (e -= n; e--;) s += '0';\r\n      } else if (e < n) {\r\n        s = s.slice(0, e) + '.' + s.slice(e);\r\n      }\r\n    } else if (n > 1) {\r\n      s = s.charAt(0) + '.' + s.slice(1);\r\n    }\r\n\r\n    return x.s < 0 && isNonzero ? '-' + s : s;\r\n  }\r\n\r\n\r\n  // Prototype/instance methods\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the absolute value of this Big.\r\n   */\r\n  P.abs = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = 1;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return 1 if the value of this Big is greater than the value of Big y,\r\n   *       -1 if the value of this Big is less than the value of Big y, or\r\n   *        0 if they have the same value.\r\n   */\r\n  P.cmp = function (y) {\r\n    var isneg,\r\n      x = this,\r\n      xc = x.c,\r\n      yc = (y = new x.constructor(y)).c,\r\n      i = x.s,\r\n      j = y.s,\r\n      k = x.e,\r\n      l = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n    // Signs differ?\r\n    if (i != j) return i;\r\n\r\n    isneg = i < 0;\r\n\r\n    // Compare exponents.\r\n    if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n    j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n    // Compare digit by digit.\r\n    for (i = -1; ++i < j;) {\r\n      if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n    }\r\n\r\n    // Compare lengths.\r\n    return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n   * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.div = function (y) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      a = x.c,                  // dividend\r\n      b = (y = new Big(y)).c,   // divisor\r\n      k = x.s == y.s ? 1 : -1,\r\n      dp = Big.DP;\r\n\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n\r\n    // Divisor is zero?\r\n    if (!b[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    // Dividend is 0? Return +-0.\r\n    if (!a[0]) {\r\n      y.s = k;\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    var bl, bt, n, cmp, ri,\r\n      bz = b.slice(),\r\n      ai = bl = b.length,\r\n      al = a.length,\r\n      r = a.slice(0, bl),   // remainder\r\n      rl = r.length,\r\n      q = y,                // quotient\r\n      qc = q.c = [],\r\n      qi = 0,\r\n      p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n    q.s = k;\r\n    k = p < 0 ? 0 : p;\r\n\r\n    // Create version of divisor with leading zero.\r\n    bz.unshift(0);\r\n\r\n    // Add zeros to make remainder as long as divisor.\r\n    for (; rl++ < bl;) r.push(0);\r\n\r\n    do {\r\n\r\n      // n is how many times the divisor goes into current remainder.\r\n      for (n = 0; n < 10; n++) {\r\n\r\n        // Compare divisor and remainder.\r\n        if (bl != (rl = r.length)) {\r\n          cmp = bl > rl ? 1 : -1;\r\n        } else {\r\n          for (ri = -1, cmp = 0; ++ri < bl;) {\r\n            if (b[ri] != r[ri]) {\r\n              cmp = b[ri] > r[ri] ? 1 : -1;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n\r\n        // If divisor < remainder, subtract divisor from remainder.\r\n        if (cmp < 0) {\r\n\r\n          // Remainder can't be more than 1 digit longer than divisor.\r\n          // Equalise lengths using divisor with extra leading zero?\r\n          for (bt = rl == bl ? b : bz; rl;) {\r\n            if (r[--rl] < bt[rl]) {\r\n              ri = rl;\r\n              for (; ri && !r[--ri];) r[ri] = 9;\r\n              --r[ri];\r\n              r[rl] += 10;\r\n            }\r\n            r[rl] -= bt[rl];\r\n          }\r\n\r\n          for (; !r[0];) r.shift();\r\n        } else {\r\n          break;\r\n        }\r\n      }\r\n\r\n      // Add the digit n to the result array.\r\n      qc[qi++] = cmp ? n : ++n;\r\n\r\n      // Update the remainder.\r\n      if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n      else r = [a[ai]];\r\n\r\n    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n    // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n    if (!qc[0] && qi != 1) {\r\n\r\n      // There can't be more than one zero.\r\n      qc.shift();\r\n      q.e--;\r\n      p--;\r\n    }\r\n\r\n    // Round?\r\n    if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n    return q;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n   */\r\n  P.eq = function (y) {\r\n    return this.cmp(y) === 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n   * false.\r\n   */\r\n  P.gt = function (y) {\r\n    return this.cmp(y) > 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.gte = function (y) {\r\n    return this.cmp(y) > -1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n   */\r\n  P.lt = function (y) {\r\n    return this.cmp(y) < 0;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n   * return false.\r\n   */\r\n  P.lte = function (y) {\r\n    return this.cmp(y) < 1;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n   */\r\n  P.minus = P.sub = function (y) {\r\n    var i, j, t, xlty,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    // Signs differ?\r\n    if (a != b) {\r\n      y.s = -b;\r\n      return x.plus(y);\r\n    }\r\n\r\n    var xc = x.c.slice(),\r\n      xe = x.e,\r\n      yc = y.c,\r\n      ye = y.e;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (yc[0]) {\r\n        y.s = -b;\r\n      } else if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = 1;\r\n      }\r\n      return y;\r\n    }\r\n\r\n    // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n    if (a = xe - ye) {\r\n\r\n      if (xlty = a < 0) {\r\n        a = -a;\r\n        t = xc;\r\n      } else {\r\n        ye = xe;\r\n        t = yc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (b = a; b--;) t.push(0);\r\n      t.reverse();\r\n    } else {\r\n\r\n      // Exponents equal. Check digit by digit.\r\n      j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n      for (a = b = 0; b < j; b++) {\r\n        if (xc[b] != yc[b]) {\r\n          xlty = xc[b] < yc[b];\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // x < y? Point xc to the array of the bigger number.\r\n    if (xlty) {\r\n      t = xc;\r\n      xc = yc;\r\n      yc = t;\r\n      y.s = -y.s;\r\n    }\r\n\r\n    /*\r\n     * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n     * needs to start at yc.length.\r\n     */\r\n    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n    // Subtract yc from xc.\r\n    for (b = i; j > a;) {\r\n      if (xc[--j] < yc[j]) {\r\n        for (i = j; i && !xc[--i];) xc[i] = 9;\r\n        --xc[i];\r\n        xc[j] += 10;\r\n      }\r\n\r\n      xc[j] -= yc[j];\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (; xc[--b] === 0;) xc.pop();\r\n\r\n    // Remove leading zeros and adjust exponent accordingly.\r\n    for (; xc[0] === 0;) {\r\n      xc.shift();\r\n      --ye;\r\n    }\r\n\r\n    if (!xc[0]) {\r\n\r\n      // n - n = +0\r\n      y.s = 1;\r\n\r\n      // Result must be zero.\r\n      xc = [ye = 0];\r\n    }\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n   */\r\n  P.mod = function (y) {\r\n    var ygtx,\r\n      x = this,\r\n      Big = x.constructor,\r\n      a = x.s,\r\n      b = (y = new Big(y)).s;\r\n\r\n    if (!y.c[0]) {\r\n      throw Error(DIV_BY_ZERO);\r\n    }\r\n\r\n    x.s = y.s = 1;\r\n    ygtx = y.cmp(x) == 1;\r\n    x.s = a;\r\n    y.s = b;\r\n\r\n    if (ygtx) return new Big(x);\r\n\r\n    a = Big.DP;\r\n    b = Big.RM;\r\n    Big.DP = Big.RM = 0;\r\n    x = x.div(y);\r\n    Big.DP = a;\r\n    Big.RM = b;\r\n\r\n    return this.minus(x.times(y));\r\n  };\r\n  \r\n  \r\n  /*\r\n   * Return a new Big whose value is the value of this Big negated.\r\n   */\r\n  P.neg = function () {\r\n    var x = new this.constructor(this);\r\n    x.s = -x.s;\r\n    return x;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n   */\r\n  P.plus = P.add = function (y) {\r\n    var e, k, t,\r\n      x = this,\r\n      Big = x.constructor;\r\n\r\n    y = new Big(y);\r\n\r\n    // Signs differ?\r\n    if (x.s != y.s) {\r\n      y.s = -y.s;\r\n      return x.minus(y);\r\n    }\r\n\r\n    var xe = x.e,\r\n      xc = x.c,\r\n      ye = y.e,\r\n      yc = y.c;\r\n\r\n    // Either zero?\r\n    if (!xc[0] || !yc[0]) {\r\n      if (!yc[0]) {\r\n        if (xc[0]) {\r\n          y = new Big(x);\r\n        } else {\r\n          y.s = x.s;\r\n        }\r\n      }\r\n      return y;\r\n    }\r\n\r\n    xc = xc.slice();\r\n\r\n    // Prepend zeros to equalise exponents.\r\n    // Note: reverse faster than unshifts.\r\n    if (e = xe - ye) {\r\n      if (e > 0) {\r\n        ye = xe;\r\n        t = yc;\r\n      } else {\r\n        e = -e;\r\n        t = xc;\r\n      }\r\n\r\n      t.reverse();\r\n      for (; e--;) t.push(0);\r\n      t.reverse();\r\n    }\r\n\r\n    // Point xc to the longer array.\r\n    if (xc.length - yc.length < 0) {\r\n      t = yc;\r\n      yc = xc;\r\n      xc = t;\r\n    }\r\n\r\n    e = yc.length;\r\n\r\n    // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n    for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n    // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n    if (k) {\r\n      xc.unshift(k);\r\n      ++ye;\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n    y.c = xc;\r\n    y.e = ye;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a Big whose value is the value of this Big raised to the power n.\r\n   * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n   * mode Big.RM.\r\n   *\r\n   * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n   */\r\n  P.pow = function (n) {\r\n    var x = this,\r\n      one = new x.constructor('1'),\r\n      y = one,\r\n      isneg = n < 0;\r\n\r\n    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n      throw Error(INVALID + 'exponent');\r\n    }\r\n\r\n    if (isneg) n = -n;\r\n\r\n    for (;;) {\r\n      if (n & 1) y = y.times(x);\r\n      n >>= 1;\r\n      if (!n) break;\r\n      x = x.times(x);\r\n    }\r\n\r\n    return isneg ? one.div(y) : y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n   * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.prec = function (sd, rm) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    return round(new this.constructor(this), sd, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n   * using rounding mode rm, or Big.RM if rm is not specified.\r\n   * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n   * If dp is not specified, round to 0 decimal places.\r\n   *\r\n   * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.round = function (dp, rm) {\r\n    if (dp === UNDEFINED) dp = 0;\r\n    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    return round(new this.constructor(this), dp + this.e + 1, rm);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n   * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n   */\r\n  P.sqrt = function () {\r\n    var r, c, t,\r\n      x = this,\r\n      Big = x.constructor,\r\n      s = x.s,\r\n      e = x.e,\r\n      half = new Big('0.5');\r\n\r\n    // Zero?\r\n    if (!x.c[0]) return new Big(x);\r\n\r\n    // Negative?\r\n    if (s < 0) {\r\n      throw Error(NAME + 'No square root');\r\n    }\r\n\r\n    // Estimate.\r\n    s = Math.sqrt(x + '');\r\n\r\n    // Math.sqrt underflow/overflow?\r\n    // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n    if (s === 0 || s === 1 / 0) {\r\n      c = x.c.join('');\r\n      if (!(c.length + e & 1)) c += '0';\r\n      s = Math.sqrt(c);\r\n      e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n      r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n    } else {\r\n      r = new Big(s + '');\r\n    }\r\n\r\n    e = r.e + (Big.DP += 4);\r\n\r\n    // Newton-Raphson iteration.\r\n    do {\r\n      t = r;\r\n      r = half.times(t.plus(x.div(t)));\r\n    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n    return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a new Big whose value is the value of this Big times the value of Big y.\r\n   */\r\n  P.times = P.mul = function (y) {\r\n    var c,\r\n      x = this,\r\n      Big = x.constructor,\r\n      xc = x.c,\r\n      yc = (y = new Big(y)).c,\r\n      a = xc.length,\r\n      b = yc.length,\r\n      i = x.e,\r\n      j = y.e;\r\n\r\n    // Determine sign of result.\r\n    y.s = x.s == y.s ? 1 : -1;\r\n\r\n    // Return signed 0 if either 0.\r\n    if (!xc[0] || !yc[0]) {\r\n      y.c = [y.e = 0];\r\n      return y;\r\n    }\r\n\r\n    // Initialise exponent of result as x.e + y.e.\r\n    y.e = i + j;\r\n\r\n    // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n    if (a < b) {\r\n      c = xc;\r\n      xc = yc;\r\n      yc = c;\r\n      j = a;\r\n      a = b;\r\n      b = j;\r\n    }\r\n\r\n    // Initialise coefficient array of result with zeros.\r\n    for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n    // Multiply.\r\n\r\n    // i is initially xc.length.\r\n    for (i = b; i--;) {\r\n      b = 0;\r\n\r\n      // a is yc.length.\r\n      for (j = a + i; j > i;) {\r\n\r\n        // Current sum of products at this digit position, plus carry.\r\n        b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n        c[j--] = b % 10;\r\n\r\n        // carry\r\n        b = b / 10 | 0;\r\n      }\r\n\r\n      c[j] = b;\r\n    }\r\n\r\n    // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n    if (b) ++y.e;\r\n    else c.shift();\r\n\r\n    // Remove trailing zeros.\r\n    for (i = c.length; !c[--i];) c.pop();\r\n    y.c = c;\r\n\r\n    return y;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toExponential = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), ++dp, rm);\r\n      for (; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, true, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n   * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n   *\r\n   * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   *\r\n   * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n   * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n   */\r\n  P.toFixed = function (dp, rm) {\r\n    var x = this,\r\n      n = x.c[0];\r\n\r\n    if (dp !== UNDEFINED) {\r\n      if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n        throw Error(INVALID_DP);\r\n      }\r\n      x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n      // x.e may have changed if the value is rounded up.\r\n      for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, false, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Omit the sign for negative zero.\r\n   */\r\n  P.toJSON = P.toString = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return the value of this Big as a primitve number.\r\n   */\r\n  P.toNumber = function () {\r\n    var n = Number(stringify(this, true, true));\r\n    if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n      throw Error(NAME + 'Imprecise conversion');\r\n    }\r\n    return n;\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big rounded to sd significant digits using\r\n   * rounding mode rm, or Big.RM if rm is not specified.\r\n   * Use exponential notation if sd is less than the number of digits necessary to represent\r\n   * the integer part of the value in normal notation.\r\n   *\r\n   * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n   * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n   */\r\n  P.toPrecision = function (sd, rm) {\r\n    var x = this,\r\n      Big = x.constructor,\r\n      n = x.c[0];\r\n\r\n    if (sd !== UNDEFINED) {\r\n      if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n        throw Error(INVALID + 'precision');\r\n      }\r\n      x = round(new Big(x), sd, rm);\r\n      for (; x.c.length < sd;) x.c.push(0);\r\n    }\r\n\r\n    return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n  };\r\n\r\n\r\n  /*\r\n   * Return a string representing the value of this Big.\r\n   * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n   * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n   * Include the sign for negative zero.\r\n   */\r\n  P.valueOf = function () {\r\n    var x = this,\r\n      Big = x.constructor;\r\n    if (Big.strict === true) {\r\n      throw Error(NAME + 'valueOf disallowed');\r\n    }\r\n    return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n  };\r\n\r\n\r\n  // Export\r\n\r\n\r\n  Big = _Big_();\r\n\r\n  Big['default'] = Big.Big = Big;\r\n\r\n  //AMD.\r\n  if (typeof define === 'function' && define.amd) {\r\n    define(function () { return Big; });\r\n\r\n  // Node and other CommonJS-like environments that support module.exports.\r\n  } else if (typeof module !== 'undefined' && module.exports) {\r\n    module.exports = Big;\r\n\r\n  //Browser.\r\n  } else {\r\n    GLOBAL.Big = Big;\r\n  }\r\n})(this);\r\n","import Big from \"big.js\";\nimport { getSelfClosingTag } from \"./html.js\";\nimport { bigArrayToString } from \"./util.js\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param element The xml element to search in.\n * @returns The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a Node throwing an Error if this is null.\n * @param node The node to get the nodeValue of.\n * @returns The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: Node): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * For convenience and to cope with when there is no node value as there is a blank.\n * @param e The Element\n * @returns The node value of the first child or \"\".\n */\nexport function getInputString(e: Element) {\n    let s: string;\n    let firstChildNode = getFirstChildNode(e);\n    if (firstChildNode) {\n        s = getNodeValue(firstChildNode).trim();\n    } else {\n        s = \"\";\n    }\n    return s;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(undefined, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }\n}\n\n/**\n * A class for representing A Tag with attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        if (this.attributes) {\n            this.attributes.forEach((value, key) => {\n                r += `${key}(${value}), `;\n            });\n        }\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n        for (let [k, v] of this.attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: Big;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: Big) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.toString(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: Big[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \" \";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, tagName: string, values: Big[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter != undefined) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns The values.\n     */\n    getValues(): Big[] {\n        return this.values;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    setValues(values: Big[]) {\n        this.values = values;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(bigArrayToString(this.values, this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): void {\n        this.nodes.set(this.nodes.size, node);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    override toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        if (this.nodes.size > 0) {\n\n            let i: number = 0;\n\n            this.nodes.forEach((v) => {\n                if (v == undefined) {\n                    console.warn(\"Node \" + i.toString() + \" is undefined this.nodes.size = \" + this.nodes.size);\n                } else {\n                    if (v instanceof NodeWithNodes) {\n                        s += (v as NodeWithNodes).toXML(pad, padding1);\n                    } else if (v instanceof TagWithAttributes) {\n                        s += (v as TagWithAttributes).toXML(padding1);\n                    } else {\n                        s += (v as Tag).toXML(padding1);\n                    }\n                }\n            });\n            return getTag(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s: string = getSelfClosingTag(this.attributes, this.tagName);\n            if (padding != undefined) {\n                return \"\\n\" + padding + s;\n            }\n            return s;\n        }\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param element The element to get the attributes of.\n * @returns The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName.trim(), attributeValue.trim());\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param xml The XML document or element.\n * @param tagName The tag name.\n * @returns The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}","import { getID } from \"./util\";\n\nexport const s_button: string = \"button\";\nexport const s_collapsible: string = \"collapsible\";\nexport const sy_downTriangle: string = \"\\u25BC\"; // ▼\nexport const sy_upTriangle: string = \"\\u25B2\"; // ▲\nexport const s_select: string = \"select\";\n\n/**\n * Create a HTMLDivElement containing a HTMLButtonElement and a HTMLDivElement which display is toggled as the button is actioned. \n * By default the content is not displayed. Then if the button is actioned the content is diplayed, then if actioned again it is \n * not diplayed and so on...\n * \n * @param id The id of the HTMLDivElement returned which is also used to generate ids of components.\n * @param divToAppendTo The div to append to.\n * @param elementToInsertBefore The element to insert before. (If null then the content will be appended to the div.)\n * @param content The content to expand/collapse.\n * @param buttonLabel The label for the button.\n * @param buttonMargin The margin for the button.\n * @param margin The margin for HTMLDivElement created. \n * @returns A HTMLDivElement containing a HTMLButtonElement and the content.\n */\nexport function getCollapsibleDiv(id: string, divToAddTo: HTMLDivElement, elementToInsertBefore: Element | null,\n            content: HTMLElement, buttonLabel: string, \n            componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n            margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createDiv(id, margin);\n    let bid: string = getID(id, s_button);\n    let b: HTMLButtonElement = createButton(buttonLabel + \" \" + sy_downTriangle, bid, componentMargin);\n    b.className = s_collapsible;\n    b.addEventListener('click', function () {\n        let parts = b.textContent!.split(' ');\n        parts[parts.length - 1] = parts[parts.length - 1] === sy_downTriangle ? sy_upTriangle : sy_downTriangle;\n        b.textContent = parts.join(' ');\n    });\n    // Add the button and content to the div.\n    div.appendChild(b);\n    div.appendChild(content);\n    if (elementToInsertBefore != null) {\n        divToAddTo.insertBefore(div, elementToInsertBefore);\n    } else {\n        divToAddTo.appendChild(div);\n    }\n    setCollapsibleEventListener(b);\n    return div;\n}\n\n/**\n * For setting the event listener for a collapsible element.\n * @param e The element to add the event listener to.\n */\nfunction setCollapsibleEventListener(e: Element): void {\n    // Remove any existing event listener.\n    e.removeEventListener(\"click\", toggleCollapsible);\n    // Add new event listener.\n    e.addEventListener(\"click\", toggleCollapsible);\n}\n\n/**\n * For toggling the collapsible content.\n */\nfunction toggleCollapsible(this: HTMLElement): void {\n    this.classList.toggle(\"active\");\n    let nes: Element | null = this.nextElementSibling;\n    if (nes != null) {\n        if (nes instanceof HTMLDivElement) {\n            if (nes.style.display === \"block\") {\n                nes.style.display = \"none\";\n            } else {\n                nes.style.display = \"block\";\n            }\n        } else {\n            console.log(\"toggleCollapsible: nextElementSibling is not an HTMLDivElement\");\n        }\n    } else {\n        console.log(\"toggleCollapsible: nextElementSibling is null\");\n    }\n}\n\n/**\n * Create and return HTMLDivElement that contains an HTMLLabelElement and a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLSelectElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @param func The function called on a change to the input.\n * @param value The value of the input.\n * @param labelTextContent The label text.\n * @returns A HTMLDivElement that contains a HTMLLabelElement and a HTMLInputElement.\n */\nexport function createLabelWithInput(type: string, id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    func: (event: Event) => any, value: string, labelTextContent: string): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, divMargin);\n    let input: HTMLInputElement = createInputWithFunction(type, id, componentMargin, func, value);\n    let label: HTMLLabelElement = createLabel(labelTextContent, componentMargin);\n    label.htmlFor = id;\n    div.appendChild(label);\n    div.appendChild(input);\n    return div;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the HTMLInputElement.\n * @param margin The margin for the HTMLInputElement.\n * @param func The function called on a change to the input.\n * @returns A HTMLInputElement.\n */\nexport function createInputWithFunction(type: string, id: string, \n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    func: (event: Event) => any, value: string): HTMLInputElement {\n    let input: HTMLInputElement = createInput(type, id, margin);\n    input.onchange = func;\n    input.value = value;\n    resizeInputElement(input);\n    return input;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\", \"checkbox\").\n * @param id The id of the HTMLInputElement.\n * @param margin The margin for the HTMLInputElement.\n * @returns A HTMLInputElement.\n */\nexport function createInput(type: string, id: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string })\n    : HTMLInputElement {\n    let input: HTMLInputElement = document.createElement('input');\n    input.type = type;\n    input.id = id;\n    Object.assign(input.style, margin);\n    input.style.fontSize = '1em'; // Set the font size with a relative unit.\n    input.classList.add('auto-width');\n    return input;\n}\n\n/**\n * Create and return HTMLDivElement that contains an HTMLLabelElement and a HTMLTextAreaElement.\n * @param id The id of the HTMLTextAreaElement.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLSelectElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @param func The function called on a change to the input.\n * @param value The value of the input.\n * @param labelTextContent The label text.\n * @returns A HTMLDivElement that contains a HTMLLabelElement and a HTMLTextAreaElement.\n */\nexport function createLabelWithTextArea(id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    func: (event: Event) => any, value: string, labelTextContent: string): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, divMargin);\n    let ta: HTMLTextAreaElement = createTextAreaWithFunction(id, componentMargin, func, value);\n    let label: HTMLLabelElement = createLabel(labelTextContent, componentMargin);\n    label.htmlFor = id;\n    div.appendChild(label);\n    div.appendChild(ta);\n    return div;\n}\n\n/**\n * Create and return a HTMLTextAreaElement.\n * @param id The id of the HTMLTextAreaElement.\n * @param margin The margin for the HTMLInputElement.\n * @param func The function called on a change to the HTMLTextAreaElement.\n * @returns A HTMLInputElement.\n */\nexport function createTextAreaWithFunction(id: string, \n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    func: (event: Event) => any, value: string): HTMLTextAreaElement {\n    let ta: HTMLTextAreaElement = createTextArea(id, margin);\n    ta.onchange = func;\n    ta.value = value;\n    resizeTextAreaElement(ta);\n    return ta;\n}\n\n/**\n * Create and return a HTMLTextAreaElement.\n * @param id The id of the HTMLTextAreaElement.\n * @param margin The margin for the HTMLTextAreaElement.\n * @returns A HTMLTextAreaElement.\n */\nexport function createTextArea(id: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string })\n    : HTMLTextAreaElement {\n    let ta: HTMLTextAreaElement = document.createElement('textarea');\n    ta.id = id;\n    Object.assign(ta.style, margin);\n    ta.style.fontSize = '1em'; // Set the font size with a relative unit.\n    ta.classList.add('auto-width');\n    return ta;\n}\n\n/**\n * Create a self closing tag.\n * @param attributes The attributes.\n * @param tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | undefined, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}\n\n/**\n * For resizing an HTMLInputElement to the width of what it contains.\n * @param i The HTMLInputElement to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeInputElement(i: HTMLInputElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 4;\n    }\n    i.style.width = (i.value.length + minSize) + \"ch\";\n}\n\n/**\n * For resizing an HTMLSelectElement to the width of what it contains.\n * \n * @param s The HTMLSelectElement to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeSelectElement(s: HTMLSelectElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 6;\n    }\n    s.style.width = (s.value.length + minSize) + \"ch\";\n}\n\n/**\n * For resizing an HTMLTextAreaElement to the width of what it contains.\n * \n * @param ta The HTMLTextAreaElement to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeTextAreaElement(ta: HTMLTextAreaElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 6;\n    }\n    ta.style.width = (ta.value.length + minSize) + \"ch\";\n}\n\n\n\n/**\n * Create and return an HTMLSelectElement.\n * \n * @param options The options.\n * @param name The name for the select.\n * @param value The value for the select.\n * @param id id + \"_\" + name will be the select element ID.\n * @param margin The margin for the HTMLSelectElement.\n * @returns An HTMLSelectElement.\n */\nexport function createSelectElement(options: string[] | Set<string>, name: string, value: string, id: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLSelectElement {\n    let select: HTMLSelectElement = document.createElement('select');\n    options.forEach(option => {\n        select.name = name;\n        select.id = id;\n        let optionElement: HTMLOptionElement = document.createElement('option');\n        optionElement.value = option;\n        optionElement.text = option;\n        select.appendChild(optionElement);\n    });\n    select.value = value;\n    select.style.fontSize = '1em'; // Set the font size with a relative unit.\n    select.classList.add('auto-width');\n    resizeSelectElement(select);\n    Object.assign(select.style, margin);\n    return select;\n}\n\n/**\n * Create and return an HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n * \n * @param textContent The text content of the label.\n * @param options The options for the HTMLSelectElement.\n * @param name The name for the HTMLSelectElement.\n * @param value The value for the HTMLSelectElement.\n * @param id The id for the select.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLSelectElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @returns A HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n */\nexport function createLabelWithSelect(textContent: string, options: string[] | Set<string>,\n    name: string, value: string, id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(id, divMargin);\n    let label: HTMLLabelElement = createLabel(textContent, componentMargin);\n    div.appendChild(label);\n    div.appendChild(createSelectElement(options, name, value, getID(id, s_select), componentMargin));\n    return div;\n}\n\n/**\n * Create and return an HTMLButtonElement.\n * \n * @param textContent The text content of the HTMLButtonElement.\n * @param id The id of the button.\n * @param margin The margin to go around the HTMLButtonElement.\n * @returns An HTMLButtonElement with the textContent and specified margin.\n */\nexport function createButton(textContent: string, id?: string,\n    boundary?: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLButtonElement {\n    let button: HTMLButtonElement = document.createElement('button');\n    button.textContent = textContent;\n    if (id != undefined) {\n        button.id = id;\n    }\n    if (boundary != undefined) {\n        Object.assign(button.style, boundary);\n    }\n    button.style.fontSize = '1em'; // Set the font size with a relative unit.\n    return button;\n}\n\n/**\n * Create and return an HTMLDivElement containing an HTMLLabelElement and a HTMLButtonElement.\n * @param labeltext The text content of the label.\n * @param textContent The text content of the button.\n * @param id The id of the button.\n * @param componentMargin The margin for the HTMLLabelElement and HTMLButtonElement.\n * @param divMargin The margin for the HTMLDivElement.\n * @returns An HTMLDivElement with the level margin containing an HTMLLabelElement and a HTMLButtonElement.\n */\nexport function createLabelWithButton(labeltext: string, textContent: string, id: string,\n    componentMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    divMargin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, divMargin);\n    let label: HTMLLabelElement = createLabel(labeltext, componentMargin);\n    label.htmlFor = id;\n    Object.assign(label.style, componentMargin);\n    div.appendChild(label);\n    div.appendChild(createButton(textContent, id, componentMargin));\n    return div;\n}\n\n/**\n * Create and return HTMLDivElement.\n * @param id The id of the HTMLDivElement.\n * @param margin The margin for the HTMLDivElement.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createDiv(id?: string,\n    margin?: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement(\"div\");\n    if (id != undefined) {\n        div.id = id;\n    }\n    if (margin != undefined) {\n        Object.assign(div.style, margin);\n    }\n    return div;\n}\n\n/**\n * Create and return HTMLDivElement style.display = 'flex' and style.flexWrap = 'wrap'.\n *\n * @param id The id of the HTMLDivElement.\n * @param margin The margin for the HTMLDivElement.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createFlexDiv(id?: string,\n    margin?: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createDiv(id, margin);\n    div.style.display = 'flex';\n    div.style.flexWrap = 'wrap';\n    //div.classList.add('auto-width-flex');\n    return div;\n}\n\n/**\n * Create and return HTMLLabelElement.\n *\n * @param textContent The text content of the HTMLLabelElement.\n * @param margin The margin to go around the HTMLLabelElement.\n * @param fontsize The font size for the label.\n * @returns An HTMLLabelElement with specified boundary.\n */\nexport function createLabel(textContent: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLLabelElement {\n    let label: HTMLLabelElement = document.createElement(\"label\");\n    Object.assign(label.style, margin);\n    label.textContent = textContent;\n    label.style.fontSize = '1em'; // Set the font size with a relative unit.\n    return label;\n}\n\n/**\n * Create and return a HTMLTableElement.\n * @param id The id of the HTMLTableElement.\n * @param margin The margin for the HTMLTableElement.\n * @returns A HTMLTableElement.\n */\nexport function createTable(id: string,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLTableElement {\n    let table: HTMLTableElement = document.createElement('table');\n    table.id = id;\n    Object.assign(table.style, margin);\n    return table;\n}\n\n/**\n * Create and return a HTMLTableRowElement.\n * @param id The id of the HTMLTableRowElement.\n * @param margin The margin for the HTMLTableRowElement.\n * @returns A HTMLTableRowElement.\n */\nexport function addTableRow(table: HTMLTableElement, content: string[]): HTMLTableRowElement {\n    let row: HTMLTableRowElement = table.insertRow();\n    content.forEach(c => {\n        row.insertCell().textContent = c;\n    });\n    return row;\n}","import { createButton, sy_downTriangle, sy_upTriangle } from \"./html.js\";\nimport { addID, addMolecule, boundary1, defaults, libmols, load, menuDivID, saveXML, setLibmols, startAfresh } from \"./app.js\";\nimport { LibraryMolecules } from './librarymols.js';\nimport { Molecule } from \"./xml_molecule.js\";\n\nlet mk_url: string = \"https://github.com/MESMER-kinetics\";\n/**\n * MXG.\n */\nlet mxg_url: string = mk_url + \"/mxg\";\nlet mxg_a = document.createElement('a');\nmxg_a.href = mxg_url;\nmxg_a.textContent = mxg_url;\n\n/**\n * Example data.\n */\nlet mxgDataExamples_url: string = mxg_url + \"/tree/main/data/examples\";\nlet mxgDataExamples_a = document.createElement('a');\nmxgDataExamples_a.href = mxgDataExamples_url;\nmxgDataExamples_a.textContent = mxgDataExamples_url;\n\n/**\n * MESMER.\n */\nlet mesmer_url: string = mk_url + \"/MESMER-code\";\nlet mesmer_a = document.createElement('a');\nmesmer_a.href = mesmer_url;\nmesmer_a.textContent = mesmer_url;\n\n/**\n * EPSRC.\n */\nlet epsrc_url: string = \"https://epsrc.ukri.org/\";\nlet epsrc_a = document.createElement('a');\nepsrc_a.href = epsrc_url;\nepsrc_a.textContent = \"The UK Engineering and Physical Sciences Research Council (EPSRC)\";\n\n/**\n * University of Leeds\n */\nlet uol_url: string = \"https://www.leeds.ac.uk/\";\nlet uol_a = document.createElement('a');\nuol_a.href = uol_url;\nuol_a.textContent = \"The University of Leeds\";\n\n/**\n * 3DMol.\n */\nlet t3Dmol_url: string = \"https://github.com/3dmol/3Dmol.js\";\nlet t3Dmol_a = document.createElement('a');\nt3Dmol_a.href = t3Dmol_url;\nt3Dmol_a.textContent = t3Dmol_url;\nlet t3Dmol_citation_url: string = \"http://doi.org/10.1093/bioinformatics/btu829\";\nlet t3Dmol_citation_a = document.createElement('a');\nt3Dmol_citation_a.href = t3Dmol_citation_url;\nt3Dmol_citation_a.textContent = \"doi:10.1093/bioinformatics/btu829\";\n\n/**\n * Big.js.\n */\nlet bigjs_url: string = \"https://mikemcl.github.io/big.js/\";\nlet bigjs_a = document.createElement('a');\nbigjs_a.href = bigjs_url;\nbigjs_a.textContent = bigjs_url;\n\n/**\n * Get a div with details about MXG.\n */\nfunction about(w: Window | null) {\n    if (w == null) {\n        return;\n    }\n    w.document.title = \"About MXG\";\n    // Welcome Text.\n    let wDiv: HTMLDivElement = document.createElement('div');\n    w.document.body.appendChild(wDiv);\n    // p1.\n    let p1 = w.document.createElement('p');\n    wDiv.appendChild(p1);\n    p1.appendChild(w.document.createTextNode('MXG is a free and open source program to assist in creating, editing and \\\n        visualising MESMER XML data. MXG is released via the MESMER-kinetics GitHub repository: '));\n    p1.appendChild(mxg_a);\n    p1.appendChild(w.document.createTextNode('. Details of MESMER - the Master Equation Solver for Multi Energy-well Reactions \\\n        can be found at: '));\n    p1.appendChild(mesmer_a);\n    p1.appendChild(w.document.createTextNode('.'));\n    // p2.\n    let p2 = document.createElement('p');\n    wDiv.appendChild(p2);\n    p2.appendChild(w.document.createTextNode('MXG development has been led by a team based at '));\n    p2.appendChild(uol_a);\n    p2.appendChild(w.document.createTextNode(' and funded by '));\n    p2.appendChild(epsrc_a);\n    p2.appendChild(w.document.createTextNode('. Please contribute to MXG development by reporting issues on GitHub.'));\n    // p3.\n    let p3 = w.document.createElement('p');\n    wDiv.appendChild(p3);\n    p3.appendChild(w.document.createTextNode('MXG should work with the latest Firefox, Chrome, Edge or Safari Web browsers. \\\n        It can be used offline after installation as a Progressive Web App (PWA). The process of installing a PWA varies by \\\n        Web browser and device. For guidance please see the MXG development repository README.'));\n    // p4.\n    let p4 = w.document.createElement('p');\n    wDiv.appendChild(p4);\n    p4.appendChild(w.document.createTextNode('The Menu contains 7 buttons: \\\n        The About button displays the about text in a new Window. \\\n        The Load MESMER File button is for loading a MESMER XML data file. \\\n        The Load Into Library button is for adding molecule data to a molecule library. \\\n        The Clear Library button clears the molecule library. \\\n        The Load Defaults button is for loading default values from a file. \\\n        The Save button is for saving a new MESMER XML data file. \\\n        The Restart button reinitialises the interface.'));\n    /* \n        The file will contain no comments, and numbers are output in a particular format (decimals - where numbers with more \\\n        than 8 digits are output in scientific notation). The file should reflect what is specified via the interface.'));\n        Between the Load and Save buttons are buttons to increase or decrease the fontsize and to change between a light \\\n        and dark theme. In fontsize buttons either increase or decrease the fontsize of text elements including those in \\\n        the reaction diagram and species plots.'));*/\n    // p5.\n    let p5 = document.createElement('p');\n    wDiv.appendChild(p5);\n    p5.appendChild(w.document.createTextNode('A MESMER XML input data file normally has a \"me:mesmer\" element containing: \\\n        \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \"me:modelParameters\", and \"me:control\" elements. \\\n        A MESMER XML output data usually also has \"me:metadataList\" and \"me:analysis\" elements in the \"me:mesmer\" \\\n        element, and additional output located in the \"moleculeList\" and \"reactionList\" elements. \\\n        The main interface below the Menu presents what is in a loaded MESMER file, or what will be in saved to a MESMER file. \\\n        It also presents visualisations of the data which can be output in PNG or CSV formats. \\\n        The \"me:title\" value is presented in an input after a label. The input allows for the default value, \\\n        \"Example_title\" to be changed. Other details are presented via buttons with descriptive names and a triangular \\\n        symbol: \\\n        A triangle orientated with a point down: ' + sy_downTriangle + ' can be actioned to reveal details. \\\n        A triangle orientated with a point up: ' + sy_upTriangle + ' can be actioned to hide those details.'));\n    // p6.\n    let p6 = w.document.createElement('p');\n    wDiv.appendChild(p6);\n    p6.textContent = 'The Reaction Diagram button shows/hides a reaction well diagram which is redrawn if molecule \"me:ZPE\" \\\n        property values are changed. The diagram can be opened in a new Window and saved as an image in PNG format file.';\n    // p7.\n    let p7 = w.document.createElement('p');\n    wDiv.appendChild(p7);\n    p7.textContent = 'MXG uses 3DMol.js under a BSD-3-Clause licence to visualise molecules with coordinates. For details \\\n        of 3DMol.js please see the GitHub repository: ';\n    p7.appendChild(t3Dmol_a);\n    p7.appendChild(w.document.createTextNode('. If you use the 3DMol.js visualisations, please cite: Nicholas Rego and \\\n        David Koes 3Dmol.js: molecular visualization with WebGL Bioinformatics (2015) 31 (8): 1322-1324 '));\n    p7.appendChild(t3Dmol_citation_a);\n    p7.appendChild(w.document.createTextNode('.'));\n    // p8.\n    let p8 = w.document.createElement('p');\n    wDiv.appendChild(p8);\n    p8.textContent = 'MXG uses Big.js under an MIT licence to handle numbers. For details of Big.js please see the GitHub \\\n        repository: ';\n    p8.appendChild(bigjs_a);\n    p8.appendChild(w.document.createTextNode('.'));\n}\n\n/**\n * Create a menu.\n * @returns HTMLDivElement\n */\nexport function createMenu(): HTMLDivElement {\n    // Create Menu.\n    let menuDiv: HTMLDivElement = document.getElementById(menuDivID) as HTMLDivElement;\n    menuDiv.style.display = 'flex';\n    menuDiv.style.justifyContent = 'center';\n    menuDiv.style.margin = '5px';\n    menuDiv.style.padding = '5px';\n    menuDiv.style.border = '1px solid black';\n    menuDiv.style.backgroundColor = 'lightgrey';\n\n    // Add About MXG button.\n    let s_About: string = 'About';\n    let ab: HTMLButtonElement = createButton(s_About, addID(s_About), boundary1);\n    menuDiv.appendChild(ab);\n    ab.addEventListener('click', async (event: MouseEvent) => {\n        let aw = window.open(\"\", \"\", \"width=600,height=400\");\n        about(aw);\n    });\n\n    // Add Load MESMER File button.\n    let s_Load_MESMER_File: string = 'Load MESMER File';\n    let lb: HTMLButtonElement  = createButton(s_Load_MESMER_File, addID(s_Load_MESMER_File), boundary1);\n    lb.addEventListener('click', (event: MouseEvent) => {\n        // Alert the user that any changes will be lost unless saved, giving the option to save.\n        if (confirm('Any unsaved changes will be lost. Select OK to continue loading or Cancel to cancel.')) {\n            load();\n        } else {\n            return;\n        }\n    });\n    menuDiv.appendChild(lb);\n\n    // Add Load Into Library button.\n    let s_Load_Into_Library: string = 'Load Into Library';\n    let llmb: HTMLButtonElement = createButton(s_Load_Into_Library, addID(s_Load_Into_Library), boundary1);\n    menuDiv.appendChild(llmb);\n    let lms: LibraryMolecules = new LibraryMolecules();\n    llmb.addEventListener('click', async (event: MouseEvent) => {\n        let ms: Map<string, Molecule> = await lms.readFile();\n        // Add the molecules to the libmols map.\n        if (libmols == undefined) {\n            setLibmols(new Map());\n        }\n        ms.forEach((v, k) => {\n            addMolecule(false, v, libmols);\n        });\n    });\n\n    // Add Clear Library button.\n    let s_Clear_Library: string = 'Clear Library';\n    let clmb: HTMLButtonElement = createButton(s_Clear_Library, addID(s_Clear_Library), boundary1);\n    menuDiv.appendChild(clmb);\n    clmb.addEventListener('click', async (event: MouseEvent) => {\n        setLibmols(new Map());\n    });\n\n    // Add Load Defaults button.\n    let s_Load_Defaults: string = 'Load Defaults';\n    let ldb: HTMLButtonElement = createButton(s_Load_Defaults, addID(s_Load_Defaults), boundary1);\n    ldb.addEventListener('click', (event: MouseEvent) => {\n        defaults.readFile();\n    });\n    menuDiv.appendChild(ldb);\n\n    // Add Save File button.\n    let s_Save: string = 'Save';\n    let saveButton = createButton(s_Save, addID(s_Save), boundary1);\n    saveButton.addEventListener('click', saveXML);\n    menuDiv.appendChild(saveButton);\n\n    // Add Restart button.\n    let s_Restart: string = 'Restart';\n    let sab: HTMLButtonElement = createButton(s_Restart, addID(s_Restart), boundary1);\n    menuDiv.appendChild(sab);\n    sab.addEventListener('click', (event: MouseEvent) => {\n        // Alert the user that any changes will be lost unless saved, giving the option to save.\n        if (confirm('Any unsaved changes will be lost. Select OK to continue loading or Cancel to cancel.')) {\n            startAfresh();\n        } else {\n            return;\n        }\n    });\n\n    /* Add style/theme option buttons.\n    // Add Increase Fontsize button.\n    let s_Increase_Fontsize: string = 'Increase Fontsize';\n    let increaseFontSizeButton = createButton(s_Increase_Fontsize, addID(s_Increase_Fontsize), boundary1);\n    increaseFontSizeButton.addEventListener('click', () => {\n        let fontSize = parseInt(getComputedStyle(document.body).fontSize);\n        document.body.style.fontSize = (fontSize + 1) + 'px';\n        if (rdWindow != null) {\n            //let fontSize = parseInt(getComputedStyle(popWindow.document.body).fontSize);\n            rdWindow.document.body.style.fontSize = (fontSize + 1) + 'px';\n        }\n        redrawReactionsDiagram();\n        redrawScatterPlots();\n    });\n    menuDiv.appendChild(increaseFontSizeButton);\n    // Add Decrease Fontsize button.\n    let s_Decrease_Fontsize: string = 'Decrease Fontsize';\n    let decreaseFontSizeButton = createButton(s_Decrease_Fontsize, addID(s_Decrease_Fontsize), boundary1);\n    decreaseFontSizeButton.addEventListener('click', () => {\n        let fontSize = parseInt(getComputedStyle(document.body).fontSize);\n        document.body.style.fontSize = (fontSize - 1) + 'px';\n        if (rdWindow != null) {\n            //let fontSize = parseInt(getComputedStyle(popWindow.document.body).fontSize);\n            rdWindow.document.body.style.fontSize = (fontSize - 1) + 'px';\n        }\n        redrawReactionsDiagram();\n        redrawScatterPlots();\n    });\n    menuDiv.appendChild(decreaseFontSizeButton);\n    // Add Light/Dark Mode button.\n    let s_Light_Dark_Mode = 'Light/Dark Mode';\n    let lightDarkModeButton = createButton(s_Light_Dark_Mode, addID(s_Light_Dark_Mode), boundary1);\n    lightDarkModeButton.addEventListener('click', () => {\n        dark = !dark;\n        //localStorage.setItem('darkMode', dark ? 'true' : 'false');\n        if (dark) {\n            document.body.className = 'dark-mode';\n        } else {\n            document.body.className = 'light-mode';\n        }\n        redrawReactionsDiagram();\n    });\n    menuDiv.appendChild(lightDarkModeButton);\n    */\n    return menuDiv;\n\n}","import { Big } from \"big.js\";\nimport { Description, MoleculeList, T } from \"./xml_mesmer\";\nimport { Metadata, MetadataList } from \"./xml_metadata\";\nimport {\n    Atom, AtomArray, Bond, BondArray, DOSCMethod, DensityOfStates, DensityOfStatesList,\n    DistributionCalcMethod, EinsteinAij, EinsteinBij, ElectronicExcitation, EnergyTransferModel, Epsilon, FrequenciesScaleFactor,\n    Hessian, Hf0, Hf298, HfAT0, MW, Molecule, Property, PropertyArray, PropertyList, PropertyMatrix,\n    PropertyScalarNumber, PropertyScalarString, Qtot, RotConsts, Sigma, SpinMultiplicity, Sumc, Sumg,\n    SymmetryNumber, TSOpticalSymmetryNumber, VibFreqs, ZPE\n} from \"./xml_molecule\";\nimport { getAttributes, getFirstChildNode, getInputString, getNodeValue, getSingularElement } from \"./xml\";\nimport { toNumberArray } from \"./util\";\nimport { setMoleculeID } from \"./gui_moleculeList\";\n\nexport class LibraryMolecules {\n\n    /**\n     * @param defaults The defaults.\n     */\n    constructor() { }\n\n    /**\n     * Read molecules from file.\n     * @returns A promise that resolves to a map of molecules.\n     */\n    readFile(): Promise<Map<string, Molecule>> {\n        return new Promise((resolve, reject) => {\n            let input: HTMLInputElement = document.createElement('input');\n            input.type = 'file';\n            let self = this;\n\n            input.onchange = function () {\n                if (input.files) {\n                    let file: File | null = input.files[0];\n                    let inputFilename: string = file.name;\n                    let reader = new FileReader();\n                    let chunkSize = 1024 * 1024; // 1MB\n                    let start = 0;\n                    let contents = '';\n\n                    reader.onload = function (e) {\n                        if (e.target == null) {\n                            reject(new Error('Event target is null'));\n                            return;\n                        }\n                        contents += (e.target as FileReader).result as string;\n                        if (file != null) {\n                            if (start < file.size) {\n                                // Read the next chunk\n                                let blob = file.slice(start, start + chunkSize);\n                                reader.readAsText(blob);\n                                start += chunkSize;\n                            } else {\n                                // All chunks have been read\n                                contents = contents.trim();\n                                let parser = new DOMParser();\n                                let xml: Document = parser.parseFromString(contents, \"text/xml\");\n                                resolve(self.parse(xml));\n                            }\n                        }\n                    };\n\n                    // Read the first chunk\n                    let blob = file.slice(start, start + chunkSize);\n                    reader.readAsText(blob);\n                    start += chunkSize;\n                }\n            };\n\n            input.click();\n        });\n    }\n\n    /**\n     * Parse the XML.\n     */\n    parse(xml: Document): Map<string, Molecule> {\n        /**\n         * The molecules.\n         */\n        let molecules: Map<string, Molecule> = new Map();\n        // Get the XML \"moleculeList\" element.\n        let xml_ml: Element = getSingularElement(xml, MoleculeList.tagName);\n        // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n        let mlTagNames: Set<string> = new Set();\n        xml_ml.childNodes.forEach(function (node) {\n            mlTagNames.add(node.nodeName);\n        });\n        /*\n        if (mlTagNames.size != 1) {\n            if (!(mlTagNames.size >= 2 && mlTagNames.has(\"#text\")) ||\n                !(mlTagNames.size == 3 && mlTagNames.has('#comment'))) {\n                console.error(\"moleculeListTagNames:\");\n                mlTagNames.forEach(x => console.error(x));\n                //throw new Error(\"Additional tag names in moleculeList:\");\n            }\n        }\n        if (!mlTagNames.has(Molecule.tagName)) {\n            throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n        }\n        */\n        // Process the XML \"molecule\" elements.\n        let xml_ms: HTMLCollectionOf<Element> = xml_ml.getElementsByTagName(Molecule.tagName);\n        let xml_msl = xml_ms.length;\n        console.log(\"Number of molecules=\" + xml_msl);\n        let naliases: number = 0;\n        //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n        for (let i = 0; i < xml_msl; i++) {\n            // console.log(\"i=\" + i);\n            // Create a new Molecule.\n            let attributes: Map<string, string> = getAttributes(xml_ms[i]);\n            let mid: string | undefined = attributes.get(Molecule.s_id);\n            //console.log(\"mID=\" + mID);\n            if (mid == undefined) {\n                throw new Error(Molecule.s_id + ' is undefined');\n            }\n            let cns: NodeListOf<ChildNode> = xml_ms[i].childNodes;\n            //console.log(\"cns.length=\" + cns.length);\n            // Check if there are any child elements. If not, then this molecule is an alias.\n            if (cns.length == 0) {\n                naliases++;\n                //console.log(\"This molecule is an alias.\");\n                let ref: string | undefined = attributes.get(\"ref\");\n                if (ref == undefined) {\n                    throw new Error(\"ref is undefined\");\n                }\n                continue;\n            }\n            let id: string = setMoleculeID(false, mid, undefined, molecules);\n            let m = new Molecule(attributes, id);\n            molecules.set(id, m);\n            // Create a set of molecule tag names.\n            let moleculeTagNames: Set<string> = new Set();\n            //cns.forEach(function (cn) {\n            for (let j = 0; j < cns.length; j++) {\n                let cn: ChildNode = cns[j];\n                // Check for nodeName repeats that are not #text.\n                if (!moleculeTagNames.has(cn.nodeName)) {\n                    moleculeTagNames.add(cn.nodeName);\n                } else {\n                    // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                    if (cn.nodeName != \"#text\") {\n                        console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                        //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                    }\n                }\n                //console.log(cn.nodeName);\n            }\n            // Init metadataList.\n            //console.log(\"Init metadataList.\");\n            let xml_mls: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(MetadataList.tagName);\n            if (xml_mls.length > 0) {\n                if (xml_mls.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + MetadataList.tagName + \" but finding \" + xml_mls.length + \"!\");\n                }\n                let ml: MetadataList = new MetadataList(getAttributes(xml_mls[0]));\n                m.setMetadataList(ml);\n                let xml_ms: HTMLCollectionOf<Element> = xml_mls[0].getElementsByTagName(Metadata.tagName);\n                for (let j = 0; j < xml_ms.length; j++) {\n                    // Create a new Metadata.\n                    let md: Metadata = new Metadata(getAttributes(xml_ms[j]));\n                    ml.addMetadata(md);\n                }\n                moleculeTagNames.delete(MetadataList.tagName);\n            }\n\n            // Init atoms.\n            //console.log(\"Init atoms.\");\n            // There can be an individual atom not in an atom array, or an atom array.\n            let xml_aas: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(AtomArray.tagName);\n            if (xml_aas.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + AtomArray.tagName + \" but finding \" + xml_aas.length + \"!\");\n            }\n            if (xml_aas.length == 1) {\n                let xml_aa = xml_aas[0];\n                let xml_as: HTMLCollectionOf<Element> = xml_aa.getElementsByTagName(Atom.tagName);\n                if (xml_as.length == 0) {\n                    throw new Error(\"Expecting 1 or more atoms in \" + AtomArray.tagName + \", but finding 0!\");\n                }\n                let aa: AtomArray = new AtomArray(getAttributes(xml_aa));\n                m.setAtoms(aa);\n                for (let j = 0; j < xml_as.length; j++) {\n                    aa.addAtom(new Atom(getAttributes(xml_as[j]), m));\n                }\n                moleculeTagNames.delete(AtomArray.tagName);\n            } else {\n                let xml_as: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(Atom.tagName);\n                if (xml_as.length == 1) {\n                    let aa: AtomArray = new AtomArray(new Map());\n                    aa.addAtom(new Atom(getAttributes(xml_as[0]), m));\n                    m.setAtoms(aa);\n                } else if (xml_as.length > 1) {\n                    throw new Error(\"Expecting 1 \" + Atom.tagName + \" but finding \" + xml_as.length\n                        + \". Should these be in an \" + AtomArray.tagName + \"?\");\n                }\n            }\n            //console.log(\"atomsNode=\" + atomsNode);\n            moleculeTagNames.delete(Atom.tagName);\n            // Init bonds.\n            // There can be an individual bond not in a bond array, or a bond array.\n            // There may be only 1 bond in a BondArray.\n            let xml_bas: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(BondArray.tagName);\n            if (xml_bas.length > 0) {\n                if (xml_bas.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + BondArray.tagName + \" but finding \" + xml_bas.length + \"!\");\n                }\n                let xml_bs: HTMLCollectionOf<Element> = xml_bas[0].getElementsByTagName(Bond.tagName);\n                let ba: BondArray = new BondArray(getAttributes(xml_bas[0]));\n                for (let j = 0; j < xml_bs.length; j++) {\n                    ba.addBond(new Bond(getAttributes(xml_bs[j]), m));\n                }\n                m.setBonds(ba);\n                moleculeTagNames.delete(BondArray.tagName);\n            } else {\n                let xml_bonds: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(Bond.tagName);\n                if (xml_bonds.length > 0) {\n                    if (xml_bonds.length > 1) {\n                        throw new Error(\"Expecting 1 \" + Bond.tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + BondArray.tagName + \"?\");\n                    }\n                    let ba: BondArray = new BondArray(new Map());\n                    ba.addBond(new Bond(getAttributes(xml_bonds[0]), m));\n                    m.setBonds(ba);\n                }\n            }\n            moleculeTagNames.delete(Bond.tagName);\n\n            // Organise PropertyList or individual Property.\n            // (There can be an individual property not in a propertyList?)\n            // If there is a PropertyList, then create a property list.\n            let xml_pls: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(PropertyList.tagName);\n            if (xml_pls.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_pls.length + \"!\");\n            }\n            if (xml_pls.length == 1) {\n                // Create a new PropertyList.\n                let pl: PropertyList = new PropertyList(getAttributes(xml_pls[0]));\n                m.setPropertyList(pl);\n                let xml_ps: HTMLCollectionOf<Element> = xml_pls[0].getElementsByTagName(Property.tagName);\n                for (let j = 0; j < xml_ps.length; j++) {\n                    // Create a new Property.\n                    pl.setProperty(createProperty(xml_ps[j]));\n                }\n                moleculeTagNames.delete(PropertyList.tagName);\n            } else {\n                // There is a Property on its own. For simplicity, this will be stored in a PropertyList.\n                // Create a new PropertyList.\n                let pl: PropertyList = new PropertyList(new Map());\n                m.setPropertyList(pl);\n                let xml_ps: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(Property.tagName);\n                if (xml_ps.length != 1) {\n                    throw new Error(\"Expecting 1 \" + Property.tagName + \" but finding \" + xml_ps.length\n                        + \". Should these be in a \" + PropertyList.tagName + \"?\");\n                }\n                // Create a new Property.\n                pl.setProperty(createProperty(xml_ps[0]));\n                moleculeTagNames.delete(Property.tagName);\n            }\n            // Organise EnergyTransferModel.\n            let xml_etms: HTMLCollectionOf<Element> | null = xml_ms[i].getElementsByTagName(EnergyTransferModel.tagName);\n            if (xml_etms.length > 0) {\n                if (xml_etms.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + EnergyTransferModel.tagName + \" but finding \" + xml_etms.length + \"!\");\n                }\n                let etm = new EnergyTransferModel(getAttributes(xml_etms[0]));\n                m.setEnergyTransferModel(etm);\n                moleculeTagNames.delete(EnergyTransferModel.tagName);\n            }\n            // Organise DOSCMethod.\n            let xml_dms: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(DOSCMethod.tagName);\n            if (xml_dms.length > 0) {\n                if (xml_dms.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + DOSCMethod.tagName + \" but finding \" + xml_dms.length + \"!\");\n                }\n                let doscm = new DOSCMethod(getAttributes(xml_dms[0]));\n                m.setDOSCMethod(doscm);\n                moleculeTagNames.delete(DOSCMethod.tagName);\n            }\n            // Organise DistributionCalcMethod. (Output only)\n            let xml_dcms: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(DistributionCalcMethod.tagName);\n            if (xml_dcms.length > 0) {\n                if (xml_dcms.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + DistributionCalcMethod.tagName + \" but finding \" + xml_dcms.length + \"!\");\n                }\n                let dcmAttributes: Map<string, string> = getAttributes(xml_dcms[0]);\n                let dcm = new DistributionCalcMethod(dcmAttributes);\n                m.setDistributionCalcMethod(dcm);\n                moleculeTagNames.delete(DistributionCalcMethod.tagName);\n            }\n            // Organise DensityOfStatesList. (Output only)\n            let xml_dosl: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(DensityOfStatesList.tagName);\n            if (xml_dosl.length > 0) {\n                if (xml_dosl.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + DensityOfStatesList.tagName + \" but finding \" + xml_dosl.length + \"!\");\n                }\n                let dosl = new DensityOfStatesList(getAttributes(xml_dosl[0]));\n                m.setDensityOfStatesList(dosl);\n                let xml_dos: HTMLCollectionOf<Element> = xml_dosl[0].getElementsByTagName(DensityOfStates.tagName);\n                // Organise Description.\n                let xml_ds: HTMLCollectionOf<Element> = xml_dosl[0].getElementsByTagName(Description.tagName);\n                if (xml_ds.length > 0) {\n                    if (xml_ds.length > 1) {\n                        throw new Error(\"Expecting 1 or 0 \" + Description.tagName + \" but finding \" + xml_ds.length + \"!\");\n                    }\n                    let ds = new Description(getAttributes(xml_ds[0]), getNodeValue(getFirstChildNode(xml_ds[0])));\n                    dosl.setDescription(ds);\n                }\n                // Organise DensityOfStates.\n                //console.log(\"xml_dos.length=\" + xml_dos.length);\n                if (xml_dos.length == 0) {\n                    throw new Error(\"Expecting 1 or more \" + DensityOfStates.tagName + \" but finding 0!\");\n                } else {\n                    for (let j = 0; j < xml_dos.length; j++) {\n                        //console.log(\"j=\" + j);\n                        let dos = new DensityOfStates(getAttributes(xml_dos[j]));\n                        dosl.addDensityOfStates(dos);\n                        // T.\n                        let xml_t: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(T.tagName);\n                        if (xml_t.length != 1) {\n                            throw new Error(\"Expecting 1 \" + T.tagName + \" but finding \" + xml_t.length + \"!\");\n                        } else {\n                            let t = new T(getAttributes(xml_t[0]), new Big(getNodeValue(getFirstChildNode(xml_t[0]))));\n                            dos.setT(t);\n                            //dosDiv.appendChild(createLabel(t.value.toString(), boundary1));\n                        }\n                        // qtot.\n                        let xml_qtot: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(Qtot.tagName);\n                        if (xml_qtot.length != 1) {\n                            throw new Error(\"Expecting 1 \" + Qtot.tagName + \" but finding \" + xml_qtot.length + \"!\");\n                        } else {\n                            let qtot = new Qtot(getAttributes(xml_qtot[0]), new Big(getNodeValue(getFirstChildNode(xml_qtot[0]))));\n                            dos.setQtot(qtot);\n                            //dosDiv.appendChild(createLabel(Qtot.tagName + \" \" + qtot.value.toString(), boundary1));\n                        }\n                        // sumc.\n                        let xml_sumc: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(Sumc.tagName);\n                        if (xml_sumc.length != 1) {\n                            throw new Error(\"Expecting 1 \" + Sumc.tagName + \" but finding \" + xml_sumc.length + \"!\");\n                        } else {\n                            let sumc = new Sumc(getAttributes(xml_sumc[0]), new Big(getNodeValue(getFirstChildNode(xml_sumc[0]))));\n                            dos.setSumc(sumc);\n                            //dosDiv.appendChild(createLabel(sumc.value.toString(), boundary1));\n                        }\n                        // sumg.\n                        let xml_sumg: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(Sumg.tagName);\n                        if (xml_sumg.length != 1) {\n                            throw new Error(\"Expecting 1 \" + Sumg.tagName + \" but finding \" + xml_sumg.length + \"!\");\n                        } else {\n                            let sumg = new Sumg(getAttributes(xml_sumg[0]), new Big(getNodeValue(getFirstChildNode(xml_sumg[0]))));\n                            dos.setSumg(sumg);\n                            //dosDiv.appendChild(createLabel(sumg.value.toString(), boundary1));\n                        }\n                    }\n                }\n                moleculeTagNames.delete(DensityOfStatesList.tagName);\n            }\n            // Check for unexpected tags.\n            moleculeTagNames.delete(\"#text\");\n            if (moleculeTagNames.size > 0) {\n                console.warn(\"There are additional unexpected moleculeTagNames:\");\n                moleculeTagNames.forEach(x => console.warn(x));\n                //throw new Error(\"Unexpected tags in molecule.\");\n            }\n        }\n        console.log(\"Number of molecules=\" + molecules.size);\n        console.log(\"Number of alias molecules=\" + naliases.toString());\n        return molecules;\n    }\n}\n\n/**\n * Create a property.\n * @param xml The XML element.\n * @returns The property.\n */\nfunction createProperty(xml: Element): Property {\n    let p: Property = new Property(getAttributes(xml));\n    //console.log(\"p.dictRef \" + p.dictRef);\n    if (p.dictRef == ZPE.dictRef) {\n        // \"me:ZPE\", scalar, Mesmer.energyUnits.\n        processProperty(p, xml);\n    } else if (p.dictRef == Hf0.dictRef) {\n        // \"me:Hf0\", scalar, Mesmer.energyUnits.\n        processProperty(p, xml);\n    } else if (p.dictRef == HfAT0.dictRef) {\n        // \"me:HfAT0\", scalar, Mesmer.energyUnits.\n        processProperty(p, xml);\n    } else if (p.dictRef == Hf298.dictRef) {\n        // \"me:Hf298\", scalar, Mesmer.energyUnits.\n        processProperty(p, xml);\n    } else if (p.dictRef == RotConsts.dictRef) {\n        // \"me:rotConsts\", array, Mesmer.frequencyUnits.\n        processProperty(p, xml);\n    } else if (p.dictRef == SymmetryNumber.dictRef) {\n        // \"me:symmetryNumber\", scalar, No units.\n        processProperty(p, xml);\n    } else if (p.dictRef == TSOpticalSymmetryNumber.dictRef) {\n        // \"me:TSOpticalSymmetryNumber\", scalar, No units.\n        processProperty(p, xml);\n    } else if (p.dictRef == FrequenciesScaleFactor.dictRef) {\n        // \"me:frequenciesScaleFactor\", scalar, No units.\n        processProperty(p, xml);\n    } else if (p.dictRef == VibFreqs.dictRef) {\n        // \"me:vibFreqs\", array, cm-1.\n        processProperty(p, xml);\n    } else if (p.dictRef == MW.dictRef) {\n        // \"me:MW\", scalar, amu.\n        processProperty(p, xml);\n    } else if (p.dictRef == SpinMultiplicity.dictRef) {\n        // \"me:spinMultiplicity\", scalar, No units.\n        processProperty(p, xml);\n    } else if (p.dictRef == Epsilon.dictRef) {\n        // \"me:epsilon\", scalar, K (fixed).\n        processProperty(p, xml);\n    } else if (p.dictRef == Sigma.dictRef) {\n        // \"me:sigma\", scalar, Å (fixed).\n        processProperty(p, xml);\n    } else if (p.dictRef == Hessian.dictRef) {\n        // \"me:hessian\", matrix, kJ/mol/Å2 or kcal/mol/Å2 or Hartree/Å2.\n        processProperty(p, xml);\n    } else if (p.dictRef == EinsteinAij.dictRef) {\n        // \"me:EinsteinAij\", array, s-1 (fixed).\n        processProperty(p, xml);\n    } else if (p.dictRef == EinsteinBij.dictRef) {\n        // \"me:EinsteinBij\", array, m3/J/s2 (fixed).\n        processProperty(p, xml);\n    } else if (p.dictRef == ElectronicExcitation.dictRef) {\n        // \"me:electronicExcitation\", scalar, cm-1.\n        processProperty(p, xml);\n    } else {\n        processPropertyString(p, xml);\n    }\n    return p;\n}\n\n/**\n * Process a property.\n * @param p The property.\n * @param element The element.\n */\nfunction processProperty(p: Property, element: Element) {\n    // PropertyScalar.\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalarNumber.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalarNumber.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let value: Big = new Big(inputString);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        // Add PropertyScalarNumber.\n        let ps: PropertyScalarNumber = new PropertyScalarNumber(psAttributes, value);\n        p.setProperty(ps);\n    } else {\n        // PropertyArray.\n        let arrayNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyArray.tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) {\n                throw new Error(\"Expecting 1 \" + PropertyArray.tagName + \" but finding \" + arrayNodes.length + \"!\");\n            }\n            let inputString: string = getInputString(arrayNodes[0]);\n            if (inputString != \"\") {\n                let values: Big[] | undefined = toNumberArray(inputString.split(/\\s+/));\n                let paAttributes: Map<string, string> = getAttributes(arrayNodes[0]);\n                let pa: PropertyArray = new PropertyArray(paAttributes, values);\n                p.setProperty(pa);\n            }\n        } else {\n            // PropertyMatrix.\n            let matrixNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyMatrix.tagName);\n            if (matrixNodes.length > 0) {\n                if (matrixNodes.length != 1) {\n                    throw new Error(\"Expecting 1 \" + PropertyMatrix.tagName + \" but finding \" + matrixNodes.length + \"!\");\n                }\n                let inputString: string = getInputString(matrixNodes[0]);\n                let values: Big[] = toNumberArray(inputString.split(/\\s+/));\n                let pmAttributes: Map<string, string> = getAttributes(matrixNodes[0]);\n                let pm: PropertyMatrix = new PropertyMatrix(pmAttributes, values);\n                p.setProperty(pm);\n            } else {\n                throw new Error(\"Expecting \" + PropertyScalarNumber.tagName + \", \" + PropertyArray.tagName + \" or \"\n                    + PropertyMatrix.tagName + \" but finding none!\");\n            }\n        }\n    }\n}\n\nexport function processPropertyString(p: Property, element: Element) {\n    // PropertyScalarString.\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalarString.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalarString.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        // Add PropertyScalarNumber.\n        let ps: PropertyScalarString = new PropertyScalarString(psAttributes, inputString);\n        p.setProperty(ps);\n    } else {\n        console.log(\"Expecting \" + PropertyScalarString.tagName + \" but finding none!\");\n    }\n}","import { Analysis } from \"./xml_analysis.js\";\nimport { Conditions } from \"./xml_conditions.js\";\nimport { Control } from \"./xml_control.js\";\nimport { MetadataList } from \"./xml_metadata.js\";\nimport { ModelParameters } from \"./xml_modelParameters.js\";\nimport { Molecule } from \"./xml_molecule.js\";\nimport { Reaction } from \"./xml_reaction.js\";\nimport { arrayToString, mapToString } from \"./util.js\";\nimport { NodeWithNodes, NumberNode, StringNode } from \"./xml.js\";\n\n/**\n * The title.\n */\nexport class Title extends StringNode {\n\n    static readonly tagName: string = \"me:title\";\n\n    /**\n     * @param value \n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Title.tagName, value);\n    }\n\n}\n\n/**\n * A class for representing a \"moleculeList\".\n * In the XML, a \"moleculeList\" node is a child node of the \"me:mesmer\" node and has \"molecule\" node children.\n */\nexport class MoleculeList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"moleculeList\";\n\n    /**\n     * The index. The keys are the molecule ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecules?: Molecule[]) {\n        super(attributes, MoleculeList.tagName);\n        this.index = new Map();\n        if (molecules != undefined) {\n            molecules.forEach(molecule => {\n                this.nodes.set(this.nodes.size, molecule);\n                this.index.set(molecule.getID(), this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */\n    getMolecule(id: string): Molecule | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Molecule;\n    }\n\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */\n    removeMolecule(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */\n    addMolecule(molecule: Molecule): void {\n        let mID: string = molecule.getID();\n        let index = this.index.get(mID);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log('Replaced molecule with id ' + mID);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(mID, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * Update a molecule id.\n     * @param oldId The old id.\n     * @param newId The new id.\n     */\n    /*\n    updateMoleculeId(oldId: string, newId: string) {\n        let i: number | undefined = this.index.get(oldId);\n        if (i != undefined) {\n            let molecule = this.nodes.get(i) as Molecule;\n            molecule.setID(newId);\n            this.index.delete(oldId);\n            this.index.set(newId, i);\n        }\n    }*/\n}\n\n/**\n * A class for representing a \"reactionList\".\n * In the XML, a \"reactionList\" node is a child node of a \"me:mesmer\" node and has \"reaction\" node children.\n */\nexport class ReactionList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactionList\";\n\n    /**\n     * The index. The keys are the reaction ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */\n    constructor(attributes: Map<string, string>, reactions?: Reaction[]) {\n        super(attributes, ReactionList.tagName);\n        this.index = new Map();\n        if (reactions != undefined) {\n            reactions.forEach(reaction => {\n                this.nodes.set(this.nodes.size, reaction);\n                this.index.set(reaction.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */\n    getReaction(id: string): Reaction | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Reaction;\n    }\n\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */\n    removeReaction(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */\n    addReaction(reaction: Reaction): void {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log('Replaced reaction with id ' + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The next control id.\n     */\n    getNextReactionID(): number {\n        let id = 1;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.index.keys()).sort((a, b) => {\n            // Extract the number parts from the keys\n            let matchA = a.match(/\\d+/);\n            let matchB = b.match(/\\d+/);\n            let numberA = matchA ? parseInt(matchA[0]) : 0;\n            let numberB = matchB ? parseInt(matchB[0]) : 0;\n            // Compare the number parts\n            return numberA - numberB;\n        });\n        //console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            let key2 = parseInt(key.match(/\\d+/)![0]);\n            if (key2 > id) {\n                return id;\n            }\n            id++;\n        });\n        return id;\n    }\n}\n\n/**\n * A class for representing a \"conditionsList\" - this does not yet exist in the MEMSER, so this is not used.\n * Currently, in the XML, a \"conditions\" node is a child node of a \"me:mesmer\" node and there is no \"conditionsList\".\n */\nexport class ConditionsList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"conditionsList\";\n\n    /**\n     * The index. The keys are the conditions ids and the values are the node indexes.\n     */\n    index: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param conditionss The conditions.\n     */\n    constructor(attributes: Map<string, string>, conditionss?: Conditions[]) {\n        super(attributes, ControlList.tagName);\n        this.index = new Map();\n        if (conditionss != undefined) {\n            conditionss.forEach(conditions => {\n                this.nodes.set(this.nodes.size, conditions);\n                this.index.set(conditions.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the control.\n     * @returns The conditions.\n     */\n    getConditions(id: number): Conditions | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            return this.nodes.get(i) as Conditions;\n        }\n    }\n\n    /**\n     * Remove a control.\n     * @param id The id of the control to remove.\n     */\n    removeConditions(id: number): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a conditions.\n     * @param conditions The conditions.\n     */\n    addConditions(conditions: Conditions): void {\n        let index = this.index.get(conditions.id);\n        if (index != undefined) {\n            this.nodes.set(index, conditions);\n            console.log('Replaced conditions with id ' + conditions.id);\n        } else {\n            this.nodes.set(this.nodes.size, conditions);\n            this.index.set(conditions.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"modelParametersList\" - this does not yet exist in the MEMSER, so this is not used.\n * Currently, in the XML, a \"modelParameters\" node is a child node of a \"me:mesmer\" node and there is no \"modelParametersList\".\n */\nexport class ModelParametersList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"modelParametersList\";\n\n    /**\n     * The index. The keys are the modelParameters ids and the values are the node indexes.\n     */\n    index: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param modelParameterss The modelParameters.\n     */\n    constructor(attributes: Map<string, string>, modelParameterss?: ModelParameters[]) {\n        super(attributes, ModelParametersList.tagName);\n        this.index = new Map();\n        if (modelParameterss != undefined) {\n            modelParameterss.forEach(modelParameters => {\n                this.nodes.set(this.nodes.size, modelParameters);\n                this.index.set(modelParameters.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the modelParameters.\n     * @returns The modelParameters.\n     */\n    getModelParameters(id: number): ModelParameters | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            return this.nodes.get(i) as ModelParameters;\n        }\n    }\n\n    /**\n     * Remove a modelParameters.\n     * @param id The id of the modelParameters to remove.\n     */\n    removeModelParameters(id: number): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a modelParameters.\n     * @param modelParameters The modelParameters.\n     */\n    addModelParameters(modelParameters: ModelParameters): void {\n        let index = this.index.get(modelParameters.id);\n        if (index != undefined) {\n            this.nodes.set(index, modelParameters);\n            console.log('Replaced modelParameters with id ' + modelParameters.id);\n        } else {\n            this.nodes.set(this.nodes.size, modelParameters);\n            this.index.set(modelParameters.id, this.nodes.size - 1);\n        }\n    }\n}\n\n\n/**\n * A class for representing a \"controlList\" - this does not yet exist in the MEMSER, so this is not used.\n * Currently, in the XML, a \"control\" node is a child node of a \"me:mesmer\" node and there is no \"controlList\".\n */\nexport class ControlList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"controlList\";\n\n    /**\n     * The index. The keys are the control ids and the values are the node indexes.\n     */\n    index: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param controls The controls.\n     */\n    constructor(attributes: Map<string, string>, controls?: Control[]) {\n        super(attributes, ControlList.tagName);\n        this.index = new Map();\n        if (controls != undefined) {\n            controls.forEach(control => {\n                this.nodes.set(this.nodes.size, control);\n                this.index.set(control.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the control.\n     * @returns The control.\n     */\n    getControl(id: number): Control | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            return this.nodes.get(i) as Control;\n        }\n    }\n\n    /**\n     * Remove a control.\n     * @param id The id of the control to remove.\n     */\n    removeControl(id: number): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a control.\n     * @param control The control.\n     */\n    addControl(control: Control): void {\n        let index = this.index.get(control.id);\n        if (index !== undefined) {\n            this.nodes.set(index, control);\n            console.log('Replaced control with id ' + control.id);\n        } else {\n            this.nodes.set(this.nodes.size, control);\n            this.index.set(control.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * The \"me:mesmer\" node contains a \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \n * \"me:modelParameters\" and \"me:control\".\n */\nexport class Mesmer extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:mesmer\";\n\n    /**\n     * Precision options.\n     */\n    static readonly precisionOptions: string[] = [\"d\", \"dd\", \"qd\", \"double\", \"double-double\", \"quad-double\"];\n\n    /**\n     * Pressure units.\n     */\n    static readonly pressureUnits: string[] = [\"Torr\", \"PPCC\", \"atm\", \"mbar\", \"psi\", \"mols/cc\"];\n\n    /**\n     * Energy units.\n     */\n    static readonly energyUnits: string[] = [\"kJ/mol\", \"kJ per mol\", \"cm-1\", \"wavenumber\", \"kcal/mol\", \"kcal per mol\", \"Hartree\", \"au\"];\n\n    /**\n     * Frequency units.\n     */\n    static readonly frequencyUnits: string[] = [\"cm-1\", \"GHz\", \"amuA^2\"];\n\n    /**\n     * Mass units.\n     */\n    static readonly massUnits: string[] = [\"amu\", \"g/mol\", \"kg/mol\"];\n\n    /**\n     * Temperature units.\n     */\n    static readonly temperatureUnits: string[] = [\"K\"];\n\n    /**\n     * Time units.\n     */\n    static readonly timeUnits: string[] = [\"fs\", \"ps\", \"ns\", \"s\"];\n\n    /**\n     * Length units.\n     */\n    static readonly lengthUnits: string[] = [\"Å\", \"nm\", \"um\", \"mm\", \"cm\", \"m\"];\n\n    /**\n     * Hessian units.\n     */\n    static readonly hessianUnits: string[] = [\"kJ/mol/Å2\", \"kcal/mol/Å2\", \"Hartree/Å2\"];\n\n    /**\n     * EinsteinAUnits units.\n     */\n    static readonly EinsteinAUnits: string[] = [\"s-1\"];\n\n    /**\n     * EinsteinBUnits units.\n     */\n    static readonly EinsteinBUnits: string[] = [\"m3/J/s2\"];\n\n    /**\n     * The atoms with 1 to 118 protons inclusive.\n     * (source: https://query.wikidata.org/#SELECT%20%3Felement%20%3Fsymbol%20%20%3Fprotons%0AWHERE%0A%7B%0A%20%20%3Felement%20wdt%3AP31%20wd%3AQ11344%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20wdt%3AP1086%20%3Fprotons%20%3B%0A%20%20%20%20%20%20%20%20%20%20%20wdt%3AP246%20%3Fsymbol%20.%0A%7D%0A%0AORDER%20BY%20%3Fprotons)\n     */\n    static readonly elementTypes: string[] = [\"H\", \"He\",\n        \"Li\", \"Be\", \"B\", \"C\", \"N\", \"O\", \"F\", \"Ne\",\n        \"Na\", \"Mg\", \"Al\", \"Si\", \"P\", \"S\", \"Cl\", \"Ar\",\n        \"K\", \"Ca\", \"Sc\", \"Ti\", \"V\", \"Cr\", \"Mn\", \"Fe\", \"Co\", \"Ni\", \"Cu\", \"Zn\", \"Ga\", \"Ge\", \"As\", \"Se\", \"Br\", \"Kr\",\n        \"Rb\", \"Sr\", \"Y\", \"Zr\", \"Nb\", \"Mo\", \"Tc\", \"Ru\", \"Rh\", \"Pd\", \"Ag\", \"Cd\", \"In\", \"Sn\", \"Sb\", \"Te\", \"I\", \"Xe\",\n        \"Cs\", \"Ba\", \"La\",\n        \"Ce\", \"Pr\", \"Nd\", \"Pm\", \"Sm\", \"Eu\", \"Gd\", \"Tb\", \"Dy\", \"Ho\", \"Er\", \"Tm\", \"Yb\", \"Lu\",\n        \"Hf\", \"Ta\", \"W\", \"Re\", \"Os\", \"Ir\", \"Pt\", \"Au\", \"Hg\", \"Tl\", \"Pb\", \"Bi\", \"Po\", \"At\", \"Rn\",\n        \"Fr\", \"Ra\", \"Ac\",\n        \"Th\", \"Pa\", \"U\", \"Np\", \"Pu\", \"Am\", \"Cm\", \"Bk\", \"Cf\", \"Es\", \"Fm\", \"Md\", \"No\", \"Lr\",\n        \"Rf\", \"Db\", \"Sg\", \"Bh\", \"Hs\", \"Mt\", \"Ds\", \"Rg\", \"Cn\", \"Nh\", \"Fl\", \"Mc\", \"Lv\", \"Ts\", \"Og\"];\n\n    /**\n     * Atomic mass map for atoms. The keys are element symbols, the values are the atomic mass according to a periodic table.\n     * (This is initialised in the constructor.)\n     */\n    static readonly atomMasses: Map<string, number> = new Map();\n\n    /**\n     * Atomic radius map for atoms. The keys are element symbols, the values are the atomic radii according to a periodic table.\n     * (This is initialised in the constructor.)\n     */\n    static readonly atomRadii: Map<string, number> = new Map();\n\n    /**\n     * Colour map for atoms. The keys are element symbols, the values are the colours the element is assigned.\n     * (This is initialised in the constructor.)\n     */\n    static readonly atomColors: Map<string, string> = new Map();\n\n    /**\n     * Colour map for bonds. The keys are bond order, the values are the colours the bond order is assigned.\n     * (This is initialised in the constructor.)\n     */\n    static readonly bondColors: Map<number, string> = new Map();\n\n    /**\n     * The header of the XML file.\n     */\n    static header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The conditions index. The keys are the conditions ids and the values are the node indexes.\n     */\n    conditionsIndex: Map<number, number>;\n\n    /**\n     * The modelParameters index. The keys are the modelParameters ids and the values are the node indexes.\n     */\n    modelParametersIndex: Map<number, number>;\n\n    /**\n     * The control index. The keys are the control ids and the values are the node indexes.\n     */\n    controlIndex: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeList The molecule list.\n     * @param reactionList The reaction list.\n     * @param conditions The conditions.\n     * @param modelParameters The model parameters.\n     * @param controls The controls.\n     */\n    constructor(attributes: Map<string, string>, title?: Title, moleculeList?: MoleculeList, reactionList?: ReactionList,\n        conditionss?: Conditions[], modelParameterss?: ModelParameters[], controls?: Control[], metadataList?: MetadataList,\n        analysis?: Analysis) {\n        super(attributes, Mesmer.tagName);\n        let elements = [\"H\", \"O\", \"C\", \"N\", \"Cl\", \"S\", \"Ph\", \"Fe\"];\n        let colors = [\"White\", \"Red\", \"DarkGrey\", \"Blue\", \"Green\", \"Yellow\", \"Orange\", \"Brown\"];\n        for (let i = 0; i < elements.length; i++) {\n            Mesmer.atomColors.set(elements[i], colors[i]);\n        }\n        // Atomic mass units (amu)\n        let masses = [1.00784, 15.999, 12.011, 14.007, 35.453, 32.06, 77.845, 55.845]; // Atomic masses (see https://en.wikipedia.org/wiki/Periodic_table).\n        for (let i = 0; i < elements.length; i++) {\n            Mesmer.atomMasses.set(elements[i], masses[i]);\n        }\n        // Picometers (pm),\n        let radii = [37, 66, 67, 56, 99, 102, 110, 124]; // Calculated radii between two atoms of the same type in a molecule (https://en.wikipedia.org/wiki/Atomic_radii_of_the_elements_(data_page)).\n        for (let i = 0; i < elements.length; i++) {\n            Mesmer.atomRadii.set(elements[i], radii[i]);\n        }\n        let bondOrders = [1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 6];\n        colors = [\"Black\", \"Red\", \"DarkRed\", \"Blue\", \"DarkBlue\", \"Green\", \"DarkGreen\", \"Yellow\", \"DarkYellow\", \"Orange\", \"DarkOrange\"];\n        for (let i = 0; i < bondOrders.length; i++) {\n            Mesmer.bondColors.set(bondOrders[i], colors[i]);\n        }\n        this.index = new Map();\n        if (title != undefined) {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (moleculeList != undefined) {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        this.conditionsIndex = new Map();\n        if (conditionss != undefined) {\n            conditionss.forEach(conditions => {\n                this.index.set(Conditions.tagName + conditions.id, this.nodes.size);\n                this.conditionsIndex.set(conditions.id, this.nodes.size);\n                this.addNode(conditions);\n            });\n        }\n        this.modelParametersIndex = new Map();\n        if (modelParameterss != undefined) {\n            modelParameterss.forEach(modelParameters => {\n                this.index.set(ModelParameters.tagName + modelParameters.id, this.nodes.size);\n                this.modelParametersIndex.set(modelParameters.id, this.nodes.size);\n                this.addNode(modelParameters);\n            });\n        }\n        this.controlIndex = new Map();\n        if (controls != undefined) {\n            controls.forEach(control => {\n                this.index.set(Control.tagName + control.id, this.nodes.size);\n                this.controlIndex.set(control.id, this.nodes.size);\n                this.addNode(control);\n            });\n        }\n        if (metadataList != undefined) {\n            this.index.set(MetadataList.tagName, this.nodes.size);\n            this.addNode(metadataList);\n        }\n        if (analysis != undefined) {\n            this.index.set(Analysis.tagName, this.nodes.size);\n            this.addNode(analysis);\n        }\n    }\n\n    /**\n     * @returns The title.\n     */\n    getTitle(): Title | undefined {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Title;\n        }\n    }\n\n    /**\n     * Set the title.\n     * @param title The title.\n     */\n    setTitle(title: Title): void {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, title);\n        } else {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n\n    /**\n     * @returns The molecule list.\n     */\n    getMoleculeList(): MoleculeList {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MoleculeList;\n        } else {\n            let moleculeList = new MoleculeList(new Map());\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n            return moleculeList;\n        }\n    }\n\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */\n    setMoleculeList(moleculeList: MoleculeList): void {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, moleculeList);\n        } else {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n\n    /**\n     * @returns The next control id.\n     *\n    getNextReactionID(): number {\n        let id = 1;\n        if (this.getReactionList() == undefined) {\n            return id;\n        }\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.getReactionList()!.index.keys()).sort((a, b) => {\n            // Extract the number parts from the keys\n            let matchA = a.match(/\\d+/);\n            let matchB = b.match(/\\d+/);\n            let numberA = matchA ? parseInt(matchA[0]) : 0;\n            let numberB = matchB ? parseInt(matchB[0]) : 0;\n            // Compare the number parts\n            return numberA - numberB;\n        });\n        //console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            let key2 = parseInt(key.match(/\\d+/)![0]);\n            if (key2 > id) {\n                return id;\n            }\n            id++;\n        });\n        return id;\n    }\n\n    /**\n     * @param reaction The reaction to add.\n     *\n    addReaction(reaction: Reaction) {\n        let id = Reaction.tagName + reaction.id;\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.set(i, reaction);\n        } else {\n            this.index.set(id, this.nodes.size);\n            this.addNode(reaction);\n        }\n    }\n\n    /**\n     * @param reactionID The id of the reaction to remove.\n     *\n    removeReaction(reactionID: number) {\n        let i: number | undefined = this.index.get(Reaction.tagName + reactionID);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Reaction.tagName + reactionID);\n        }\n    }\n\n    /**\n     * @returns The reaction list.\n     */\n    getReactionList(): ReactionList {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ReactionList;\n        } else {\n            let reactionList = new ReactionList(new Map());\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n            return reactionList;\n        }\n    }\n\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */\n    setReactionList(reactionList: ReactionList): void {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, reactionList);\n        } else {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n\n    /**\n     * Add a Conditions.\n     * @param conditions The Conditions.\n     */\n    addConditions(conditions: Conditions): void {\n        let id = Conditions.tagName + conditions.id;\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.set(i, conditions);\n        } else {\n            this.index.set(id, this.nodes.size);\n            this.conditionsIndex.set(conditions.id, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n\n    /**\n     * @param conditionsID The id of the conditions.\n     * @returns The conditions for the conditionsID.\n     */\n    getConditions(conditionsID: number): Conditions | undefined {\n        let i: number | undefined = this.conditionsIndex.get(conditionsID);\n        if (i != undefined) {\n            return this.nodes.get(i) as Conditions;\n        }\n    }\n\n    /**\n     * @returns The conditions as a Conditions[].\n     */\n    getConditionss(): Conditions[] {\n        let conditionss: Conditions[] = [];\n        this.conditionsIndex.forEach((index, conditionsID) => {\n            conditionss.push(this.nodes.get(index) as Conditions);\n        });\n        return conditionss;\n    }\n\n    /**\n     * Set the conditions.\n     * @param conditionss The Conditions[].\n     */\n    setConditionss(conditionss: Conditions[]) {\n        conditionss.forEach(conditions => {\n            this.addConditions(conditions);\n        });\n    }\n\n    /**\n     * @returns The next control id.\n     */\n    getNextConditionsID(): number {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.conditionsIndex.keys()).sort((a, b) => a - b);\n        //console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            if (key > id) {\n                return id;\n            }\n            id++;\n        });\n        return id;\n    }\n\n    /**\n     * Remove a conditions.\n     * @param conditionsID The id of the conditions to remove.\n     */\n    removeConditions(conditionsID: number) {\n        let i: number | undefined = this.conditionsIndex.get(conditionsID);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Conditions.tagName + conditionsID);\n            this.conditionsIndex.delete(conditionsID);\n        }\n    }\n    \n    /**\n     * Add a ModelParameters.\n     * @param modelParameters The ModelParameters.\n     */\n    addModelParameters(modelParameters: ModelParameters) {\n        let id = ModelParameters.tagName + modelParameters.id;\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.set(i, modelParameters);\n        } else {\n            this.index.set(id, this.nodes.size);\n            this.modelParametersIndex.set(modelParameters.id, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n\n    /**\n     * @param modelParametersID The id of the modelParameters.\n     * @returns The modelParameters for the modelParametersID.\n     */\n    getModelParameters(modelParametersID: number): ModelParameters | undefined {\n        let i: number | undefined = this.modelParametersIndex.get(modelParametersID);\n        if (i != undefined) {\n            return this.nodes.get(i) as ModelParameters;\n        }\n    }\n\n    /**\n     * @returns The modelParameters as a ModelParameters[].\n     */\n    getModelParameterss(): ModelParameters[] {\n        let modelParameterss: ModelParameters[] = [];\n        this.modelParametersIndex.forEach((index, modelParametersID) => {\n            modelParameterss.push(this.nodes.get(index) as ModelParameters);\n        });\n        return modelParameterss;\n    }\n\n    /**\n     * Set the modelParameters.\n     * @param modelParameterss The ModelParameters[].\n     */\n    setModelParameterss(modelParameterss: ModelParameters[]) {\n        modelParameterss.forEach(modelParameters => {\n            this.addModelParameters(modelParameters);\n        });\n    }\n\n    /**\n     * @returns The next modelParameters id.\n     */\n    getNextModelParametersID(): number {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.modelParametersIndex.keys()).sort((a, b) => a - b);\n        //console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            if (key > id) {\n                return id;\n            }\n            id++;\n        });\n        return id;\n    }\n\n    /**\n     * Remove a modelParameters.\n     * @param modelParametersID The id of the modelParameters to remove.\n     */\n    removeModelParameters(modelParametersID: number) {\n        let i: number | undefined = this.modelParametersIndex.get(modelParametersID);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ModelParameters.tagName + modelParametersID);\n            this.modelParametersIndex.delete(modelParametersID);\n        }\n    }\n\n    /**\n     * Add a Control.\n     * @param control The Control.\n     */\n    addControl(control: Control) {\n        let id = Control.tagName + control.id;\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.set(i, control);\n        } else {\n            this.index.set(id, this.nodes.size);\n            this.controlIndex.set(control.id, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n\n    /**\n     * @returns The control.\n     */\n    getControl(controlID: number) {\n        let i: number | undefined = this.controlIndex.get(controlID);\n        if (i != undefined) {\n            return this.nodes.get(i) as Control;\n        }\n    }\n\n    /**\n     * @returns The controls.\n     */\n    getControls(): Control[] {\n        let controls: Control[] = [];\n        this.controlIndex.forEach((index, controlID) => {\n            controls.push(this.nodes.get(index) as Control);\n        });\n        return controls;\n    }\n\n    /**\n     * Set the controls.\n     * @param controls The controls.\n     */\n    setControls(controls: Control[]) {\n        controls.forEach(control => {\n            this.addControl(control);\n        });\n    }\n\n    /**\n     * @returns The next control id.\n     */\n    getNextControlID(): number {\n        let id = 0;\n        // Sort the control index by key and go through these and take the next available id.\n        let sortedKeys = Array.from(this.controlIndex.keys()).sort((a, b) => a - b);\n        //console.log(\"sortedKeys \" + arrayToString(sortedKeys));\n        sortedKeys.forEach((key) => {\n            if (key > id) {\n                return id;\n            }\n            id++;\n        });\n        return id;\n    }\n\n    /**\n     * Remove a control.\n     * @param controlID The id of the control to remove.\n     */\n    removeControl(controlID: number) {\n        let i: number | undefined = this.controlIndex.get(controlID);\n        //console.log(\"removeControl \" + controlID + \" \" + i);\n        //console.log(\"controlIndex \" + arrayToString(Array.from(this.controlIndex.keys())));\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Control.tagName + controlID);\n            this.controlIndex.delete(controlID);\n        }\n    }\n\n    /**\n     * @returns The metadata list.\n     */\n    getMetadataList(): MetadataList | undefined {\n        let i: number | undefined = this.index.get(MetadataList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MetadataList;\n        }\n    }\n\n    /**\n     * @param metadataList The metadata list.\n     */\n    setMetadataList(metadataList: MetadataList) {\n        let i: number | undefined = this.index.get(MetadataList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, metadataList);\n        } else {\n            this.index.set(MetadataList.tagName, this.nodes.size);\n            this.addNode(metadataList);\n        }\n    }\n\n    /**\n     * @returns The analysis.\n     */\n    getAnalysis(): Analysis | undefined {\n        let i: number | undefined = this.index.get(Analysis.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Analysis;\n        }\n    }\n\n    /**\n     * @param analysis The analysis.\n     */\n    setAnalysis(analysis: Analysis) {\n        let i: number | undefined = this.index.get(Analysis.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, analysis);\n        } else {\n            this.index.set(Analysis.tagName, this.nodes.size);\n            this.addNode(analysis);\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:description\" node is a child node of a \"me:densityOfStatesList\" node.\n */\nexport class Description extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:description\";\n\n    /**\n     * @param attributes The attributes.\n     * @param description The description.\n     */\n    constructor(attributes: Map<string, string>, description: string) {\n        super(attributes, Description.tagName, description);\n    }\n}\n\n/**\n * In the XML, a \"me:T\" node is a child node of a \"me:densityOfStates\" node. \n */\nexport class T extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:T\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, T.tagName, value);\n    }\n}","\nimport { Description } from './xml_mesmer.js';\nimport { NodeWithNodes, NumberNode } from './xml.js';\n\n/**\n * In the XML, the \"me:eigenvalue\" element is a child of the \"me:eigenvalueList\" element.\n */\nexport class Eigenvalue extends NumberNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:eigenvalue';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Eigenvalue.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:eigenvalueList\" element is a child of the \"analysis\" element.\n * Attributes include:\n * number\n * selection\n * Child nodes include:\n * me:eigenvalue\n */\nexport class EigenvalueList extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:eigenvalueList'\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, eigenvalues?: Eigenvalue[]) {\n        super(attributes, EigenvalueList.tagName);\n        if (eigenvalues) {\n            eigenvalues.forEach((eigenvalue) => {\n                this.addNode(eigenvalue);\n            });\n        }\n    }\n\n    /**\n     * Add an eigenvalue.\n     */\n    public addEigenvalue(e: Eigenvalue): void {\n        this.addNode(e);\n    }\n\n}\n\n/**\n * In the XML, the \"me:pop\" element is a child of the \"population\" element.\n * Attributes include:\n * ref (A reference to the species (molecule).)\n */\nexport class Pop extends NumberNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:pop';\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Pop.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:population\" element is a child of the \"populationList\" element.\n * Attributes include:\n * time\n * logTime\n * Child elements include:\n * me:pop\n */\nexport class Population extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:population';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, pops?: Pop[]) {\n        super(attributes, Population.tagName);\n    }\n\n    /**\n     * Add a pop.\n     */\n    public addPop(p: Pop): void {\n        this.addNode(p);\n    }\n}\n\n/**\n * In the XML, the \"me:populationList\" element is a child of the \"analysis\" element.\n * Attributes include:\n * T (Temperature)\n * conc (Concentration)\n * Child elements include:\n * me:population\n */\nexport class PopulationList extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:populationList';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, populations?: Population[]) {\n        super(attributes, PopulationList.tagName);\n        if (populations) {\n            populations.forEach((population) => {\n                this.addNode(population);\n            });\n        }\n    }\n\n    /**\n     * Add a population.\n     */\n    public addPopulation(p: Population): void {\n        this.addNode(p);\n    }\n\n}\n\n/**\n * In the XML, the \"me:firstOrderLoss\" element is a child of the \"me:rateList\" element.\n * Attributes include:\n * ref\n */\nexport class FirstOrderLoss extends NumberNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:firstOrderLoss';\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, FirstOrderLoss.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:firstOrderLoss\" element is a child of the \"me:rateList\" element.\n * Attributes include:\n * fromRef, toRef, reactionType\n */\nexport class FirstOrderRate extends NumberNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:firstOrderRate';\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, FirstOrderLoss.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:rateList\" element is a child of the \"analysis\" element.\n * Attributes include:\n * T, conc, bathGas, units\n * Child elements include:\n * me:firstOrderLoss\n * me:firstOrderRate\n */\nexport class RateList extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:rateList';\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n    \n    /**\n     * The first order loss index.\n     */\n    folIndex: Map<number, number>;\n\n    /**\n     * The first order losses.\n     */\n    fols: FirstOrderLoss[];\n\n    /**\n     * The first order rate index.\n     */\n    forIndex: Map<number, number>;\n\n    /**\n     * The first order rates.\n     */\n    fors: FirstOrderRate[];\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, firstOrderLosses?: FirstOrderLoss[], firstOrderRates?: FirstOrderRate[]) {\n        super(attributes, Analysis.tagName);\n        this.index = new Map();\n        this.folIndex = new Map();\n        if (firstOrderLosses) {\n            let i: number = 0;\n            firstOrderLosses.forEach((fol) => {\n                this.index.set(FirstOrderLoss.tagName + i.toString(), this.nodes.size);\n                this.folIndex.set(this.folIndex.size, this.nodes.size);\n                this.addNode(fol);\n                i++;\n            });\n            this.fols = firstOrderLosses;\n        } else {\n            this.fols = [];\n        }\n        this.forIndex = new Map();\n        if (firstOrderRates) {\n            let i: number = 0;\n            firstOrderRates.forEach((forr) => {\n                this.index.set(FirstOrderRate.tagName + i.toString(), this.nodes.size);\n                this.forIndex.set(this.forIndex.size, this.nodes.size);\n                this.addNode(forr);\n                i++;\n            });\n            this.fors = firstOrderRates;\n        } else {\n            this.fors = [];\n        }\n    }\n\n    /**\n     * Add a first order loss.\n     */\n    public addFirstOrderLoss(f: FirstOrderLoss): void {\n        this.folIndex.set(this.folIndex.size, this.nodes.size);\n        this.index.set(FirstOrderLoss.tagName + this.folIndex.size.toString(), this.nodes.size);\n        this.fols.push(f);\n        this.addNode(f);\n    }\n\n    /**\n     * Add a first order rate.\n     */\n    public addFirstOrderRate(f: FirstOrderRate): void {\n        this.forIndex.set(this.forIndex.size, this.nodes.size);\n        this.index.set(FirstOrderRate.tagName + this.forIndex.size.toString(), this.nodes.size);\n        this.fors.push(f);\n        this.addNode(f);\n    }\n}\n\n/**\n * In the XML, the \"me:analysis\" element is a child of the \"me:mesmer\" element.\n * Attributes include:\n * calculated\n * Child elements include:\n * me:description\n * And one or more sets of: \n *  me:eigenvalueList\n *  me:populationList\n *  me:rateList\n */\nexport class Analysis extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'me:analysis';\n\n    /**\n     * The index.\n     */\n    index: Map<string, number | Map<number, number>>;\n\n    /**\n     * The EigenvalueList index.\n     */\n    elIndex: Map<number, number>;\n\n    /**\n     * The EigenvalueList.\n     */\n    els: EigenvalueList[]\n\n    /**\n     * The PopulationList index.\n     */\n    plIndex: Map<number, number>;\n\n    /**\n     * The PopulationList.\n     */\n    pls: PopulationList[];\n\n    /**\n     * The RateList index.\n     */\n    rlIndex: Map<number, number>;\n\n    /**\n     * The RateList.\n     */\n    rls: RateList[];\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, description?: Description, els?: EigenvalueList[], \n        pls?: PopulationList[], rls?: RateList[]) {\n        super(attributes, Analysis.tagName);\n        this.index = new Map();\n        if (description) {\n            this.index.set(Description.tagName, this.nodes.size);\n            this.addNode(description);\n        }\n        this.elIndex = new Map();\n        if (els) {\n            els.forEach((el) => {\n                this.index.set(EigenvalueList.tagName, this.nodes.size);\n                this.elIndex.set(this.elIndex.size, this.nodes.size);\n                this.addNode(el);\n            });\n            this.els = els;\n        } else {\n            this.els = [];\n        }\n        this.plIndex = new Map();\n        if (pls) {\n            pls.forEach((pl) => {\n                this.index.set(PopulationList.tagName, this.nodes.size);\n                this.plIndex.set(this.plIndex.size, this.nodes.size);\n                this.addNode(pl);\n            });\n            this.pls = pls;\n        } else {\n            this.pls = [];\n        }\n        this.rlIndex = new Map();\n        if (rls) {\n            rls.forEach((rl) => {\n                this.index.set(RateList.tagName, this.nodes.size);\n                this.rlIndex.set(this.rlIndex.size, this.nodes.size);\n                this.addNode(rl);\n            });\n            this.rls = rls;\n        } else {\n            this.rls = [];\n        }\n    }\n\n    /**\n     * Get the description.\n     */\n    public getDescription(): Description | undefined {\n        if (this.index.has(Description.tagName)) {\n            let i: number = this.index.get(Description.tagName)! as number;\n            return this.nodes.get(i) as Description;\n        }\n    }\n\n    /**\n     * @param description The description.\n     */\n    setDescription(description: Description) {\n        if (this.index.has(Description.tagName)) {\n            let i: number = this.index.get(Description.tagName)! as number;\n            this.nodes.set(i, description);\n        } else {\n            this.index.set(Description.tagName, this.nodes.size);\n            this.addNode(description);\n        }\n    }\n\n    /**\n     * @param eigenvalueList The eigenvalue list.\n     */\n    addEigenvalueList(eigenvalueList: EigenvalueList) {\n        this.elIndex.set(this.elIndex.size, this.nodes.size);\n        this.addNode(eigenvalueList);\n        this.els.push(eigenvalueList);\n    }\n\n    /**\n     * @param populationList The population list.\n     */\n    addPopulationList(populationList: PopulationList) {\n        this.plIndex.set(this.plIndex.size, this.nodes.size);\n        this.addNode(populationList);\n        this.pls.push(populationList);\n    }\n\n    /**\n     * @param rateList The rate list.\n     */\n    addRateList(rateList: RateList) {\n        this.rlIndex.set(this.rlIndex.size, this.nodes.size);\n        this.addNode(rateList);\n        this.rls.push(rateList);\n    }\n}","import Big from \"big.js\";\nimport { NodeWithNodes, NumberNode, StringNode } from \"./xml.js\";\n\n/**\n * A class for \"me:bathGas\".\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     */\n    constructor(attributes: Map<string, string>, moleculeID: string) {\n        super(attributes, BathGas.tagName, moleculeID);\n    }\n}\n\n/**\n * A class for \"me:experimentalRate\".\n * The attributes should include:\n * \"ref1\" string\n * \"ref2\" string\n * \"refReaction\" string\n * \"error\".\n */\nexport class ExperimentalRate extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentalRate\";\n\n    /**\n     * The key to the ref1 attribute value.\n     */\n    static readonly s_ref1: string = \"ref1\";\n\n    /**\n     * The key to the ref2 attribute value.\n     */\n    static readonly s_ref2: string = \"ref2\";\n\n    /**\n     * The key to the refReaction attribute value.\n     */\n    static readonly s_refReaction: string = \"refReaction\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ExperimentalRate.tagName, value);\n        /*\n        if (!this.attributes.has(ExperimentalRate.s_ref1)) {\n            console.error(\"ExperimentalRate.constructor: ref1 attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_ref2)) {\n            console.error(\"ExperimentalRate.constructor: ref2 attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_refReaction)) {\n            console.error(\"ExperimentalRate.constructor: refReaction attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalRate.s_error)) {\n            console.error(\"ExperimentalRate.constructor: error attribute is missing.\");\n        }\n        */\n    }\n\n    /**\n     * @returns The ref1 attribute or undefined if there is no ref1 attribute.\n     */\n    getRef1(): string {\n        return this.attributes.get(ExperimentalRate.s_ref1) as string;\n    }\n\n    /**\n     * Set the ref1 attribute.\n     * @param ref1 The ref1.\n     */\n    setRef1(ref1: string) {\n        this.attributes.set(ExperimentalRate.s_ref1, ref1);\n    }\n\n    /**\n     * @returns The ref2 attribute or undefined if there is no ref2 attribute.\n     */\n    getRef2(): string {\n        return this.attributes.get(ExperimentalRate.s_ref2) as string;\n    }\n\n    /**\n     * Set the ref2 attribute.\n     * @param ref2 The ref2.\n     */\n    setRef2(ref2: string) {\n        this.attributes.set(ExperimentalRate.s_ref2, ref2);\n    }\n\n    /**\n     * @returns The refReaction attribute or undefined if there is no refReaction attribute.\n     */\n    getRefReaction(): string {\n        return this.attributes.get(ExperimentalRate.s_refReaction) as string;\n    }\n\n    /**\n     * Set the refReaction attribute.\n     * @param refReaction The refReaction.\n     */\n    setRefReaction(refReaction: string) {\n        this.attributes.set(ExperimentalRate.s_refReaction, refReaction);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): Big {\n        return new Big(this.attributes.get(ExperimentalRate.s_error) as string);\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: Big) {\n        this.attributes.set(ExperimentalRate.s_error, error.toString());\n    }\n}\n\n/**\n * A class for \"me:experimentalYield\".\n * The attributes should include:\n * \"ref\" string\n * \"error\" Big\n * \"yieldTime\" Big.\n */\nexport class ExperimentalYield extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentalYield\";\n\n    /**\n     * The key to the ref attribute value.\n     */\n    static readonly s_ref: string = \"ref\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * The key to the yieldTime attribute value.\n     */\n    static readonly s_yieldTime: string = \"yieldTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ExperimentalYield.tagName, value);\n    }\n\n    /**\n     * @returns The ref attribute or undefined if there is no ref attribute.\n     */\n    getRef(): string {\n        return this.attributes.get(ExperimentalYield.s_ref) as string;\n    }\n\n    /**\n     * Set the ref attribute.\n     * @param ref The ref.\n     */\n    setRef(ref: string) {\n        this.attributes.set(ExperimentalYield.s_ref, ref);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): Big {\n        return new Big(this.attributes.get(ExperimentalYield.s_error) as string);\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: Big) {\n        this.attributes.set(ExperimentalYield.s_error, error.toString());\n    }\n\n    /**\n     * @returns The yieldTime attribute or undefined if there is no yieldTime attribute.\n     */\n    getYieldTime(): Big {\n        return new Big(this.attributes.get(ExperimentalYield.s_yieldTime) as string);\n    }\n\n    /**\n     * Set the yieldTime attribute.\n     * @param yieldTime The yieldTime.\n     */\n    setYieldTime(yieldTime: Big) {\n        this.attributes.set(ExperimentalYield.s_yieldTime, yieldTime.toString());\n    }\n}\n\n/**\n * A class for \"me:experimentalEigenvalue\".\n * The attributes should include:\n * EigenvalueID:string\n * error: number\n */\nexport class ExperimentalEigenvalue extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:experimentalEigenvalue\";\n\n    /**\n     * The key to the EigenvalueID attribute value.\n     */\n    static readonly s_EigenvalueID = \"EigenvalueID\";\n\n    /**\n     * The key to the error attribute value.\n     */\n    static readonly s_error: string = \"error\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ExperimentalEigenvalue.tagName, value);\n        /*\n        if (!this.attributes.has(ExperimentalEigenvalue.s_EigenvalueID)) {\n            console.error(\"ExperimentalEigenvalue.constructor: EigenvalueID attribute is missing.\");\n        }\n        if (!this.attributes.has(ExperimentalEigenvalue.s_error)) {\n            console.error(\"ExperimentalEigenvalue.constructor: error attribute is missing.\");\n        }\n        */\n    }\n\n    /**\n     * @returns The EigenvalueID attribute.\n     */\n    getEigenvalueID(): string {\n        return this.attributes.get(ExperimentalEigenvalue.s_EigenvalueID) as string;\n    }\n\n    /**\n     * Set the EigenvalueID attribute.\n     * @param EigenvalueID The EigenvalueID.\n     */\n    setEigenvalueID(EigenvalueID: string) {\n        this.attributes.set(ExperimentalEigenvalue.s_EigenvalueID, EigenvalueID);\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): Big {\n        return new Big(this.attributes.get(ExperimentalEigenvalue.s_error) as string);\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: Big) {\n        this.attributes.set(ExperimentalEigenvalue.s_error, error.toString());\n    }\n\n}\n\n/**\n * A class for \"me:excessReactantConc\".\n * The attributes may include:\n * percent: string (\"true\" or \"false\")\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * The key to the percent attribute value.\n     */\n    static readonly s_percent: string = \"percent\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n\n    /**\n     * @returns The percent attribute or undefined if there is no percent attribute.\n     */\n    getPercent(): string | undefined {\n        return this.attributes.get(ExcessReactantConc.s_percent);\n    }\n\n    /**\n     * Set the percent attribute.\n     * @param percent The percent.\n     */\n    setPercent(percent: string) {\n        this.attributes.set(ExcessReactantConc.s_percent, percent);\n    }\n}\n\n/**\n * A class for representing a Pressure and Temperature pair with optional additional things: BathGas and ExperimentRate.\n * Can there be multiple BathGases and ExperimentRates?\n * The attributes include:\n * units: string\n * P: Big\n * T: Big\n * And optionally:\n * percentExcessReactantConc: Big\n * excessReactantConc: string\n * precision: Big\n * bathGas: string\n * If excessReactantConc=\"true\" then the node contains a node of type \"me:excessReactantConc\".\n * \n */\nexport class PTpair extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTpair\";\n\n    /**\n     * The key to the P attribute value.\n     */\n    static readonly s_P: string = \"P\";\n\n    /**\n     * The key to the T attribute value.\n     */\n    static readonly s_T: string = \"T\";\n\n    /**\n     * The key to the precision attribute value.\n     */\n    static readonly s_precision: string = \"precision\";\n\n    /**\n     * The key to the excessReactantConc attribute value.\n     */\n    static readonly s_excessReactantConc = \"excessReactantConc\";\n\n    /**\n     * The key to the percentExcessReactantConc attribute value.\n     */\n    static readonly s_percentExcessReactantConc = \"percentExcessReactantConc\";\n\n    /**\n     * The index. Keys are types and values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */\n    constructor(attributes: Map<string, string>, bathGas?: BathGas, experimentRate?: ExperimentalRate,\n        experimentalYield?: ExperimentalYield, experimentalEigenvalue?: ExperimentalEigenvalue) {\n        super(attributes, PTpair.tagName);\n        this.index = new Map();\n        if (bathGas != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate != undefined) {\n            this.index.set(ExperimentalRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n        if (experimentalYield != undefined) {\n            this.index.set(ExperimentalYield.tagName, this.nodes.size);\n            this.addNode(experimentalYield);\n        }\n        if (experimentalEigenvalue != undefined) {\n            this.index.set(ExperimentalEigenvalue.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n\n    /**\n     * @returns The Pressure.\n     */\n    getP(): Big | undefined {\n        let p: string | undefined = this.attributes.get(PTpair.s_P);\n        if (p !== undefined) {\n            return new Big(p);\n        }\n    }\n\n    /**\n     * Set The Pressure\n     */\n    setP(p: Big) {\n        this.attributes.set(PTpair.s_P, p.toString());\n    }\n\n    /**\n     * @returns The Temperature.\n     */\n    getT(): Big | undefined {\n        let t: string | undefined = this.attributes.get(PTpair.s_T);\n        if (t !== undefined) {\n            return new Big(t);\n        }\n    }\n\n    /**\n     * Set The Temperature.\n     */\n    setT(t: Big) {\n        this.attributes.set(PTpair.s_T, t.toString());\n    }\n\n    /**\n     * @returns The precision attribute or undefined if there is no precision attribute.\n     */\n    getPrecision(): string | undefined {\n        return this.attributes.get(PTpair.s_precision);\n    }\n\n    /**\n     * Set the precision attribute.\n     * @param precision The precision.\n     */\n    setPrecision(precision: string) {\n        this.attributes.set(PTpair.s_precision, precision);\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas | undefined {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BathGas;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas.\n     */\n    setBathGas(bathGas: BathGas) {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bathGas);\n        } else {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * Remove the bath gas.\n     */\n    removeBathGas() {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(BathGas.tagName);\n        }\n    }\n\n    /**\n     * @returns The experiment rate.\n     */\n    getExperimentalRate(): ExperimentalRate | undefined {\n        let i: number | undefined = this.index.get(ExperimentalRate.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentalRate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentRate The experiment rate.\n     */\n    setExperimentalRate(experimentRate: ExperimentalRate) {\n        let i: number | undefined = this.index.get(ExperimentalRate.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentRate);\n        } else {\n            this.index.set(ExperimentalRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n\n    /**\n     * Remove the experiment rate.\n     */\n    removeExperimentalRate() {\n        let i: number | undefined = this.index.get(ExperimentalRate.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentalRate.tagName);\n        }\n    }\n\n    /**\n     * @returns The experimental yield.\n     */\n    getExperimentalYield(): ExperimentalYield | undefined {\n        let i: number | undefined = this.index.get(ExperimentalYield.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentalYield;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentalYield The experimental yield.\n     */\n    setExperimentalYield(experimentalYield: ExperimentalYield) {\n        let i: number | undefined = this.index.get(ExperimentalYield.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentalYield);\n        } else {\n            this.index.set(ExperimentalYield.tagName, this.nodes.size);\n            this.addNode(experimentalYield);\n        }\n    }\n\n    /**\n     * Remove the experimental yield.\n     */\n    removeExperimentalYield() {\n        let i: number | undefined = this.index.get(ExperimentalYield.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentalYield.tagName);\n        }\n    }\n\n    /**\n     * @returns The experimental eigenvalue.\n     */\n    getExperimentalEigenvalue(): ExperimentalEigenvalue | undefined {\n        let i: number | undefined = this.index.get(ExperimentalEigenvalue.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExperimentalEigenvalue;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentalEigenvalue The experimental eigenvalue.\n     */\n    setExperimentalEigenvalue(experimentalEigenvalue: ExperimentalEigenvalue) {\n        let i: number | undefined = this.index.get(ExperimentalEigenvalue.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, experimentalEigenvalue);\n        } else {\n            this.index.set(ExperimentalEigenvalue.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n\n    /**\n     * Remove the experimental eigenvalue.\n     */\n    removeExperimentalEigenvalue() {\n        let i: number | undefined = this.index.get(ExperimentalEigenvalue.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentalEigenvalue.tagName);\n        }\n    }\n\n    /**\n     * @returns this.attributes.get(\"excessReactantConc\").\n     */\n    getExcessReactantConc(): string | undefined {\n        return this.attributes.get(PTpair.s_excessReactantConc);\n    }\n\n    /**\n     * this.attributes.set(\"excessReactantConc\", excessReactantConc).\n     */\n    setExcessReactantConc(excessReactantConc: string) {\n        this.attributes.set(PTpair.s_excessReactantConc, excessReactantConc);\n    }\n\n    /**\n     * @returns this.attributes.get(\"percentExcessReactantConc\").\n     */\n    getPercentExcessReactantConc(): string | undefined {\n        return this.attributes.get(PTpair.s_percentExcessReactantConc);\n    }\n\n    /**\n     * this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc).\n     */\n    setPercentExcessReactantConc(percentExcessReactantConc: string) {\n        this.attributes.set(PTpair.s_percentExcessReactantConc, percentExcessReactantConc);\n    }\n\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * The Pressure and Temperature pairs.\n     */\n    ptps: PTpair[];\n\n    /**\n     * @param attributes The attributes.\n     * @param pTs The PTs.\n     */\n    constructor(attributes: Map<string, string>, pTpairs?: PTpair[]) {\n        super(attributes, PTs.tagName);\n        if (pTpairs != undefined) {\n            pTpairs.forEach((pTpair) => {\n                this.addNode(pTpair);\n            });\n            this.ptps = pTpairs;\n        } else {\n            this.ptps = [];\n        }\n    }\n\n    /**\n     * Get the PTpair at the given index.\n     * \n     * @param i The index of the PTpair to return. \n     * @returns The PTpair at the given index or undefined if the index is out of range.\n     */\n    get(i: number): PTpair {\n        return this.ptps[i];\n    }\n\n    /**\n     * Set the PTpair at the given index.\n     * \n     * @param i The index.\n     * @returns The PT pairs.\n     */\n    set(i: number, pTpair: PTpair): void {\n        this.nodes.set(i, pTpair);\n        this.ptps[i] = pTpair;\n    }\n\n    /**\n     * Add a PTpair.\n     * \n     * @param pTPair The PTpair to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */\n    add(pTpair: PTpair): number {\n        this.addNode(pTpair);\n        this.ptps.push(pTpair);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * Remove the PTpair at the given index.\n     * \n     * @param i The index.\n     */\n    remove(i: number): void {\n        this.nodes.delete(i);\n        this.ptps.splice(i, 1);\n    }\n\n    /**\n     * Initialise.\n     * \n     * @param pTPair The PTpair to add.\n     */\n    init(ptps: PTpair[]): void {\n        this.clear();\n        ptps.forEach((ptp) => {\n            this.addNode(ptp);\n            this.ptps.push(ptp);\n        });\n    }\n\n    /**\n     * Clear.\n     */\n    clear(): void {\n        this.nodes.clear();\n        this.ptps = [];\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * The id.\n     */\n    id: number;\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The bath gases index. The keys are the molecule IDs and the values are the node indexes.\n     */\n    bathGasesIndex: Map<string, number>;\n\n    /**\n     * The bath gases.\n     */\n    bathGases: Map<BathGas, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGases The bath gases.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */\n    constructor(attributes: Map<string, string>, id: number, bathGases?: Set<BathGas>, pTs?: PTs) {\n        super(attributes, Conditions.tagName);\n        this.id = id;\n        this.index = new Map();\n        this.bathGasesIndex = new Map();\n        this.bathGases = new Map();\n        if (bathGases != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            bathGases.forEach((bathGas) => {\n                this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n                this.addNode(bathGas);\n                this.bathGases.set(bathGas, bathGases.size);\n            });\n        }\n        if (pTs != undefined) {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n\n    /**\n     * @returns The bath gases.\n     */\n    getBathGases(): Map<BathGas, number> {\n        return this.bathGases;\n    }\n\n    /**\n     * @param bathGas The bath gas to add.\n     */\n    addBathGas(bathGas: BathGas): number {\n        if (!this.bathGases.has(bathGas)) {\n            let index: number = this.bathGases.size;\n            this.bathGases.set(bathGas, index);\n            this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n            this.addNode(bathGas);\n            return index;\n        } else {\n            return this.bathGases.get(bathGas) as number;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas to remove.\n     */\n    removeBathGas(bathGas: BathGas) {\n        if (this.bathGases.has(bathGas)) {\n            this.bathGases.delete(bathGas);\n            this.nodes.delete(this.bathGasesIndex.get(bathGas.value) as number);\n        } else {\n            console.warn(\"Conditions.removeBathGas: bathGas not found to remove.\");\n        }\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs | undefined {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            return this.nodes.get(i) as PTs;\n        }\n    }\n\n    /**\n     * @param pTs The PTs.\n     */\n    setPTs(pTs: PTs) {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            this.nodes.set(i, pTs);\n        } else {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n}","import Big from \"big.js\";\nimport { Tag, NodeWithNodes, NumberNode, TagWithAttributes, StringNode } from \"./xml\";\n\n/**\n * A class for \"me:calculateRateCoefficientsOnly\".\n */\nexport class CalculateRateCoefficientsOnly extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calculateRateCoefficientsOnly\";\n\n    constructor() {\n        super(CalculateRateCoefficientsOnly.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellDOS\".\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellTransitionStateFlux\".\n */\nexport class PrintCellTransitionStateFlux extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printCellTransitionStateFlux\";\n\n    constructor() {\n        super(PrintCellTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorColumnSums\".\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainBoltzmann\".\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainDOS\".\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkbE\".\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkfE\".\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTSsos\".\n */\nexport class PrintTSsos extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printTSsos\";\n\n    constructor() {\n        super(PrintTSsos.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainedSpeciesProfile\".\n */\nexport class PrintGrainedSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainedSpeciesProfile\";\n\n    constructor() {\n        super(PrintGrainedSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainTransitionStateFlux\".\n */\nexport class PrintGrainTransitionStateFlux extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainTransitionStateFlux\";\n\n    constructor() {\n        super(PrintGrainTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorSize\".\n */\nexport class PrintReactionOperatorSize extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorSize\";\n\n    constructor() {\n        super(PrintReactionOperatorSize.tagName);\n    }\n}\n\n/**\n * A class for \"me:printSpeciesProfile\".\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printPhenomenologicalEvolution\".\n */\nexport class PrintPhenomenologicalEvolution extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printPhenomenologicalEvolution\";\n\n    constructor() {\n        super(PrintPhenomenologicalEvolution.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTunnelingCoefficients\".\n */\nexport class PrintTunnelingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnelingCoefficients\";\n\n    constructor() {\n        super(PrintTunnelingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCrossingCoefficients\".\n */\nexport class PrintCrossingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCrossingCoefficients\";\n\n    constructor() {\n        super(PrintCrossingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:testDOS\".\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:testRateConstant\".\n */\nexport class TestRateConstant extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstant\";\n\n    constructor() {\n        super(TestRateConstant.tagName);\n    }\n}\n\n/**\n * A class for \"me:useTheSameCellNumberForAllConditions.\n */\nexport class UseTheSameCellNumberForAllConditions extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:useTheSameCellNumberForAllConditions\";\n\n    constructor() {\n        super(UseTheSameCellNumberForAllConditions.tagName);\n    }\n}\n\n/**\n * A class for \"me:ForceMacroDetailedBalance.\n */\n\nexport class ForceMacroDetailedBalance extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ForceMacroDetailedBalance\";\n\n    constructor() {\n        super(ForceMacroDetailedBalance.tagName);\n    }\n}\n\n/**\n * A class for \"me:hideInactive\".\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for \"me:calcMethod\".\n * Expected to have an attribute \"xsi_type\" or \"name\" with one of the following values:\n * \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\",\n * \"me:simpleCalc\", \"me:gridSearch\", \"me:fitting\", \"me:marquardt\", \"me:analyticalRepresentation\", \"me:ThermodynamicTable\", \"me:sensitivityAnalysis\".\n */\nexport class CalcMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calcMethod\";\n\n    /**\n     * The possible values.\n     */\n    static readonly options: string[] = [\"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\",\n        \"ThermodynamicTable\", \"sensitivityAnalysis\", \"me:simpleCalc\", \"me:gridSearch\", \"me:fitting\", \"me:marquardt\",\n        \"me:analyticalRepresentation\", \"me:ThermodynamicTable\", \"me:sensitivityAnalysis\"];\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, CalcMethod.tagName);\n    }\n}\n\n/**\n * A class for \"me:SimpleCalc\" CalcMethod.\n */\nexport class CalcMethodSimpleCalc extends CalcMethod {\n\n    /**\n     * The xsi_type.\n     */\n    static readonly xsi_type: string = \"me:simpleCalc\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"simpleCalc\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n}\n\n/**\n * A class for \"me:GridSearch\" CalcMethod.\n */\nexport class CalcMethodGridSearch extends CalcMethod {\n\n    /**\n    * The xsi_type.\n    */\n    static readonly xsi_type: string = \"me:gridSearch\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"gridSearch\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes);\n    }\n}\n\n/**\n * A class for \"me:fittingIterations\".\n */\nexport class FittingIterations extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:fittingIterations\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, FittingIterations.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Fitting\" CalcMethod.\n * Nodes:\n * \"me:fittingIterations\"\n */\nexport class CalcMethodFitting extends CalcMethod {\n\n    /**\n     * The xsi_type.\n     */\n    static readonly xsi_type: string = \"me:fitting\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"fitting\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, fittingIterations?: FittingIterations) {\n        super(attributes);\n        if (fittingIterations != undefined) {\n            this.addNode(fittingIterations);\n        }\n    }\n\n    /**\n     * @returns The fittingIterations or undefined.\n     */\n    getFittingIterations(): FittingIterations | undefined {\n        return this.nodes.get(0) as FittingIterations;\n    }\n\n    /**\n     * @param fittingIterations The fittingIterations.\n     */\n    setFittingIterations(fittingIterations: FittingIterations) {\n        this.nodes.set(0, fittingIterations);\n    }\n\n    /**\n     * Remove the fittingIterations.\n     */\n    removeFittingIterations() {\n        this.nodes.delete(0);\n    }\n}\n\n/**\n * A class for \"me:MarquardtIterations\".\n */\nexport class MarquardtIterations extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MarquardtIterations\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, MarquardtIterations.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MarquardtTolerance\".\n */\nexport class MarquardtTolerance extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MarquardtTolerance\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, MarquardtTolerance.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MarquardtDerivDelta\".\n */\nexport class MarquardtDerivDelta extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MarquardtDerivDelta\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, MarquardtDerivDelta.tagName, value);\n    }\n}\n\nexport class CalcMethodMarquardt extends CalcMethod {\n\n    /**\n     * The tag name.\n     */\n    public static readonly xsi_type: string = \"me:marquardt\";\n\n    /**\n     * The tag name.\n     */\n    public static readonly xsi_type2: string = \"marquardt\";\n\n    public static readonly MarquardtDerivDeltaDefault: string = \"1.e-03\";\n    public static readonly MarquardtTolerance: string = \"1.e-03\";\n    public static readonly MarquardtLambda: string = \"1.0\";\n    public static readonly MarquardtLambdaScale: string = \"10.0\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, marquardtIterations?: MarquardtIterations,\n        marquardtTolerance?: MarquardtTolerance, marquardtDerivDelta?: MarquardtDerivDelta) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (marquardtIterations != undefined) {\n            this.index.set(MarquardtIterations.tagName, this.nodes.size);\n            this.addNode(marquardtIterations);\n        }\n        if (marquardtTolerance != undefined) {\n            this.index.set(MarquardtTolerance.tagName, this.nodes.size);\n            this.addNode(marquardtTolerance);\n        }\n        if (marquardtDerivDelta != undefined) {\n            this.index.set(MarquardtDerivDelta.tagName, this.nodes.size);\n            this.addNode(marquardtDerivDelta);\n        }\n    }\n\n\n    /**\n     * @returns The marquardtIterations or undefined.\n     */\n    getMarquardtIterations(): MarquardtIterations | undefined {\n        let i = this.index.get(MarquardtIterations.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MarquardtIterations;\n        }\n    }\n\n    /**\n     * @param marquardtIterations The marquardtIterations.\n     */\n    setMarquardtIterations(marquardtIterations: MarquardtIterations) {\n        let i = this.index.get(MarquardtIterations.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, marquardtIterations);\n        } else {\n            this.index.set(MarquardtIterations.tagName, this.nodes.size);\n            this.addNode(marquardtIterations);\n        }\n    }\n\n    /**\n     * Remove the marquardtIterations.\n     */\n    removeMarquardtIterations() {\n        let i = this.index.get(MarquardtIterations.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MarquardtIterations.tagName);\n        }\n    }\n\n    /**\n     * @returns The marquardtTolerance or undefined.\n     */\n    getMarquardtTolerance(): MarquardtTolerance | undefined {\n        let i = this.index.get(MarquardtTolerance.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MarquardtTolerance;\n        }\n    }\n\n    /**\n     * @param marquardtTolerance The marquardtTolerance.\n     */\n    setMarquardtTolerance(marquardtTolerance: MarquardtTolerance) {\n        let i = this.index.get(MarquardtTolerance.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, marquardtTolerance);\n        } else {\n            this.index.set(MarquardtTolerance.tagName, this.nodes.size);\n            this.addNode(marquardtTolerance);\n        }\n    }\n\n    /**\n     * Remove the marquardtTolerance.\n     */\n    removeMarquardtTolerance() {\n        let i = this.index.get(MarquardtTolerance.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MarquardtTolerance.tagName);\n        }\n    }\n\n    /**\n     * @returns The marquardtDerivDelta or undefined.\n     */\n    getMarquardtDerivDelta(): MarquardtDerivDelta | undefined {\n        let i = this.index.get(MarquardtDerivDelta.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MarquardtDerivDelta;\n        }\n    }\n\n    /**\n     * @param marquardtDerivDelta The marquardtDerivDelta.\n     */\n    setMarquardtDerivDelta(marquardtDerivDelta: MarquardtDerivDelta) {\n        let i = this.index.get(MarquardtDerivDelta.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, marquardtDerivDelta);\n        } else {\n            this.index.set(MarquardtDerivDelta.tagName, this.nodes.size);\n            this.addNode(marquardtDerivDelta);\n        }\n    }\n\n    /**\n     * Remove the marquardtDerivDelta.\n     */\n    removeMarquardtDerivDelta() {\n        let i = this.index.get(MarquardtDerivDelta.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MarquardtDerivDelta.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:useTraceWeighting\".\n */\nexport class UseTraceWeighting extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:useTraceWeighting\";\n\n    constructor() {\n        super(UseTraceWeighting.tagName);\n    }\n}\n\n/**\n * A class for \"me:format\".\n * The attributes may have the following keys:\n * \"representation\" (with known value: \"Plog\")\n * \"rateUnits\" (with known values: \"cm3mole-1s-1\", \"cm3molecule-1s-1\")\n * Values include:\n * \"cantera\", \"chemkin\"\n */\nexport class Format extends StringNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:format\";\n\n    /**\n     * The options.\n     */\n    static readonly options: string[] = [\"cantera\", \"chemkin\"];\n\n    /**\n     * The rateUnits.\n     */\n    static readonly rateUnits: string = \"rateUnits\";\n\n    /**\n     * The rateUnits options.\n     */\n    static readonly rateUnitsOptions: string[] = [\"cm3mole-1s-1\", \"cm3molecule-1s-1\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Format.tagName, value);\n    }\n\n    /**\n     * @returns The value of the \"rateUnits\" attribute or undefined.\n     */\n    getRateUnits(): string | undefined {\n        return this.attributes.get(Format.rateUnits);\n    }\n\n    /**\n     * @param rateUnits The value of the \"rateUnits\" attribute.\n     */\n    setRateUnits(rateUnits: string) {\n        this.attributes.set(Format.rateUnits, rateUnits);\n    }\n\n    /**\n     * Remove the \"rateUnits\" attribute.\n     */\n    removeRateUnits() {\n        this.attributes.delete(Format.rateUnits);\n    }\n}\n\n/**\n * A class for \"me:precision\".\n * Known values include:\n * \"d\", \"dd\", \"qd\", \"double\", \"double-double\" or \"quad-double\"\n */\nexport class Precision extends StringNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:precision\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Precision.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebNumTemp\".\n */\nexport class ChebNumTemp extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebNumTemp\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebNumTemp.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebNumConc\".\n */\nexport class ChebNumConc extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebNumConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebNumConc.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebMaxTemp\".\n */\nexport class ChebMaxTemp extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMaxTemp\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebMaxTemp.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebMinTemp\".\n */\nexport class ChebMinTemp extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMinTemp\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebMinTemp.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebMaxConc\".\n * Known attributes include:\n * \"units\" (known values include \"atm\").\n */\nexport class ChebMaxConc extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMaxConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebMaxConc.tagName, value);\n    }\n\n    /**\n     * @returns The units.\n     */\n    getUnits(): string | undefined {\n        return this.attributes.get(\"units\");\n    }\n\n    /**\n     * @param units The units.\n     */\n    setUnits(units: string) {\n        this.attributes.set(\"units\", units);\n    }\n}\n\n/**\n * A class for \"me:chebMinConc\".\n */\nexport class ChebMinConc extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebMinConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebMinConc.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebTExSize\".\n */\nexport class ChebTExSize extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebTExSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebTExSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:chebPExSize\".\n */\nexport class ChebPExSize extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:chebPExSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ChebPExSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:analyticalRepresentation\" CalcMethod.\n * Expected to have attributes:\n * \"xsi_type\" with the value \"me:analyticalRepresentation\".\n * Nodes:\n * \"me:format\"\n * If the \"me:format\" attribute \"representation\" is \"Plog\" then the following nodes are expected:\n * \"me:plogNumTemp\"\n * \"me:plogMaxTemp\"\n * \"me:plogMinTemp\"\n * \"me:plogConcs\" which may have multiple \"me:plogConc\" values.\n * If the \"me:format\" attribute \"representation\" is not specified, then the following nodes are expected:\n * \"me:precision\"\n * \"me:chebNumTemp\"\n * \"me:chebNumConc\"\n * \"me:chebMaxTemp\"\n * \"me:chebMinTemp\"\n * \"me:chebMaxConc\"\n * \"me:chebMinConc\"\n * \"me:chebTExSize\"\n * \"me:chebPExSize\"\n */\nexport class CalcMethodAnalyticalRepresentation extends CalcMethod {\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type: string = \"me:analyticalRepresentation\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type2: string = \"analyticalRepresentation\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, format?: Format, precision?: Precision, chebNumTemp?: ChebNumTemp,\n        chebNumConc?: ChebNumConc, chebMaxTemp?: ChebMaxTemp, chebMinTemp?: ChebMinTemp, chebMaxConc?: ChebMaxConc,\n        chebMinConc?: ChebMinConc, chebTExSize?: ChebTExSize, chebPExSize?: ChebPExSize) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (format != undefined) {\n            this.index.set(Format.tagName, this.nodes.size);\n            this.addNode(format);\n        }\n        if (precision != undefined) {\n            this.index.set(Precision.tagName, this.nodes.size);\n            this.addNode(precision);\n        }\n        if (chebNumTemp != undefined) {\n            this.index.set(ChebNumTemp.tagName, this.nodes.size);\n            this.addNode(chebNumTemp);\n        }\n        if (chebNumConc != undefined) {\n            this.index.set(ChebNumConc.tagName, this.nodes.size);\n            this.addNode(chebNumConc);\n        }\n        if (chebMaxTemp != undefined) {\n            this.index.set(ChebMaxTemp.tagName, this.nodes.size);\n            this.addNode(chebMaxTemp);\n        }\n        if (chebMinTemp != undefined) {\n            this.index.set(ChebMinTemp.tagName, this.nodes.size);\n            this.addNode(chebMinTemp);\n        }\n        if (chebMaxConc != undefined) {\n            this.index.set(ChebMaxConc.tagName, this.nodes.size);\n            this.addNode(chebMaxConc);\n        }\n        if (chebMinConc != undefined) {\n            this.index.set(ChebMinConc.tagName, this.nodes.size);\n            this.addNode(chebMinConc);\n        }\n        if (chebTExSize != undefined) {\n            this.index.set(ChebTExSize.tagName, this.nodes.size);\n            this.addNode(chebTExSize);\n        }\n        if (chebPExSize != undefined) {\n            this.index.set(ChebPExSize.tagName, this.nodes.size);\n            this.addNode(chebPExSize);\n        }\n    }\n\n    /**\n     * @returns The format or undefined.\n     */\n    getFormat(): Format | undefined {\n        let i = this.index.get(Format.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Format;\n        }\n    }\n\n    /**\n     * @param format The format.\n     */\n    setFormat(format: Format) {\n        let i = this.index.get(Format.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, format);\n        } else {\n            this.index.set(Format.tagName, this.nodes.size);\n            this.addNode(format);\n        }\n    }\n\n    /**\n     * Remove the format.\n     */\n    removeFormat() {\n        let i = this.index.get(Format.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Format.tagName);\n        }\n    }\n\n    /**\n     * @returns The precision or undefined.\n     */\n    getPrecision(): Precision | undefined {\n        let i = this.index.get(Precision.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Precision;\n        }\n    }\n\n    /**\n     * @param precision The precision.\n     */\n    setPrecision(precision: Precision) {\n        let i = this.index.get(Precision.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, precision);\n        } else {\n            this.index.set(Precision.tagName, this.nodes.size);\n            this.addNode(precision);\n        }\n    }\n\n    /**\n     * Remove the precision.\n     */\n    removePrecision() {\n        let i = this.index.get(Precision.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Precision.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebNumTemp or undefined.\n     */\n    getChebNumTemp(): ChebNumTemp | undefined {\n        let i = this.index.get(ChebNumTemp.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebNumTemp;\n        }\n    }\n\n    /**\n     * @param chebNumTemp The chebNumTemp.\n     */\n    setChebNumTemp(chebNumTemp: ChebNumTemp) {\n        let i = this.index.get(ChebNumTemp.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebNumTemp);\n        } else {\n            this.index.set(ChebNumTemp.tagName, this.nodes.size);\n            this.addNode(chebNumTemp);\n        }\n    }\n\n    /**\n     * Remove the chebNumTemp.\n     */\n    removeChebNumTemp() {\n        let i = this.index.get(ChebNumTemp.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebNumTemp.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebNumConc or undefined.\n     */\n    getChebNumConc(): ChebNumConc | undefined {\n        let i = this.index.get(ChebNumConc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebNumConc;\n        }\n    }\n\n    /**\n     * @param chebNumConc The chebNumConc.\n     */\n    setChebNumConc(chebNumConc: ChebNumConc) {\n        let i = this.index.get(ChebNumConc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebNumConc);\n        } else {\n            this.index.set(ChebNumConc.tagName, this.nodes.size);\n            this.addNode(chebNumConc);\n        }\n    }\n\n    /**\n     * Remove the chebNumConc.\n     */\n    removeChebNumConc() {\n        let i = this.index.get(ChebNumConc.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebNumConc.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMaxTemp or undefined.\n     */\n    getChebMaxTemp(): ChebMaxTemp | undefined {\n        let i = this.index.get(ChebMaxTemp.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMaxTemp;\n        }\n    }\n\n    /**\n     * @param chebMaxTemp The chebMaxTemp.\n     */\n    setChebMaxTemp(chebMaxTemp: ChebMaxTemp) {\n        let i = this.index.get(ChebMaxTemp.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMaxTemp);\n        } else {\n            this.index.set(ChebMaxTemp.tagName, this.nodes.size);\n            this.addNode(chebMaxTemp);\n        }\n    }\n\n    /**\n     * Remove the chebMaxTemp.\n     */\n    removeChebMaxTemp() {\n        let i = this.index.get(ChebMaxTemp.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMaxTemp.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMinTemp or undefined.\n     */\n    getChebMinTemp(): ChebMinTemp | undefined {\n        let i = this.index.get(ChebMinTemp.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMinTemp;\n        }\n    }\n\n    /**\n     * @param chebMinTemp The chebMinTemp.\n     */\n    setChebMinTemp(chebMinTemp: ChebMinTemp) {\n        let i = this.index.get(ChebMinTemp.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMinTemp);\n        } else {\n            this.index.set(ChebMinTemp.tagName, this.nodes.size);\n            this.addNode(chebMinTemp);\n        }\n    }\n\n    /**\n     * Remove the chebMinTemp.\n     */\n    removeChebMinTemp() {\n        let i = this.index.get(ChebMinTemp.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMinTemp.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMaxConc or undefined.\n     */\n    getChebMaxConc(): ChebMaxConc | undefined {\n        let i = this.index.get(ChebMaxConc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMaxConc;\n        }\n    }\n\n    /**\n     * @param chebMaxConc The chebMaxConc.\n     */\n    setChebMaxConc(chebMaxConc: ChebMaxConc) {\n        let i = this.index.get(ChebMaxConc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMaxConc);\n        } else {\n            this.index.set(ChebMaxConc.tagName, this.nodes.size);\n            this.addNode(chebMaxConc);\n        }\n    }\n\n    /**\n     * Remove the chebMaxConc.\n     */\n    removeChebMaxConc() {\n        let i = this.index.get(ChebMaxConc.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMaxConc.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebMinConc or undefined.\n     */\n    getChebMinConc(): ChebMinConc | undefined {\n        let i = this.index.get(ChebMinConc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebMinConc;\n        }\n    }\n\n    /**\n     * @param chebMinConc The chebMinConc.\n     */\n    setChebMinConc(chebMinConc: ChebMinConc) {\n        let i = this.index.get(ChebMinConc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebMinConc);\n        } else {\n            this.index.set(ChebMinConc.tagName, this.nodes.size);\n            this.addNode(chebMinConc);\n        }\n    }\n\n    /**\n     * Remove the chebMinConc.\n     */\n    removeChebMinConc() {\n        let i = this.index.get(ChebMinConc.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebMinConc.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebTExSize or undefined.\n     */\n    getChebTExSize(): ChebTExSize | undefined {\n        let i = this.index.get(ChebTExSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebTExSize;\n        }\n    }\n\n    /**\n     * @param chebTExSize The chebTExSize.\n     */\n    setChebTExSize(chebTExSize: ChebTExSize) {\n        let i = this.index.get(ChebTExSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebTExSize);\n        } else {\n            this.index.set(ChebTExSize.tagName, this.nodes.size);\n            this.addNode(chebTExSize);\n        }\n    }\n\n    /**\n     * Remove the chebTExSize.\n     */\n    removeChebTExSize() {\n        let i = this.index.get(ChebTExSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebTExSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The chebPExSize or undefined.\n     */\n    getChebPExSize(): ChebPExSize | undefined {\n        let i = this.index.get(ChebPExSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ChebPExSize;\n        }\n    }\n\n    /**\n     * @param chebPExSize The chebPExSize.\n     */\n    setChebPExSize(chebPExSize: ChebPExSize) {\n        let i = this.index.get(ChebPExSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, chebPExSize);\n        } else {\n            this.index.set(ChebPExSize.tagName, this.nodes.size);\n            this.addNode(chebPExSize);\n        }\n    }\n\n    /**\n     * Remove the chebPExSize.\n     */\n    removeChebPExSize() {\n        let i = this.index.get(ChebPExSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ChebPExSize.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:Tmin\" CalcMethod.\n */\nexport class Tmin extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tmin\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Tmin.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Tmid\" CalcMethod.\n */\nexport class Tmid extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tmid\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Tmid.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Tmax\" CalcMethod.\n */\nexport class Tmax extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tmax\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Tmax.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:Tstep\" CalcMethod.\n */\nexport class Tstep extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Tstep\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Tstep.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:ThermodynamicTable\" CalcMethod.\n * Expected to have attributes:\n * \"xsi_type\" with the value \"me:ThermodynamicTable\";\n * \"units\" with known values \"kJ/mol\".\n * Nodes:\n * \"me:Tmin\", \"me:Tmid\", \"me:Tmax\", \"me:Tstep\".\n */\nexport class CalcMethodThermodynamicTable extends CalcMethod {\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type: string = \"me:ThermodynamicTable\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsi_type2: string = \"ThermodynamicTable\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tmin?: Tmin, tmid?: Tmid, tmax?: Tmax, tstep?: Tstep) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (tmin != undefined) {\n            this.index.set(Tmin.tagName, this.nodes.size);\n            this.addNode(tmin);\n        }\n        if (tmid != undefined) {\n            this.index.set(Tmid.tagName, this.nodes.size);\n            this.addNode(tmid);\n        }\n        if (tmax != undefined) {\n            this.index.set(Tmax.tagName, this.nodes.size);\n            this.addNode(tmax);\n        }\n        if (tstep != undefined) {\n            this.index.set(Tstep.tagName, this.nodes.size);\n            this.addNode(tstep);\n        }\n    }\n\n    /**\n     * @returns The tmin or undefined.\n     */\n    getTmin(): Tmin | undefined {\n        let i = this.index.get(Tmin.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tmin;\n        }\n    }\n\n    /**\n     * @param tmin The tmin.\n     */\n    setTmin(tmin: Tmin) {\n        let i = this.index.get(Tmin.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tmin);\n        } else {\n            this.index.set(Tmin.tagName, this.nodes.size);\n            this.addNode(tmin);\n        }\n    }\n\n    /**\n     * Remove the tmin.\n     */\n    removeTmin() {\n        let i = this.index.get(Tmin.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tmin.tagName);\n        }\n    }\n\n    /**\n     * @returns The tmid or undefined.\n     */\n    getTmid(): Tmid | undefined {\n        let i = this.index.get(Tmid.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tmid;\n        }\n    }\n\n    /**\n     * @param tmid The tmid.\n     */\n    setTmid(tmid: Tmid) {\n        let i = this.index.get(Tmid.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tmid);\n        } else {\n            this.index.set(Tmid.tagName, this.nodes.size);\n            this.addNode(tmid);\n        }\n    }\n\n    /**\n     * Remove the tmid.\n     */\n    removeTmid() {\n        let i = this.index.get(Tmid.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tmid.tagName);\n        }\n    }\n\n    /**\n     * @returns The tmax or undefined.\n     */\n    getTmax(): Tmax | undefined {\n        let i = this.index.get(Tmax.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tmax;\n        }\n    }\n\n    /**\n     * @param tmax The tmax.\n     */\n    setTmax(tmax: Tmax) {\n        let i = this.index.get(Tmax.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tmax);\n        } else {\n            this.index.set(Tmax.tagName, this.nodes.size);\n            this.addNode(tmax);\n        }\n    }\n\n    /**\n     * Remove the tmax.\n     */\n    removeTmax() {\n        let i = this.index.get(Tmax.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tmax.tagName);\n        }\n    }\n\n    /**\n     * @returns The tstep or undefined.\n     */\n    getTstep(): Tstep | undefined {\n        let i = this.index.get(Tstep.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Tstep;\n        }\n    }\n\n    /**\n     * @param tstep The tstep.\n     */\n    setTstep(tstep: Tstep) {\n        let i = this.index.get(Tstep.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, tstep);\n        } else {\n            this.index.set(Tstep.tagName, this.nodes.size);\n            this.addNode(tstep);\n        }\n    }\n\n    /**\n     * Remove the tstep.\n     */\n    removeTstep() {\n        let i = this.index.get(Tstep.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Tstep.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:sensitivityAnalysisSamples\".\n */\nexport class SensitivityAnalysisSamples extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityAnalysisSamples\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, SensitivityAnalysisSamples.tagName, value);\n    }\n\n}\n\n/**\n * A class for \"me:sensitivityAnalysisOrder\".\n */\nexport class SensitivityAnalysisOrder extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityAnalysisOrder\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, SensitivityAnalysisOrder.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:sensitivityNumVarRedIters\".\n */\nexport class SensitivityNumVarRedIters extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityNumVarRedIters\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, SensitivityNumVarRedIters.tagName, value);\n    }\n}\n\n/**\n * A class for \"sensitivityVarRedMethod\".\n */\nexport class SensitivityVarRedMethod extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sensitivityVarRedMethod\";\n\n    /**\n     * The options.\n     */\n    static readonly options: string[] = [\"AdditiveControl\", \"RatioControl\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, SensitivityVarRedMethod.tagName, value);\n    }\n\n}\n\n/**\n * A class for \"me:sensitivityAnalysis\".\n * Nodes:\n * \"me:sensitivityAnalysisSamples\", \"me:sensitivityAnalysisOrder\", \"me:sensitivityNumVarRedIters\", \"me:sensitivityVarRedMethod\".\n */\nexport class CalcMethodSensitivityAnalysis extends CalcMethod {\n\n    /**\n    * The xsi_type.\n    */\n    static readonly xsi_type: string = \"me:sensitivityAnalysis\";\n\n    /**\n     * The xsi_type2.\n     */\n    static readonly xsi_type2: string = \"sensitivityAnalysis\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, sensitivityAnalysisSamples?: SensitivityAnalysisSamples,\n        sensitivityAnalysisOrder?: SensitivityAnalysisOrder, sensitivityNumVarRedIters?: SensitivityNumVarRedIters,\n        sensitivityVarRedMethod?: SensitivityVarRedMethod) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (sensitivityAnalysisSamples != undefined) {\n            this.index.set(SensitivityAnalysisSamples.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisSamples);\n        }\n        if (sensitivityAnalysisOrder != undefined) {\n            this.index.set(SensitivityAnalysisOrder.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisOrder);\n        }\n        if (sensitivityNumVarRedIters != undefined) {\n            this.index.set(SensitivityNumVarRedIters.tagName, this.nodes.size);\n            this.addNode(sensitivityNumVarRedIters);\n        }\n        if (sensitivityVarRedMethod != undefined) {\n            this.index.set(SensitivityVarRedMethod.tagName, this.nodes.size);\n            this.addNode(sensitivityVarRedMethod);\n        }\n    }\n\n    /**\n     * @returns The sensitivityAnalysisSamples or undefined.\n     */\n    getSensitivityAnalysisSamples(): SensitivityAnalysisSamples | undefined {\n        let i = this.index.get(SensitivityAnalysisSamples.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityAnalysisSamples;\n        }\n    }\n\n    /**\n     * @param sensitivityAnalysisSamples The sensitivityAnalysisSamples.\n     */\n    setSensitivityAnalysisSamples(sensitivityAnalysisSamples: SensitivityAnalysisSamples) {\n        let i = this.index.get(SensitivityAnalysisSamples.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityAnalysisSamples);\n        } else {\n            this.index.set(SensitivityAnalysisSamples.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisSamples);\n        }\n    }\n\n    /**\n     * Remove the sensitivityAnalysisSamples.\n     */\n    removeSensitivityAnalysisSamples() {\n        let i = this.index.get(SensitivityAnalysisSamples.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityAnalysisSamples.tagName);\n        }\n    }\n\n    /**\n     * @returns The sensitivityAnalysisOrder or undefined.\n     */\n    getSensitivityAnalysisOrder(): SensitivityAnalysisOrder | undefined {\n        let i = this.index.get(SensitivityAnalysisOrder.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityAnalysisOrder;\n        }\n    }\n\n    /**\n     * @param sensitivityAnalysisOrder The sensitivityAnalysisOrder.\n     */\n    setSensitivityAnalysisOrder(sensitivityAnalysisOrder: SensitivityAnalysisOrder) {\n        let i = this.index.get(SensitivityAnalysisOrder.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityAnalysisOrder);\n        } else {\n            this.index.set(SensitivityAnalysisOrder.tagName, this.nodes.size);\n            this.addNode(sensitivityAnalysisOrder);\n        }\n    }\n\n    /**\n     * Remove the sensitivityAnalysisOrder.\n     */\n    removeSensitivityAnalysisOrder() {\n        let i = this.index.get(SensitivityAnalysisOrder.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityAnalysisOrder.tagName);\n        }\n    }\n\n    /**\n     * @returns The sensitivityNumVarRedIters or undefined.\n     */\n    getSensitivityNumVarRedIters(): SensitivityNumVarRedIters | undefined {\n        let i = this.index.get(SensitivityNumVarRedIters.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityNumVarRedIters;\n        }\n    }\n\n    /**\n     * @param sensitivityNumVarRedIters The sensitivityNumVarRedIters.\n     */\n    setSensitivityNumVarRedIters(sensitivityNumVarRedIters: SensitivityNumVarRedIters) {\n        let i = this.index.get(SensitivityNumVarRedIters.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityNumVarRedIters);\n        } else {\n            this.index.set(SensitivityNumVarRedIters.tagName, this.nodes.size);\n            this.addNode(sensitivityNumVarRedIters);\n        }\n    }\n\n    /**\n     * Remove the sensitivityNumVarRedIters.\n     */\n    removeSensitivityNumVarRedIters() {\n        let i = this.index.get(SensitivityNumVarRedIters.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityNumVarRedIters.tagName);\n        }\n    }\n\n    /**\n     * @returns The sensitivityVarRedMethod or undefined.\n     */\n    getSensitivityVarRedMethod(): SensitivityVarRedMethod | undefined {\n        let i = this.index.get(SensitivityVarRedMethod.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as SensitivityVarRedMethod;\n        }\n    }\n\n    /**\n     * @param sensitivityVarRedMethod The sensitivityVarRedMethod.\n     */\n    setSensitivityVarRedMethod(sensitivityVarRedMethod: SensitivityVarRedMethod) {\n        let i = this.index.get(SensitivityVarRedMethod.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, sensitivityVarRedMethod);\n        } else {\n            this.index.set(SensitivityVarRedMethod.tagName, this.nodes.size);\n            this.addNode(sensitivityVarRedMethod);\n        }\n    }\n\n    /**\n     * Remove the sensitivityVarRedMethod.\n     */\n    removeSensitivityVarRedMethod() {\n        let i = this.index.get(SensitivityVarRedMethod.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(SensitivityVarRedMethod.tagName);\n        }\n    }\n}\n\n/**\n * A class for \"me:eigenvalues\".\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:shortestTimeOfInterest\".\n */\nexport class ShortestTimeOfInterest extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:shortestTimeOfInterest\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ShortestTimeOfInterest.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MaximumEvolutionTime\".\n */\nexport class MaximumEvolutionTime extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MaximumEvolutionTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, MaximumEvolutionTime.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:diagramEnergyOffset\".\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    /**\n      * @param attributes The attributes.\n      * @param value The value.\n      */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:testMicroRates\".\n * Expected numerical attributes: Tmin, Tmax, Tstep.\n */\nexport class TestMicroRates extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    /**\n     * The minimum temperature.\n     */\n    tMin: Big;\n\n    /**\n     * The maximum temperature.\n     */\n    tMax: Big;\n\n    /**\n     * The temperature step.\n     */\n    tStep: Big;\n\n    public static readonly s_Tmin: string = \"Tmin\";\n    public static readonly s_Tmax: string = \"Tmax\";\n    public static readonly s_Tstep: string = \"Tstep\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, TestMicroRates.tagName);\n        this.tMin = new Big(attributes.get(TestMicroRates.s_Tmin) as string);\n        this.tMax = new Big(attributes.get(TestMicroRates.s_Tmax) as string);\n        this.tStep = new Big(attributes.get(TestMicroRates.s_Tstep) as string);\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmin(): Big {\n        return this.tMin;\n    }\n\n    /**\n     * @param tMin The minimum temperature.\n     */\n    setTmin(tMin: Big) {\n        this.tMin = tMin;\n        this.attributes?.set(\"Tmin\", tMin.toString());\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmax(): Big {\n        return this.tMax;\n    }\n\n    /**\n     * @param tMax The maximum temperature.\n     */\n    setTmax(tMax: Big) {\n        this.tMax = tMax;\n        this.attributes?.set(\"Tmax\", tMax.toString());\n    }\n\n    /**\n     * @returns The temperature step.\n     */\n    getTstep(): Big {\n        return this.tStep;\n    }\n\n    /**\n     * @param tStep The temperature step.\n     */\n    setTstep(tStep: Big) {\n        this.tStep = tStep;\n        this.attributes?.set(\"Tstep\", tStep.toString());\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The id.\n     */\n    id: number;\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, id: number) {\n        super(attributes, Control.tagName);\n        this.id = id;\n        this.index = new Map<string, number>();\n    }\n\n    /**\n     * @returns The calculateRateCoefficientsOnly or undefined.\n     */\n    getCalculateRateCoefficientsOnly(): CalculateRateCoefficientsOnly | undefined {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalculateRateCoefficientsOnly;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calculateRateCoefficientsOnly The calculateRateCoefficientsOnly.\n     */\n    setCalculateRateCoefficientsOnly(calculateRateCoefficientsOnly: CalculateRateCoefficientsOnly) {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calculateRateCoefficientsOnly);\n        } else {\n            this.index.set(CalculateRateCoefficientsOnly.tagName, this.nodes.size);\n            this.addNode(calculateRateCoefficientsOnly);\n        }\n    }\n\n    /**\n     * Remove the calculateRateCoefficientsOnly.\n     */\n    removeCalculateRateCoefficientsOnly() {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalculateRateCoefficientsOnly.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellDOS or undefined.\n     */\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellDOS The printCellDOS.\n     */\n    setPrintCellDOS(printCellDOS: PrintCellDOS) {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellDOS);\n        } else {\n            this.index.set(PrintCellDOS.tagName, this.nodes.size);\n            this.addNode(printCellDOS);\n        }\n    }\n\n    /**\n     * Remove the printCellDOS.\n     */\n    removePrintCellDOS() {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellTransitionStateFlux or undefined.\n     */\n    getPrintCellTransitionStateFlux(): PrintCellTransitionStateFlux | undefined {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellTransitionStateFlux The printCellTransitionStateFlux.\n     */\n    setPrintCellTransitionStateFlux(printCellTransitionStateFlux: PrintCellTransitionStateFlux) {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellTransitionStateFlux);\n        } else {\n            this.index.set(PrintCellTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printCellTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printCellTransitionStateFlux.\n     */\n    removePrintCellTransitionStateFlux() {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorColumnSums or undefined.\n     */\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     */\n    setPrintReactionOperatorColumnSums(printReactionOperatorColumnSums: PrintReactionOperatorColumnSums) {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorColumnSums);\n        } else {\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorColumnSums);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorColumnSums.\n     */\n    removePrintReactionOperatorColumnSums() {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorColumnSums.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainBoltzmann or undefined.\n     */\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     */\n    setPrintGrainBoltzmann(printGrainBoltzmann: PrintGrainBoltzmann) {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainBoltzmann);\n        } else {\n            this.index.set(PrintGrainBoltzmann.tagName, this.nodes.size);\n            this.addNode(printGrainBoltzmann);\n        }\n    }\n\n    /**\n     * Remove the printGrainBoltzmann.\n     */\n    removePrintGrainBoltzmann() {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainBoltzmann.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainDOS or undefined.\n     */\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainDOS The printGrainDOS.\n     */\n    setPrintGrainDOS(printGrainDOS: PrintGrainDOS) {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainDOS);\n        } else {\n            this.index.set(PrintGrainDOS.tagName, this.nodes.size);\n            this.addNode(printGrainDOS);\n        }\n    }\n\n    /**\n     * Remove the printGrainDOS.\n     */\n    removePrintGrainDOS() {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkbE or undefined.\n     */\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkbE The printGrainkbE.\n     */\n    setPrintGrainkbE(printGrainkbE: PrintGrainkbE) {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkbE);\n        } else {\n            this.index.set(PrintGrainkbE.tagName, this.nodes.size);\n            this.addNode(printGrainkbE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkbE.\n     */\n    removePrintGrainkbE() {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkbE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkfE or undefined.\n     */\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkfE The printGrainkfE.\n     */\n    setPrintGrainkfE(printGrainkfE: PrintGrainkfE) {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkfE);\n        } else {\n            this.index.set(PrintGrainkfE.tagName, this.nodes.size);\n            this.addNode(printGrainkfE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkfE.\n     */\n    removePrintGrainkfE() {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkfE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTSsos or undefined.\n     */\n    getPrintTSsos(): PrintTSsos | undefined {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTSsos;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTSsos The printTSsos.\n     */\n    setPrintTSsos(printTSsos: PrintTSsos) {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTSsos);\n        } else {\n            this.index.set(PrintTSsos.tagName, this.nodes.size);\n            this.addNode(printTSsos);\n        }\n    }\n\n    /**\n     * Remove the printTSsos.\n     */\n    removePrintTSsos() {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTSsos.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainedSpeciesProfile or undefined.\n     */\n    getPrintGrainedSpeciesProfile(): PrintGrainedSpeciesProfile | undefined {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainedSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainedSpeciesProfile The printGrainedSpeciesProfile.\n     */\n    setPrintGrainedSpeciesProfile(printGrainedSpeciesProfile: PrintGrainedSpeciesProfile) {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainedSpeciesProfile);\n        } else {\n            this.index.set(PrintGrainedSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printGrainedSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printGrainedSpeciesProfile.\n     */\n    removePrintGrainedSpeciesProfile() {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainedSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainTransitionStateFlux or undefined.\n     */\n    getPrintGrainTransitionStateFlux(): PrintGrainTransitionStateFlux | undefined {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainTransitionStateFlux The printGrainTransitionStateFlux.\n     */\n    setPrintGrainTransitionStateFlux(printGrainTransitionStateFlux: PrintGrainTransitionStateFlux) {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainTransitionStateFlux);\n        } else {\n            this.index.set(PrintGrainTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printGrainTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printGrainTransitionStateFlux.\n     */\n    removePrintGrainTransitionStateFlux() {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorSize or undefined.\n     */\n    getPrintReactionOperatorSize(): PrintReactionOperatorSize | undefined {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorSize;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorSize The printReactionOperatorSize.\n     */\n    setPrintReactionOperatorSize(printReactionOperatorSize: PrintReactionOperatorSize) {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorSize);\n        } else {\n            this.index.set(PrintReactionOperatorSize.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorSize);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorSize.\n     */\n    removePrintReactionOperatorSize() {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The printSpeciesProfile or undefined.\n     */\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printSpeciesProfile The printSpeciesProfile.\n     */\n    setPrintSpeciesProfile(printSpeciesProfile: PrintSpeciesProfile) {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printSpeciesProfile);\n        } else {\n            this.index.set(PrintSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printSpeciesProfile.\n     */\n    removePrintSpeciesProfile() {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printPhenomenologicalEvolution or undefined.\n     */\n    getPrintPhenomenologicalEvolution(): PrintPhenomenologicalEvolution | undefined {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintPhenomenologicalEvolution;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printPhenomenologicalEvolution The printPhenomenologicalEvolution.\n     */\n    setPrintPhenomenologicalEvolution(printPhenomenologicalEvolution: PrintPhenomenologicalEvolution) {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printPhenomenologicalEvolution);\n        } else {\n            this.index.set(PrintPhenomenologicalEvolution.tagName, this.nodes.size);\n            this.addNode(printPhenomenologicalEvolution);\n        }\n    }\n\n    /**\n     * Remove the printPhenomenologicalEvolution.\n     */\n    removePrintPhenomenologicalEvolution() {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintPhenomenologicalEvolution.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTunnelingCoefficients or undefined.\n     */\n    getPrintTunnelingCoefficients(): PrintTunnelingCoefficients | undefined {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTunnelingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTunnelingCoefficients The printTunnelingCoefficients.\n     */\n    setPrintTunnelingCoefficients(printTunnelingCoefficients: PrintTunnelingCoefficients) {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTunnelingCoefficients);\n        } else {\n            this.index.set(PrintTunnelingCoefficients.tagName, this.nodes.size);\n            this.addNode(printTunnelingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printTunnelingCoefficients.\n     */\n    removePrintTunnelingCoefficients() {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTunnelingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCrossingCoefficients or undefined.\n     */\n    getPrintCrossingCoefficients(): PrintCrossingCoefficients | undefined {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCrossingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCrossingCoefficients The printCrossingCoefficients.\n     */\n    setPrintCrossingCoefficients(printCrossingCoefficients: PrintCrossingCoefficients) {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCrossingCoefficients);\n        } else {\n            this.index.set(PrintCrossingCoefficients.tagName, this.nodes.size);\n            this.addNode(printCrossingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printCrossingCoefficients.\n     */\n    removePrintCrossingCoefficients() {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCrossingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The testDOS or undefined.\n     */\n    getTestDOS(): TestDOS | undefined {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testDOS The testDOS.\n     */\n    setTestDOS(testDOS: TestDOS) {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testDOS);\n        } else {\n            this.index.set(TestDOS.tagName, this.nodes.size);\n            this.addNode(testDOS);\n        }\n    }\n\n    /**\n     * Remove the testDOS.\n     */\n    removeTestDOS() {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The testRateConstant or undefined.\n     */\n    getTestRateConstants(): TestRateConstant | undefined {\n        let i = this.index.get(TestRateConstant.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestRateConstant;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testRateConstant The testRateConstant.\n     */\n    setTestRateConstants(testRateConstant: TestRateConstant) {\n        let i = this.index.get(TestRateConstant.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testRateConstant);\n        } else {\n            this.index.set(TestRateConstant.tagName, this.nodes.size);\n            this.addNode(testRateConstant);\n        }\n    }\n\n    /**\n     * Remove the testRateConstant.\n     */\n    removeTestRateConstants() {\n        let i = this.index.get(TestRateConstant.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestRateConstant.tagName);\n        }\n    }\n\n    /**\n     * @returns The useTheSameCellNumberForAllConditions or undefined.\n     */\n    getUseTheSameCellNumberForAllConditions(): UseTheSameCellNumberForAllConditions | undefined {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as UseTheSameCellNumberForAllConditions;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param useTheSameCellNumberForAllConditions The useTheSameCellNumberForAllConditions.\n     */\n    setUseTheSameCellNumberForAllConditions(useTheSameCellNumberForAllConditions: UseTheSameCellNumberForAllConditions) {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, useTheSameCellNumberForAllConditions);\n        } else {\n            this.index.set(UseTheSameCellNumberForAllConditions.tagName, this.nodes.size);\n            this.addNode(useTheSameCellNumberForAllConditions);\n        }\n    }\n\n    /**\n     * Remove the useTheSameCellNumberForAllConditions.\n     */\n    removeUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(UseTheSameCellNumberForAllConditions.tagName);\n        }\n    }\n\n    /**\n     * @returns The hideInactive or undefined.\n     */\n    getHideInactive(): HideInactive | undefined {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HideInactive;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param hideInactive The hideInactive.\n     */\n    setHideInactive(hideInactive: HideInactive) {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hideInactive);\n        } else {\n            this.index.set(HideInactive.tagName, this.nodes.size);\n            this.addNode(hideInactive);\n        }\n    }\n\n    /**\n     * Remove the hideInactive.\n     */\n    removeHideInactive() {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(HideInactive.tagName);\n        }\n    }\n\n    /**\n     * @returns The ForceMacroDetailedBalance or undefined.\n     */\n    getForceMacroDetailedBalance(): ForceMacroDetailedBalance | undefined {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ForceMacroDetailedBalance;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param forceMacroDetailedBalance The forceMacroDetailedBalance.\n     */\n    setForceMacroDetailedBalance(forceMacroDetailedBalance: ForceMacroDetailedBalance) {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, forceMacroDetailedBalance);\n        } else {\n            this.index.set(ForceMacroDetailedBalance.tagName, this.nodes.size);\n            this.addNode(forceMacroDetailedBalance);\n        }\n    }\n\n    /**\n     * Remove the forceMacroDetailedBalance.\n     */\n    removeForceMacroDetailedBalance() {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ForceMacroDetailedBalance.tagName);\n        }\n    }\n\n    /**\n     * @returns The calcMethod or undefined.\n     */\n    getCalcMethod(): CalcMethod | undefined {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalcMethod;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calcMethod The calcMethod.\n     */\n    setCalcMethod(calcMethod: CalcMethod) {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calcMethod);\n        } else {\n            this.index.set(CalcMethod.tagName, this.nodes.size);\n            this.addNode(calcMethod);\n        }\n    }\n\n    /**\n     * Remove the calcMethod.\n     */\n    removeCalcMethod() {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalcMethod.tagName);\n        }\n    }\n\n    /**\n     * @returns The eigenvalues or undefined.\n     */\n    getEigenvalues(): Eigenvalues | undefined {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param eigenvalues The eigenvalues.\n     */\n    setEigenvalues(eigenvalues: Eigenvalues) {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, eigenvalues);\n        } else {\n            this.index.set(Eigenvalues.tagName, this.nodes.size);\n            this.addNode(eigenvalues);\n        }\n    }\n\n    /**\n     * Remove the eigenvalues.\n     */\n    removeEigenvalues() {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Eigenvalues.tagName);\n        }\n    }\n\n    /**\n     * @returns The shortestTimeOfInterest.\n     */\n    getShortestTimeOfInterest(): ShortestTimeOfInterest | undefined {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ShortestTimeOfInterest;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param shortestTimeOfInterest The shortestTimeOfInterest.\n     */\n    setShortestTimeOfInterest(shortestTimeOfInterest: ShortestTimeOfInterest) {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, shortestTimeOfInterest);\n        } else {\n            this.index.set(ShortestTimeOfInterest.tagName, this.nodes.size);\n            this.addNode(shortestTimeOfInterest);\n        }\n    }\n\n    /**\n     * Remove the shortestTimeOfInterest.\n     */\n    removeShortestTimeOfInterest() {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ShortestTimeOfInterest.tagName);\n        }\n    }\n\n    /**\n     * @returns The MaximumEvolutionTime.\n     */\n    getMaximumEvolutionTime(): MaximumEvolutionTime | undefined {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MaximumEvolutionTime;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param maximumEvolutionTime The MaximumEvolutionTime.\n     */\n    setMaximumEvolutionTime(maximumEvolutionTime: MaximumEvolutionTime) {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, maximumEvolutionTime);\n        } else {\n            this.index.set(MaximumEvolutionTime.tagName, this.nodes.size);\n            this.addNode(maximumEvolutionTime);\n        }\n    }\n\n    /**\n     * Remove the MaximumEvolutionTime.\n     */\n    removeMaximumEvolutionTime() {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MaximumEvolutionTime.tagName);\n        }\n    }\n\n    /**\n     * @returns The automaticallySetMaxEne.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automaticallySetMaxEne.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * Remove the automaticallySetMaxEne.\n     */\n    removeAutomaticallySetMaxEne() {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(AutomaticallySetMaxEne.tagName);\n        }\n    }\n\n    /**\n     * @returns The diagramEnergyOffset.\n     */\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    setDiagramEnergyOffset(diagramEnergyOffset: DiagramEnergyOffset) {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, diagramEnergyOffset);\n        } else {\n            this.index.set(DiagramEnergyOffset.tagName, this.nodes.size);\n            this.addNode(diagramEnergyOffset);\n        }\n    }\n\n    /**\n     * Remove the diagramEnergyOffset.\n     */\n    removeDiagramEnergyOffset() {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(DiagramEnergyOffset.tagName);\n        }\n    }\n\n    /**\n     * @returns The testMicroRates or undefined.\n     */\n    getTestMicroRates(): TestMicroRates | undefined {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testMicroRates The testMicroRates.\n     */\n    setTestMicroRates(testMicroRates: TestMicroRates) {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testMicroRates);\n        } else {\n            this.index.set(TestMicroRates.tagName, this.nodes.size);\n            this.addNode(testMicroRates);\n        }\n    }\n\n    /**\n     * Remove the testMicroRates.\n     */\n    removeTestMicroRates() {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestMicroRates.tagName);\n        }\n    }\n\n}","import { NodeWithNodes, StringNode } from './xml.js';\n\n/**\n * Metadata.\n * In the XML, the \"metadata\" element is a child of the \"metadataList\" element.\n * For example:\n * <metadataList>\n *  <metadata name=\"dc:description\" content=\"Experimental data for OH (Hydroxyl radical)\"/>\n *  <metadata name=\"dc:source\" content=\"http://cccbdb.nist.gov/\"/>\n *  <metadata name=\"dc:contributor\" content=\"Dr Reaction Kinetics\"/>\n *  <metadata name=\"dc:date\" content=\"20240311_090547\"/>\n * </metadataList>\n */\nexport class Metadata extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'metadata';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Metadata.tagName);\n    }\n\n    /**\n     * Get string for label.\n     */\n    public getLabelText(): string {\n        let label: string = '';\n        this.attributes.forEach((value: string, key: string) => {\n            label += key + ': ' + value + ' ';\n        });\n        return label;\n    }\n}\n\n/**\n * DCTitle.\n * In the XML, the \"dc:title\" element is a child of the \"metadataList\" element.\n * For example:\n * <metadataList xmlns:dc=\"http://purl.org/dc/elements/1.1/\">\n *  <dc:title>Title</dc:title>\n *  <dc:source>file.xml</dc:source>\n *  <dc:creator>Mesmer v7.0</dc:creator>\n *  <dc:date>20240311_090547</dc:date>\n *  <dc:contributor>Dr Reaction Kinetics</dc:contributor>\n * </metadataList>\n */\nexport class DCTitle extends StringNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'dc:title';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, DCTitle.tagName, value);\n    }\n}\n\n/**\n * DC Source.\n */\nexport class DCSource extends StringNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'dc:source';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, DCSource.tagName, value);\n    }\n}\n\n/**\n * DC Creator.\n */\nexport class DCCreator extends StringNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'dc:creator';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, DCCreator.tagName, value);\n    }\n}\n\n/**\n * DC Date.\n */\nexport class DCDate extends StringNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'dc:date';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, DCDate.tagName, value);\n    }\n}\n\n/**\n * DC Contributor.\n */\nexport class DCContributor extends StringNode {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'dc:contributor';\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, DCContributor.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"metadata\" element is a child of the \"mesmer\" element.\n * Attributes include:\n * xmlns:dc\n * Child elements include:\n * dc:title\n * dc:source\n * dc:creator\n * dc:date\n * dc:contributor\n */\nexport class MetadataList extends NodeWithNodes {\n\n    /**\n     * Tag name.\n     */\n    public static tagName = 'metadataList';\n\n    /**\n     * To look up nodes by type.\n     */\n    index: Map<string, number>;\n\n    /**\n     * To look up metadata nodes by index.\n     */\n    metadataIndex: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, title?: DCTitle, source?: DCSource, creator?: DCCreator, date?: DCDate, \n        contributor?: DCContributor) {\n        super(attributes, MetadataList.tagName);\n        this.index = new Map<string, number>();\n        this.metadataIndex = new Map<number, number>();\n        if (title) {\n            this.index.set(DCTitle.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (source) {\n            this.index.set(DCSource.tagName, this.nodes.size);\n            this.addNode(source);\n        }\n        if (creator) {\n            this.index.set(DCCreator.tagName, this.nodes.size);\n            this.addNode(creator);\n        }\n        if (date) {\n            this.index.set(DCDate.tagName, this.nodes.size);\n            this.addNode(date);\n        }\n        if (contributor) {\n            this.index.set(DCContributor.tagName, this.nodes.size);\n            this.addNode(contributor);\n        }\n    }\n\n    /**\n     * Get the title.\n     */\n    public getTitle(): DCTitle | undefined {\n        if (this.index.has(DCTitle.tagName)) {\n            let i: number = this.index.get(DCTitle.tagName)!;\n            return this.nodes.get(i) as DCTitle;\n        }\n    }\n\n    /**\n     * @param title The title.\n     */\n    setTitle(title: DCTitle) {\n        if (this.index.has(DCTitle.tagName)) {\n            let i: number = this.index.get(DCTitle.tagName)!;\n            this.nodes.set(i, title);\n        } else {\n            this.index.set(DCTitle.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n\n    /**\n     * Get the source.\n     */\n    getSource(): DCSource | undefined {\n        if (this.index.has(DCSource.tagName)) {\n            let i: number = this.index.get(DCSource.tagName)!;\n            return this.nodes.get(i) as DCSource;\n        }\n    }\n\n    /**\n     * @param source The source.\n     */\n    setSource(source: DCSource) {\n        if (this.index.has(DCSource.tagName)) {\n            let i: number = this.index.get(DCSource.tagName)!;\n            this.nodes.set(i, source);\n        } else {\n            this.index.set(DCSource.tagName, this.nodes.size);\n            this.addNode(source);\n        }\n    }\n\n    /**\n     * Get the creator.\n     */\n    getCreator(): DCCreator | undefined {\n        if (this.index.has(DCCreator.tagName)) {\n            let i: number = this.index.get(DCCreator.tagName)!;\n            return this.nodes.get(i) as DCCreator;\n        }\n    }\n\n    /**\n     * @param creator The creator.\n     */\n    setCreator(creator: DCCreator) {\n        if (this.index.has(DCCreator.tagName)) {\n            let i: number = this.index.get(DCCreator.tagName)!;\n            this.nodes.set(i, creator);\n        } else {\n            this.index.set(DCCreator.tagName, this.nodes.size);\n            this.addNode(creator);\n        }\n    }\n\n    /**\n     * Get the date.\n     */\n    getDate(): DCDate | undefined {\n        if (this.index.has(DCDate.tagName)) {\n            let i: number = this.index.get(DCDate.tagName)!;\n            return this.nodes.get(i) as DCDate;\n        }\n    }\n\n    /**\n     * @param date The date.\n     */\n    setDate(date: DCDate) {\n        if (this.index.has(DCDate.tagName)) {\n            let i: number = this.index.get(DCDate.tagName)!;\n            this.nodes.set(i, date);\n        } else {\n            this.index.set(DCDate.tagName, this.nodes.size);\n            this.addNode(date);\n        }\n    }\n\n    /**\n     * Get the contributor.\n     */\n    getContributor(): DCContributor | undefined {\n        if (this.index.has(DCContributor.tagName)) {\n            let i: number = this.index.get(DCContributor.tagName)!;\n            return this.nodes.get(i) as DCContributor;\n        }\n    }\n\n    /**\n     * @param contributor The contributor.\n     */\n    setContributor(contributor: DCContributor) {\n        if (this.index.has(DCContributor.tagName)) {\n            let i: number = this.index.get(DCContributor.tagName)!;\n            this.nodes.set(i, contributor);\n        } else {\n            this.index.set(DCContributor.tagName, this.nodes.size);\n            this.addNode(contributor);\n        }\n    }\n\n    /**\n     * Add metadata.\n     * @param metadata The metadata.\n     */\n    addMetadata(metadata: Metadata) {\n        this.metadataIndex.set(this.metadataIndex.size, this.nodes.size);\n        this.addNode(metadata);\n    }\n\n    /**\n     * Get metadata.\n     */\n    getMetadata(): Metadata[] {\n        let metadata: Metadata[] = [];\n        for (let i: number = 0; i < this.metadataIndex.size; i++) {\n            let j: number = this.metadataIndex.get(i)!;\n            metadata.push(this.nodes.get(j) as Metadata);\n        }\n        return metadata;\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:grainSize\".\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, GrainSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:energyAboveTheTopHill\".\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:maxTemperature\".\n */\nexport class MaxTemperature extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:maxTemperature\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, MaxTemperature.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    /**\n     * The id.\n     */\n    id: number;\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param grainSize The grain size.\n     * @param automaticallySetMaxEne The automatically set max energy.\n     * @param energyAboveTheTopHill The energy above the top hill.\n     * @param maxTemperature The max temperature.\n     */\n    constructor(attributes: Map<string, string>, id: number, grainSize?: GrainSize, \n        automaticallySetMaxEne?: AutomaticallySetMaxEne, energyAboveTheTopHill?: EnergyAboveTheTopHill,\n        maxTemperature?: MaxTemperature) {\n        super(attributes, ModelParameters.tagName);\n        this.id = id;\n        this.index = new Map<string, number>();\n        if (grainSize != undefined) {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n        if (automaticallySetMaxEne != undefined) {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n        if (energyAboveTheTopHill != undefined) {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n        if (maxTemperature != undefined) {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n\n    /**\n     * @returns The grain size or undefined.\n     */\n    getGrainSize(): GrainSize | undefined {\n        console.log(\"getGrainSize\");\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as GrainSize;\n        }\n        console.log(\"XgetGrainSize\");\n    }\n\n    /**\n     * @param grainSize The grain size.\n     */\n    setGrainSize(grainSize: GrainSize) {\n        console.log(\"setGrainSize\");\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, grainSize);\n        } else {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n    }\n\n    /**\n     * Removes the grain size.\n     */\n    removeGrainSize() {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(GrainSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The automatically set max energy or undefined.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automatically set max energy.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * Removes the automatically set max energy.\n     */\n    removeAutomaticallySetMaxEne() {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(AutomaticallySetMaxEne.tagName);\n        }\n    }\n\n    /**\n     * @returns The energy above the top hill or undefined.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill | undefined {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            return this.nodes.get(i) as EnergyAboveTheTopHill;\n        }\n    }\n\n    /**\n     * @param energyAboveTheTopHill The energy above the top hill.\n     */\n    setEnergyAboveTheTopHill(energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            this.nodes.set(i, energyAboveTheTopHill);\n        } else {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n    }\n\n    /**\n     * Removes the energy above the top hill.\n     */\n    removeEnergyAboveTheTopHill() {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(EnergyAboveTheTopHill.tagName);\n        }\n    }\n\n    /**\n     * @returns The max temperature or undefined.\n     */\n    getMaxTemperature(): MaxTemperature | undefined {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            return this.nodes.get(i) as MaxTemperature;\n        }\n    }\n\n    /**\n     * @param maxTemperature The max temperature.\n     */\n    setMaxTemperature(maxTemperature: MaxTemperature) {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            this.nodes.set(i, maxTemperature);\n        } else {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n\n    /**\n     * Removes the max temperature.\n     */\n    removeMaxTemperature() {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MaxTemperature.tagName);\n        }\n    }\n}","import { Big } from 'big.js';\nimport { RangeNode } from './xml_range.js';\nimport { get, mapToString } from './util.js';\nimport { TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode, StringNode } from './xml.js';\nimport { Description, T } from './xml_mesmer.js';\nimport { MetadataList } from './xml_metadata.js';\n\n/**\n * Atom data.\n * The examples can be used to compile this.\n * It is likely that only a small subset of atoms in the periodic table are of interest...\n */\n\n/**\n * Molecule data.\n * The examples can be used to compile this.\n * It would be good to use, have, provide ways of sharing and to be able to specify/edit molecules...\n * This would include data about atoms, bonds, molecule properties and other things...\n */\n\n/**\n * Atom attributes may include:\n * \"elementType\" - the element type of the atom. This should be a known element types.\n * \"id\"\n * \"x3\", \"y3\", \"z3\" - coordinates used to depict a molecule containing the atom.\n * \"spinMultiplicity\" - the spin multiplicity of the atom.\n * In the XML, an \"atom\" node is typically a child of an \"atomArray\" parent node.\n * If there is only one atom, it may be a child of a \"molecule\" parent node.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * The key for the id attribute.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The key for the elementType attribute.\n     */\n    static readonly s_elementType: string = \"elementType\";\n\n    /**\n     * The key for the x3 attribute.\n     */\n    static readonly s_x3: string = \"x3\";\n\n    /**\n     * The key for the y3 attribute.\n     */\n    static readonly s_y3: string = \"y3\";\n\n    /**\n     * The key for the z3 attribute.\n     */\n    static readonly s_z3: string = \"z3\";\n\n    /**\n     * A reference to any molecule that the atom is a part of.\n     */\n    molecule: Molecule;\n\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, Atom.tagName);\n        this.molecule = molecule;\n    }\n\n    /**\n     * @returns True if the atom has coordinates.\n     */\n    hasCoordinates(): boolean {\n        if (this.attributes.get(Atom.s_x3) != undefined &&\n            this.attributes.get(Atom.s_y3) != undefined &&\n            this.attributes.get(Atom.s_z3) != undefined) {\n            return true;\n        }\n        return false;\n    }\n\n\n    /**\n     * @returns The id.\n     */\n    getID(): string | undefined {\n        return this.attributes.get(Atom.s_id);\n    }\n\n    /**\n     * @param id The id.\n     */\n    setID(id: string): void {\n        this.attributes.set(Atom.s_id, id);\n    }\n\n    /**\n     * @returns The element type.\n     */\n    getElementType(): string | undefined {\n        return this.attributes.get(Atom.s_elementType);\n    }\n\n    /**\n     * @param elementType The element type.\n     */\n    setElementType(elementType: string): void {\n        this.attributes.set(Atom.s_elementType, elementType);\n    }\n\n    /**\n     * @returns The x3 attribute value as a Big or undefined.\n     */\n    getX3(): Big | undefined {\n        let x3: string | undefined = this.attributes.get(Atom.s_x3);\n        if (x3 != undefined) {\n            return new Big(x3);\n        }\n    }\n\n    /**\n     * @param x3 The x3 attribute value.\n     */\n    setX3(x3: Big): void {\n        this.attributes.set(Atom.s_x3, x3.toString());\n    }\n\n    /**\n     * Removes the x3 attribute.\n     */\n    removeX3(): void {\n        this.attributes.delete(Atom.s_x3);\n    }\n\n    /**\n     * @returns The y3 attribute value as a Big or undefined.\n     */\n    getY3(): Big | undefined {\n        let y3: string | undefined = this.attributes.get(Atom.s_y3);\n        if (y3 != undefined) {\n            return new Big(y3);\n        }\n    }\n\n    /**\n     * @param y3 The y3 attribute value.\n     */\n    setY3(y3: Big): void {\n        this.attributes.set(Atom.s_y3, y3.toString());\n    }\n\n    /**\n     * Removes the y3 attribute.\n     */\n    removeY3(): void {\n        this.attributes.delete(Atom.s_y3);\n    }\n\n    /**\n     * @returns The z3 attribute value as a Big or undefined.\n     */\n    getZ3(): Big | undefined {\n        let z3: string | undefined = this.attributes.get(Atom.s_z3);\n        if (z3 != undefined) {\n            return new Big(z3);\n        }\n    }\n\n    /**\n     * @param z3 The z3 attribute value.\n     */\n    setZ3(z3: Big): void {\n        this.attributes.set(\"z3\", z3.toString());\n    }\n\n    /**\n     * Removes the x3 attribute.\n     */\n    removeZ3(): void {\n        this.attributes.delete(\"z3\");\n    }\n}\n\n/**\n * A class for representing an atomArray.\n * There are no attributes.\n * In the XML, an \"atomArray\" node is a child of a \"molecule\" parent node and has \"atom\" node children.\n */\nexport class AtomArray extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"atomArray\";\n\n    /**\n     * The atoms stored in a lookup from id to atom.\n     */\n    atoms: Map<string, Atom>;\n\n    /**\n     * The index. The keys are the atom ids and the values are the index of the atom in the nodes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The reverse index. The keys are the index of the atom in the nodes and the values are the atom ids.\n     */\n    reverseIndex: Map<number, string>;\n\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */\n    constructor(attributes: Map<string, string>, atoms?: Map<string, Atom>) {\n        super(attributes, AtomArray.tagName);\n        this.index = new Map();\n        this.reverseIndex = new Map();\n        if (atoms == undefined) {\n            this.atoms = new Map();\n        } else {\n            this.atoms = atoms;\n            atoms.forEach((atom, id) => {\n                this.index.set(id, this.nodes.size);\n                this.reverseIndex.set(this.nodes.size, id);\n                this.nodes.set(this.nodes.size, atom);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the atom to get.\n     * @returns The atom with the given id.\n     */\n    getAtom(id: string): Atom | undefined {\n        return this.atoms.get(id);\n    }\n\n    /**\n     * @param atom The atom to add.\n     * @returns The id of the atom.\n     */\n    addAtom(atom: Atom, aID?: string): string {\n        //console.log('Adding atom...');\n        if (aID == undefined) {\n            let id: string | undefined = atom.getID();\n            if (id == undefined) {\n                id = this.getNextAtomID();\n                atom.setID(id);\n            } else {\n                if (this.atoms.has(id)) {\n                    let newID: string = this.getNextAtomID();\n                    console.warn('Atom with id ' + id + ' already exists, adding with id ' + newID);\n                    atom.setID(newID);\n                    id = newID;\n                }\n            }\n            aID = id;\n        } else {\n            if (this.atoms.has(aID)) {\n                //let newID: string = this.getNextAtomID();\n                console.warn('Atom with id ' + aID + ' will be replaced');\n                let i: number = this.index.get(aID)!;\n                this.nodes.set(i, atom);\n                this.atoms.set(aID, atom);\n                return aID;\n            }\n        }\n        //console.log('Atom id: ' + id);\n        this.index.set(aID, this.nodes.size);\n        this.reverseIndex.set(this.nodes.size, aID);\n        this.nodes.set(this.nodes.size, atom);\n        this.atoms.set(aID, atom);\n        /*\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.reverseIndex.keys() ' + Array.from(this.reverseIndex.keys()));\n        console.log('this.reverseIndex.values() ' + Array.from(this.reverseIndex.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n        return aID;\n    }\n\n    /**\n     * @returns The atomId.\n     */\n    getNextAtomID(): string {\n        let i: number = 1;\n        let id: string = \"a\" + i.toString();\n        if (this.atoms.has(id)) {\n            while (this.atoms.has(id)) {\n                i++;\n                id = \"a\" + i.toString();\n            }\n        }\n        return id;\n    }\n\n    /**\n     * @param id The id of the atom to remove.\n     */\n    removeAtom(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            throw new Error('Atom with id ' + id + ' does not exist!');\n        }\n        console.log('Removing atom with id ' + id);\n        this.atoms.delete(id);\n        //this.index.delete(id);\n        //this.nodes.delete(i);\n        this.deleteNodeAndReindex(i, id);\n        /*\n        console.log('i ' + i);\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n    }\n\n    /**\n     * @param i The index of the atom to remove.\n     * @param id The id of the atom to remove.\n     */\n    deleteNodeAndReindex(i: number, id: string): void {\n        this.nodes.delete(i);\n        this.index.delete(id);\n        this.reverseIndex.delete(i);\n        let newNodes = new Map<number, Atom>();\n        let newIndex = new Map<string, number>();\n        let newReverseIndex = new Map<number, string>();\n        this.index.forEach((value, key) => {\n            if (value > i) {\n                newNodes.set(value - 1, this.nodes.get(value) as Atom);\n                newIndex.set(key, value - 1);\n                newReverseIndex.set(value - 1, key);\n            } else {\n                newNodes.set(value, this.nodes.get(value) as Atom);\n                newIndex.set(key, value);\n                newReverseIndex.set(value, key);\n            }\n        });\n        this.nodes = newNodes;\n        this.index = newIndex;\n        this.reverseIndex = newReverseIndex;\n    }\n}\n\n/**\n * An atomic bond between two atoms in a molecule.\n * Instances must have the following attributes:\n * \"atomRefs2\" - a space separated list of two atom ids.\n * The attributes may include:\n * \"id\" - a unique identifier for the bond.\n * \"order\" - the order of the bond. Generally: order = (the number of bonding electrons) - ((the number of non-bonding electrons) / 2).\n * In the XML, a \"bond\" node is typically a child of a \"bondArray\" parent node.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * The key for the atomRefs2 attribute.\n     */\n    static readonly s_atomRefs2: string = \"atomRefs2\";\n\n    /**\n     * The key for the id attribute.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The key for the order attribute.\n     */\n    static readonly s_order: string = \"order\";\n\n    /**\n     * The order options.\n     */\n    static readonly orderOptions: string[] = [\"1\", \"1.5\", \"2\", \"2.5\", \"3\", \"3.5\", \"4\", \"4.5\", \"5\", \"5.5\", \"6\"];\n\n    /**\n     * A reference to the molecule that the bond is a part of.\n     */\n    molecule: Molecule;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, molecule: Molecule) {\n        super(attributes, Bond.tagName);\n        this.molecule = molecule;\n    }\n\n    /**\n     * @returns The atomRefs2.\n     */\n    getAtomRefs2(): string {\n        let atomRefs2: string | undefined = this.attributes.get(Bond.s_atomRefs2);\n\n        let atomRefs: string[] = atomRefs2?.split(\" \") || [];\n        if (atomRefs2 == undefined) {\n            return \"a1 a1\";\n        }\n        return atomRefs2;\n    }\n\n    /**\n     * @param atomRefs2 The atomRefs2 to set.\n     */\n    setAtomRefs2(atomRefs2: string): void {\n        this.attributes.set(Bond.s_atomRefs2, atomRefs2);\n    }\n\n    /**\n     * @returns The id.\n     */\n    getID(): string | undefined {\n        return this.attributes.get(Bond.s_id);\n    }\n\n    /**\n     * @param id The id to set the attribute value referred to by \"id\".\n     */\n    setID(id: string): void {\n        this.attributes.set(Bond.s_id, id);\n    }\n\n    /**\n     * @returns The attribute value referred to by \"order\" as a number or undefined.\n     */\n    getOrder(): number | undefined {\n        let order: string | undefined = this.attributes.get(Bond.s_order);\n        if (order != undefined) {\n            return parseFloat(order);\n        }\n    }\n\n    /**\n     * @param order The order to set the attribute value referred to by \"order\".\n     */\n    setOrder(order: number): void {\n        this.attributes.set(Bond.s_order, order.toString());\n    }\n\n}\n\n/**\n * There can be no attributes.\n * In the XML, a \"bondArray\" node is typically a child of a \"molecule\" parent node and has \"bond\" node children.\n */\nexport class BondArray extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bondArray\";\n\n    /**\n     * The bonds stored in a lookup from id to bond.\n     */\n    bonds: Map<string, Bond>;\n\n    /**\n     * The index. The keys are the bond ids and the values are the index of the bond in the nodes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The reverse index. The keys are the index of the bond in the nodes and the values are the bond ids.\n     */\n    reverseIndex: Map<number, string>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bonds The bonds.\n     */\n    constructor(attributes: Map<string, string>, bonds?: Map<string, Bond>) {\n        super(attributes, BondArray.tagName);\n        this.index = new Map();\n        this.reverseIndex = new Map();\n        if (bonds == undefined) {\n            this.bonds = new Map();\n        } else {\n            this.bonds = bonds;\n            bonds.forEach((bond, id) => {\n                this.index.set(id, this.nodes.size);\n                this.reverseIndex.set(this.nodes.size, id);\n                this.nodes.set(this.nodes.size, bond);\n            });\n        }\n    }\n\n    /**\n     * @returns The bond ids.\n     */\n    getBondIds(): string[] {\n        return Array.from(this.bonds.keys());\n    }\n\n    /**\n     * @param id The id of the bond to get.\n     * @returns The bond with the given id.\n     */\n    getBond(id: string): Bond | undefined {\n        return this.bonds.get(id);\n    }\n\n    /**\n     * Adds a bond to the array.\n     * @param bond The bond to add.\n     * @param bID The id of the bond to add if it already exists.\n     * @returns The id of the bond.\n     */\n    addBond(bond: Bond, bID?: string): string {\n        if (bID == undefined) {\n            let id: string | undefined = bond.getID();\n            if (id == undefined) {\n                id = this.getNextBondID();\n                bond.setID(id);\n            } else {\n                if (this.bonds.has(id)) {\n                    let newID: string = this.getNextBondID();\n                    console.log('Bond with id ' + id + ' already exists, adding with id ' + newID);\n                    bond.setID(newID);\n                    id = newID;\n                }\n            }\n            bID = id;\n        } else {\n            if (this.bonds.has(bID)) {\n                //let newID: string = this.getNextBondID();\n                console.log('Bond with id ' + bID + ' will be replaced');\n                let i: number = this.index.get(bID)!;\n                this.nodes.set(i, bond);\n                this.bonds.set(bID, bond);\n                return bID;\n            }\n        }\n        //console.log('Bond id: ' + id);\n        this.index.set(bID, this.nodes.size);\n        this.reverseIndex.set(this.nodes.size, bID);\n        this.nodes.set(this.nodes.size, bond);\n        this.bonds.set(bID, bond);\n        /*\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.reverseIndex.keys() ' + Array.from(this.reverseIndex.keys()));\n        console.log('this.reverseIndex.values() ' + Array.from(this.reverseIndex.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n        return bID;\n    }\n\n    /**\n     * @returns The atomId.\n     */\n    getNextBondID(): string {\n        let i: number = 1;\n        let id: string = \"b\" + i.toString();\n        while (this.bonds.has(id)) {\n            i++;\n            id = \"b\" + i.toString();\n        }\n        return id;\n    }\n\n    /**\n     * @param id The id of the atom to remove.\n     */\n    removeBond(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            throw new Error('Bond with id ' + id + ' does not exist!');\n        }\n        console.log('Removing bond with id ' + id);\n        this.bonds.delete(id);\n        //this.index.delete(id);\n        //this.nodes.delete(i);\n        this.deleteNodeAndReindex(i, id);\n        /*\n        console.log('i ' + i);\n        console.log('this.index.size ' + this.index.size);\n        console.log('this.nodes.size ' + this.nodes.size);\n        console.log('this.atoms.size ' + this.atoms.size);\n        console.log('this.index.keys() ' + Array.from(this.index.keys()));\n        console.log('this.index.values() ' + Array.from(this.index.values()));\n        console.log('this.nodes.keys() ' + Array.from(this.nodes.keys()));\n        console.log('this.atoms.keys() ' + Array.from(this.atoms.keys()));\n        */\n    }\n\n    /**\n     * @param i The index of the bond to remove.\n     * @param id The id of the bond to remove.\n     */\n    deleteNodeAndReindex(i: number, id: string): void {\n        this.nodes.delete(i);\n        this.index.delete(id);\n        this.reverseIndex.delete(i);\n        let newNodes = new Map<number, Bond>();\n        let newIndex = new Map<string, number>();\n        let newReverseIndex = new Map<number, string>();\n        this.index.forEach((value, key) => {\n            if (value > i) {\n                newNodes.set(value - 1, this.nodes.get(value) as Bond);\n                newIndex.set(key, value - 1);\n                newReverseIndex.set(value - 1, key);\n            } else {\n                newNodes.set(value, this.nodes.get(value) as Bond);\n                newIndex.set(key, value);\n                newReverseIndex.set(value, key);\n            }\n        });\n        this.nodes = newNodes;\n        this.index = newIndex;\n        this.reverseIndex = newReverseIndex;\n    }\n}\n\n/**\n * This is for representing an unknown type of property that might be present in some loaded XML.\n */\nexport class PropertyScalarString extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, PropertyScalarString.tagName, value);\n    }\n\n    /**\n     * @returns The value.\n     */\n    getValue(): string {\n        return this.value;\n    }\n\n    /**\n     * Sets the value.\n     * @param val The value.\n     */\n    setValue(val: string): void {\n        this.value = val;\n    }\n}\n\n/**\n * In the XML, a \"scalar\" node has a \"property\" node parent.\n * The attributes may contain \"units\".\n */\nexport class PropertyScalarNumber extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The property dictionary references.\n     */\n    static readonly propertyDictRefs: Set<string> = new Set([\"me:ZPE\", \"me:Hf0\", \"me:HfAT0\", \"me:Hf298\",\n        \"me:symmetryNumber\", \"me:TSOpticalSymmetryNumber\", \"me:frequenciesScaleFactor\", \"me:MW\",\n        \"me:spinMultiplicity\", \"me:epsilon\", \"me:sigma\"]);\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, PropertyScalarNumber.tagName, value);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyScalarNumber.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    //console.log('Units are not the same, changing units...');\n                    this.attributes.set(PropertyScalarNumber.s_units, units);\n                }\n            }\n        }\n    }\n\n    /**\n     * @returns The value.\n     */\n    getValue(): Big {\n        return this.value;\n    }\n\n    /**\n     * Sets the value.\n     * @param val The value.\n     */\n    setValue(val: Big): void {\n        this.value = val;\n    }\n\n}\n\n/**\n * In the XML, an \"array\" node has a \"property\" node parent.\n * The attributes may contain \"units\".\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyArray extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"array\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The property dictionary references.\n     */\n    static readonly propertyDictRefs: Set<string> = new Set([\"me:rotConsts\", \"me:vibFreqs\", \"me:EinsteinAij\", \"me:EinsteinBij\"]);\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: Big[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyArray.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set(PropertyArray.s_units, units);\n                    console.log('Units changed from ' + existingUnits + ' to ' + units);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets the size of the array.\n     * @param size The size of the array.\n     */\n    setSize(size: number): void {\n        let values: Big[] = [];\n        for (let i = 0; i < size; i++) {\n            values.push(new Big(0));\n        }\n        this.setValues(values);\n    }\n}\n\n/**\n * In the XML, a \"matrix\" node has a \"property\" node parent.\n * The attributes may contain:\n * \"rows\"\n * \"matrixType\" with known values [quareSymmetricLT].\n * \"units\" with known values [Hartree/Bohr2].\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyMatrix extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"matrix\";\n\n    /**\n     * The key for the rows attribute.\n     */\n    static readonly s_rows: string = \"rows\";\n\n    /**\n     * The key for the matrixType attribute.\n     */\n    static readonly s_matrixType: string = \"matrixType\";\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The property dictionary references.\n     */\n    static readonly propertyDictRefs: Set<string> = new Set([\"me:hessian\"]);\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: Big[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            let existingUnits: string | undefined = this.attributes.get(PropertyArray.s_units);\n            if (existingUnits != undefined) {\n                if (existingUnits != units) {\n                    this.attributes.set(PropertyArray.s_units, units);\n                    console.log('Units changed from ' + existingUnits + ' to ' + units);\n                }\n            }\n        }\n    }\n\n    /**\n     * Sets the size of the array.\n     * @param rows The number of rows in the matrix.\n     * @param columns The number of columns in the matrix.\n     */\n    setSize(rows: number, columns: number): void {\n        let values: Big[] = [];\n        for (let i = 0; i < rows; i++) {\n            for (let j = 0; j < columns; j++) {\n                values.push(new Big(0));\n            }\n        }\n        this.setValues(values);\n    }\n}\n\n/**\n * In the XML, a \"property\" node has a \"propertyList\" parent and has either a \"scalar\", \"array\", \"matrix\"\n * or other not yet implemented child node type).\n * So, the \"property\" nodes of a PropertyArray may be a \"scalar\", \"array\", or \"matrix\" type.\n * The attributes must contain \"dictRef\" which is a dictionary reference for a type of property.\n * The different kinds of \"property\" nodes are listed below from Table 1 of the Mesmer User Manual:\n * dictRef, value, units, Inserted from defaults.xml if absent\n * \"me:ZPE\", scalar, Mesmer.energyUnits, No\n * \"me:Hf0\", scalar, Mesmer.energyUnits, No\n * \"me:HfAT0\", scalar, Mesmer.energyUnits, No \n * \"me:Hf298\", scalar, Mesmer.energyUnits, No\n * \"me:rotConsts\", array, Mesmer.frequencyUnits, No\n * \"me:symmetryNumber\", scalar, No units, Yes (1)\n * \"me:TSOpticalSymmetryNumber\", scalar, No units, Yes (1)\n * \"me:frequenciesScaleFactor\", scalar, No units, Yes (1.0)\n * \"me:vibFreqs\", array, cm-1, No\n * \"me:MW\", scalar, amu, No\n * \"me:spinMultiplicity\", scalar, No units, Yes (1)\n * \"me:epsilon\", scalar, K (fixed), Yes (50)\n * \"me:sigma\", scalar, Å (fixed), Yes (5)\n * \"me:hessian\", matrix, kJ/mol/Å2 or kcal/mol/Å2 or Hartree/Å2, No\n * \"me:EinsteinAij\", array, s-1 (fixed), No\n * \"me:EinsteinBij\", array, m3/J/s2 (fixed), No\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * The key for the dictRef attribute.\n     */\n    static readonly s_dictRef: string = \"dictRef\";\n\n    /**\n     * The dictRef.\n     */\n    dictRef: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property?: PropertyScalarString | PropertyScalarNumber | PropertyArray | PropertyMatrix) {\n        super(attributes, Property.tagName);\n        let dictRef: string | undefined = attributes.get(Property.s_dictRef);\n        if (dictRef == undefined) {\n            // If there is no dictRef, then try setting this from the \"title\" attribute.\n            let title: string | undefined = attributes.get(\"title\");\n            if (title == undefined) {\n                throw new Error(Property.s_dictRef + ' and title are undefined!');\n            } else {\n                if (title == \"MW\") {\n                    dictRef = \"me:MW\";\n                } else if (title == \"Hf298\") {\n                    dictRef = \"me:Hf298\";\n                } else if (title == \"Hf0\") {\n                    dictRef = \"me:Hf0\";\n                } else if (title == \"program\") { // examples/AnalyticalRepresentation/Chebyshev.xml\n                    dictRef = \"program\";\n                } else if (title == \"basis\") {  // examples/AnalyticalRepresentation/Chebyshev.xml\n                    dictRef = \"basis\";\n                } else if (title == \"method\") { // examples/AnalyticalRepresentation/Chebyshev.xml\n                    dictRef = \"method\";\n                } else if (title == \"File Format\") { // examples/AnalyticalRepresentation/Chebyshev.xml\n                    dictRef = \"File Format\";\n                } else {\n                    throw new Error('Title ' + title + 'not recognised!');\n                }\n            }\n        }\n        this.dictRef = dictRef;\n        if (property) {\n            this.nodes.set(0, property);\n        }\n    }\n\n    /**\n     * @returns The property.\n     */\n    getProperty(): PropertyScalarString | PropertyScalarNumber | PropertyArray | PropertyMatrix {\n        return this.nodes.get(0) as PropertyScalarString | PropertyScalarNumber | PropertyArray | PropertyMatrix;\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: PropertyScalarString | PropertyScalarNumber | PropertyArray | PropertyMatrix): void {\n        this.nodes.set(0, property);\n    }\n\n    /**\n     * Removes the property.\n     */\n    //    removeProperty(): void {\n    //        this.nodes.delete(0);\n    //    }\n\n}\n\n/**\n * The Zero Potential Energy.\n * The child \"scalar\" node should have a \"units\" attribute (Mesmer.energyUnits).\n */\nexport class ZPE extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:ZPE\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of Mesmer.energyUnits.\n     */\n    setUnits(units: string): void {\n        (this.getProperty() as PropertyScalarNumber).updateUnits(units);\n    }\n}\n\n/**\n * The Heat of Formation at 0K.\n * The child \"scalar\" node should have a \"units\" attribute (Mesmer.energyUnits).\n */\nexport class Hf0 extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:Hf0\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of Mesmer.energyUnits.\n     */\n    setUnits(units: string): void {\n        (this.getProperty() as PropertyScalarNumber).updateUnits(units);\n    }\n}\n\n/**\n * Is this different to Hf0?\n * The child \"scalar\" node should have a \"units\" attribute (Mesmer.energyUnits).\n */\nexport class HfAT0 extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:HfAT0\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of Mesmer.energyUnits.\n     */\n    setUnits(units: string): void {\n        (this.getProperty() as PropertyScalarNumber).updateUnits(units);\n    }\n}\n\n/**\n * The Heat of Formation at 298K.\n * The child \"scalar\" node should have a \"units\" attribute (Mesmer.energyUnits).\n */\nexport class Hf298 extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:Hf298\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of Mesmer.energyUnits.\n     */\n    setUnits(units: string): void {\n        (this.getProperty() as PropertyScalarNumber).updateUnits(units);\n    }\n}\n\n/**\n * The rotation constants.\n * The child \"array\" node should have a \"units\" attribute with options [\"cm-1\", \"GHz\", \"amuA^2\"]\n */\nexport class RotConsts extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:rotConsts\";\n\n    /**\n     * The units.\n     */\n    static readonly unitOptions: string[] = [\"cm-1\", \"GHz\", \"amuA^2\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * Rotational symmetry number.\n */\nexport class SymmetryNumber extends Property {\n\n    /**\n    * The dictionary reference.\n    */\n    static readonly dictRef: string = \"me:symmetryNumber\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * Transition state optical symmetry number.\n */\nexport class TSOpticalSymmetryNumber extends Property {\n\n    /**\n    * The dictionary reference.\n    */\n    static readonly dictRef: string = \"me:TSOpticalSymmetryNumber\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:frequenciesScaleFactor\" property.\n */\nexport class FrequenciesScaleFactor extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:frequenciesScaleFactor\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The vibration frequencies.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class VibFreqs extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:vibFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Molecular Weight.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[amu]).\n */\nexport class MW extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:MW\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Spin Multiplicity.\n */\nexport class SpinMultiplicity extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:spinMultiplicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Epsilon.\n * The child \"scalar\" node should have a \"units\" attribute K (fixed).\n */\nexport class Epsilon extends Property {\n\n    /**\n    * The dictionary reference.\n    */\n    static readonly dictRef: string = \"me:epsilon\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Sigma.\n * The child \"scalar\" node should have a \"units\" attribute Å (fixed).\n */\nexport class Sigma extends Property {\n\n    /**\n    * The dictionary reference.\n    */\n    static readonly dictRef: string = \"me:sigma\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Hessian.\n * The child \"matrix\" node should have a \"units\" attribute with options [kJ/mol/Å2, kcal/mol/Å2, Hartree/Å2]\n */\nexport class Hessian extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:hessian\";\n\n    /**\n     * The units.\n     */\n    static readonly unitOptions: string[] = [\"kJ/mol/Å2\", \"kcal/mol/Å2\", \"Hartree/Å2\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyMatrix) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Einstein Aij.\n * The child \"array\" node should have a \"units\" attribute s-1 (fixed).\n */\nexport class EinsteinAij extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:EinsteinAij\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n\n}\n\n/**\n * The Einstein Bij.\n * The child \"array\" node should have a \"units\" attribute m3/J/s2 (fixed).\n */\nexport class EinsteinBij extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:EinsteinBij\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The electronic excitation.\n * The child \"scalar\" node should have a \"units\" attribute (Mesmer.frequencyUnits?).\n */\nexport class ElectronicExcitation extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:electronicExcitation\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalarNumber) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:imFreqs\"\n */\nexport class ImFreqs extends Property {\n\n    /**\n     * The dictionary reference.\n     */\n    static readonly dictRef: string = \"me:imFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * In the XML, a \"propertyList\" node is a child node of a \"molecule\" node and has one or more \"property\" child node.\n * There can be no attributes.\n */\nexport class PropertyList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"propertyList\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */\n    constructor(attributes: Map<string, string>, properties?: Property[]) {\n        super(attributes, PropertyList.tagName);\n        this.index = new Map();\n        if (properties != undefined) {\n            properties.forEach(property => {\n                this.nodes.set(this.nodes.size, property);\n                this.index.set(property.dictRef, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @returns The properties as a Map<string, Property> where each key is the dictRef of the Property value.\n     */\n    getProperties(): Map<string, Property> {\n        let properties: Map<string, Property> = new Map();\n        this.nodes.forEach(node => {\n            let p: Property = node as Property;\n            properties.set(p.dictRef, p);\n        });\n        return properties\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let i: number | undefined = this.index.get(dictRef);\n        if (i != undefined) {\n            return this.nodes.get(i) as Property;\n        } else {\n            //throw new Error('Property ' + dictRef + ' does not exist');\n            return undefined;\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let i: number | undefined = this.index.get(property.dictRef);\n        if (i == undefined) {\n            console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            //console.log('property.toString() ' + property.toString());\n            //console.log('property.getProperty().toString() ' + property.getProperty().toString());\n            //console.log('mapToString(property.attributes) ' + mapToString(property.attributes));\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log('Property ' + property.dictRef + ' already exists, updating...');\n            this.nodes.set(i, property);\n        }\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     */\n    removeProperty(dictRef: string): void {\n        let i: number | undefined = this.index.get(dictRef);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(dictRef);\n            let newIndex: Map<string, number> = new Map();\n            this.index.forEach((value, key) => {\n                if (value > i!) {\n                    newIndex.set(key, value - 1);\n                } else {\n                    newIndex.set(key, value);\n                }\n            });\n            this.index = newIndex;\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include:\n * \"bathGas\";\n * and other attributes of a RangeNode.\n */\nexport class DeltaEDown extends RangeNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * The key for the bathGas attribute.\n     */\n    static readonly s_bathGas: string = \"bathGas\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */\n    getBathGas(): string | undefined {\n        return this.attributes.get(DeltaEDown.s_bathGas);\n    }\n\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */\n    setBathGas(bathGas: string): void {\n        this.attributes.set(DeltaEDown.s_bathGas, bathGas);\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown2\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include:\n * \"bathGas\";\n * and other attributes of a RangeNode.\n */\nexport class DeltaEDown2 extends DeltaEDown {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown2\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, value);\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDownLinEne\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include:\n * \"referenceTemperature\";\n * and other attributes of a RangeNode.\n */\nexport class DeltaEDownTExponent extends RangeNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDownTExponent\"\n\n    /**\n     * The referenceTemperature attribute key.\n     */\n    static readonly s_referenceTemperature: string = \"referenceTemperature\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, DeltaEDownTExponent.tagName, value);\n    }\n\n    /**\n     * @returns The referenceTemperature.\n     */\n    getReferenceTemperature(): number | undefined {\n        return parseFloat(get(this.attributes, DeltaEDownTExponent.s_referenceTemperature));\n    }\n\n    /**\n     * @param referenceTemperature The referenceTemperature.\n     */\n    setReferenceTemperature(referenceTemperature: number): void {\n        this.attributes.set(DeltaEDownTExponent.s_referenceTemperature, referenceTemperature.toString());\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDownLinEne\" node is a child node of a \"me:energyTransferModel\" node.\n */\nexport class DeltaEDownLinEne extends RangeNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDownLinEne\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, DeltaEDownLinEne.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:energyTransferModel\" node is a child node of a \"molecule\" node.\n * The attributes are expected to include:\n * \"xsi:type\" with expected values [\"me:ExponentialDown\", \"me:BiExponentialDown\"].\n * It may have:\n * One or multiple child nodes of the following types:\n * \"me:deltaEDown\"\n * \"me:deltaEDown2\" (for \"me:BiExponentialDown\")\n * \"me:deltaEDownTExponent\"\n * \"me:deltaEDownLinEne\"\n * \"me:deltaEDownTActivation\"\n * Examples:\n * <moleculeList>\n *   <molecule id=\"Isomer1\">\n *     <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *       <me:deltaEDown units=\"cm-1\" lower=\"100\" upper=\"400\" stepsize=\"10\">174</me:deltaEDown>\n *     </me:energyTransferModel>\n *   </molecule>\n *   <molecule id=\"Isomer2\">\n *     <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *       <me:deltaEDown units=\"cm-1\" derivedFrom=\"Isomer1:deltaEDown\">174</me:deltaEDown>\n *     </me:energyTransferModel>\n *   </molecule>\n * </moleculeList>\n * <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *   <me:deltaEDown units=\"cm-1\" lower=\"140.0\" upper=\"220.\" stepsize=\"10.0\">210.0</me:deltaEDown>\n *   <me:deltaEDownTExponent lower=\"0.0\" upper=\"1.0\" stepsize=\"0.01\">0.6</me:deltaEDownTExponent>\n *   <me:deltaEDownLinEne lower=\"1.e-06\" upper=\"1.0\" stepsize=\"1.e-06\">0.0006</me:deltaEDownLinEne>\n * </me:energyTransferModel>\n * <me:energyTransferModel xsi:type=\"me:ExponentialDown\">\n *   <me:deltaEDown bathGas=\"Ar\" units=\"cm-1\" lower=\"20\" upper=\"400\" stepsize=\"10.0\">47.9654</me:deltaEDown>\n *   <me:deltaEDownTExponent bathGas=\"Ar\" referenceTemperature=\"298\" lower=\"0\" upper=\"2\" stepsize=\"0.02\" >1.37982</me:deltaEDownTExponent>\n *   <me:deltaEDownTActivation bathGas=\"Ar\" units=\"K-1\" lower=\"-1.0\" upper=\"1.0\" stepsize=\"1e-5\" >-7.95961e-05 </me:deltaEDownTActivation>\n * </me:energyTransferModel>\n * <me:energyTransferModel xsi:type=\"me:BiExponentialDown\">\n *  <me:deltaEDown units=\"cm-1\">210.0</me:deltaEDown>\n *  <me:deltaEDown2 units=\"cm-1\">500.0</me:deltaEDown2>\n *  <me:ratio>0.5</me:ratio>\n * </me:energyTransferModel>\n */\nexport class EnergyTransferModel extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns?: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        if (deltaEDowns != undefined) {\n            deltaEDowns.forEach(deltaEDown => {\n                this.nodes.set(this.nodes.size, deltaEDown);\n            });\n        }\n    }\n\n    /**\n     * @returns The DeltaEDowns.\n     */\n    getDeltaEDowns(): DeltaEDown[] {\n        let deltaEDowns: DeltaEDown[] = [];\n        this.nodes.forEach(node => {\n            if (node instanceof DeltaEDown) {\n                deltaEDowns.push(node);\n            }\n        });\n        return deltaEDowns;\n    }\n\n    /**\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    setDeltaEDowns(deltaEDowns: DeltaEDown[]): void {\n        this.nodes.clear();\n        deltaEDowns.forEach(deltaEDown => {\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */\n    getDeltaEDown(index: number): DeltaEDown {\n        if (index < 0 || index >= this.nodes.size) {\n            throw new Error('index out of range');\n        }\n        return this.nodes.get(index) as DeltaEDown;\n    }\n\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */\n    setDeltaEDown(index: number, deltaEDown: DeltaEDown): void {\n        this.nodes.set(index, deltaEDown);\n    }\n\n    /**\n     * Add a DeltaEDown.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */\n    addDeltaEDown(deltaEDown: DeltaEDown): number {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * Remove a DeltaEDown.\n     * @param index The index of the DeltaEDown to remove.\n     */\n    removeDeltaEDown(index: number): void {\n        this.nodes.delete(index);\n    }\n}\n\n/**\n * In the XML, a \"me:DOSCMethod\" node is a child node of a \"molecule\" node.\n * The attributes are expected to include either \"xsi:type\" or \"name\" - expected values include [\"ClassicalRotors\", \n * \"QMRotors\", \"me:ClassicalRotors\", \"me:QMRotors\"].\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    /**\n     * The options for the \"xsi:type\" or \"name\" attribute value.\n     */\n    static readonly xsi_typeOptions: string[] = [\"ClassicalRotors\", \"QMRotors\", \"DefinedStatesRotors\",\n        \"me:ClassicalRotors\", \"me:QMRotors\", \"me:DefinedStatesRotors\"];\n\n    /**\n     * The key for the \"xsi:type\" attribute value.\n     */\n    static readonly s_xsi_type = \"xsi:type\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n        if (attributes.get(DOSCMethod.s_xsi_type) == undefined) {\n            let name: string | undefined = attributes.get(\"name\");\n            if (name == undefined) {\n                throw new Error('Neither xsi:type or name are defined.');\n            } else {\n                attributes.set(DOSCMethod.s_xsi_type, name);\n            }\n        }\n    }\n\n    /**\n     * @returns The xsi:type.\n     */\n    getXsiType(): string {\n        return this.attributes.get(DOSCMethod.s_xsi_type) as string;\n    }\n\n    /**\n     * @param xsiType The xsi:type.\n     */\n    setXsiType(xsiType: string): void {\n        this.attributes.set(DOSCMethod.s_xsi_type, xsiType);\n    }\n}\n\n/**\n * In the XML, a \"me:bondRef\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class BondRef extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bondRef\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.tagName, bondRef);\n    }\n}\n\n/**\n * In the XML, a \"me:PotentialPoint\" node is a child node of a \"me:HinderedRotorPotential\" node.\n * The attributes must include \"angle\" and \"potential\".\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PotentialPoint\";\n\n    /**\n     * The key angle attribute.\n     */\n    static readonly s_angle: string = \"angle\";\n\n    /**\n     * The key potential attribute.\n     */\n    static readonly s_potential: string = \"potential\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.tagName);\n    }\n\n    /**\n     * @returns The angle.\n     */\n    getAngle(): string | undefined {\n        return this.attributes.get(PotentialPoint.s_angle);\n    }\n\n    /**\n     * @param angle The angle of the PotentialPoint.\n     */\n    setAngle(angle: Big): void {\n        this.attributes.set(PotentialPoint.s_angle, angle.toString());\n    }\n\n    /**\n     * @returns The potential.\n     */\n    getPotential(): string | undefined {\n        return this.attributes.get(PotentialPoint.s_potential);\n    }\n\n    /**\n     * @param potential The potential of the PotentialPoint.\n     */\n    setPotential(potential: Big): void {\n        this.attributes.set(PotentialPoint.s_potential, potential.toString());\n    }\n}\n\n/**\n * In the XML, a \"me:DistributionCalcMethod\" node is a child node of a \"molecule\" node.\n * Attributes may include:\n * default (string)\n * name (string)\n */\nexport class DistributionCalcMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DistributionCalcMethod\";\n\n    /**\n     * The key for the default attribute.\n     */\n    static readonly s_default: string = \"default\";\n\n    /**\n     * The key for the name attribute.\n     */\n    static readonly s_name: string = \"name\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DistributionCalcMethod.tagName);\n    }\n\n    /**\n     * @returns The default.\n     */\n    getDefault(): string | undefined {\n        return this.attributes.get(DistributionCalcMethod.s_default);\n    }\n\n    /**\n     * @param default The default.\n     *\n    setDefault(defaultValue: string): void {\n        this.attributes.set(DistributionCalcMethod.s_default, defaultValue);\n    }\n    */\n\n    /**\n     * @returns The name.\n     */\n    getName(): string | undefined {\n        return this.attributes.get(DistributionCalcMethod.s_name);\n    }\n\n    /**\n     * @param name The name.\n     *\n    setName(name: string): void {\n        this.attributes.set(DistributionCalcMethod.s_name, name);\n    }*/\n}\n\n/**\n * For representing a \"me:thermoValue\"\n * T, H, S, G, Cp\n */\nexport class ThermoValue extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:thermoValue\"\n\n    /**\n     * The key for the T attribute.\n     */\n    static readonly s_T: string = \"T\";\n\n    /**\n     * The key for the H attribute.\n     */\n    static readonly s_H: string = \"H\";\n\n    /**\n     * The key for the S attribute.\n     */\n    static readonly s_S: string = \"S\"\n\n    /**\n     * The key for the G attribute.\n     */\n    static readonly s_G: string = \"G\"\n\n    /**\n     * The key for the Cp attribute.\n     */\n    static readonly s_Cp: string = \"Cp\"\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Atom.tagName);\n    }\n\n    /**\n     * @returns The temperature.\n     */\n    getT(): Big {\n        return new Big(this.attributes.get(ThermoValue.s_T)!);\n    }\n\n    /**\n     * @param T The temperature.\n     *\n    setT(T: Big): void {\n        this.attributes.set(ThermoValue.s_T, T.toString());\n    }\n\n    /**\n     * @returns The enthalpy.\n     */\n    getH(): Big {\n        return new Big(this.attributes.get(ThermoValue.s_H)!);\n    }\n\n    /**\n     * @param H The enthalpy.\n     *\n    setH(H: Big): void {\n        this.attributes.set(ThermoValue.s_H, H.toString());\n    }\n\n    /**\n     * @returns The entropy.\n     */\n    getS(): Big {\n        return new Big(this.attributes.get(ThermoValue.s_S)!);\n    }\n\n    /**\n     * @param S The entropy.\n     *\n    setS(S: Big): void {\n        this.attributes.set(ThermoValue.s_S, S.toString());\n    }\n\n    /**\n     * @returns The Gibbs free energy.\n     */\n    getG(): Big {\n        return new Big(this.attributes.get(ThermoValue.s_G)!);\n    }\n\n    /**\n     * @param G The Gibbs free energy.\n     *\n    setG(G: Big): void {\n        this.attributes.set(ThermoValue.s_G, G.toString());\n    }\n\n    /**\n     * @returns The heat capacity.\n     */\n    getCp(): Big {\n        return new Big(this.attributes.get(ThermoValue.s_Cp)!);\n    }\n\n    /**\n     * @param Cp The heat capacity.\n     *\n    setCp(Cp: Big): void {\n        this.attributes.set(ThermoValue.s_Cp, Cp.toString());\n    }\n\n    /**\n     * @returns The ThermoValue as a string array.\n     */\n    toStringArray(): string[] {\n        return [this.getT().toString(), this.getH().toString(), this.getS().toString(), this.getG().toString(),\n        this.getCp().toString()];\n    }\n\n    /**\n     * @returns The ThermoValue as a CSV string.\n     */\n    toCSV(): string {\n        //console.log(this.toStringArray());\n        //console.log(this.toStringArray().join(\",\"));\n        return this.toStringArray().join(\",\");\n    }\n}\n\n/**\n * For representing a \"me:thermoTable\"\n * attributes:\n * unitsT=\"K\" unitsH=\"kJ/mol\" unitsS=\"J/mol/K\" unitsG=\"kJ/mol\" unitsCp=\"J/mol/K\"\n */\nexport class ThermoTable extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:thermoTable\"\n\n    /**\n     * The key for the unitsT attribute.\n     */\n    static readonly s_unitsT: string = \"unitsT\";\n\n    /**\n     * The key for the unitsH attribute.\n     */\n    static readonly s_unitsH: string = \"unitsH\";\n\n    /**\n     * The key for the unitsS attribute.\n     */\n    static readonly s_unitsS: string = \"unitsS\";\n\n    /**\n     * The key for the unitsG attribute.\n     */\n    static readonly s_unitsG: string = \"unitsG\";\n\n    /**\n     * The key for the unitsCp attribute.\n     */\n    static readonly s_unitsCp: string = \"unitsCp\";\n\n    /**\n     * The ThermoValues\n     */\n    tvs: ThermoValue[]\n\n    /**\n     * @param attributes The attributes.\n     * @param tvs The ThermoValue array.\n     */\n    constructor(attributes: Map<string, string>, tvs?: ThermoValue[]) {\n        super(attributes, ThermoTable.tagName);\n        if (tvs != undefined) {\n            tvs.forEach((tv) => {\n                this.addNode(tv);\n            });\n            this.tvs = tvs;\n        } else {\n            this.tvs = [];\n        }\n    }\n\n    /**\n     * Retrieves a ThermoValue from the tvs array at a specific index.\n     * \n     * @param i The index of the ThermoValue to return. \n     * @returns The ThermoValue at the given index.\n     * @throws IndexError if i is out of the bounds of the tvs array.\n     * @throws TypeError if tvs is null or undefined.\n     */\n    get(i: number): ThermoValue {\n        return this.tvs[i];\n    }\n\n    /**\n     * Set the ThermoValue in t.\n     * \n     * @param i The index of the ThermoValue to set.\n     * @returns The PT pairs.\n     */\n    set(i: number, tv: ThermoValue): void {\n        this.nodes.set(i, tv);\n        this.tvs[i] = tv;\n    }\n\n    /**\n     * Add a ThermoValue.\n     * \n     * @param tv The ThermoValue to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */\n    add(tv: ThermoValue): number {\n        this.addNode(tv);\n        this.tvs.push(tv);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * Remove the ThermoValue at the given index.\n     * \n     * @param i The index.\n     */\n    remove(i: number): void {\n        this.nodes.delete(i);\n        this.tvs.splice(i, 1);\n    }\n\n    /**\n     * Initialise tvs.\n     * \n     * @param tvs The tvs to be set.\n     */\n    init(tvs: ThermoValue[]): void {\n        this.clear();\n        tvs.forEach((tv) => {\n            this.addNode(tv);\n            this.tvs.push(tv);\n        });\n    }\n\n    /**\n     * Clear.\n     */\n    clear(): void {\n        this.nodes.clear();\n        this.tvs = [];\n    }\n\n    /**\n     * @returns The ThermoTable header as a string array.\n     */\n    getHeader(): string[] {\n        return [\"T (\" + (this.attributes.get(ThermoTable.s_unitsT)) + \")\",\n        \"H(T)-H(0) (\" + (this.attributes.get(ThermoTable.s_unitsH)) + \")\",\n        \"S(T) (\" + (this.attributes.get(ThermoTable.s_unitsS)) + \")\",\n        \"G(T) (\" + (this.attributes.get(ThermoTable.s_unitsG)) + \")\",\n        \"Cp(T) (\" + (this.attributes.get(ThermoTable.s_unitsCp)) + \")\"];\n    }\n\n    /**\n     * @returns The ThermoTable as a CSV string.\n     */\n    toCSV(): string {\n        let csv: string = this.getHeader().join(\",\") + \"\\n\";\n        this.tvs.forEach((tv) => {\n            csv += tv.toCSV() + \"\\n\";\n        });\n        return csv;\n    }\n}\n\n/**\n * In the XML, a \"me:HinderedRotorPotential\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n * It may have one or more \"me:PotentialPoint\" child nodes.\n * The attributes must include \"format\" (with a value from [\"numerical\", \"analytical\"]) and \"units\" (Mesmer.energyUnits).\n */\nexport class HinderedRotorPotential extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:HinderedRotorPotential\";\n\n    /**\n     * The permitted formats.\n     */\n    static readonly formats: Set<string> = new Set([\"numerical\", \"analytical\"]);\n\n    /**\n     * The key for the format attribute value.\n     */\n    static readonly s_format: string = \"format\";\n\n    /**\n     * The key for the units attribute value.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The key for the expansionSize attribute value.\n     */\n    static readonly s_expansionSize: string = \"expansionSize\";\n\n    /**\n     * The key for the useSineTerms attribute value.\n     */\n    static readonly s_useSineTerms: string = \"useSineTerms\";\n\n    /**\n     * The format stored for convenience, this is also an attribute.\n     */\n    format: string;\n\n    /**\n     * The units stored for convenience, this is also an attribute.\n     */\n    units: string;\n\n    /**\n     * The useSineTerms stored for convenience, this is also an attribute.\n     */\n    useSineTerms: boolean;\n\n    /**\n     * @param attributes The attributes.\n     * @param potentialPoints The PotentialPoints.\n     */\n    constructor(attributes: Map<string, string>, potentialPoints?: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.tagName);\n        let format: string | undefined = attributes.get(HinderedRotorPotential.s_format);\n        if (format == undefined) {\n            throw new Error(HinderedRotorPotential.s_format + ' is undefined!');\n        }\n        this.format = format;\n        let units: string | undefined = attributes.get(HinderedRotorPotential.s_units);\n        if (units == undefined) {\n            throw new Error(HinderedRotorPotential.s_units + ' is undefined!');\n        }\n        this.units = units;\n        if (potentialPoints != undefined) {\n            potentialPoints.forEach(p => {\n                this.nodes.set(this.nodes.size, p);\n            });\n        }\n        let useSineTerms: string | undefined = attributes.get(HinderedRotorPotential.s_useSineTerms);\n        if (useSineTerms == undefined) {\n            this.useSineTerms = false;\n            //throw new Error(HinderedRotorPotential.s_useSineTerms + ' is undefined!');\n        } else {\n            this.useSineTerms = true;\n        }\n        //this.useSineTerms = (useSineTerms == \"yes\");\n    }\n\n    /**\n     * @returns The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    getFormat(): string {\n        return this.format;\n    }\n\n    /**\n     * @param format The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    setFormat(format: string): void {\n        this.format = format;\n        this.attributes.set(HinderedRotorPotential.s_format, format);\n    }\n\n    /**\n     * @returns The units of the HinderedRotorPotential.\n     * Should be one of Mesmer.energyUnits.\n     */\n    getUnits(): string {\n        return this.units;\n    }\n\n    /**\n     * @param units The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */\n    setUnits(units: string): void {\n        this.units = units;\n        this.attributes.set(HinderedRotorPotential.s_units, units);\n    }\n\n    /**\n     * @returns The expansionSize of the HinderedRotorPotential.\n     */\n    getExpansionSize(): string | undefined {\n        return this.attributes.get(HinderedRotorPotential.s_expansionSize);\n    }\n\n    /**\n     * @param expansionSize The expansionSize of the HinderedRotorPotential.\n     */\n    setExpansionSize(expansionSize: Big): void {\n        console.log(expansionSize.toString());\n        this.attributes.set(HinderedRotorPotential.s_expansionSize, expansionSize.toString());\n    }\n\n    /**\n     * @returns The useSineTerms of the HinderedRotorPotential.\n     */\n    getUseSineTerms(): boolean {\n        return this.useSineTerms;\n    }\n\n    /**\n     * @param useSineTerms The useSineTerms of the HinderedRotorPotential.\n     */\n    setUseSineTerms(useSineTerms: boolean): void {\n        this.useSineTerms = useSineTerms;\n        this.attributes.set(HinderedRotorPotential.s_useSineTerms, useSineTerms ? \"yes\" : \"no\");\n    }\n\n    /**\n     * @returns The potential point with the given index.\n     */\n    getPotentialPoint(i: number): PotentialPoint {\n        return this.nodes.get(i) as PotentialPoint;\n    }\n\n    /**\n     * Set the potential point at the given index.\n     * @param i The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */\n    setPotentialPoint(i: number, p: PotentialPoint): void {\n        this.nodes.set(i, p);\n    }\n\n    /**\n     * Sets the potential points.\n     * @param potentialPoints The potential points.\n     */\n    setPotentialPoints(potentialPoints: PotentialPoint[]): void {\n        this.nodes.clear();\n        potentialPoints.forEach(p => {\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */\n    addPotentialPoint(p: PotentialPoint): number {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @param i The index of the potential point to remove.\n     */\n    removePotentialPoint(i: number): void {\n        this.nodes.delete(i);\n    }\n}\n\n/**\n * In the XML, a \"me:periodicity\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class Periodicity extends NumberNode {\n\n    static readonly tagName: string = \"me:periodicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Periodicity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:ExtraDOSCMethod\" node is a child node of a \"molecule\" node.\n */\nexport class ExtraDOSCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */\n    constructor(attributes: Map<string, string>, bondRef?: BondRef,\n        hinderedRotorPotential?: HinderedRotorPotential,\n        periodicity?: Periodicity) {\n        super(attributes, ExtraDOSCMethod.tagName);\n        this.index = new Map();\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The bondRef.\n     */\n    getBondRef(): BondRef | undefined {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BondRef;\n        }\n    }\n\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */\n    setBondRef(bondRef: BondRef) {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bondRef);\n        } else {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */\n    getHinderedRotorPotential(): HinderedRotorPotential | undefined {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HinderedRotorPotential;\n        }\n    }\n\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */\n    setHinderedRotorPotential(hinderedRotorPotential: HinderedRotorPotential) {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hinderedRotorPotential);\n        } else {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The periodicity of the molecule.\n     */\n    getPeriodicity(): Periodicity | undefined {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Periodicity;\n        }\n    }\n\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */\n    setPeriodicity(periodicity: Periodicity) {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, periodicity);\n        } else {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n}\n\n/**\n * The attributes may include \"units\".\n * In the XML, a \"me:reservoirSize\" node is a child node of a \"molecule\" node.\n */\nexport class ReservoirSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:reservoirSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ReservoirSize.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:qtot\" node is a child node of a \"me:densityOfStates\" node.\n */\nexport class Qtot extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:qtot\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Qtot.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:sumc\" node is a child node of a \"me:densityOfStates\" node.\n */\nexport class Sumc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sumc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Sumc.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:sumg\" node is a child node of a \"me:densityOfStates\" node.\n */\nexport class Sumg extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:sumg\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Sumg.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:densityOfStates\" node is a child node of a \"me:densityOfStatesList\" node.\n * It is expected to contain the following child nodes:\n * me:t\n * me:qtot\n * me:sumc\n * me:sumg\n */\nexport class DensityOfStates extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:densityOfStates\";\n\n    /**\n     * The header.\n     */\n    static readonly header: string[] = [T.tagName, Qtot.tagName, Sumc.tagName, Sumg.tagName];\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DensityOfStates.tagName);\n        this.index = new Map();\n    }\n\n    /**\n     * @returns The T.\n     */\n    getT(): T | undefined {\n        let i = this.index.get(T.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as T;\n        }\n    }\n\n    /**\n     * Set the T.\n     * @param T The T.\n     */\n    setT(T: T) {\n        let i = this.index.get(T.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, T);\n        } else {\n            this.nodes.set(this.nodes.size, T);\n            this.index.set(T.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The Qtot.\n     */\n    getQtot(): Qtot | undefined {\n        let i = this.index.get(Qtot.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Qtot;\n        }\n    }\n\n    /**\n     * Set the Qtot.\n     * @param Qtot The Qtot.\n     */\n    setQtot(Qtot: Qtot) {\n        let i = this.index.get(Qtot.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, Qtot);\n        } else {\n            this.nodes.set(this.nodes.size, Qtot);\n            this.index.set(Qtot.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The Sumc.\n     */\n    getSumc(): Sumc | undefined {\n        let i = this.index.get(Sumc.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Sumc;\n        }\n    }\n\n    /**\n     * Set the Sumc.\n     * @param Sumc The Sumc.\n     */\n    setSumc(Sumc: Sumc) {\n        let i = this.index.get(Sumc.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, Sumc);\n        } else {\n            this.nodes.set(this.nodes.size, Sumc);\n            this.index.set(Sumc.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The Sumg.\n     */\n    getSumg(): Sumg | undefined {\n        let i = this.index.get(Sumg.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Sumg;\n        }\n    }\n\n    /**\n     * Set the Sumg.\n     * @param Sumg The Sumg.\n     */\n    setSumg(Sumg: Sumg) {\n        let i = this.index.get(Sumg.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, Sumg);\n        } else {\n            this.nodes.set(this.nodes.size, Sumg);\n            this.index.set(Sumg.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The density of states as a string array.\n     */\n    toStringArray(): string[] {\n        return [this.getT()!.value.toString(), this.getQtot()!.value.toString(),\n        this.getSumc()!.value.toString(), this.getSumg()!.value.toString()];\n    }\n}\n\n\n/**\n * In the XML, a \"me:densityOfStatesList\" node is a child node of a \"molecule\" node.\n * It is expected to contain the following child nodes:\n * me:description\n * one or more \"me:densityOfStates\".\n * The attributes may include:\n * \"calculated\" which appears to be a date and time of calculation e.g. 20240311_090547.\n */\nexport class DensityOfStatesList extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:densityOfStatesList\";\n\n    /**\n     * The index.\n     * The keys are the tag names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The dosIndex.\n     * The keys are the densityOfStates indexes and the values are the node indexes.\n     */\n    dosIndex: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param description The description.\n     * @param densityOfStates The densityOfStates.\n     */\n    constructor(attributes: Map<string, string>, description?: Description, densityOfStates?: DensityOfStates[]) {\n        super(attributes, DensityOfStatesList.tagName);\n        this.index = new Map();\n        this.dosIndex = new Map();\n        if (description) {\n            this.nodes.set(this.nodes.size, description);\n            this.index.set(Description.tagName, this.nodes.size - 1);\n        }\n        if (densityOfStates) {\n            let i: number = 0;\n            densityOfStates.forEach(dos => {\n                this.dosIndex.set(i, this.nodes.size);\n                this.nodes.set(this.nodes.size, dos);\n                i++;\n            });\n        }\n    }\n\n    /**\n     * @returns The description.\n     */\n    getDescription(): Description | undefined {\n        let i = this.index.get(Description.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Description;\n        }\n    }\n\n    /**\n     * Set the description.\n     * @param description The description.\n     */\n    setDescription(description: Description) {\n        let i = this.index.get(Description.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, description);\n        } else {\n            this.nodes.set(this.nodes.size, description);\n            this.index.set(Description.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The density of states at the given index.\n     */\n    getDensityOfStates(i: number): DensityOfStates | undefined {\n        let j = this.dosIndex.get(i);\n        if (j != undefined) {\n            return this.nodes.get(j) as DensityOfStates;\n        }\n    }\n\n    /**\n     * Set the density of states at the given index.\n     * @param i The index.\n     * @param dos The density of states.\n     */\n    setDensityOfStates(i: number, dos: DensityOfStates) {\n        let j = this.dosIndex.get(i);\n        if (j != undefined) {\n            this.nodes.set(j, dos);\n        } else {\n            this.nodes.set(this.nodes.size, dos);\n            this.dosIndex.set(i, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * Add the density of states.\n     * @param dos The density of states.\n     * @returns The index of the density of states added.\n     */\n    addDensityOfStates(dos: DensityOfStates): number {\n        this.nodes.set(this.nodes.size, dos);\n        let i = this.nodes.size - 1;\n        this.dosIndex.set(i, this.nodes.size - 1);\n        return i;\n    }\n\n    /**\n     * Remove the density of states at the given index.\n     * @param i The index.\n     */\n    removeDensityOfStates(i: number) {\n        let j = this.dosIndex.get(i);\n        if (j != undefined) {\n            this.nodes.delete(j);\n        }\n    }\n\n    /**\n     * @returns The density of states list as a CSV string.\n     */\n    toCSV(): string {\n        let csv: string = \"\";\n        let header: string[] = DensityOfStates.header;\n        csv += header.join(\",\") + \"\\n\";\n        this.nodes.forEach((dos) => {\n            csv += (dos as DensityOfStates).toStringArray().join(\",\") + \"\\n\";\n        });\n        return csv;\n    }\n\n}\n\n\n/**\n * The attributes may include \"description\" and \"active\" (and possibly others).\n * In the XML, a \"molecule\" node is a child node of a \"moleculeList\" node.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The key for the id attribute value.\n     */\n    static readonly s_id = \"id\";\n\n    /**\n     * The key for the description attribute value.\n     */\n    static readonly s_description = \"description\";\n\n    /**\n     * The key for the active attribute value.\n     */\n    static readonly s_active = \"active\";\n\n    /**\n     * The index. The keys are the tag names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * An index for Extra DOSCMethods. Key are index of the extraDOSCMethod in the array. The value is the index of the node.\n     */\n    edmindex: Map<number, number>;\n\n    /**\n     * This is the molecule ID which is to be unique. It may have the same value as the attribute id.\n     */\n    id: string;\n\n    /**\n     * This is either just the attribute id, or a composite of the attribute id and the molecule id.\n     */\n    //label: string;\n\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. This will also include an \"id\".\n     * Additional attributes may include: \"description\" and \"active\" (and possibly others), but these do not exist for all molecules.\n     * @param id The molecule ID which is to be unique.\n     * @param metadataList The metadata list.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethods The extra DOSC methods for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     * @param tt The thermo table.\n     */\n    constructor(attributes: Map<string, string>, id: string, metadataList?: MetadataList, atoms?: AtomArray,\n        bonds?: BondArray, properties?: PropertyList, energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod, distributionCalcMethod?: DistributionCalcMethod, extraDOSCMethods?: ExtraDOSCMethod[],\n        reservoirSize?: ReservoirSize, tt?: ThermoTable) {\n        super(attributes, Molecule.tagName);\n        //this.label = this.getID();\n        this.index = new Map();\n        this.edmindex = new Map();\n        this.id = id;\n        let i: number = 0;\n        // MetadataList\n        if (metadataList) {\n            this.nodes.set(i, metadataList);\n            this.index.set(MetadataList.tagName, i);\n            i++;\n        }\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            this.index.set(AtomArray.tagName, i);\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set(BondArray.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set(PropertyList.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set(EnergyTransferModel.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set(DOSCMethod.tagName, i);\n            i++;\n        }\n        // DistributionCalcMethod\n        if (distributionCalcMethod) {\n            this.nodes.set(i, distributionCalcMethod);\n            this.index.set(DistributionCalcMethod.tagName, i);\n            i++;\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethods) {\n            extraDOSCMethods.forEach((edm) => {\n                this.nodes.set(i, edm);\n                this.edmindex.set(i, i);\n                i++;\n            });\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set(ReservoirSize.tagName, i);\n            i++;\n        }\n        if (tt) {\n            this.nodes.set(i, tt);\n            this.index.set(ThermoTable.tagName, i);\n        }\n    }\n\n    /**\n     * @returns The id of the molecule.\n     */\n    getLabel(): string {\n        //return this.getID() + \" \" + this.id.toString();\n        return this.getID();\n    }\n\n\n    /**\n     * @returns The id of the molecule.\n     */\n    getID(): string {\n        return this.attributes.get(Molecule.s_id) as string;\n    }\n\n    /**\n     * @param id The id of the molecule.\n     */\n    setID(id: string): void {\n        this.attributes.set(Molecule.s_id, id);\n    }\n\n    /**\n     * Get the description or the id of the molecule.\n     * @returns The description of the molecule, or the id if it is not set.\n     */\n    getDescription(): string {\n        let description: string | undefined = this.attributes.get(Molecule.s_description);\n        if (description != undefined) {\n            return description;\n        }\n        return this.getID();\n    }\n\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */\n    setDescription(description: string): void {\n        this.attributes.set(Molecule.s_description, description);\n    }\n\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(Molecule.s_active);\n        if (active != undefined) {\n            if (active == \"true\") {\n                return true;\n            } else {\n                return false;\n            }\n        }\n    }\n\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */\n    setActive(active: boolean): void {\n        this.attributes.set(Molecule.s_active, active.toString());\n    }\n\n    /**\n     * @returns The metadata list of the molecule.\n     */\n    getMetadataList(): MetadataList | undefined {\n        let i: number | undefined = this.index.get(MetadataList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MetadataList;\n        }\n    }\n\n    /**\n     * Set the metadata list.\n     * @param metadataList The metadata list.\n     */\n    setMetadataList(metadataList: MetadataList) {\n        let i: number | undefined = this.index.get(MetadataList.tagName);\n        if (i == undefined) {\n            this.index.set(MetadataList.tagName, this.nodes.size);\n            this.addNode(metadataList);\n        } else {\n            this.nodes.set(i, metadataList);\n        }\n    }\n\n    /**\n     * @returns The properties of the molecule.\n     */\n    getPropertyList(): PropertyList | undefined {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PropertyList;\n        }\n    }\n\n    /**\n     * @param properties The properties.\n     */\n    setPropertyList(properties: PropertyList) {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            this.index.set(PropertyList.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else {\n            this.nodes.set(i, properties);\n        }\n    }\n\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let pl: PropertyList | undefined = this.getPropertyList();\n        if (pl != undefined) {\n            return pl.getProperty(dictRef);\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param p The property.\n     *\n    setProperty(p: Property): void {\n        console.log(\"setProperty \" + p.toString() + \" in Molecule.\");\n        this.getPropertyList()!.setProperty(p);\n    }*/\n\n    /**\n     * @param atomId The id of the atom.\n     * @returns The atom for the given atomId.\n     */\n    getAtom(atomId: string): Atom | undefined {\n        return this.getAtoms().getAtom(atomId);\n    }\n\n    /**\n     * @returns The atoms of the molecule.\n     */\n    getAtoms(): AtomArray {\n        let i: number = this.index.get(AtomArray.tagName) as number;\n        return this.nodes.get(i) as AtomArray;\n    }\n\n    /**\n     * @param atoms The atoms.\n     */\n    setAtoms(atoms: AtomArray) {\n        this.index.set(AtomArray.tagName, this.nodes.size);\n        this.nodes.set(this.nodes.size, atoms);\n    }\n\n    /**\n     * @param bondId The id of the bond.\n     * @returns The bond for the given bondId.\n     */\n    getBond(bondId: string): Bond | undefined {\n        return this.getBonds().getBond(bondId);\n    }\n\n    /**\n     * @returns The bonds of the molecule.\n     */\n    getBonds(): BondArray {\n        let i: number = this.index.get(BondArray.tagName) as number;\n        return this.nodes.get(i) as BondArray;\n    }\n\n    /**\n     * @param bonds The bonds.\n     */\n    setBonds(bonds: BondArray) {\n        this.index.set(BondArray.tagName, this.nodes.size);\n        this.nodes.set(this.nodes.size, bonds);\n    }\n\n    /**\n     * @returns The energy transfer model of the molecule.\n     */\n    getEnergyTransferModel(): EnergyTransferModel | undefined {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as EnergyTransferModel;\n        }\n    }\n\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */\n    setEnergyTransferModel(energyTransferModel: EnergyTransferModel) {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            this.index.set(EnergyTransferModel.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else {\n            this.nodes.set(i, energyTransferModel);\n        }\n    }\n\n    /**\n     * @returns The DOSC method of the molecule.\n     */\n    getDOSCMethod(): DOSCMethod | undefined {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DOSCMethod;\n        }\n    }\n\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */\n    setDOSCMethod(dOSCMethod: DOSCMethod) {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(DOSCMethod.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else {\n            this.nodes.set(i, dOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The distribution calculation method of the molecule.\n     */\n    getDistributionCalcMethod(): DistributionCalcMethod | undefined {\n        let i: number | undefined = this.index.get(DistributionCalcMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DistributionCalcMethod;\n        }\n    }\n\n    /**\n     * Set the distribution calculation method.\n     * @param distributionCalcMethod The distribution calculation method.\n     */\n    setDistributionCalcMethod(distributionCalcMethod: DistributionCalcMethod) {\n        let i: number | undefined = this.index.get(DistributionCalcMethod.tagName);\n        if (i == undefined) {\n            this.index.set(DistributionCalcMethod.tagName, this.nodes.size);\n            this.addNode(distributionCalcMethod);\n        } else {\n            this.nodes.set(i, distributionCalcMethod);\n        }\n    }\n\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */\n    getExtraDOSCMethod(index: number): ExtraDOSCMethod | undefined {\n        let i: number | undefined = this.edmindex.get(index);\n        if (i != undefined) {\n            return this.nodes.get(i) as ExtraDOSCMethod;\n        }\n    }\n\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */\n    setExtraDOSCMethod(index: number, extraDOSCMethod: ExtraDOSCMethod) {\n        let i: number | undefined = this.edmindex.get(index);\n        if (i == undefined) {\n            this.edmindex.set(index, this.nodes.size);\n            this.nodes.set(this.nodes.size, extraDOSCMethod);\n        } else {\n            this.nodes.set(i, extraDOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The reservoir size of the molecule.\n     */\n    getReservoirSize(): ReservoirSize | undefined {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ReservoirSize;\n        }\n    }\n\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */\n    setReservoirSize(reservoirSize: ReservoirSize) {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            this.index.set(ReservoirSize.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else {\n            this.nodes.set(i, reservoirSize);\n        }\n    }\n\n    /**\n     * @returns The density of states list of the molecule.\n     */\n    getDensityOfStatesList(): DensityOfStatesList | undefined {\n        let i: number | undefined = this.index.get(DensityOfStatesList.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DensityOfStatesList;\n        }\n    }\n\n    /**\n     * Set the density of states list.\n     * @param densityOfStatesList The density of states list.\n     */\n    setDensityOfStatesList(densityOfStatesList: DensityOfStatesList) {\n        let i: number | undefined = this.index.get(DensityOfStatesList.tagName);\n        if (i == undefined) {\n            this.index.set(DensityOfStatesList.tagName, this.nodes.size);\n            this.addNode(densityOfStatesList);\n        } else {\n            this.nodes.set(i, densityOfStatesList);\n        }\n    }\n\n    /**\n     * @returns The thermo table of the molecule.\n     */\n    getThermoTable(): ThermoTable | undefined {\n        let i: number | undefined = this.index.get(ThermoTable.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ThermoTable;\n        }\n    }\n\n    /**\n     * Set the thermo table.\n     * @param tt The thermo table.\n     */\n    setThermoTable(tt: ThermoTable) {\n        let i: number | undefined = this.index.get(ThermoTable.tagName);\n        if (i == undefined) {\n            this.index.set(ThermoTable.tagName, this.nodes.size);\n            this.addNode(tt);\n        } else {\n            this.nodes.set(i, tt);\n        }\n    }\n\n    /**\n     * Get the ZPE value of the molecule.\n     */\n    getEnergy(): Big {\n        let p: Property | undefined;\n        p = this.getProperty(ZPE.dictRef);\n        if (p == undefined) {\n            p = this.getProperty(Hf0.dictRef);\n            if (p == undefined) {\n                p = this.getProperty(HfAT0.dictRef);\n                if (p == undefined) {\n                    p = this.getProperty(Hf298.dictRef);\n                    if (p == undefined) {\n                        return Big(0);\n                    }\n                }\n            }\n        }\n        return (p.getProperty() as PropertyScalarNumber).value;\n    }\n}","import { Big } from \"big.js\";\nimport { NumberNode } from \"./xml\";\n\n/**\n * An abstract class for a range.\n * The attributes may include:\n * \"units\"\n * \"lower\"\n * \"upper\"\n * \"stepsize\"\n */\nexport abstract class RangeNode extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string;\n\n    /**\n     * The key for the units attribute.\n     */\n    static readonly s_units: string = \"units\";\n\n    /**\n     * The key for the lower attribute.\n     */\n    static readonly s_lower: string = \"lower\";\n\n    /**\n     * The key for the upper attribute.\n     */\n    static readonly s_upper: string = \"upper\";\n\n    /**\n     * The key for the stepsize attribute.\n     */\n    static readonly s_stepsize: string = \"stepsize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: Big) {\n        super(attributes, tagName, value);\n    }\n\n    /**\n     * @param value The value of the Range.\n     */\n    setValue(value: Big): void {\n        this.value = value;\n    }\n\n    /**\n     * @returns The units of the Range.\n     */\n    getUnits(): string | undefined {\n        return this.attributes.get(RangeNode.s_units);\n    }\n\n    /**\n     * @param units The units of the Range.\n     */\n    setUnits(units: string): void {\n        this.attributes.set(RangeNode.s_units, units);\n    }\n\n    /**\n     * Remove the units attribute.\n     */\n    removeUnits(): void {\n        this.attributes.delete(RangeNode.s_units);\n    }\n\n    /**\n     * @returns The lower of the Range.\n     */\n    getLower(): Big | undefined {\n        let lower: string | undefined = this.attributes.get(RangeNode.s_lower);\n        if (lower != undefined) {\n            return new Big(lower);\n        }\n    }\n\n    /**\n     * @param lower The lower of the Range.\n     */\n    setLower(lower: Big): void {\n        this.attributes.set(RangeNode.s_lower, lower.toString());\n    }\n\n    /**\n     * Remove the lower attribute.\n     */\n    removeLower(): void {\n        this.attributes.delete(RangeNode.s_lower);\n    }\n\n    /**\n     * @returns The upper of the Range.\n     */\n    getUpper(): Big | undefined {\n        let upper: string | undefined = this.attributes.get(RangeNode.s_upper);\n        if (upper != undefined) {\n            return new Big(upper);\n        }\n    }\n\n    /**\n     * @param upper The upper of the Range.\n     */\n    setUpper(upper: Big): void {\n        this.attributes.set(RangeNode.s_upper, upper.toString());\n    }\n\n    /**\n     * Remove the upper attribute.\n     */\n    removeUpper(): void {\n        this.attributes.delete(RangeNode.s_upper);\n    }\n\n    /**\n     * @returns The stepsize of the Range.\n     */\n    getStepsize(): Big | undefined {\n        let stepsize: string | undefined = this.attributes.get(RangeNode.s_stepsize);\n        if (stepsize != undefined) {\n            return new Big(stepsize);\n        }\n    }\n\n    /**\n     * @param stepsize The stepsize of the Range.\n     */\n    setStepsize(stepsize: Big): void {\n        this.attributes.set(RangeNode.s_stepsize, stepsize.toString());\n    }\n\n    /**\n     * Remove the stepsize attribute.\n     */\n    removeStepsize(): void {\n        this.attributes.delete(RangeNode.s_stepsize);\n    }\n}","import Big from 'big.js';\nimport {\n    s_Add_sy_add, addMolecule, addRID, level1, s_container, boundary1, addOptionByClassName, s_description, mesmer,\n    s_save, remove, getMolecule, getMoleculeKeys, libmols, removeOptionByClassName, addOrRemoveInstructions,\n    s_selectOption, selectAnotherOptionEventListener, sy_edit, sy_deselected, sy_selected, s_input, s_optionOff,\n    s_optionOn, processNumber, addRemoveButton, s_table, addSaveAsCSVButton, s_undefined, addAnyUnits,\n    s_Add_from_library, IDManager, s_viewer, big0, redrawReactionsDiagram, getN, processString, s_textarea, setNumberNode\n} from './app.js';\nimport { BathGas } from './xml_conditions.js';\nimport {\n    createLabelWithInput, getCollapsibleDiv, resizeInputElement, createSelectElement, resizeSelectElement,\n    createFlexDiv, createButton, createLabel, createInput, createLabelWithSelect, createDiv,\n    createLabelWithTextArea, resizeTextAreaElement, s_button, sy_upTriangle, sy_downTriangle, createTextArea,\n    createTable, addTableRow, s_select\n} from './html.js';\nimport { Description, Mesmer, MoleculeList, T } from './xml_mesmer.js';\nimport { MetadataList, Metadata } from './xml_metadata.js';\nimport {\n    Atom, AtomArray, Bond, BondArray, BondRef, DOSCMethod, DeltaEDown, DensityOfStates, DensityOfStatesList,\n    DistributionCalcMethod, EinsteinAij, EinsteinBij, ElectronicExcitation, EnergyTransferModel, Epsilon, ExtraDOSCMethod,\n    FrequenciesScaleFactor, Hessian, Hf0, Hf298, HfAT0, HinderedRotorPotential, MW, Molecule, Periodicity,\n    PotentialPoint, Property, PropertyArray, PropertyList, PropertyMatrix, PropertyScalarNumber, PropertyScalarString,\n    Qtot, ReservoirSize, RotConsts, Sigma, SpinMultiplicity, Sumc, Sumg, SymmetryNumber, TSOpticalSymmetryNumber,\n    ThermoTable, ThermoValue, VibFreqs, ZPE\n} from './xml_molecule.js';\nimport { arrayToString, bigArrayToString, getID, isNumeric, mapToString, toNumberArray } from './util.js';\nimport { getSingularElement, getAttributes, getNodeValue, getFirstChildNode, getInputString, NumberArrayNode, NumberNode } from './xml.js';\n\n/**\n * Create an add molecule button.\n * @param mlDiv The MoleculeList HTMLDivElement.\n * @param mIDM The IDManager for molecule divs.\n * @param molecules The molecules map.\n * @returns The add molecule button.\n */\nexport function getAddMoleculeButton(mlDiv: HTMLDivElement, mIDM: IDManager,\n    molecules: Map<string, Molecule>): HTMLButtonElement {\n    let addMoleculeButton: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    mlDiv.appendChild(addMoleculeButton);\n    addMoleculeButton.addEventListener('click', () => {\n        let mid: string = setMoleculeID(true, undefined, undefined, molecules);\n        console.log(\"mid=\" + mid);\n        let m: Molecule = new Molecule(new Map(), mid);\n        m.setID(mid);\n        molecules.set(mid, m);\n        //m.label = mid;\n        //addMolecule(m, molecules);\n        m.setAtoms(new AtomArray(new Map()));\n        m.setBonds(new BondArray(new Map()));\n        let mDivID: string = mIDM.addID(Molecule.tagName, mid);\n        let mDiv: HTMLDivElement = createDiv(mDivID);\n        // Create collapsible Molecule HTMLDivElement.\n        let mcDivID = mIDM.addID(mDivID, s_container);\n        let mcDiv: HTMLDivElement = getCollapsibleDiv(mcDivID, mlDiv, addMoleculeButton, mDiv, mid, boundary1, level1);\n        // Add the molecule to the BathGas select elements.\n        addOptionByClassName(BathGas.tagName, mid);\n        // Add Edit ID button.\n        addEditIDButton(m, molecules, mcDiv.querySelector(s_button) as HTMLButtonElement, mIDM, mDiv, level1);\n        // Add description.\n        mDiv.appendChild(processDescription(mIDM.addID(mDivID, s_description), mIDM, m.getDescription.bind(m),\n            m.setDescription.bind(m), boundary1, level1));\n        // Add atomArray.\n        let aaDivID: string = mIDM.addID(mDivID, AtomArray.tagName);\n        let aaDiv: HTMLDivElement = createDiv(aaDivID);\n        let aacDivID = mIDM.addID(aaDivID, s_container);\n        let aacDiv: HTMLDivElement = getCollapsibleDiv(aacDivID, mDiv, null, aaDiv, AtomArray.tagName, boundary1, level1);\n        aaDiv.appendChild(getAddAtomButton(mIDM, m, aaDiv, Atom.tagName, boundary1, level1));\n        // Add bondArray.\n        let baDivID: string = mIDM.addID(mDivID, BondArray.tagName);\n        let baDiv: HTMLDivElement = createDiv(baDivID);\n        let bacDivID = mIDM.addID(baDivID, s_container);\n        let bacDiv: HTMLDivElement = getCollapsibleDiv(bacDivID, mDiv, null, baDiv, BondArray.tagName, boundary1, level1);\n        baDiv.appendChild(getAddBondButton(mIDM, m, baDiv, Bond.tagName, boundary1, level1));\n        create3DViewer(mIDM, m, mDiv, boundary1, level1);\n        // Add properties.\n        let plDivID: string = mIDM.addID(mDivID, PropertyList.tagName);\n        let plDiv: HTMLDivElement = createDiv(plDivID);\n        let plcDivID = mIDM.addID(plDivID, s_container);\n        let plcDiv: HTMLDivElement = getCollapsibleDiv(plcDivID, mDiv, null, plDiv, PropertyList.tagName, boundary1, level1);\n        let pl: PropertyList | undefined = m.getPropertyList();\n        if (pl == undefined) {\n            console.log(\"PropertyList is undefined for molecule \" + m.getLabel());\n            pl = new PropertyList(new Map());\n            m.setPropertyList(pl);\n        }\n        console.log(\"pl.index.size\" + pl.index.size);\n        initialiseProperties(true, m, mIDM, plDiv, pl);\n\n        // Add me:EnergyTransferModel.\n        let etmDivID: string = mIDM.addID(mDivID, EnergyTransferModel.tagName);\n        let etmDiv: HTMLDivElement = createDiv(etmDivID);\n        let etmcDivID = mIDM.addID(etmDivID, s_container);\n        let etmcDiv: HTMLDivElement = getCollapsibleDiv(etmcDivID, mDiv, null, etmDiv, EnergyTransferModel.tagName, boundary1, level1);\n        let etm: EnergyTransferModel | undefined = m.getEnergyTransferModel();\n        if (etm == undefined) {\n            etm = new EnergyTransferModel(new Map());\n            m.setEnergyTransferModel(etm);\n        }\n        console.log(\"etm.index.size\" + etm.nodes.size);\n        // Add an add me.deltaEDown button.\n        let addDeltaEDownButton: HTMLButtonElement = createButton(s_Add_sy_add, getID(etmDivID, DeltaEDown.tagName, s_Add_sy_add, s_button), level1);\n        etmDiv.appendChild(addDeltaEDownButton);\n        addDeltaEDownButton.addEventListener('click', () => {\n            let value: Big = big0;\n            let ded: DeltaEDown = new DeltaEDown(new Map(), value);\n            let index = etm!.addDeltaEDown(ded);\n            let dedDivID: string = mIDM.addID(etmDivID, DeltaEDown.tagName, etm!.nodes.size);\n            let dedDiv: HTMLDivElement = createFlexDiv(dedDivID);\n            etmDiv.insertBefore(dedDiv, addDeltaEDownButton);\n            let lwi: HTMLDivElement = createLabelWithInput(DeltaEDown.tagName, dedDivID, boundary1, level1, (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                // Check the input is a number.\n                if (isNumeric(target.value)) {\n                    value = new Big(target.value);\n                    ded.setValue(value);\n                } else {\n                    // Reset.\n                    alert(\"Input is not a number, resetting...\");\n                    target.value = ded.value.toString() ?? s_undefined;\n                }\n                resizeInputElement(target);\n            }, ded.value.toString(), DeltaEDown.tagName);\n            dedDiv.appendChild(lwi);\n            // Add a remove me.deltaEDown button.\n            addRemoveButton(dedDiv, boundary1, () => {\n                etm!.removeDeltaEDown(index);\n                etmDiv.removeChild(dedDiv);\n            });\n        });\n\n        /*\n        // Add me:DOSCMethod.\n        let doscm: DOSCMethod | undefined = m.getDOSCMethod();\n        if (doscm == undefined) {\n            doscm = new DOSCMethod(new Map());\n            m.setDOSCMethod(doscm);\n        }\n        mDiv.appendChild(\n            createLabelWithSelect(DOSCMethod.tagName, DOSCMethod.xsi_typeOptions, DOSCMethod.tagName,\n                doscm.getXsiType(), mIDM.addID(mDivID, DOSCMethod.tagName), boundary1, level1));\n        */\n\n        /*\n        addDOSCMethod(m, mIDM, plDiv, pl);\n        // Add me:ExtraDOSCMethod\n        addExtraDOSCMethod(m, mIDM, plDiv, pl);\n        // Add me:Periodicity\n        addPeriodicity(m, mIDM, plDiv, pl);\n        // Add me:PotentialPoint\n        addPotentialPoint(m, mIDM, plDiv, pl);\n        // Add me:ReservoirSize\n        addReservoirSize(m, mIDM, plDiv, pl);\n        */\n        // Add a remove molecule button.\n        addRemoveButton(mDiv, level1, () => {\n            removeMolecule(mlDiv, mcDiv, mIDM, molecules, mDivID, m);\n        });\n    });\n    return addMoleculeButton;\n}\n\n/**\n * Initialises the properties for a molecule.\n * @param deslect If true the button is clicked and the property removed.\n * @param m The molecule.\n * @param plDiv The PropertyList HTMLDivElement.\n * @param pl The PropertyList.\n */\nexport function initialiseProperties(deselect: boolean, m: Molecule, mIDM: IDManager, plDiv: HTMLDivElement, pl: PropertyList): void {\n    // \"me:ZPE\", scalar, Mesmer.energyUnits.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, ZPE.dictRef, Mesmer.energyUnits);\n    //console.log(\"pl.index.size\" + pl.index.size);\n    //console.log(\"Property \" + m.getPropertyList()!.getProperty(ZPE.dictRef)?.toString);\n    // \"me:Hf0\", scalar, Mesmer.energyUnits.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, Hf0.dictRef, Mesmer.energyUnits);\n    // \"me:HfAT0\", scalar, Mesmer.energyUnits.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, HfAT0.dictRef, Mesmer.energyUnits);\n    // \"me:Hf298\", scalar, Mesmer.energyUnits.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, Hf298.dictRef, Mesmer.energyUnits);\n    // \"me:rotConsts\", array, Mesmer.frequencyUnits.\n    addPropertyArray(deselect, false, m, mIDM, plDiv, pl, RotConsts.dictRef, Mesmer.frequencyUnits);\n    // \"me:symmetryNumber\", scalar, No units.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, SymmetryNumber.dictRef, undefined);\n    // \"me:TSOpticalSymmetryNumber\", scalar, No units.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, TSOpticalSymmetryNumber.dictRef, undefined);\n    // \"me:frequenciesScaleFactor\", scalar, No units.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, FrequenciesScaleFactor.dictRef, undefined);\n    // \"me:vibFreqs\", array, cm-1.\n    addPropertyArray(deselect, false, m, mIDM, plDiv, pl, VibFreqs.dictRef, Mesmer.frequencyUnits);\n    // \"me:MW\", scalar, amu.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, MW.dictRef, Mesmer.massUnits);\n    // \"me:spinMultiplicity\", scalar, No units.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, SpinMultiplicity.dictRef, undefined);\n    // \"me:epsilon\", scalar, K (fixed).\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, Epsilon.dictRef, Mesmer.temperatureUnits);\n    // \"me:sigma\", scalar, Å (fixed).\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, Sigma.dictRef, Mesmer.lengthUnits);\n    // \"me:hessian\", matrix, kJ/mol/Å2 or kcal/mol/Å2 or Hartree/Å2.\n    addPropertyMatrix(deselect, false, m, mIDM, plDiv, pl, Hessian.dictRef, Mesmer.hessianUnits);\n    // \"me:EinsteinAij\", array, s-1 (fixed).\n    addPropertyArray(deselect, false, m, mIDM, plDiv, pl, EinsteinAij.dictRef, Mesmer.EinsteinAUnits);\n    // \"me:EinsteinBij\", array, m3/J/s2 (fixed).\n    addPropertyArray(deselect, false, m, mIDM, plDiv, pl, EinsteinBij.dictRef, Mesmer.EinsteinBUnits);\n    // \"me:electronicExcitation\">, scalar, cm-1.\n    addPropertyScalar(deselect, m, mIDM, plDiv, pl, ElectronicExcitation.dictRef, Mesmer.frequencyUnits);\n}\n\n/**\n * @param deselect If true the button is clicked and the propert removed.\n * @param m The molecule.\n * @param mIDM The molecule IDManager.\n * @param plDiv The PropertyList HTMLDivElement.\n * @param pl The PropertyList.\n * @param dictRef The dictRef.\n * @param units The units. \n */\nfunction addPropertyScalar(deselect: boolean, m: Molecule, mIDM: IDManager, plDiv: HTMLDivElement, pl: PropertyList,\n    dictRef: string, units: string[] | undefined): HTMLDivElement {\n    let pAttributes: Map<string, string>;\n    let psAttributes: Map<string, string>;\n    let ps: PropertyScalarNumber;\n    let p: Property;\n    let div: HTMLDivElement;\n    pAttributes = new Map();\n    pAttributes.set(Property.s_dictRef, dictRef);\n    psAttributes = new Map();\n    if (units != undefined) {\n        psAttributes.set(PropertyScalarNumber.s_units, units[0]);\n    }\n    ps = new PropertyScalarNumber(psAttributes, big0);\n    p = new Property(pAttributes, ps);\n    m.getPropertyList()!.setProperty(p);\n    console.log(\"pl.index.size\" + pl.index.size);\n    div = processNumber(plDiv.id, mIDM, dictRef, ps.getValue.bind(ps),\n        (value: Big) => setPropertyScalarNumber(dictRef, pl, ps, value),\n        () => pl!.removeProperty(p.dictRef), boundary1, level1);\n    addAnyUnits(units, psAttributes, div, div.querySelector(s_input) as HTMLElement,\n        addRID(plDiv.id, dictRef, PropertyScalarNumber.s_units), dictRef, boundary1, boundary1);\n    plDiv.appendChild(div);\n    // Deselect\n    if (deselect) {\n        let b: HTMLButtonElement = div.querySelector(s_button)!;\n        b!.click();\n        pl.removeProperty(dictRef);\n    }\n    return div;\n}\n\n/**\n * \n * @param p The property.\n * @param ps The property scalar number.\n */\nexport function setPropertyScalarNumber(dictRef: string, pl: PropertyList, ps: PropertyScalarNumber, value: Big): void {\n    if (pl.getProperty(dictRef) == undefined) {\n        let pAttributes: Map<string, string>;\n        let p: Property;\n        pAttributes = new Map();\n        pAttributes.set(Property.s_dictRef, dictRef);\n        p = new Property(pAttributes, ps);\n        pl.setProperty(p);\n        console.log(\"Set property \" + dictRef);\n    } else {\n        console.log(\"Property \" + dictRef + \" already exists.\");\n    }\n    //console.log(\"Value \" + ps.getValue());\n    ps.setValue.bind(ps)(value);\n    //console.log(\"Value \" + ps.getValue());\n}\n\n/**\n * @param deselect If true the button is clicked and the propert removed.\n * @param m The molecule.\n * @param mIDM The molecule IDManager.\n * @param plDiv The PropertyList HTMLDivElement.\n * @param pl The PropertyList.\n * @param dictRef The dictRef.\n * @param units The units. \n */\nfunction addPropertyArray(deselect: boolean, setSize: boolean, m: Molecule, mIDM: IDManager, plDiv: HTMLDivElement, pl: PropertyList,\n    dictRef: string, units: string[] | undefined): void {\n    let pAttributes: Map<string, string>;\n    let paAttributes: Map<string, string>;\n    let pa: PropertyArray;\n    let p: Property;\n    let div: HTMLDivElement;\n    pAttributes = new Map();\n    pAttributes.set(Property.s_dictRef, dictRef);\n    paAttributes = new Map();\n    if (units != undefined) {\n        paAttributes.set(PropertyScalarNumber.s_units, units[0]);\n    }\n    // Init values.\n    let values: Big[] = [];\n    if (setSize) {\n        setValues(dictRef, values);\n    }\n    pa = new PropertyArray(paAttributes, values);\n    p = new Property(pAttributes, pa);\n    m.getPropertyList()!.setProperty(p);\n    console.log(\"pl.index.size\" + pl.index.size);\n    div = processNumberArrayOrMatrix(plDiv, mIDM, dictRef, pa, pa.getValues.bind(pa),\n        (values: Big[]) => setPropertyArrayOrMatrix(dictRef, pl, pa, values),\n        () => pl!.removeProperty(p.dictRef), boundary1, level1);\n    addAnyUnits(units, paAttributes, div, div.querySelector(s_input) as HTMLElement,\n        addRID(plDiv.id, dictRef, PropertyScalarNumber.s_units), dictRef, boundary1, boundary1);\n    plDiv.appendChild(div);\n    // Deselect\n    if (deselect) {\n        let b: HTMLButtonElement | null = div.querySelector(s_button);\n        b!.click();\n        pl.removeProperty(dictRef);\n    }\n}\n\n/**\n * Asks the user for the size and initialises values. \n * @param dictRef The dictRef.\n * @param values The values to be initialised.\n */\nexport function setValues(dictRef: string, values: Big[]): void {\n    let n: number = getN(\"Please enter the number of elements in the \" + dictRef + \" array\");\n    for (let i = 0; i < n; i++) {\n        values.push(big0);\n    }\n}\n\n/**\n * \n * @param p The property.\n * @param paom The property array.\n */\nexport function setPropertyArrayOrMatrix(dictRef: string, pl: PropertyList, paom: PropertyArray | PropertyMatrix, values: Big[]): void {\n    if (pl.getProperty(dictRef) == undefined) {\n        let pAttributes: Map<string, string>;\n        let p: Property;\n        pAttributes = new Map();\n        pAttributes.set(Property.s_dictRef, dictRef);\n        p = new Property(pAttributes, paom);\n        //setValues(dictRef, values);\n        pl.setProperty(p);\n        console.log(\"Set property \" + dictRef);\n    } else {\n        console.log(\"Property \" + dictRef + \" already exists.\");\n    }\n    console.log(\"Value \" + paom.getValues());\n    paom.setValues.bind(paom)(values);\n    console.log(\"Value \" + paom.getValues());\n}\n\n/**\n * @param deselect If true the button is clicked and the propert removed.\n * @param m The molecule.\n * @param mIDM The molecule IDManager.\n * @param plDiv The PropertyList HTMLDivElement.\n * @param pl The PropertyList.\n * @param dictRef The dictRef.\n * @param units The units. \n */\nfunction addPropertyMatrix(deselect: boolean, setSize: boolean, m: Molecule, mIDM: IDManager, plDiv: HTMLDivElement, pl: PropertyList,\n    dictRef: string, units: string[] | undefined): void {\n    let pAttributes: Map<string, string>;\n    let pmAttributes: Map<string, string>;\n    let pm: PropertyMatrix;\n    let p: Property;\n    let div: HTMLDivElement;\n    pAttributes = new Map();\n    pAttributes.set(Property.s_dictRef, dictRef);\n    pmAttributes = new Map();\n    if (units != undefined) {\n        pmAttributes.set(PropertyScalarNumber.s_units, units[0]);\n    }\n    // Init values.\n    let values: Big[] = [];\n    if (setSize) {\n        setValues(dictRef, values);\n    }\n    pm = new PropertyMatrix(pmAttributes, values);\n    p = new Property(pAttributes, pm);\n    m.getPropertyList()!.setProperty(p);\n    console.log(\"pl.index.size\" + pl.index.size);\n    div = processNumberArrayOrMatrix(plDiv, mIDM, dictRef, pm, pm.getValues.bind(pm),\n        (values: Big[]) => setPropertyArrayOrMatrix(dictRef, pl, pm, values),\n        () => pl!.removeProperty(p.dictRef), boundary1, level1);\n    addAnyUnits(units, pmAttributes, div, div.querySelector(s_input) as HTMLElement,\n        addRID(plDiv.id, dictRef, PropertyScalarNumber.s_units), dictRef, boundary1, boundary1);\n    plDiv.appendChild(div);\n    // Deselect\n    if (deselect) {\n        let b: HTMLButtonElement | null = div.querySelector(s_button);\n        b!.click();\n        pl.removeProperty(dictRef);\n    }\n}\n\n/**\n * Create an add from library button.\n * @param mlDiv The MoleculeList HTMLDivElement.\n * @param amb The add molecule button.\n * @param molecules The molecules map.\n * @returns The add from library button.\n */\nexport function getAddFromLibraryButton(mlDiv: HTMLDivElement, amb: HTMLButtonElement, mIDM: IDManager,\n    molecules: Map<string, Molecule>): HTMLButtonElement {\n    let addFromLibraryButton: HTMLButtonElement = createButton(s_Add_from_library, undefined, boundary1);\n    mlDiv.appendChild(addFromLibraryButton);\n    // Add event listener for the button.\n    addFromLibraryButton.addEventListener('click', () => {\n        // Create a select element to select a libraryMolecule.\n        let selectDivID: string = mIDM.addID(Molecule.tagName, \"div\");\n        remove(selectDivID);\n        let selectDiv: HTMLDivElement = createDiv(selectDivID, level1);\n        if (libmols == undefined) {\n            alert(\"There are no additional molecules to add, please load data...\");\n            return;\n        }\n        let options: string[] = Array.from(getMoleculeKeys(libmols));\n        if (options.length == 0) {\n            alert(\"There are no additional molecules to add, please load data...\");\n            return;\n        }\n        console.log(\"options.length=\" + options.length);\n        addOrRemoveInstructions(options, true);\n        let selectID: string = mIDM.addID(selectDivID, s_select);\n        remove(selectID);\n        let select: HTMLSelectElement = createSelectElement(options, \"Select molecule\", s_selectOption,\n            selectID, boundary1);\n        select.classList.add(Molecule.tagName);\n        selectDiv.appendChild(select);\n        mlDiv.insertBefore(selectDiv, amb);\n        selectAnotherOptionEventListener(options, select);\n        select.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            let selectedOption: HTMLOptionElement = target.options[target.selectedIndex];\n            let label: string = selectedOption.value;\n            let molecule: Molecule = libmols.get(label)!;\n            //let molecule: Molecule = getMolecule(label, libmols)!;\n            let mid: string = molecule.getID();\n            mid = setMoleculeID(true, mid, molecule, molecules);\n            molecules.set(mid, molecule);\n            // Add molecule to the MoleculeList.\n            let mDivID: string = mIDM.addID(Molecule.tagName, molecules.size);\n            let moleculeDiv: HTMLDivElement = createDiv(mDivID);\n            // Create collapsible Molecule HTMLDivElement.\n            let mcDivID = mIDM.addID(mDivID, s_container);\n            let mcDiv: HTMLDivElement = getCollapsibleDiv(mcDivID, mlDiv, amb, moleculeDiv,\n                molecule.getLabel(), boundary1, level1);\n            // Add the molecule to the BathGas select elements.\n            addOptionByClassName(BathGas.tagName, molecule.getID());\n            // Add edit Name button.\n            addEditIDButton(molecule, molecules, mcDiv.querySelector(s_button) as HTMLButtonElement, mIDM, moleculeDiv, level1);\n            // Description\n            moleculeDiv.appendChild(processDescription(mIDM.addID(mDivID, s_description), mIDM,\n                molecule.getDescription.bind(molecule), molecule.setDescription.bind(molecule), boundary1, level1));\n            // Create collapsible MetadataList HTMLDivElement.\n            let mlistDivID: string = mIDM.addID(mDivID, MetadataList.tagName);\n            let mlistDiv: HTMLDivElement = createDiv(mlistDivID, level1);\n            //let mlistcDivID = mIDM.addID(mlistDivID, s_container);\n            let mlistcDivID = getID(mlistDivID, s_container);\n            let mlistcDiv: HTMLDivElement = getCollapsibleDiv(mlistcDivID, moleculeDiv, null, mlistDiv, MetadataList.tagName, boundary1, level1);\n            // Add metadata.\n            let metadataList: MetadataList | undefined = molecule.getMetadataList();\n            if (metadataList != undefined) {\n                metadataList.getMetadata().forEach((md) => {\n                    let mdDiv = createDiv();\n                    mlistDiv.appendChild(mdDiv);\n                    mdDiv.appendChild(createLabel(md.getLabelText(), boundary1));\n                });\n            }\n            // Create collapsible AtomArray HTMLDivElement.\n            let aaDivID: string = mIDM.addID(mDivID, AtomArray.tagName);\n            let aaDiv: HTMLDivElement = createDiv(aaDivID);\n            let aacDivID = mIDM.addID(aaDivID, s_container);\n            let aacDiv: HTMLDivElement = getCollapsibleDiv(aacDivID, moleculeDiv, null, aaDiv, AtomArray.tagName, boundary1, level1);\n            // Add atoms.\n            let aa: AtomArray = molecule.getAtoms();\n            if (aa != undefined) {\n                aa.atoms.forEach((a) => {\n                    aaDiv.appendChild(addAtom(false, mIDM, molecule, aaDivID, aa, a, boundary1, level1));\n                });\n            }\n            aaDiv.appendChild(getAddAtomButton(mIDM, molecule, aaDiv, Atom.tagName, boundary1, level1));\n            // Create collapsible BondArray HTMLDivElement.\n            let baDivID: string = mIDM.addID(mDivID, BondArray.tagName);\n            let baDiv: HTMLDivElement = createDiv(baDivID);\n            let bacDivID = mIDM.addID(baDivID, s_container);\n            let bacDiv: HTMLDivElement = getCollapsibleDiv(bacDivID, moleculeDiv, null, baDiv, BondArray.tagName, boundary1, level1);\n            // Add bonds.\n            let ba: BondArray = molecule.getBonds();\n            if (ba != undefined) {\n                ba.bonds.forEach((b: Bond) => {\n                    if (aa == undefined) {\n                        throw new Error(\"Atoms are not defined for molecule \" + molecule.getLabel());\n                    }\n                    baDiv.appendChild(addBond(false, mIDM, molecule, baDivID, aa.atoms, ba, b, boundary1, level1));\n                });\n            }\n            baDiv.appendChild(getAddBondButton(mIDM, molecule, baDiv, Bond.tagName, boundary1, level1));\n            create3DViewer(mIDM, molecule, moleculeDiv, boundary1, level1);\n            // Create collapsible Properties HTMLDivElement.\n            let plDivID: string = mIDM.addID(mDivID, PropertyList.tagName);\n            let plDiv: HTMLDivElement = createDiv(plDivID);\n            let plcDivID = mIDM.addID(plDivID, s_container);\n            let plcDiv: HTMLDivElement = getCollapsibleDiv(plcDivID, moleculeDiv, null, plDiv, PropertyList.tagName, boundary1, level1);\n            let pl: PropertyList = molecule.getPropertyList()!;\n            let properties: Map<string, Property> = pl.getProperties();\n            //console.log(\"properties.size=\" + properties.size);\n            let dictRefs: Set<string> = new Set(properties.keys());\n            //console.log(\"Molecule \" + molecule.getDescription());\n            let pID: string;\n            let deselect: boolean = true;\n            // \"me:ZPE\", scalar, Mesmer.energyUnits.\n            if (!dictRefs.has(ZPE.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, ZPE.dictRef, Mesmer.energyUnits);\n            } else {\n                pID = getID(plDiv.id, ZPE.dictRef);\n                let p: Property = pl.getProperty(ZPE.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:Hf0\", scalar, Mesmer.energyUnits.\n            if (!dictRefs.has(Hf0.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, Hf0.dictRef, Mesmer.energyUnits);\n            } else {\n                pID = getID(plDiv.id, Hf0.dictRef);\n                let p: Property = pl.getProperty(Hf0.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:HfAT0\", scalar, Mesmer.energyUnits.\n            if (!dictRefs.has(HfAT0.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, HfAT0.dictRef, Mesmer.energyUnits);\n            } else {\n                pID = getID(plDiv.id, HfAT0.dictRef);\n                let p: Property = pl.getProperty(HfAT0.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:Hf298\", scalar, Mesmer.energyUnits.\n            if (!dictRefs.has(Hf298.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, Hf298.dictRef, Mesmer.energyUnits);\n            } else {\n                pID = getID(plDiv.id, Hf298.dictRef);\n                let p: Property = pl.getProperty(Hf298.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:rotConsts\", array, Mesmer.frequencyUnits.\n            if (!dictRefs.has(RotConsts.dictRef)) {\n                addPropertyArray(deselect, false, molecule, mIDM, plDiv, pl, RotConsts.dictRef, Mesmer.frequencyUnits);\n            } else {\n                pID = getID(plDiv.id, RotConsts.dictRef);\n                let p: Property = pl.getProperty(RotConsts.dictRef) as Property;\n                let pa: PropertyArray = p.getProperty() as PropertyArray;\n                let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                    (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.frequencyUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:symmetryNumber\", scalar, No units.\n            if (!dictRefs.has(SymmetryNumber.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, SymmetryNumber.dictRef, undefined);\n            } else {\n                pID = getID(plDiv.id, SymmetryNumber.dictRef);\n                let p: Property = pl.getProperty(SymmetryNumber.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                plDiv.appendChild(div);\n            }\n            // \"me:TSOpticalSymmetryNumber\", scalar, No units.\n            if (!dictRefs.has(TSOpticalSymmetryNumber.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, TSOpticalSymmetryNumber.dictRef, undefined);\n            } else {\n                pID = getID(plDiv.id, TSOpticalSymmetryNumber.dictRef);\n                let p: Property = pl.getProperty(TSOpticalSymmetryNumber.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                plDiv.appendChild(div);\n            }\n            // \"me:frequenciesScaleFactor\", scalar, No units.\n            if (!dictRefs.has(FrequenciesScaleFactor.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, FrequenciesScaleFactor.dictRef, undefined);\n            } else {\n                pID = getID(plDiv.id, FrequenciesScaleFactor.dictRef);\n                let p: Property = pl.getProperty(FrequenciesScaleFactor.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                plDiv.appendChild(div);\n            }\n            // \"me:vibFreqs\", array, cm-1.\n            if (!dictRefs.has(VibFreqs.dictRef)) {\n                addPropertyArray(deselect, false, molecule, mIDM, plDiv, pl, VibFreqs.dictRef, Mesmer.frequencyUnits);\n            } else {\n                pID = getID(plDiv.id, VibFreqs.dictRef);\n                let p: Property = pl.getProperty(VibFreqs.dictRef) as Property;\n                let pa: PropertyArray = p.getProperty() as PropertyArray;\n                let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                    (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.frequencyUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:MW\", scalar, amu.\n            if (!dictRefs.has(MW.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, MW.dictRef, Mesmer.massUnits);\n            } else {\n                pID = getID(plDiv.id, MW.dictRef);\n                let p: Property = pl.getProperty(MW.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.massUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:spinMultiplicity\", scalar, No units.\n            if (!dictRefs.has(SpinMultiplicity.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, SpinMultiplicity.dictRef, undefined);\n            } else {\n                pID = getID(plDiv.id, SpinMultiplicity.dictRef);\n                let p: Property = pl.getProperty(SpinMultiplicity.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                plDiv.appendChild(div);\n            }\n            // \"me:epsilon\", scalar, K (fixed).\n            if (!dictRefs.has(Epsilon.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, Epsilon.dictRef, Mesmer.temperatureUnits);\n            } else {\n                pID = getID(plDiv.id, Epsilon.dictRef);\n                let p: Property = pl.getProperty(Epsilon.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                plDiv.appendChild(div);\n            }\n            // \"me:sigma\", scalar, Å (fixed).\n            if (!dictRefs.has(Sigma.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, Sigma.dictRef, Mesmer.lengthUnits);\n            } else {\n                pID = getID(plDiv.id, Sigma.dictRef);\n                let p: Property = pl.getProperty(Sigma.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                plDiv.appendChild(div);\n            }\n            // \"me:hessian\", matrix, kJ/mol/Å2 or kcal/mol/Å2 or Hartree/Å2.\n            if (!dictRefs.has(Hessian.dictRef)) {\n                addPropertyMatrix(deselect, false, molecule, mIDM, plDiv, pl, Hessian.dictRef, Mesmer.hessianUnits);\n            } else {\n                pID = getID(plDiv.id, Hessian.dictRef);\n                let p: Property = pl.getProperty(Hessian.dictRef) as Property;\n                let pm: PropertyMatrix = p.getProperty() as PropertyMatrix;\n                let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv, mIDM, p.dictRef, pm, pm.getValues.bind(pm),\n                    (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pm, values),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.hessianUnits, pm.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:EinsteinAij\", array, s-1 (fixed).\n            if (!dictRefs.has(EinsteinAij.dictRef)) {\n                addPropertyArray(deselect, false, molecule, mIDM, plDiv, pl, EinsteinAij.dictRef, Mesmer.EinsteinAUnits);\n            } else {\n                pID = getID(plDiv.id, EinsteinAij.dictRef);\n                let p: Property = pl.getProperty(EinsteinAij.dictRef) as Property;\n                let pa: PropertyArray = p.getProperty() as PropertyArray;\n                let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                    (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.EinsteinAUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:EinsteinBij\", array, m3/J/s2 (fixed).\n            if (!dictRefs.has(EinsteinBij.dictRef)) {\n                addPropertyArray(deselect, false, molecule, mIDM, plDiv, pl, EinsteinBij.dictRef, Mesmer.EinsteinBUnits);\n            } else {\n                pID = getID(plDiv.id, EinsteinBij.dictRef);\n                let p: Property = pl.getProperty(EinsteinBij.dictRef) as Property;\n                let pa: PropertyArray = p.getProperty() as PropertyArray;\n                let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                    (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.EinsteinBUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            // \"me:ElectronicExcitation\", scalar, cm-1.\n            if (!dictRefs.has(ElectronicExcitation.dictRef)) {\n                addPropertyScalar(deselect, molecule, mIDM, plDiv, pl, ElectronicExcitation.dictRef, Mesmer.frequencyUnits);\n            } else {\n                pID = getID(plDiv.id, ElectronicExcitation.dictRef);\n                let p: Property = pl.getProperty(ElectronicExcitation.dictRef) as Property;\n                let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n                let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                    (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                    () => pl.removeProperty(p.dictRef), boundary1, level1);\n                addAnyUnits(Mesmer.frequencyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                    getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n                plDiv.appendChild(div);\n            }\n            /*\n            // Add me:DOSCMethod.\n            let doscm: DOSCMethod | undefined = molecule.getDOSCMethod();\n            if (doscm == undefined) {\n                doscm = new DOSCMethod(new Map());\n                molecule.setDOSCMethod(doscm);\n            }\n            moleculeDiv.appendChild(\n                createLabelWithSelect(DOSCMethod.tagName, DOSCMethod.xsi_typeOptions, DOSCMethod.tagName,\n                doscm.getXsiType(), mIDM.addID(mDivID, DOSCMethod.tagName), boundary1, level1));\n            */\n            // Remove the select element.\n            selectDiv.remove();\n            // Add a remove molecule button.\n            addRemoveButton(moleculeDiv, level1, () => {\n                removeMolecule(mlDiv, mcDiv, mIDM, molecules, mDivID, molecule);\n            });\n        });\n    });\n    return addFromLibraryButton;\n}\n\n/**\n * For setting the molecule ID.\n * \n * @param ask If true, the user is prompted to enter the molecule ID. If false, the molecule ID is set to the mid parameter \n * which must not be undefined.\n * @param mid The initial molecule ID before checks.\n * @param molecule The molecule to set the ID foradd.\n * @param molecules The molecules map.\n * @returns The molecule ID set.\n */\nexport function setMoleculeID(ask: boolean, mid: string | undefined, molecule: Molecule | undefined,\n    molecules: Map<string, Molecule>): string {\n    let mid2: string | null;\n    while (true) {\n        // Ask the user to specify the molecule ID.\n        if (ask) {\n            mid2 = prompt(\"Please enter a name for the molecule\", mid);\n        } else {\n            mid2 = mid!;\n        }\n        if (mid2 == null) {\n            alert(\"The molecule ID cannot be null.\");\n        } else if (mid2 == \"\") {\n            alert(\"The molecule ID cannot be empty.\");\n        } else if (molecules.has(mid2)) {\n            //if (mid == mid2) {\n            //    if (molecule != undefined) {\n            //        molecule.setID(mid);\n            //        molecules.set(mid, molecule);\n            //    }\n            //    return mid;\n            //} else {\n            alert(\"The molecule ID \" + mid2 + \" is already in use.\");\n            ask = true;\n            //}\n        } else {\n            mid = mid2;\n            if (molecule != undefined) {\n                molecule.setID(mid);\n                molecules.set(mid, molecule);\n            }\n            return mid;\n        }\n    }\n}\n\n/**\n * Adds a button to edit the molecule ID.\n * @param molecule The molecule.\n * @param molecules The molecules map.\n * @param button The button to add the event listener to.\n * @param mDiv \n * @param level \n */\nfunction addEditIDButton(molecule: Molecule, molecules: Map<string, Molecule>, button: HTMLButtonElement,\n    mIDM: IDManager, mDiv: HTMLDivElement,\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let s_editName: string = sy_edit + \" Edit id\";\n    let editNameButtonID: string = mIDM.addID(mDiv.id, s_editName, s_button);\n    let editNameButton: HTMLButtonElement = createButton(s_editName, editNameButtonID, level);\n    mDiv.appendChild(editNameButton);\n    editNameButton.addEventListener('click', () => {\n        let mid: string = molecule.getID();\n        // Update the BathGas select elements.\n        removeOptionByClassName(BathGas.tagName, molecule.getID());\n        molecules.delete(mid);\n        mid = setMoleculeID(true, mid, molecule, molecules);\n        // Update the BathGas select elements.\n        addOptionByClassName(BathGas.tagName, mid);\n        button.textContent = molecule.getLabel() + \" \" + sy_upTriangle;\n    });\n}\n\n/**\n * Process description.\n * @param id The id.\n * @param decription The description.\n * @param getter The getter function to call.\n * @param setter The setter function to call.\n * @param margin The boundary.\n */\nfunction processDescription(id: string, mIDM: IDManager, getter: () => string | undefined, setter: (value: string) => void,\n    marginComponent: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    marginDiv: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let div: HTMLDivElement = createFlexDiv(undefined, marginDiv);\n    let buttonTextContentSelected: string = s_description + sy_selected;\n    let buttonTextContentDeselected: string = s_description + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, mIDM.addID(id, s_button), marginComponent);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let inputId: string = mIDM.addID(id, s_description, s_input)\n    let value: string | undefined = getter();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addDescription(div, inputId, value, setter, marginComponent);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(inputId) == null) {\n            addDescription(div, inputId, value, setter, marginComponent);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove existing.\n            document.getElementById(inputId)?.remove();\n            console.log(\"Removed \" + inputId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n    return div;\n}\n\n/**\n * @param div The div to add the input to.\n * @param id The id.\n * @param value The description value.\n * @param setter The setter function to call.\n * @param boundary The boundary.\n */\nfunction addDescription(div: HTMLDivElement, id: string, value: string | undefined,\n    setter: (value: string) => void,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string;\n    if (value == undefined) {\n        valueString = \"\";\n    } else {\n        valueString = value;\n    }\n    let input: HTMLInputElement = createInput(\"text\", id, boundary);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setter(target.value);\n        console.log(id + \" changed from \" + value + \" to \" + target.value);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    div.appendChild(input);\n}\n\n/**\n * \n * Creates and returns a button for adding a new atom. This will add a new atom div to the atomArrayDiv. The atom div added\n * will have: label (atom id); editable details (elementType, x3, y3, z3); and a remove button. Select elements that allow \n * for selecting atoms are updated so options reflect any added or removed atoms.\n * \n * @param molecule The molecule.\n * @param aaDiv The atom array div.\n * @param typeID The type incorporated into an id.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The add bond button.\n */\nfunction getAddAtomButton(mIDM: IDManager, molecule: Molecule, aaDiv: HTMLDivElement, typeID: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLButtonElement {\n    // Create an add atom button.\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, mIDM.addID(aaDiv.id, \"Add\" + typeID + \"Button\"), level);\n    button.addEventListener('click', () => {\n        let attributes: Map<string, string> = new Map();\n        let a: Atom = new Atom(attributes, molecule);\n        //let aID: string = molecule.getAtoms().addAtom(a);\n        aaDiv.insertBefore(addAtom(true, mIDM, molecule, aaDiv.id, molecule.getAtoms(), a, boundary, level), button);\n    });\n    return button;\n}\n\nfunction addMetadata(m: Molecule, md: Metadata, ml: MetadataList, mdDivID: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    ml.addMetadata(md);\n    let mdDiv = createFlexDiv(mdDivID, level1);\n    mdDiv.appendChild(createLabel(m.getLabel(), boundary1));\n    return mdDiv;\n}\n\n/**\n * Adds an atom.\n * \n * @param molecule The molecule.\n * @param a The atom to add.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns A new div for the atom.\n */\nfunction addAtom(addToArray: boolean, mIDM: IDManager, molecule: Molecule, aaDivID: string, aa: AtomArray, a: Atom,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let aID: string;\n    if (addToArray) {\n        aID = aa.addAtom(a, a.getID());\n    } else {\n        aID = a.getID()!;\n    }\n    //let aDivID: string = mIDM.addID(aaDivID, aID);\n    let aDivID: string = getID(aaDivID, aID);\n    let aDiv: HTMLDivElement = createFlexDiv(aDivID, level);\n    aDiv.appendChild(createLabel(aID, boundary));\n    // elementType.\n    processElementType(mIDM, a, aDiv, true, boundary);\n    // Coordinates.\n    processCoordinates(mIDM, a, aDiv, boundary, boundary);\n    addRemoveButton(aDiv, boundary, removeAtom, molecule, aID, mIDM);\n    // Get elements with Bond.s_atomRefs2 className. These select elements are to be updated to include the new atom option.\n    addOptionByClassName(Bond.s_atomRefs2, aID);\n    return aDiv;\n}\n\n/**\n * Remove an atom from the AtomArray.\n * @param molecule The molecule.\n * @param aID The atom id to remove.\n */\nfunction removeAtom(molecule: Molecule, aID: string, aIDs: Set<string>) {\n    molecule.getAtoms().removeAtom(aID);\n    aIDs.forEach((x) => {\n        console.log(\"Removing \" + x);\n        remove(x);\n    });\n    removeOptionByClassName(Bond.s_atomRefs2, aID);\n    molecule.getBonds().bonds.forEach((bond) => {\n        let atomRefs2: string = bond.getAtomRefs2();\n        let atomRefs: string[] = atomRefs2.split(\" \");\n        if (atomRefs[0] == atomRefs[1]) {\n            let bondId = bond.getID()!;\n            //console.log(\"Removing bond \" + bondId + \" as it references atom \" + id);\n            molecule.getBonds().removeBond(bondId);\n            removeOptionByClassName(Bond.tagName, bondId);\n            // remove the bondDiv element.\n            let bID: string = getID(Molecule.tagName, molecule.id, BondArray.tagName, bondId);\n            let bondDiv: HTMLElement | null = document.getElementById(bID);\n            if (bondDiv == null) {\n                throw new Error(\"Bond div with id \" + bID + \" not found.\");\n            } else {\n                bondDiv.remove();\n            }\n        }\n    });\n}\n\n/**\n * For processing the elementType of an Atom.\n * @param a The atom.\n * @param aDiv The atom div which is appended to.\n * @param first If true, an option is added with instructions for the selection.\n * @param margin The margin for the components.\n * @returns A HTMLDivElement containing the HTMLLabelElement and HTMLSelectElement elements.\n */\nfunction processElementType(mIDM: IDManager, a: Atom, aDiv: HTMLDivElement, first: boolean,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let elementType: string | undefined = a.getElementType();\n    //console.log(\"Atom.s_elementType \" + elementType);\n    let selectTypes: string[] = Mesmer.elementTypes;\n    // Select.\n    if (elementType == undefined) {\n        elementType = s_selectOption;\n        addOrRemoveInstructions(selectTypes, first);\n        //console.log(\"Atom.s_elementTypes \" + arrayToString(Atom.elementTypes));\n    }\n    //let id = mIDM.addID(aDiv.id, Atom.s_elementType);\n    let id = getID(aDiv.id, Atom.s_elementType);\n    let lws: HTMLDivElement = createLabelWithSelect(Atom.s_elementType, selectTypes, Atom.s_elementType,\n        elementType!, id, margin, margin);\n    let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        a.setElementType(target.value);\n        resizeSelectElement(target);\n    });\n    select.value = elementType;\n    resizeSelectElement(select);\n    selectAnotherOptionEventListener(selectTypes, select);\n    aDiv.appendChild(lws);\n    return lws;\n}\n\n/**\n * Process atom coordinates.\n * @param a The atom.\n * @param aDiv The atom div.\n * @param aIDs The atom ids.\n * @param marginComponent The margin for the components.\n * @param margin The margin.\n */\nfunction processCoordinates(mIDM: IDManager, a: Atom, aDiv: HTMLDivElement,\n    marginComponent: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    let id: string;\n    //id = mIDM.addID(aDiv.id, Atom.s_x3);\n    id = getID(aDiv.id, Atom.s_x3);\n    aDiv.appendChild(processNumber(id, mIDM, Atom.s_x3, a.getX3.bind(a), a.setX3.bind(a), a.removeX3, marginComponent, margin));\n    //id = mIDM.addID(aDiv.id, Atom.s_y3);\n    id = getID(aDiv.id, Atom.s_y3);\n    aDiv.appendChild(processNumber(id, mIDM, Atom.s_y3, a.getY3.bind(a), a.setY3.bind(a), a.removeY3, marginComponent, margin));\n    //id = mIDM.addID(aDiv.id, Atom.s_z3);\n    id = getID(aDiv.id, Atom.s_z3);\n    aDiv.appendChild(processNumber(id, mIDM, Atom.s_z3, a.getZ3.bind(a), a.setZ3.bind(a), a.removeZ3, marginComponent, margin));\n}\n\n/**\n * Creates and returns a button for adding a new bond. This will add a new bond div to the bondArrayDiv. The bond div added\n * will have: label (bond id); editable details (atomRefs2 and order); and a remove button. Select elements that allow for \n * selecting bonds are updated so options reflect any added or removed bonds.\n * \n * @param molecule The molecule.\n * @param baDiv The bond array div.\n * @param typeID The type incorporated into an id.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The add bond button.\n */\nfunction getAddBondButton(mIDM: IDManager, molecule: Molecule, baDiv: HTMLDivElement, typeID: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLButtonElement {\n    // Create an add button.\n    let id = mIDM.addID(baDiv.id, typeID, s_button);\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, id, level);\n    button.addEventListener('click', () => {\n        let atoms: Map<string, Atom> = molecule.getAtoms().atoms;\n        if (atoms.size < 2) {\n            alert(\"There must be at least 2 atoms to create a bond.\");\n            return;\n        }\n        let attributes: Map<string, string> = new Map();\n        let atomRefs2: string = Array.from(atoms.keys()).slice(0, 2).join(\" \");\n        attributes.set(Bond.s_atomRefs2, atomRefs2);\n        let b: Bond = new Bond(attributes, molecule);\n        baDiv.insertBefore(addBond(true, mIDM, molecule, baDiv.id, atoms, molecule.getBonds(), b, boundary, level), button);\n    });\n    baDiv.appendChild(button);\n    return button;\n}\n\n/**\n * Add a bond.\n * @param molecule The molecule.\n * @param atoms The atoms.\n * @param b The bond.\n * @param boundary The margin for components.\n * @param level The margin for the div.\n * @returns The a new div for the bond.\n */\nfunction addBond(addToArray: boolean, mIDM: IDManager, molecule: Molecule, baDivID: string, atoms: Map<string, Atom>, ba: BondArray, b: Bond,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let bID: string;\n    if (addToArray) {\n        bID = ba.addBond(b, b.getID());\n    } else {\n        bID = b.getID()!;\n    }\n    let bDivID: string = getID(baDivID, bID);\n    let bDiv: HTMLDivElement = createFlexDiv(bDivID, level);\n    bDiv.appendChild(createLabel(bID, boundary));\n    // atomRefs2.\n    processAtomRefs2(mIDM, molecule, bDiv, b, boundary);\n    // order.\n    processOrder(mIDM, bDiv, b, boundary);\n    // Add to the classlists so that bondDivs involving particular atoms can be found.\n    Array.from(atoms.keys()).forEach((atomId: string) => {\n        bDiv.classList.add(atomId);\n    });\n    // Add remove button.\n    let removeBond = (id: string) => molecule.getBonds().removeBond(id);\n    addRemoveButton(bDiv, boundary, removeBond, bID);\n    // Get elements with Bond className. These select elements are to be updated to include the new bond option.\n    addOptionByClassName(Bond.tagName, bID);\n    return bDiv;\n}\n\n/**\n * For processing the atomRefs2 of a Bond.\n * \n * @param molecule The molecule.\n * @param bDiv The bond div.\n * @param bond The bond.\n * @param inputId The input id.\n * @param margin The margin for the components.\n */\nfunction processAtomRefs2(mIDM: IDManager, molecule: Molecule, bDiv: HTMLDivElement, bond: Bond,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    //let id = mIDM.addID(bDiv.id, Bond.s_atomRefs2);\n    let id = getID(bDiv.id, Bond.s_atomRefs2);\n    //bIDs.add(id);\n    let atomRefs2: string | undefined = bond.getAtomRefs2();\n    let atomRefs: string[] = atomRefs2.split(\" \");\n    let atomRefOptions: string[] = Array.from((molecule.getAtoms() as AtomArray).atoms.keys());\n    // alws.\n    //let alwsID: string = mIDM.addID(id, 0);\n    let alwsID: string = getID(id, 0);\n    //bIDs.add(alwsID);\n    let alws: HTMLDivElement = createLabelWithSelect(Bond.s_atomRefs2 + \"[0]\", atomRefOptions, Atom.tagName, atomRefs[0],\n        alwsID, margin, margin);\n    let aselect: HTMLSelectElement = alws.querySelector('select') as HTMLSelectElement;\n    aselect.classList.add(Bond.s_atomRefs2);\n    aselect.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        let atomRefs2: string = target.value + \" \" + atomRefs[1];\n        console.log(Bond.s_atomRefs2 + \" changed to \" + atomRefs2);\n        bond.setAtomRefs2(atomRefs2);\n        resizeSelectElement(target);\n    });\n    aselect.value = atomRefs[0];\n    resizeSelectElement(aselect);\n    bDiv.appendChild(alws);\n    // blws.\n    //let blwsID: string = mIDM.addID(id, 1);\n    let blwsID: string = getID(id, 1);\n    //bIDs.add(blwsID);\n    let blws: HTMLDivElement = createLabelWithSelect(Bond.s_atomRefs2 + \"[1]\", atomRefOptions, Atom.tagName, atomRefs[1],\n        blwsID, margin, margin);\n    let bselect: HTMLSelectElement = blws.querySelector('select') as HTMLSelectElement;\n    bselect.classList.add(Bond.s_atomRefs2);\n    bselect.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        let atomRefs2: string = atomRefs[0] + \" \" + target.value;\n        console.log(Bond.s_atomRefs2 + \" changed to \" + atomRefs2);\n        bond.setAtomRefs2(atomRefs2);\n        resizeSelectElement(target);\n    });\n    bselect.value = atomRefs[1];\n    resizeSelectElement(bselect);\n    bDiv.appendChild(blws);\n}\n\n/**\n * Process an order.\n * @param bondDiv The bond div.\n * @param bond The bond.\n * @param margin The margin for components.\n */\nfunction processOrder(mIDM: IDManager, bondDiv: HTMLDivElement, bond: Bond,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    //let id = mIDM.addID(bondDiv.id, Bond.s_order);\n    let id = getID(bondDiv.id, Bond.s_order);\n    let div: HTMLDivElement = createFlexDiv(undefined, margin);\n    bondDiv.appendChild(div);\n    let buttonTextContentSelected: string = Bond.s_order + sy_selected;\n    let buttonTextContentDeselected: string = Bond.s_order + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, margin);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let value: number | undefined = bond.getOrder();\n    if (value == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addOrder(div, bond, id, value, margin);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(id) == null) {\n            if (value == undefined) {\n                value = 1;\n            }\n            addOrder(div, bond, id, value, margin);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove any existing div.\n            document.getElementById(id)?.remove();\n            console.log(\"Removed \" + id);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param div The div to add the input to.\n * @param bond The bond.\n * @param id The id.\n * @param value The order value.\n * @param boundary The boundary.\n */\nfunction addOrder(div: HTMLDivElement, bond: Bond, id: string, value: number,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string = value.toString();\n    let select: HTMLSelectElement = createSelectElement(Bond.orderOptions, Bond.s_order, valueString, id, boundary);\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        bond.setOrder(parseFloat(target.value));\n        console.log(Bond.s_order + \" changed from \" + valueString + \" to \" + target.value);\n        resizeSelectElement(target);\n    });\n    select.value = valueString;\n    resizeSelectElement(select);\n    select.id = id;\n    div.appendChild(select);\n}\n\n/**\n * Process an order.\n * @param hrpDiv The HinderedRotorPotential div.\n * @param margin The margin for components.\n */\nfunction processUseSineTerms(mIDM: IDManager, hrpDiv: HTMLDivElement, hrp: HinderedRotorPotential,\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    let id = mIDM.addID(hrpDiv.id, HinderedRotorPotential.s_useSineTerms);\n    let buttonTextContentSelected: string = HinderedRotorPotential.s_useSineTerms + sy_selected;\n    let buttonTextContentDeselected: string = HinderedRotorPotential.s_useSineTerms + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, margin);\n    hrpDiv.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    if (hrp.getUseSineTerms() == true) {\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    } else {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (hrp.getUseSineTerms() == false) {\n            hrp.setUseSineTerms(true);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            hrp.setUseSineTerms(false);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * Parse XML and create HTMLDivElement for molecules.\n * @param xml The XML.\n * @returns The HTMLDivElement.\n */\nexport function processMoleculeList(xml: XMLDocument, mIDM: IDManager, molecules: Map<string, Molecule>): HTMLDivElement {\n    // Create div to contain the molecules list.\n    let mlDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"moleculeList\" element.\n    let xml_ml: Element = getSingularElement(xml, MoleculeList.tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let mlTagNames: Set<string> = new Set();\n    xml_ml.childNodes.forEach(function (node) {\n        mlTagNames.add(node.nodeName);\n    });\n    if (mlTagNames.size != 1) {\n        if (!(mlTagNames.size == 2 && mlTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            mlTagNames.forEach(x => console.error(x));\n            console.warn(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!mlTagNames.has(Molecule.tagName)) {\n        console.warn(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none! Please add molecules to the moleculeList.\");\n        // Add add molecule button.\n        let amb: HTMLButtonElement = mlDiv.appendChild(getAddMoleculeButton(mlDiv, mIDM, molecules));\n        // Add add from library button.\n        mlDiv.appendChild(getAddFromLibraryButton(mlDiv, amb, mIDM, molecules));\n        return mlDiv;\n    }\n    // Process the XML \"molecule\" elements.\n    let xml_ms: HTMLCollectionOf<Element> = xml_ml.getElementsByTagName(Molecule.tagName);\n    let xml_msl = xml_ms.length;\n    console.log(\"Number of molecules=\" + xml_msl);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_msl; i++) {\n        // Create a new Molecule.\n        let mDivID: string = mIDM.addID(Molecule.tagName, i);\n        let mDiv: HTMLDivElement = createDiv(mDivID);\n        let attributes: Map<string, string> = getAttributes(xml_ms[i]);\n        let m = new Molecule(attributes, attributes.get(Molecule.s_id) as string);\n        addMolecule(false, m, molecules);\n        // Create collapsible Molecule HTMLDivElement.\n        let mcDivID = mIDM.addID(mDivID, s_container);\n        let mcDiv: HTMLDivElement = getCollapsibleDiv(mcDivID, mlDiv, null, mDiv, m.getLabel(), boundary1, level1);\n        // Create a set of molecule tag names.\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_ms[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n        // Add edit Name button.\n        addEditIDButton(m, molecules, mcDiv.querySelector(s_button) as HTMLButtonElement, mIDM, mDiv, level1);\n        // Description\n        mDiv.appendChild(processDescription(mIDM.addID(mDivID, s_description), mIDM, m.getDescription.bind(m),\n            m.setDescription.bind(m), boundary1, level1));\n\n        // Init metadataList.\n        //console.log(\"Init metadataList.\");\n        let xml_mls: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(MetadataList.tagName);\n        if (xml_mls.length > 0) {\n            if (xml_mls.length > 1) {\n                console.warn(\"Expecting 1 or 0 \" + MetadataList.tagName + \" but finding \" + xml_mls.length + \". Loading the first of these...\");\n            }\n            // Create collapsible MetadataList HTMLDivElement.\n            let mdlDivID: string = mIDM.addID(mDivID, MetadataList.tagName);\n            let mdlDiv: HTMLDivElement = createDiv(mdlDivID);\n            let mdlcDivID = mIDM.addID(mdlDivID, s_container);\n            let mdlcDiv: HTMLDivElement = getCollapsibleDiv(mdlcDivID, mDiv, null, mdlDiv, MetadataList.tagName, boundary1, level1);\n            let xml_ml: Element = xml_mls[0];\n            let xml_ms: HTMLCollectionOf<Element> = xml_ml.getElementsByTagName(Metadata.tagName);\n            let ml: MetadataList = new MetadataList(getAttributes(xml_mls[0]));\n            m.setMetadataList(ml);\n            for (let j = 0; j < xml_ms.length; j++) {\n                // Create a new Metadata.\n                let md: Metadata = new Metadata(getAttributes(xml_ms[j]));\n                mdlDiv.appendChild(addMetadata(m, md, ml, mIDM.addID(mdlDivID, j), boundary1, level1));\n            }\n            moleculeTagNames.delete(MetadataList.tagName);\n        }\n\n        // Init atoms.\n        let xml_aas: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(AtomArray.tagName);\n        // Create collapsible AtomArray HTMLDivElement.\n        let aaDivID: string = mIDM.addID(mDivID, AtomArray.tagName);\n        let aaDiv: HTMLDivElement = createDiv(aaDivID);\n        let aacDivID = mIDM.addID(aaDivID, s_container);\n        let aacDiv: HTMLDivElement = getCollapsibleDiv(aacDivID, mDiv, null, aaDiv, AtomArray.tagName, boundary1, level1);\n        // There should be at least one atom!\n        // Atoms may be in AtomArrays or not.\n        // If any AtomArray elements have attributes, there will be a console warning.\n        // There will be a single AtomArray containing any Atoms.\n        let aa: AtomArray = new AtomArray(new Map());\n        m.setAtoms(aa);\n        for (let j = 0; j < xml_aas.length; j++) {\n            let aaa = getAttributes(xml_aas[j]);\n            if (aaa.size > 0) {\n                console.warn(\"AtomArray attributes lost/ignored: \" + mapToString(aaa));\n            }\n        }\n        let xml_as: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(Atom.tagName);\n        for (let j = 0; j < xml_as.length; j++) {\n            aaDiv.appendChild(addAtom(true, mIDM, m, aaDivID, aa, new Atom(getAttributes(xml_as[j]), m), boundary1, level1));\n        }\n        aaDiv.appendChild(getAddAtomButton(mIDM, m, aaDiv, Atom.tagName, boundary1, level1));\n        moleculeTagNames.delete(Atom.tagName);\n\n        // Init bonds.\n        let xml_bas: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(BondArray.tagName);\n        // Create collapsible BondArray HTMLDivElement.\n        let baDivID: string = mIDM.addID(mDivID, BondArray.tagName);\n        let baDiv: HTMLDivElement = createDiv(baDivID);\n        let bacDivID = mIDM.addID(baDivID, s_container);\n        let bacDiv: HTMLDivElement = getCollapsibleDiv(bacDivID, mDiv, null, baDiv, BondArray.tagName, boundary1, level1);\n        // Bonds may be in BondArrays or not.\n        // If any BondArray elements have attributes, there will be a console warning.\n        // There will be a single BondArray containing any Bonds.\n        let ba: BondArray = new BondArray(new Map());\n        m.setBonds(ba);\n        for (let j = 0; j < xml_bas.length; j++) {\n            let baa = getAttributes(xml_bas[j]);\n            if (baa.size > 0) {\n                console.warn(\"BondArray attributes lost/ignored: \" + mapToString(baa));\n            }\n        }\n        let xml_bs: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(Bond.tagName);\n        for (let j = 0; j < xml_bs.length; j++) {\n            // Load those bonds that have an id attribute first.\n            let b_attributes: Map<string, string> = getAttributes(xml_bs[j]);\n            if (b_attributes.has(Bond.s_id)) {\n                baDiv.appendChild(addBond(true, mIDM, m, baDivID, m.getAtoms().atoms, ba, new Bond(getAttributes(xml_bs[j]), m), boundary1, level1));\n            }\n        }\n        // Load those bonds that do not have an id attribute.\n        for (let j = 0; j < xml_bs.length; j++) {\n            let b_attributes: Map<string, string> = getAttributes(xml_bs[j]);\n            if (!b_attributes.has(Bond.s_id)) {\n                baDiv.appendChild(addBond(true, mIDM, m, baDivID, m.getAtoms().atoms, ba, new Bond(getAttributes(xml_bs[j]), m), boundary1, level1));\n            }\n        }\n        baDiv.appendChild(getAddBondButton(mIDM, m, baDiv, Bond.tagName, boundary1, level1));\n        moleculeTagNames.delete(Bond.tagName);\n\n        // Add a viewer for the molecule.\n        // Create collapsible viewer HTMLDivElement.\n        let viewerDivID: string = mIDM.addID(mDivID, s_viewer);\n        let viewerDiv: HTMLDivElement = createDiv(viewerDivID);\n        let viewercDivID = mIDM.addID(viewerDivID, s_container);\n        let viewercDiv: HTMLDivElement = getCollapsibleDiv(viewercDivID, mDiv, null, viewerDiv,\n            s_viewer, boundary1, level1);\n        create3DViewer(mIDM, m, viewerDiv, boundary1, level1);\n\n        // Init properties.\n        let xml_pls: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(PropertyList.tagName);\n        // Create a new collapsible div for the PropertyList.\n        let plDivID: string = mIDM.addID(mDivID, PropertyList.tagName);\n        let plDiv: HTMLDivElement = createDiv(plDivID);\n        let plcDivID = mIDM.addID(plDivID, s_container);\n        let plcDiv: HTMLDivElement = getCollapsibleDiv(plcDivID, mDiv, null, plDiv, PropertyList.tagName, boundary1, level1);\n        // Properties may be in a PropertyList or not.\n        if (xml_pls.length > 1) {\n            console.warn(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_pls.length + \". Loading the first of these...\");\n        }\n        let dictRefs: Set<string> = new Set();\n        let dictRefMap: Map<string, number> = new Map();\n        let pl: PropertyList;\n        let xml_ps: HTMLCollectionOf<Element>;\n        if (xml_pls.length > 0) {\n            pl = new PropertyList(getAttributes(xml_pls[0]));\n            xml_ps = xml_pls[0].getElementsByTagName(Property.tagName);\n            // Init dictRefs\n            for (let j = 0; j < xml_ps.length; j++) {\n                let p: Property = new Property(getAttributes(xml_ps[j]));\n                dictRefs.add(p.dictRef);\n                dictRefMap.set(p.dictRef, j);\n            }\n        } else {\n            pl = new PropertyList(new Map());\n        }\n        m.setPropertyList(pl);\n        moleculeTagNames.delete(PropertyList.tagName);\n        let pID: string;\n        let deselect: boolean = false;\n        // \"me:ZPE\", scalar, Mesmer.energyUnits.\n        if (!dictRefs.has(ZPE.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, ZPE.dictRef, Mesmer.energyUnits);\n        } else {\n            pID = getID(plDiv.id, ZPE.dictRef);\n            let j: number = dictRefMap.get(ZPE.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            // Get button from div and click\n            //let button: HTMLButtonElement = plDiv.querySelector(s_button) as HTMLButtonElement;\n            //button.click();\n            /*\n            let p: Property = pl.getProperty(ZPE.dictRef) as Property;\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:Hf0\", scalar, Mesmer.energyUnits.\n        if (!dictRefs.has(Hf0.dictRef)) {\n            let div: HTMLDivElement = addPropertyScalar(true, m, mIDM, plDiv, pl, Hf0.dictRef, Mesmer.energyUnits);\n            // Click the button.\n            //let b: HTMLButtonElement = div.querySelector(s_button)!;\n            //b!.click();\n            //pl.removeProperty(SpinMultiplicity.dictRef);\n        } else {\n            pID = getID(plDiv.id, Hf0.dictRef);\n            let j: number = dictRefMap.get(Hf0.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let p: Property = pl.getProperty(Hf0.dictRef) as Property;\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:HfAT0\", scalar, Mesmer.energyUnits.\n        if (!dictRefs.has(HfAT0.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, HfAT0.dictRef, Mesmer.energyUnits);\n        } else {\n            pID = getID(plDiv.id, HfAT0.dictRef);\n            let j: number = dictRefMap.get(HfAT0.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:Hf298\", scalar, Mesmer.energyUnits.\n        if (!dictRefs.has(Hf298.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, Hf298.dictRef, Mesmer.energyUnits);\n        } else {\n            pID = getID(plDiv.id, Hf298.dictRef);\n            let j: number = dictRefMap.get(Hf298.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.energyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:rotConsts\", array, Mesmer.frequencyUnits.\n        if (!dictRefs.has(RotConsts.dictRef)) {\n            addPropertyArray(deselect, false, m, mIDM, plDiv, pl, RotConsts.dictRef, Mesmer.frequencyUnits);\n        } else {\n            pID = getID(plDiv.id, RotConsts.dictRef);\n            let j: number = dictRefMap.get(RotConsts.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let pa: PropertyArray = p.getProperty() as PropertyArray;\n            let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv.id, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.frequencyUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:symmetryNumber\", scalar, No units.\n        if (!dictRefs.has(SymmetryNumber.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, SymmetryNumber.dictRef, undefined);\n        } else {\n            pID = getID(plDiv.id, SymmetryNumber.dictRef);\n            let j: number = dictRefMap.get(SymmetryNumber.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:TSOpticalSymmetryNumber\", scalar, No units.\n        if (!dictRefs.has(TSOpticalSymmetryNumber.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, TSOpticalSymmetryNumber.dictRef, undefined);\n        } else {\n            pID = getID(plDiv.id, TSOpticalSymmetryNumber.dictRef);\n            let j: number = dictRefMap.get(TSOpticalSymmetryNumber.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:frequenciesScaleFactor\", scalar, No units.\n        if (!dictRefs.has(FrequenciesScaleFactor.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, FrequenciesScaleFactor.dictRef, undefined);\n        } else {\n            pID = getID(plDiv.id, FrequenciesScaleFactor.dictRef);\n            let j: number = dictRefMap.get(FrequenciesScaleFactor.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:vibFreqs\", array, cm-1.\n        if (!dictRefs.has(VibFreqs.dictRef)) {\n            addPropertyArray(deselect, false, m, mIDM, plDiv, pl, VibFreqs.dictRef, Mesmer.frequencyUnits);\n        } else {\n            pID = getID(plDiv.id, VibFreqs.dictRef);\n            let j: number = dictRefMap.get(VibFreqs.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let pa: PropertyArray = p.getProperty() as PropertyArray;\n            let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv.id, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.frequencyUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:MW\", scalar, amu.\n        if (!dictRefs.has(MW.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, MW.dictRef, Mesmer.massUnits);\n        } else {\n            pID = getID(plDiv.id, MW.dictRef);\n            let j: number = dictRefMap.get(MW.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.massUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:spinMultiplicity\", scalar, No units.\n        if (!dictRefs.has(SpinMultiplicity.dictRef)) {\n            let div = addPropertyScalar(deselect, m, mIDM, plDiv, pl, SpinMultiplicity.dictRef, undefined);\n            // Click the button.\n            let b: HTMLButtonElement = div.querySelector(s_button)!;\n            b!.click();\n            pl.removeProperty(SpinMultiplicity.dictRef);\n\n        } else {\n            pID = getID(plDiv.id, SpinMultiplicity.dictRef);\n            let j: number = dictRefMap.get(SpinMultiplicity.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:epsilon\", scalar, K (fixed).\n        if (!dictRefs.has(Epsilon.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, Epsilon.dictRef, Mesmer.temperatureUnits);\n        } else {\n            pID = getID(plDiv.id, Epsilon.dictRef);\n            let j: number = dictRefMap.get(Epsilon.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:sigma\", scalar, Å (fixed).\n        if (!dictRefs.has(Sigma.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, Sigma.dictRef, Mesmer.lengthUnits);\n        } else {\n            pID = getID(plDiv.id, Sigma.dictRef);\n            let j: number = dictRefMap.get(Sigma.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:hessian\", matrix, kJ/mol/Å2 or kcal/mol/Å2 or Hartree/Å2.\n        if (!dictRefs.has(Hessian.dictRef)) {\n            addPropertyMatrix(deselect, false, m, mIDM, plDiv, pl, Hessian.dictRef, Mesmer.hessianUnits);\n        } else {\n            pID = getID(plDiv.id, Hessian.dictRef);\n            let j: number = dictRefMap.get(Hessian.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let pm: PropertyMatrix = p.getProperty() as PropertyMatrix;\n            let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv.id, mIDM, p.dictRef, pm, pm.getValues.bind(pm),\n                (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pm, values),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.hessianUnits, pm.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:EinsteinAij\", array, s-1 (fixed).\n        if (!dictRefs.has(EinsteinAij.dictRef)) {\n            addPropertyArray(deselect, false, m, mIDM, plDiv, pl, EinsteinAij.dictRef, Mesmer.EinsteinAUnits);\n        } else {\n            pID = getID(plDiv.id, EinsteinAij.dictRef);\n            let j: number = dictRefMap.get(EinsteinAij.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let pa: PropertyArray = p.getProperty() as PropertyArray;\n            let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv.id, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.EinsteinAUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:EinsteinBij\", array, m3/J/s2 (fixed).\n        if (!dictRefs.has(EinsteinBij.dictRef)) {\n            addPropertyArray(deselect, false, m, mIDM, plDiv, pl, EinsteinBij.dictRef, Mesmer.EinsteinBUnits);\n        } else {\n            pID = getID(plDiv.id, EinsteinBij.dictRef);\n            let j: number = dictRefMap.get(EinsteinBij.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let pa: PropertyArray = p.getProperty() as PropertyArray;\n            let div: HTMLDivElement = processNumberArrayOrMatrix(plDiv.id, mIDM, p.dictRef, pa, pa.getValues.bind(pa),\n                (values: Big[]) => setPropertyArrayOrMatrix(p.dictRef, pl, pa, values),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.EinsteinBUnits, pa.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        // \"me:electronicExcitation\", scalar, cm-1.\n        if (!dictRefs.has(ElectronicExcitation.dictRef)) {\n            addPropertyScalar(deselect, m, mIDM, plDiv, pl, ElectronicExcitation.dictRef, Mesmer.frequencyUnits);\n        } else {\n            pID = getID(plDiv.id, ElectronicExcitation.dictRef);\n            let j: number = dictRefMap.get(ElectronicExcitation.dictRef)!;\n            let p: Property = createPropertyAndDiv(pl, xml_ps![j], plDiv, m, mIDM, boundary1, level1);\n            /*\n            let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n            let div: HTMLDivElement = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n                (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(Mesmer.frequencyUnits, ps.attributes, div, div.querySelector(s_input) as HTMLElement,\n                getID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary1, boundary1);\n            plDiv.appendChild(div);\n            */\n        }\n        moleculeTagNames.delete(PropertyList.tagName);\n        moleculeTagNames.delete(Property.tagName);\n\n        // Organise EnergyTransferModel.\n        let xml_etms: HTMLCollectionOf<Element> | null = xml_ms[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (xml_etms.length > 0) {\n            if (xml_etms.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + EnergyTransferModel.tagName + \" but finding \" + xml_etms.length + \"!\");\n            }\n            let etm = new EnergyTransferModel(getAttributes(xml_etms[0]));\n            processEnergyTransferModel(mIDM, etm, m, xml_etms[0], mDiv);\n            moleculeTagNames.delete(EnergyTransferModel.tagName);\n        }\n        // Organise DOSCMethod.\n        let xml_dms: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(DOSCMethod.tagName);\n        if (xml_dms.length > 0) {\n            if (xml_dms.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + DOSCMethod.tagName + \" but finding \" + xml_dms.length + \"!\");\n            }\n            let doscm = new DOSCMethod(getAttributes(xml_dms[0]));\n            mDiv.appendChild(\n                createLabelWithSelect(DOSCMethod.tagName, DOSCMethod.xsi_typeOptions, DOSCMethod.tagName,\n                    doscm.getXsiType(), mIDM.addID(mDivID, DOSCMethod.tagName), boundary1, level1));\n            moleculeTagNames.delete(DOSCMethod.tagName);\n        }\n        // Organise DistributionCalcMethod. (Output only)\n        let xml_dcms: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(DistributionCalcMethod.tagName);\n        if (xml_dcms.length > 0) {\n            if (xml_dcms.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + DistributionCalcMethod.tagName + \" but finding \" + xml_dcms.length + \"!\");\n            }\n            let dcmAttributes: Map<string, string> = getAttributes(xml_dcms[0]);\n            let dcm = new DistributionCalcMethod(dcmAttributes);\n            m.setDistributionCalcMethod(dcm);\n            let dcmDivID: string = mIDM.addID(mDivID, DistributionCalcMethod.tagName);\n            let dcmDiv: HTMLDivElement = createDiv(dcmDivID);\n            mDiv.appendChild(dcmDiv);\n            // Create label.\n            dcmDiv.appendChild(createLabel(DistributionCalcMethod.tagName + \" \" + mapToString(dcmAttributes), level1));\n            moleculeTagNames.delete(DistributionCalcMethod.tagName);\n        }\n        // Organise DensityOfStatesList. (Output only)\n        let xml_dosl: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(DensityOfStatesList.tagName);\n        if (xml_dosl.length > 0) {\n            if (xml_dosl.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + DensityOfStatesList.tagName + \" but finding \" + xml_dosl.length + \"!\");\n            }\n            let dosl = new DensityOfStatesList(getAttributes(xml_dosl[0]));\n            m.setDensityOfStatesList(dosl);\n            // Create collapsible div.\n            let doslDivID: string = mIDM.addID(mDivID, DensityOfStatesList.tagName);\n            let doslDiv: HTMLDivElement = createDiv(doslDivID);\n            let doslcDivID = mIDM.addID(doslDivID, s_container);\n            let doslcDiv: HTMLDivElement = getCollapsibleDiv(doslcDivID, mDiv, null, doslDiv, DensityOfStatesList.tagName, boundary1, level1);\n            let xml_dos: HTMLCollectionOf<Element> = xml_dosl[0].getElementsByTagName(DensityOfStates.tagName);\n            // Organise Description.\n            let xml_ds: HTMLCollectionOf<Element> = xml_dosl[0].getElementsByTagName(Description.tagName);\n            if (xml_ds.length > 0) {\n                if (xml_ds.length > 1) {\n                    throw new Error(\"Expecting 1 or 0 \" + Description.tagName + \" but finding \" + xml_ds.length + \"!\");\n                }\n                let ds = new Description(getAttributes(xml_ds[0]), getNodeValue(getFirstChildNode(xml_ds[0])));\n                dosl.setDescription(ds);\n            }\n            // Organise DensityOfStates.\n            //console.log(\"xml_dos.length=\" + xml_dos.length);\n            if (xml_dos.length == 0) {\n                throw new Error(\"Expecting 1 or more \" + DensityOfStates.tagName + \" but finding 0!\");\n            } else {\n                let t: HTMLTableElement = createTable(mIDM.addID(doslDivID, s_table), level1);\n                addTableRow(t, DensityOfStates.header);\n                // Append the table to the div.\n                doslDiv.appendChild(t);\n                for (let j = 0; j < xml_dos.length; j++) {\n                    //console.log(\"j=\" + j);\n                    let dos = new DensityOfStates(getAttributes(xml_dos[j]));\n                    dosl.addDensityOfStates(dos);\n                    let dosDivID = mIDM.addID(doslDivID, j);\n                    let dosDiv = createFlexDiv(dosDivID, level1);\n                    doslDiv.appendChild(dosDiv);\n                    // T.\n                    let xml_t: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(T.tagName);\n                    if (xml_t.length != 1) {\n                        throw new Error(\"Expecting 1 \" + T.tagName + \" but finding \" + xml_t.length + \"!\");\n                    } else {\n                        let t = new T(getAttributes(xml_t[0]), new Big(getNodeValue(getFirstChildNode(xml_t[0]))));\n                        dos.setT(t);\n                        //dosDiv.appendChild(createLabel(t.value.toString(), boundary1));\n                    }\n                    // qtot.\n                    let xml_qtot: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(Qtot.tagName);\n                    if (xml_qtot.length != 1) {\n                        throw new Error(\"Expecting 1 \" + Qtot.tagName + \" but finding \" + xml_qtot.length + \"!\");\n                    } else {\n                        let qtot = new Qtot(getAttributes(xml_qtot[0]), new Big(getNodeValue(getFirstChildNode(xml_qtot[0]))));\n                        dos.setQtot(qtot);\n                        //dosDiv.appendChild(createLabel(Qtot.tagName + \" \" + qtot.value.toString(), boundary1));\n                    }\n                    // sumc.\n                    let xml_sumc: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(Sumc.tagName);\n                    if (xml_sumc.length != 1) {\n                        throw new Error(\"Expecting 1 \" + Sumc.tagName + \" but finding \" + xml_sumc.length + \"!\");\n                    } else {\n                        let sumc = new Sumc(getAttributes(xml_sumc[0]), new Big(getNodeValue(getFirstChildNode(xml_sumc[0]))));\n                        dos.setSumc(sumc);\n                        //dosDiv.appendChild(createLabel(sumc.value.toString(), boundary1));\n                    }\n                    // sumg.\n                    let xml_sumg: HTMLCollectionOf<Element> = xml_dos[j].getElementsByTagName(Sumg.tagName);\n                    if (xml_sumg.length != 1) {\n                        throw new Error(\"Expecting 1 \" + Sumg.tagName + \" but finding \" + xml_sumg.length + \"!\");\n                    } else {\n                        let sumg = new Sumg(getAttributes(xml_sumg[0]), new Big(getNodeValue(getFirstChildNode(xml_sumg[0]))));\n                        dos.setSumg(sumg);\n                        //dosDiv.appendChild(createLabel(sumg.value.toString(), boundary1));\n                    }\n                    addTableRow(t, dos.toStringArray());\n                    //console.log(\"dos: \" + dos.toString());\n                }\n                addSaveAsCSVButton(dosl.toCSV, doslDiv, t, m.getID() + \"_\" + DensityOfStatesList.tagName, level1);\n            }\n            moleculeTagNames.delete(DensityOfStatesList.tagName);\n        }\n        // Organise ThermoTable. (Output only)\n        let tttn: string = ThermoTable.tagName;\n        let xml_tts: HTMLCollectionOf<Element> = xml_ms[i].getElementsByTagName(tttn);\n        if (xml_tts.length > 0) {\n            if (xml_tts.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + tttn + \" but finding \" + xml_tts.length + \"!\");\n            }\n            let tt = new ThermoTable(getAttributes(xml_tts[0]));\n            // Create collapsible div.\n            let ttDivId: string = mIDM.addID(mDivID, ThermoTable.tagName);\n            let ttDiv: HTMLDivElement = createDiv(ttDivId);\n            let ttcDivId = mIDM.addID(ttDivId, s_container);\n            let ttcDiv: HTMLDivElement = getCollapsibleDiv(ttcDivId, mDiv, null, ttDiv, tttn, boundary1, level1);\n            let tvs: ThermoValue[];\n            let tvtn: string = ThermoValue.tagName;\n            let xml_tvs: HTMLCollectionOf<Element> = xml_tts[0].getElementsByTagName(tvtn);\n            if (xml_tvs.length == 0) {\n                throw new Error(\"Expecting 1 or more \" + tvtn + \" but finding 0!\");\n            } else {\n                tvs = [];\n                let t: HTMLTableElement = createTable(mIDM.addID(ttDivId, s_table), level1);\n                addTableRow(t, tt.getHeader());\n                for (let j = 0; j < xml_tvs.length; j++) {\n                    let tv = new ThermoValue(getAttributes(xml_tvs[j]));\n                    tvs.push(tv);\n                    addTableRow(t, tv.toStringArray());\n                }\n                // Append the table to the div.\n                ttDiv.appendChild(t);\n                tt.init(tvs);\n                addSaveAsCSVButton(tt.toCSV.bind(tt), ttDiv, t, mIDM.addID(m.getID(), ThermoTable.tagName), level1);\n            }\n            m.setThermoTable(tt);\n            moleculeTagNames.delete(tvtn);\n            moleculeTagNames.delete(tttn);\n        }\n        // Organise ExtraDOSCMethod.\n        let xml_edms = xml_ms[i].getElementsByTagName(ExtraDOSCMethod.tagName);\n        if (xml_edms.length > 0) {\n            for (let j = 0; j < xml_edms.length; j++) {\n                let edm: ExtraDOSCMethod = new ExtraDOSCMethod(getAttributes(xml_edms[j]));\n                // Create collapsible ExtraDOSCMethod HTMLDivElement.\n                let edmDivID: string = mIDM.addID(mDivID, ExtraDOSCMethod.tagName, j);\n                let edmDiv: HTMLDivElement = createDiv(edmDivID);\n                let edmcDivID = mIDM.addID(edmDivID, s_container);\n                let edmcDiv: HTMLDivElement = getCollapsibleDiv(edmcDivID, mDiv, null, edmDiv,\n                    ExtraDOSCMethod.tagName, boundary1, level1);\n                // Read bondRef.\n                let xml_brs: HTMLCollectionOf<Element> = xml_edms[j].getElementsByTagName(BondRef.tagName);\n                if (xml_brs.length > 0) {\n                    if (xml_brs.length != 1) {\n                        throw new Error(\"Expecting only 1 bondRef, but there are \" + xml_brs.length);\n                    }\n                    let bids: string[] = (m.getBonds() as BondArray).getBondIds();\n                    let br: BondRef = new BondRef(getAttributes(xml_brs[0]), getNodeValue(getFirstChildNode(xml_brs[0])));\n                    let lws: HTMLDivElement = createLabelWithSelect(BondRef.tagName, bids, BondRef.tagName,\n                        br.value, mIDM.addID(edmDivID, BondRef.tagName), boundary1, level1);\n                    let select: HTMLSelectElement = lws.getElementsByTagName(\"select\")[0];\n                    select.classList.add(Bond.tagName);\n                    edmDiv.appendChild(lws);\n                }\n                // Read hinderedRotorPotential.\n                let xml_hrps: HTMLCollectionOf<Element> = xml_edms[j].getElementsByTagName(HinderedRotorPotential.tagName);\n                if (xml_hrps.length > 0) {\n                    if (xml_hrps.length != 1) {\n                        throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + xml_hrps.length);\n                    }\n                    let hrpAttributes: Map<string, string> = getAttributes(xml_hrps[0]);\n                    let hrp: HinderedRotorPotential = new HinderedRotorPotential(hrpAttributes);\n                    // Create collapsible HinderedRotorPotential HTMLDivElement.\n                    let hrpDivID: string = mIDM.addID(edmDivID, HinderedRotorPotential.tagName);\n                    let hrpDiv: HTMLDivElement = createDiv(hrpDivID);\n                    let hrpcDivID = mIDM.addID(hrpDivID, s_container);\n                    let hrpcDiv: HTMLDivElement = getCollapsibleDiv(hrpcDivID, edmDiv, null, hrpDiv,\n                        HinderedRotorPotential.tagName, boundary1, level1);\n                    // Format.\n                    let lws = createLabelWithSelect(HinderedRotorPotential.s_format,\n                        HinderedRotorPotential.formats, HinderedRotorPotential.tagName, hrp.getFormat(),\n                        mIDM.addID(hrpDivID, HinderedRotorPotential.s_format), boundary1, level1)\n                    hrpDiv.appendChild(lws);\n                    // Units.\n                    addAnyUnits(Mesmer.energyUnits, hrpAttributes, hrpDiv, lws,\n                        mIDM.addID(hrpDivID, HinderedRotorPotential.s_units), HinderedRotorPotential.tagName, boundary1, level1);\n                    // ExpansionSize.\n                    let es: string = hrp.getExpansionSize() ?? s_undefined;\n                    hrpDiv.appendChild(createLabelWithInput(\"text\",\n                        mIDM.addID(hrpDivID, HinderedRotorPotential.s_expansionSize), boundary1, level1, (event: Event) => {\n                            let target = event.target as HTMLInputElement;\n                            // Check the input is a number.\n                            try {\n                                console.log(\"Setting \" + HinderedRotorPotential.s_expansionSize + \" to \" + target.value);\n                                hrp.setExpansionSize(new Big(target.value));\n                            } catch (e) {\n                                alert(\"Invalid value, resetting...\");\n                                target.value = hrp.getExpansionSize() ?? s_undefined;\n                            }\n                            resizeInputElement(target);\n                        }, es, HinderedRotorPotential.s_expansionSize));\n\n                    // Add useSineTerms.\n                    processUseSineTerms(mIDM, hrpDiv, hrp, level1);\n\n                    // Load PotentialPoints.\n                    // Create collapsible HinderedRotorPotential PotentialPoint HTMLDivElement.\n                    let ppsDivID: string = mIDM.addID(hrpDivID, PotentialPoint.tagName);\n                    let ppsDiv: HTMLDivElement = createDiv(ppsDivID);\n                    let ppscDivID = mIDM.addID(ppsDivID, s_container);\n                    let ppscDiv: HTMLDivElement = getCollapsibleDiv(ppscDivID, mDiv, null, ppsDiv,\n                        \"PotentialPoints\", boundary1, level1);\n                    hrpDiv.appendChild(ppscDiv);\n\n                    let pps: PotentialPoint[] = [];\n                    let xml_pps: HTMLCollectionOf<Element> = xml_hrps[0].getElementsByTagName(PotentialPoint.tagName);\n                    for (let k = 0; k < xml_pps.length; k++) {\n                        let pp: PotentialPoint = new PotentialPoint(getAttributes(xml_pps[k]));\n                        pps.push(pp);\n                        let ppDivID = mIDM.addID(ppsDivID, k);\n                        let ppDiv: HTMLDivElement = createFlexDiv(ppDivID, level1);\n                        ppsDiv.appendChild(ppDiv);\n                        let l: HTMLLabelElement = createLabel(PotentialPoint.tagName + \" \" + k, boundary1);\n                        ppDiv.appendChild(l);\n                        // Process angle\n                        let a: string = pp.getAngle() ?? s_undefined;\n                        let anglelwi: HTMLDivElement = createLabelWithInput(\"text\", mIDM.addID(ppDivID, PotentialPoint.s_angle), boundary1, boundary1,\n                            (event: Event) => {\n                                let target = event.target as HTMLInputElement;\n                                // Check the input is a number.\n                                if (isNumeric(target.value)) {\n                                    let value: Big = new Big(target.value);\n                                    pp.setAngle(value);\n                                } else {\n                                    // Reset the input to the current value.\n                                    alert(\"Angle input is not a number, resetting...\");\n                                    target.value = pp.getAngle() ?? s_undefined;\n                                }\n                                resizeInputElement(target);\n                            }, a, PotentialPoint.s_angle);\n                        ppDiv.appendChild(anglelwi);\n                        // Create a new div element for the potential.\n                        let potentialLabel: HTMLLabelElement = createLabel(PotentialPoint.s_potential, boundary1);\n                        ppDiv.appendChild(potentialLabel);\n                        let potentialInputElementId = mIDM.addID(ppDivID, PotentialPoint.s_potential);\n                        let potentialInputElement: HTMLInputElement = createInput(\"text\", potentialInputElementId, boundary1);\n                        ppDiv.appendChild(potentialInputElement);\n                        let p: string = pp.getPotential() ?? s_undefined;\n                        potentialInputElement.addEventListener('change', (event: Event) => {\n                            let target = event.target as HTMLInputElement;\n                            // Check the input is a number.\n                            if (isNumeric(target.value)) {\n                                let value: Big = new Big(target.value);\n                                pp.setPotential(value);\n                                console.log(\"Set \" + PotentialPoint.tagName + \" to \" + value.toExponential());\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Potential input is not a number, resetting...\");\n                                potentialInputElement.value = pp.getPotential() ?? s_undefined;\n                            }\n                            resizeInputElement(potentialInputElement);\n                        });\n                        potentialInputElement.value = p;\n                        resizeInputElement(potentialInputElement);\n                    }\n                    //ppsDiv.appendChild(ppDiv);\n                    hrp.setPotentialPoints(pps);\n                    edm.setHinderedRotorPotential(hrp);\n                }\n                // Read periodicities.\n                let xml_periodicities: HTMLCollectionOf<Element> = xml_edms[j].getElementsByTagName(Periodicity.tagName);\n                if (xml_periodicities.length > 0) {\n                    if (xml_periodicities.length != 1) {\n                        throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                    }\n                    let valueString: string = getNodeValue(getFirstChildNode(xml_periodicities[0]));\n                    let periodicity: Periodicity = new Periodicity(getAttributes(xml_periodicities[0]), new Big(valueString));\n                    edm.setPeriodicity(periodicity);\n                    let lwi: HTMLDivElement = createLabelWithInput(\"text\", mIDM.addID(edmDivID, Periodicity.tagName),\n                        boundary1, level1, (event: Event) => {\n                            let target = event.target as HTMLInputElement;\n                            valueString = target.value;\n                            if (isNumeric(valueString)) {\n                                let value: Big = new Big(valueString);\n                                periodicity.value = value;\n                                (edm.getPeriodicity() as Periodicity).value = value;\n                                console.log(\"Set \" + Periodicity.tagName + \" to \" + value);\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Periodicity input is not a number, resetting...\");\n                                target.value = periodicity.value.toExponential();\n                            }\n                        }, valueString, Periodicity.tagName);\n                    edmDiv.appendChild(lwi);\n                }\n                m.setExtraDOSCMethod(j, edm);\n                moleculeTagNames.delete(ExtraDOSCMethod.tagName);\n            }\n        }\n\n        // Organise ReservoirSize.\n        moleculeTagNames.delete(ReservoirSize.tagName);\n        let xml_ReservoirSize = xml_ms[i].getElementsByTagName(ReservoirSize.tagName);\n        if (xml_ReservoirSize.length > 0) {\n            if (xml_ReservoirSize.length != 1) {\n                throw new Error(\"Expecting only 1 reservoirSize, but there are \" + xml_ReservoirSize.length);\n            }\n            let valueString: string = getNodeValue(getFirstChildNode(xml_ReservoirSize[0]));\n            let value: Big = new Big(valueString);\n            let reservoirSizeAttributes: Map<string, string> = getAttributes(xml_ReservoirSize[0]);\n            let reservoirSize: ReservoirSize = new ReservoirSize(reservoirSizeAttributes, value);\n            m.setReservoirSize(reservoirSize);\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", m.getID() + \"_\" + ReservoirSize.tagName,\n                boundary1, level1, (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    reservoirSize.value = new Big(target.value);\n                    resizeInputElement(target);\n                }, valueString, ReservoirSize.tagName);\n            mDiv.appendChild(inputDiv);\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.warn(x));\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        // Add a remove molecule button.\n        addRemoveButton(mDiv, level1, () => {\n            removeMolecule(mlDiv, mcDiv, mIDM, molecules, mDivID, m);\n        });\n    }\n    // Create an add molecule button.\n    let mb: HTMLButtonElement = getAddMoleculeButton(mlDiv, mIDM, molecules);\n    // Create add from library button.\n    let lb: HTMLButtonElement = getAddFromLibraryButton(mlDiv, mb, mIDM, molecules);\n    return mlDiv;\n}\n\n/**\n * Remove a molecule.\n * @param mlDiv The MoleculeList div.\n * @param mcDiv The MoleculeContainer div.\n * @param mIDM The molecule IDManager.\n * @param molecules The molecules.\n * @param mDivID The molecule div ID.\n * @param m The molecule.\n */\nfunction removeMolecule(mlDiv: HTMLDivElement, mcDiv: HTMLDivElement, mIDM: IDManager,\n    molecules: Map<string, Molecule>, mDivID: string, m: Molecule) {\n    mlDiv.removeChild(mcDiv);\n    //mlDiv.removeChild(mDiv);\n    mIDM.removeIDs(mDivID);\n    mIDM.removeIDs(getID(mDivID, s_description));\n    mIDM.removeIDs(getID(mDivID, AtomArray.tagName));\n    mIDM.removeIDs(getID(mDivID, BondArray.tagName));\n    mIDM.removeIDs(getID(mDivID, s_viewer));\n    mIDM.removeIDs(getID(mDivID, PropertyList.tagName));\n    molecules.delete(m.getID());\n}\n\n/**\n * @param pl The PropertyList.\n * @param xml The xml element.\n * @param plDiv The PropertyList div.\n * @param molecule The molecule.\n * @param boundary The boundary.\n * @param level The level.\n */\nexport function createPropertyAndDiv(pl: PropertyList, xml: Element, plDiv: HTMLDivElement, molecule: Molecule, mIDM: IDManager,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): Property {\n    let p: Property = new Property(getAttributes(xml));\n    //console.log(\"p.dictRef \" + p.dictRef);\n    if (p.dictRef == ZPE.dictRef) {\n        // \"me:ZPE\", scalar, Mesmer.energyUnits.\n        processProperty(pl, p, Mesmer.energyUnits, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == Hf0.dictRef) {\n        // \"me:Hf0\", scalar, Mesmer.energyUnits.\n        processProperty(pl, p, Mesmer.energyUnits, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == HfAT0.dictRef) {\n        // \"me:HfAT0\", scalar, Mesmer.energyUnits.\n        processProperty(pl, p, Mesmer.energyUnits, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == Hf298.dictRef) {\n        // \"me:Hf298\", scalar, Mesmer.energyUnits.\n        processProperty(pl, p, Mesmer.energyUnits, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == RotConsts.dictRef) {\n        // \"me:rotConsts\", array, Mesmer.frequencyUnits.\n        processProperty(pl, p, Mesmer.frequencyUnits, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == SymmetryNumber.dictRef) {\n        // \"me:symmetryNumber\", scalar, No units.\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == TSOpticalSymmetryNumber.dictRef) {\n        // \"me:TSOpticalSymmetryNumber\", scalar, No units.\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == FrequenciesScaleFactor.dictRef) {\n        // \"me:frequenciesScaleFactor\", scalar, No units.\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == VibFreqs.dictRef) {\n        // \"me:vibFreqs\", array, cm-1.\n        processProperty(pl, p, Mesmer.frequencyUnits, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == MW.dictRef) {\n        // \"me:MW\", scalar, amu.\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == SpinMultiplicity.dictRef) {\n        // \"me:spinMultiplicity\", scalar, No units.\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == Epsilon.dictRef) {\n        // \"me:epsilon\", scalar, K (fixed).\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == Sigma.dictRef) {\n        // \"me:sigma\", scalar, Å (fixed).\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == Hessian.dictRef) {\n        // \"me:hessian\", matrix, kJ/mol/Å2 or kcal/mol/Å2 or Hartree/Å2.\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == EinsteinAij.dictRef) {\n        // \"me:EinsteinAij\", array, s-1 (fixed).\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else if (p.dictRef == EinsteinBij.dictRef) {\n        // \"me:EinsteinBij\", array, m3/J/s2 (fixed).\n        processProperty(pl, p, undefined, molecule, mIDM, xml, plDiv, boundary, level);\n    } else {\n        processPropertyString(pl, p, molecule, xml, plDiv, boundary, level);\n    }\n    pl.setProperty(p);\n    return p;\n}\n\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param plDiv The PropertyList div.\n * @param textArea If true, a text area is created rather than an input.\n * @param boundary The boundary to go around components.\n * @param level The level of the component.\n */\nexport function processProperty(pl: PropertyList, p: Property, units: string[] | undefined, molecule: Molecule,\n    mIDM: IDManager, element: Element, plDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let pID = mIDM.addID(getID(plDiv.id, p.dictRef));\n    let div: HTMLDivElement;\n    // PropertyScalar.\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalarNumber.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalarNumber.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let value: Big = new Big(inputString);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        // Add PropertyScalarNumber.\n        let ps: PropertyScalarNumber = new PropertyScalarNumber(psAttributes, value);\n        p.setProperty(ps);\n        ps.setValue = function (value: Big) {\n            ps.value = value;\n            if (p.dictRef == ZPE.dictRef || p.dictRef == Hf0.dictRef || p.dictRef == HfAT0.dictRef || p.dictRef == Hf298.dictRef) {\n                // Update the molecule energy diagram.\n                redrawReactionsDiagram();\n            }\n        }.bind(ps);\n        div = processNumber(pID, mIDM, p.dictRef, ps.getValue.bind(ps),\n            (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n            () => pl.removeProperty(p.dictRef), boundary1, level1);\n        addAnyUnits(units, psAttributes, div, div.querySelector(s_input) as HTMLElement,\n            mIDM.addID(pID, PropertyScalarNumber.s_units), p.dictRef, boundary, boundary);\n        plDiv.appendChild(div);\n        // click\n        //let button: HTMLButtonElement = div.querySelector('button') as HTMLButtonElement;\n        //button.click();\n    } else {\n        // PropertyArray.\n        let arrayNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyArray.tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) {\n                throw new Error(\"Expecting 1 \" + PropertyArray.tagName + \" but finding \" + arrayNodes.length + \"!\");\n            }\n            let inputString: string = getInputString(arrayNodes[0]);\n            if (inputString == \"\") {\n                console.warn(\"inputString is empty setting to 0!\");\n                inputString = \"0\";\n            }\n            let values: Big[] | undefined = toNumberArray(inputString.split(/\\s+/));\n            let paAttributes: Map<string, string> = getAttributes(arrayNodes[0]);\n            let pa: PropertyArray = new PropertyArray(paAttributes, values);\n            p.setProperty(pa);\n            div = processNumberArrayOrMatrix(plDiv, mIDM, p.dictRef,\n                pa, pa.getValues.bind(pa), pa.setValues,\n                () => pl.removeProperty(p.dictRef), boundary1, level1);\n            addAnyUnits(units, paAttributes, div, div.querySelector(s_textarea) as HTMLElement,\n                mIDM.addID(pID, PropertyArray.s_units), p.dictRef, boundary, boundary);\n            plDiv.appendChild(div);\n        } else {\n            // PropertyMatrix.\n            let matrixNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyMatrix.tagName);\n            if (matrixNodes.length > 0) {\n                if (matrixNodes.length != 1) {\n                    throw new Error(\"Expecting 1 \" + PropertyMatrix.tagName + \" but finding \" + matrixNodes.length + \"!\");\n                }\n                //addPropertyMatrix(false, molecule, mIDM, plDiv, pl, p.dictRef, units);\n                let inputString: string = getInputString(matrixNodes[0]);\n                let values: Big[] = toNumberArray(inputString.split(/\\s+/));\n                let pmAttributes: Map<string, string> = getAttributes(matrixNodes[0]);\n                let pm: PropertyMatrix = new PropertyMatrix(pmAttributes, values);\n                p.setProperty(pm);\n                let label: string = p.dictRef;\n                // Create a new div element for the input.\n                let inputDiv: HTMLDivElement = createLabelWithTextArea(pID,\n                    boundary, level, (event: Event) => {\n                        let target = event.target as HTMLTextAreaElement;\n                        setNumberArrayNode(false, p.dictRef, pm, target);\n                    }, inputString, label);\n                let ta: HTMLTextAreaElement = inputDiv.querySelector('textarea') as HTMLTextAreaElement;\n                ta.value = inputString;\n                resizeTextAreaElement(ta);\n                ta.addEventListener('change', (event: Event) => {\n                    let target = event.target as HTMLTextAreaElement;\n                    inputString = target.value;\n                    pm = p.getProperty() as PropertyMatrix;\n                    values = toNumberArray(inputString.split(/\\s+/));\n                    pm.values = values;\n                    console.log(\"Set \" + p.dictRef + \" of \" + molecule.getLabel() + \" to \" + inputString);\n                    //resizeInputElement(inputElement);\n                    resizeTextAreaElement(ta);\n                });\n                addAnyUnits(units, pmAttributes, inputDiv, ta, mIDM.addID(pID, PropertyArray.s_units),\n                    p.dictRef, boundary, boundary);\n                plDiv.appendChild(inputDiv);\n            } else {\n                throw new Error(\"Expecting \" + PropertyScalarNumber.tagName + \", \" + PropertyArray.tagName + \" or \"\n                    + PropertyMatrix.tagName + \" but finding none!\");\n            }\n        }\n    }\n}\n\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param plDiv The PropertyList div.\n * @param textArea If true, a text area is created rather than an input.\n * @param boundary The boundary to go around components.\n * @param level The level of the component.\n */\nexport function processPropertyString(pl: PropertyList, p: Property, molecule: Molecule, element: Element,\n    plDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n\n    // This is for storing the IDs of the components so that if property is removed and readded, the IDs are available and there is no confuion...\n    let pIDs: Set<string> = new Set<string>();\n\n    // PropertyScalarString.\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalarString.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalarString.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        // Add PropertyScalarNumber.\n        let ps: PropertyScalarString = new PropertyScalarString(psAttributes, inputString);\n        p.setProperty(ps);\n        ps.setValue = function (value: string) {\n            ps.value = value;\n            //console.log(\"Set \" + p.dictRef + \" of \" + molecule.getLabel() + \" to \" + value);\n            if (p.dictRef == ZPE.dictRef || p.dictRef == Hf0.dictRef || p.dictRef == HfAT0.dictRef || p.dictRef == Hf298.dictRef) {\n                // Update the molecule energy diagram.\n                redrawReactionsDiagram();\n            }\n        }.bind(ps);\n        let div: HTMLDivElement = processString(addRID(plDiv.id, p.dictRef), pIDs, p.dictRef, ps.getValue.bind(ps), ps.setValue,\n            () => pl.removeProperty(p.dictRef), boundary1, level1);\n        plDiv.appendChild(div);\n    } else {\n        console.log(\"Expecting \" + PropertyScalarString.tagName + \" but finding none!\");\n    }\n}\n\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */\nfunction processEnergyTransferModel(mIDM: IDManager, etm: EnergyTransferModel, molecule: Molecule, element: Element, moleculeDiv: HTMLDivElement) {\n    let xml_deltaEDowns: HTMLCollectionOf<Element> = element.getElementsByTagName(DeltaEDown.tagName);\n    if (xml_deltaEDowns.length > 0) {\n        // Create a new collapsible div for the energyTransferModel.\n        let etmdivID: string = mIDM.addID(moleculeDiv.id, EnergyTransferModel.tagName);\n        let etmDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n        let etmcDivID = mIDM.addID(etmdivID, s_container);\n        let etmcDiv: HTMLDivElement = getCollapsibleDiv(etmcDivID, moleculeDiv, null, etmDiv, EnergyTransferModel.tagName, boundary1, level1);\n        let deltaEDowns: DeltaEDown[] = [];\n        for (let k = 0; k < xml_deltaEDowns.length; k++) {\n            let inputString: string = getInputString(xml_deltaEDowns[k]);\n            let value: Big = new Big(inputString);\n            let deltaEDownAttributes: Map<string, string> = getAttributes(xml_deltaEDowns[k]);\n            let deltaEDown: DeltaEDown = new DeltaEDown(deltaEDownAttributes, value);\n            deltaEDowns.push(deltaEDown);\n            let label: string = DeltaEDown.tagName;\n            // Create a new div element for the input.\n            let id = mIDM.addID(etmdivID, DeltaEDown.tagName, k);\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level1,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(deltaEDown, target);\n                    inputString = target.value;\n                    deltaEDowns[k].setValue(new Big(inputString));\n                    console.log(\"Set \" + id + \" to \" + inputString);\n                    resizeInputElement(target);\n                }, inputString, label);\n            etmDiv.appendChild(inputDiv);\n            let unitsLabel: HTMLLabelElement = document.createElement('label');\n            unitsLabel.textContent = \"units cm-1\";\n            inputDiv.appendChild(unitsLabel);\n        }\n        etm.setDeltaEDowns(deltaEDowns);\n        molecule.setEnergyTransferModel(etm);\n    }\n}\n\n/**\n * Creates a 3D viewer for the molecule and adds this to the moleculeDiv.\n * \n * @param molecule The molecule.\n * @param moleculeDiv The molecule div.\n * @param boundary The margin for the viewer.\n * @param level The margin for the viewer container div.\n */\nexport function create3DViewer(mIDM: IDManager, molecule: Molecule, moleculeDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    // Add a 3Dmol.js viewer.\n    // Create a new div for the viewer.\n    let viewerContainerDivID: string = mIDM.addID(moleculeDiv.id, s_viewer, s_container);\n    let viewerContainerDiv: HTMLDivElement = createDiv(viewerContainerDivID, level);\n    moleculeDiv.appendChild(viewerContainerDiv);\n    let viewerDivID: string = mIDM.addID(moleculeDiv.id, s_viewer);\n    let showAtomLabels: boolean = false;\n    let showBondLabels: boolean = false;\n    // Create the GLViewer viewer.\n    function createViewer(\n        //cameraPosition: any, cameraOrientation: any, zoomLevel: any, \n        showAtomLabels: boolean, showBondLabels: boolean): any {\n        let viewerDiv: HTMLDivElement = createDiv(viewerDivID, boundary);\n        viewerDiv.className = \"mol-container\";\n        viewerContainerDiv.appendChild(viewerDiv);\n        let config = { backgroundColor: 'grey' };\n        let viewer = $3Dmol.createViewer(viewerDiv, config);\n        // Set the viewer style to stick and ball.\n        viewer.setStyle({ stick: {} });\n        // Create a 3Dmol viewer control to turn labels on and off.\n        molecule.getAtoms().atoms.forEach(function (atom) {\n            let et: string | undefined = atom.getElementType();\n            let color: string;\n            if (et == undefined) {\n                color = 'Purple';\n            } else {\n                color = Mesmer.atomColors.get(et) || 'Purple';\n            }\n            //let am: number = Mesmer.atomMasses.get(atom.getElementType()) || 1;\n            let radius: number;\n            if (et == undefined) {\n                radius = 100;\n            } else {\n                radius = Mesmer.atomRadii.get(atom.getElementType()!) || 100;\n            }\n            let ax: number = atom.getX3()?.toNumber() || 0;\n            let ay: number = atom.getY3()?.toNumber() || 0;\n            let az: number = atom.getZ3()?.toNumber() || 0;\n            //viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: 0.3 * am / 10.0, color: color });\n            viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: radius / 110.0, color: color });\n            //viewer.addSphere({ center: { x: ax, y: ay, z: az }, radius: (radius * (am ** (1 / 3.0))) / 275.0, color: color });\n            if (showAtomLabels) {\n                viewer.addLabel(atom.getID(), { position: { x: ax, y: ay, z: az } });\n            }\n        });\n        //console.log(\"molecule.getBonds().bonds.size \" + molecule.getBonds().bonds.size);\n        molecule.getBonds().bonds.forEach(function (bond) {\n            //console.log(\"bond.atomRefs2 \" + bond.getAtomRefs2());\n            let ids: string[] = bond.getAtomRefs2().split(\" \");\n            let aa: AtomArray = molecule.getAtoms();\n            let a0: Atom = aa.getAtom(ids[0]) as Atom;\n            let a1: Atom = aa.getAtom(ids[1]) as Atom;\n            let order: number = bond.getOrder() || 1;\n            let color: string = Mesmer.bondColors.get(order) || 'Purple';\n            // a0.\n            let a0x: number = a0.getX3()?.toNumber() || 0;\n            let a0y: number = a0.getY3()?.toNumber() || 0;\n            let a0z: number = a0.getZ3()?.toNumber() || 0;\n            // a1.\n            let a1x: number = a1.getX3()?.toNumber() || 0;\n            let a1y: number = a1.getY3()?.toNumber() || 0;\n            let a1z: number = a1.getZ3()?.toNumber() || 0;\n            viewer.addCylinder({ start: { x: a0x, y: a0y, z: a0z }, end: { x: a1x, y: a1y, z: a1z }, radius: 0.06 * order, color: color });\n            if (showBondLabels) {\n                viewer.addLabel(bond.getID()!, { position: { x: (a0x + a1x) / 2, y: (a0y + a1y) / 2, z: (a0z + a1z) / 2 } });\n            }\n        });\n        viewer.zoomTo();\n        viewer.render();\n        /*\n        if (cameraPosition != undefined) {\n            viewer.setCameraPosition(cameraPosition);\n        }\n        if (cameraOrientation != undefined) {\n            viewer.setCameraOrientation(cameraOrientation);\n        }\n        if (zoomLevel != undefined) {\n            viewer.zoom(zoomLevel, 2000);\n        } else {\n            viewer.zoom(0.8, 2000);\n        }\n        return viewer;\n        */\n        viewer.zoom(0.8, 2000);\n\n        return viewer;\n\n    }\n    // Add a redraw button.\n    let redrawButton: HTMLButtonElement = createButton(\"Draw/Redraw\", undefined);\n    let viewer: any;\n    redrawButton.addEventListener('click', () => {\n        remove(viewerDivID);\n        viewer = createViewer(\n            //undefined, undefined, undefined, \n            showAtomLabels, showBondLabels);\n    });\n    viewerContainerDiv.appendChild(redrawButton);\n    // Helper function to create a label button for hiding or showing labels on the viewer.\n    function createLabelButton(label: string, id: string, showState: boolean, updateState: (newState: boolean) => void) {\n        let button = createButton((showState ? \"Hide \" : \"Show \") + label, id, boundary);\n        button.addEventListener('click', () => {\n            if (showState) {\n                button.textContent = \"Show \" + label;\n                showState = false;\n            } else {\n                button.textContent = \"Hide \" + label;\n                showState = true;\n            }\n            /*\n            let cameraPosition = viewer.getCameraPosition();\n            let cameraOrientation = viewer.getCameraOrientation();\n            let zoomLevel = viewer.getZoomLevel();\n            */\n            updateState(showState);\n            remove(viewerDivID);\n            viewer = createViewer(\n                //cameraPosition, cameraOrientation, zoomLevel,\n                showAtomLabels, showBondLabels);\n        });\n        return button;\n    }\n    // Atom Labels.\n    let s_Atom_Labels: string = \"Atom Labels\";\n    let atomLabelbutton = createLabelButton(s_Atom_Labels, mIDM.addID(viewerDivID, s_Atom_Labels), showAtomLabels,\n        newState => showAtomLabels = newState);\n    viewerContainerDiv.appendChild(atomLabelbutton);\n    // Bond Labels.\n    let s_Bond_Labels: string = \"Bond Labels\";\n    let bondLabelbutton = createLabelButton(s_Bond_Labels, mIDM.addID(viewerDivID, s_Bond_Labels), showBondLabels,\n        newState => showBondLabels = newState);\n    viewerContainerDiv.appendChild(bondLabelbutton);\n    // Add a save button to save the viewer as an image.\n    let saveButton: HTMLButtonElement = createButton(\"Save as PNG\", mIDM.addID(viewerDivID, s_save), boundary1);\n    saveButton.addEventListener('click', () => {\n        //viewer.pngURI({ backgroundColor: 'white', download: true });\n        let canvas = viewer.pngURI();\n        let a = document.createElement('a');\n        a.href = canvas;\n        let title: string = mesmer.getTitle()?.value as string;\n        a.download = title.replace(/[^a-z0-9]/gi, '_') + 'mol.png';\n        document.body.appendChild(a); // Append the anchor to the body.\n        a.click(); // Programmatically click the anchor to trigger the download.\n        document.body.removeChild(a); // Remove the anchor from the body after triggering the download.\n        console.log('Save Image');\n    });\n    viewerContainerDiv.appendChild(saveButton);\n}\n\n/**\n * Add a Property.\n * @param dictRef The dictRef.\n * @param ps The PropertyScalar.\n * @param id The id.\n * @param boundary The boundary.\n * @param level The level. \n * @returns A div element.\n */\nexport function addProperty1(dictRef: string, ps: PropertyScalarNumber, id: string,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let pDiv: HTMLDivElement = createFlexDiv(id, level);\n    pDiv.appendChild(createLabel(dictRef, boundary));\n    // value.\n    let value: Big = ps.getValue();\n    //let value: string = ps.value;\n    let valueInputId: string = addRID(id, s_input);\n    let valueInput: HTMLInputElement = createInput(\"text\", valueInputId, boundary);\n    pDiv.appendChild(valueInput);\n    valueInput.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        ps.setValue(new Big(target.value));\n        //ps.value = target.value;\n        resizeInputElement(target);\n    });\n    valueInput.value = value.toString();\n    resizeInputElement(valueInput);\n    return pDiv;\n}\n\n/**\n * Add a PropertyScalarNumber.\n * @param attributes The attributes.\n * @param mIDM The molecule IDManager.\n * @param value The value.\n * @param units The units.\n * @param pl The PropertyList.\n * @param p The Property.\n * @param plDiv The PropertyList div.\n * @param boundary The boundary.\n */\nexport function addPropertyScalarNumber1(attributes: Map<string, string>, mIDM: IDManager, value: Big,\n    units: string[] | undefined, pl: PropertyList, p: Property, plDiv: HTMLDivElement,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): void {\n    let ps: PropertyScalarNumber = p.getProperty() as PropertyScalarNumber;\n    ps.setValue = function (value: Big) {\n        ps.value = value;\n        if (p.dictRef == ZPE.dictRef || p.dictRef == Hf0.dictRef || p.dictRef == HfAT0.dictRef || p.dictRef == Hf298.dictRef) {\n            // Update the molecule energy diagram.\n            redrawReactionsDiagram();\n        }\n    }.bind(ps);\n    ps.value = value;\n    if (p.dictRef == ZPE.dictRef || p.dictRef == Hf0.dictRef || p.dictRef == HfAT0.dictRef || p.dictRef == Hf298.dictRef) {\n        // Update the molecule energy diagram.\n        redrawReactionsDiagram();\n    }\n    let id: string = addRID(plDiv.id, p.dictRef);\n    console.log(\"div ID \" + id);\n    let div: HTMLDivElement = processNumber(id, mIDM, p.dictRef, ps.getValue.bind(ps),\n        (value: Big) => setPropertyScalarNumber(p.dictRef, pl, ps, value),\n        () => pl.removeProperty(p.dictRef), boundary1, level1);\n    console.log(\"unitsID \" + addRID(id, PropertyScalarNumber.s_units));\n    addAnyUnits(units, attributes, div, div.querySelector(s_input) as HTMLElement, getID(id, PropertyScalarNumber.s_units), p.dictRef, boundary, boundary);\n    plDiv.appendChild(div);\n}\n\n/**\n * Process a numerical variable.\n * @param id The id.\n * @param mIDM The .\n * @param name The name of the variable.\n * @param getter The getter function.\n * @param setter The setter function.\n * @param margin The margin.\n */\nexport function processNumberArrayOrMatrix(plDiv: HTMLDivElement, mIDM: IDManager, name: string, pa: PropertyArray | PropertyMatrix,\n    getter: () => Big[] | undefined, setter: (values: Big[]) => void, remover: () => void,\n    marginComponent: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n    margin: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let divID: string = getID(plDiv.id, name);\n    let div: HTMLDivElement = createFlexDiv(divID, margin);\n    let buttonTextContentSelected: string = name + sy_selected;\n    let buttonTextContentDeselected: string = name + sy_deselected;\n    //let id: string = mIDM.addID(plDiv.id, name);\n    //let idb = mIDM.addID(divID, s_button);\n    let idb = getID(divID, s_button);\n    let button = createButton(buttonTextContentDeselected, idb, marginComponent);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    //let inputId: string = mIDM.addID(divID, s_input)\n    let inputId: string = getID(divID, s_input)\n    let values: Big[] | undefined = getter();\n    if (values == undefined) {\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    } else {\n        addNumberArray(div, inputId, name, values, pa, getter, setter, marginComponent);\n        //plDiv.appendChild(div);\n        button.textContent = buttonTextContentSelected;\n        button.classList.toggle(s_optionOff);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (document.getElementById(inputId) == null) {\n            addNumberArray(div, inputId, name, values, pa, getter, setter, marginComponent);\n            //plDiv.appendChild(div);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            // Remove existing.\n            document.getElementById(inputId)?.remove();\n            remover();\n            console.log(\"Removed \" + inputId);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n    return div;\n}\n\n/**\n * @param div The div to add the input to.\n * @param id The id.\n * @param name The name of the input.\n * @param values The numerical values.\n * @param paom The PropertyArray or PropertyMatrix.\n * @param getter The getter function.\n * @param setter The setter function.\n * @param boundary The boundary for the text area.\n */\nfunction addNumberArray(div: HTMLDivElement, id: string, name: string, values: Big[] | undefined,\n    paom: PropertyArray | PropertyMatrix, getter: () => Big[] | undefined, setter: (value: Big[]) => void,\n    boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n    let valueString: string;\n    if (values == undefined) {\n        valueString = \"\";\n    } else {\n        valueString = bigArrayToString(values);\n    }\n    let ta: HTMLTextAreaElement = createTextArea(id, boundary);\n    ta.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLTextAreaElement;\n        let values: Big[] = setNumberArrayNode(true, name, paom, ta)\n        try {\n            setter(values);\n            console.log(name + \" changed from \" + valueString + \" to \" + target.value);\n        } catch (e) {\n            alert(\"Input invalid, resetting...\");\n            target.value = getter()!.toString();\n        }\n        resizeTextAreaElement(target);\n    });\n    ta.value = valueString;\n    resizeTextAreaElement(ta);\n    div.appendChild(ta);\n}\n\n/**\n * @param inputString The input string.\n * @param defaultValues The default values.\n * @returns The input string converted to a numerical Big[] or the defaultValues.\n */\nfunction toBigArray(inputString: string, defaultValues: Big[]): Big[] {\n    let inputStrings: string[] = inputString.split(/\\s+/);\n    let values: Big[] = [];\n    let success: boolean = true;\n    inputStrings.forEach(function (value) {\n        if (!isNumeric(value)) {\n            success = false;\n        } else {\n            values.push(new Big(value));\n        }\n    });\n    if (!success) {\n        alert(\"An input is not a number, resetting...\");\n        return defaultValues;\n    }\n    return values;\n}\n\n\n/**\n * Set a molecule property array when the input value is changed.\n * @param setSize If true then the the size of the number array can be set.\n * @param dictRef The dictRef.\n * @param node The NumberArayNode.\n * @param ta The HTMLTextAreaElement.\n */\nexport function setNumberArrayNode(setSize: boolean, dictRef: string, node: NumberArrayNode, ta: HTMLTextAreaElement): Big[] {\n    let inputString: string = ta.value.trim();\n    let originalValues = arrayToString(node.values, \" \");\n    //if (node.getValues().length == 0) {\n    //let values: Big[] = [];\n    //setValues(dictRef, values);\n    //node.setValues(values);\n    //}\n    if (inputString == \"\") {\n        alert(\"Empty input resetting...\");\n        ta.value = originalValues;\n        return node.values;\n    }\n    let values: Big[] = toBigArray(inputString, node.values);\n    //console.log(\"propertyArray=\" + propertyArray);\n    if (values.length == node.values.length) {\n        node.setValues(values);\n        console.log(\"Changed \" + node.tagName + \" from: \\\"\" + originalValues + \"\\\" to: \\\"\" + arrayToString(node.values, \" \") + \"\\\"\");\n        //console.log(\"molecule=\" + molecule);\n    } else {\n        if (setSize) {\n            //let values: Big[] = [];\n            //setValues(dictRef, values);\n            node.setValues(values);\n            console.log(\"Changed \" + node.tagName + \" from: \\\"\" + originalValues + \"\\\" to: \\\"\" + arrayToString(node.values, \" \") + \"\\\"\");\n        } else {\n            alert(\"Expecting \" + node.values.length + \" values for, but finding \" + values.length + \" resetting...\");\n            ta.value = originalValues;\n        }\n    }\n    return node.values;\n}","import { mapToString } from \"./util\";\nimport { getAttributes, getSingularElement } from \"./xml\";\n\n/**\n * Defaults are stored in a defaults.xml file. MESMER version 7.0 has the following:\n * <me:activationEnergy units=\"kJ/mol\" default=\"NEEDS TO BE CHECKED**\">0.0</me:activationEnergy>\n * <me:preExponential default=\"NEEDS TO BE CHECKED**\">6.00e-12</me:preExponential>\n * <property dictRef=\"me:spinMultiplicity\" default=\"true\">\n *  <scalar>1</scalar>\n * </property>\n * <property dictRef=\"me:symmetryNumber\" default=\"true\">\n *  <scalar>1</scalar>\n * </property>\n * <property dictRef=\"me:frequenciesScaleFactor\" default=\"true\">\n *  <scalar>1</scalar>\n * </property>\n * <property dictRef=\"me:epsilon\" default=\"true\">\n *  <scalar>50.0</scalar>\n * </property>\n * <property dictRef=\"me:sigma\" default=\"true\">\n *  <scalar>5.0</scalar>\n * </property>\n * <me:deltaEDown default=\"NEEDS TO BE CHECKED**\">130.0</me:deltaEDown>\n * <property dictRef=\"me:deltaEDownTExponent\" default=\"true\">\n *  <scalar referenceTemperature=\"298\">0.0</scalar>\n * </property>\n * <molecule spinMultiplicity=\"1\" default=\"true\"/>\n * <molecule me:type=\"deficientReactant excessReactant modelled transitionState sink\"\n *           default=\"is unsatisfactory. Choose one from list: \"></molecule>\n * <molecule role=\"deficientReactant excessReactant modelled transitionState sink\"\n *           default=\"is unsatisfactory. Choose one from list: \"></molecule>\n * <property dictRef=\"me:MW\" default=\"IS UNSATISFACTORY. A VALUE NEEDS TO BE PROVIDED**\">\n *  <scalar>0.0</scalar>\n * </property>\n * <me:MCRCMethod default=\"NEEDS TO BE CHECKED. COULD BE** \" name=\"RRKM\"/>\n * <me:DOSCMethod default=\"true\" name=\"ClassicalRotors\"/>\n * <me:DOSCType default=\"true\">external</me:DOSCType>\n * <me:DistributionCalcMethod default=\"true\" name=\"Boltzmann\"/>\n * <me:excessReactantConc default=\"NEEDS TO BE CHECKED**\">2.25e+16</me:excessReactantConc>\n * <me:PTpair units=\"PPCC\" precision=\"d\" P=\"1.01E17\" T=\"299\" timeUnits =\"microsec\" default=\"true\"/>\n * <me:PTset units=\"PPCC\" precision=\"d\" default=\"true\"/>\n * <me:bathgas default=\"true\">He</me:bathgas>\n * <me:TInfinity default=\"true\">298</me:TInfinity>\n * <me:grainSize units=\"cm-1\" default=\"true\">100</me:grainSize>\n * <me:energyAboveTheTopHill units=\"kT\" default=\"true\">25</me:energyAboveTheTopHill>\n * <me:calcMethod default=\"true\" name=\"simpleCalc\"/>\n * <me:fittingTolerance default=\"true\">0.01</me:fittingTolerance>\n * <me:fittingIterations default=\"true\">10</me:fittingIterations>\n * <me:energyTransferModel name=\"ExponentialDown\" default=\"true\"/>\n * <me:FragmentDist name=\"Prior\" default=\"true\"/>\n * <me:MarquardtDerivDelta default=\"true\">1.e-03</me:MarquardtDerivDelta>\n * <me:MarquardtTolerance default=\"true\">1.e-03</me:MarquardtTolerance>\n * <me:MarquardtLambda default=\"true\">1.0</me:MarquardtLambda>\n * <me:MarquardtLambdaScale default=\"true\">10.0</me:MarquardtLambdaScale>\n * <me:ConstraintFactor default=\"true\">1.0</me:ConstraintFactor>\n * <me:ConstraintAddand default=\"true\">0.0</me:ConstraintAddand>\n * <me:sensitivityAnalysisSamples default=\"true\">256</me:sensitivityAnalysisSamples>\n * <me:sensitivityGenerateData default=\"true\">true</me:sensitivityGenerateData>\n * <me:chebMinConc units=\"particles per cubic centimeter\" default=\"true\"/>\n * <me:calcMethod units=\"kJ/mol\" default=\"true\"/>\n * <me:Tmin default=\"true\">200</me:Tmin>\n * <me:Tmax default=\"true\">1500</me:Tmax>\n * <me:Tstep default=\"true\">50</me:Tstep>\n * <me:Tmid default=\"true\">1000</me:Tmid>\n * <me:shortestTimeOfInterest default=\"true\">1.0e-11</me:shortestTimeOfInterest>\n * <me:MaximumEvolutionTime default=\"true\">1.0e+05</me:MaximumEvolutionTime>\n * <me:errorPropagationSamples default=\"true\">300</me:errorPropagationSamples>\n * <property dictRef=\"me:Hf298\">\n *  <scalar units=\"kJ/mol\" default=\"true\"/>\n * </property>\n * <property dictRef=\"me:Hf0\">\n *  <scalar units=\"kJ/mol\" default=\"true\"/>\n * </property>\n * <property dictRef=\"me:ZPE\">\n *  <scalar units=\"kJ/mol\" default=\"true\"/>\n * </property>\n * <me:RMS_SOC_element units=\"cm-1\" default=\"true\">10.0</me:RMS_SOC_element>\n * <me:GradientDifferenceMagnitude units=\"a.u./Bohr\" default=\"true\">0.1</me:GradientDifferenceMagnitude>\n * <me:GradientReducedMass units=\"a.m.u.\" default=\"true\">16.0</me:GradientReducedMass>\n * <me:AverageSlope units=\"a.u./Bohr\" default=\"true\">0.1</me:AverageSlope>\n * <me:ForceMacroDetailedBalance default=\"true\">true</me:ForceMacroDetailedBalance>\n * <me:testMicroRates Tmin = \"100\" Tmax = \"2000\" Tstep = \"100\" default=\"true\"/>\n * <me:experimentalRate error =\"0.0\" default=\"true\"/>\n */\nexport class Defaults {\n\n    /**\n     * TagName.\n     */\n    tagName: string = 'defaults';\n\n    /**\n     * Default values. Keys are tagNames.\n     */\n    values: Map<string, string>;\n\n    /**\n     * @param attributes Keys are tagNames.\n     */\n    attributess: Map<string, Map<string, string>>;\n\n    /**\n     * Construct a new M_Defaults object.\n     */\n    constructor() {\n        this.values = new Map<string, string>();\n        this.attributess = new Map<string, Map<string, string>>();\n    }\n\n    /**\n     * Read the defaults.xml file.\n     */\n    readFile(): void {\n        // Create a file input element to prompt the user to select the default.xml file.\n        let input: HTMLInputElement = document.createElement('input');\n        input.type = 'file';\n        let self = this;\n        input.onchange = function () {\n            if (input.files) {\n                for (let i = 0; i < input.files.length; i++) {\n                    console.log(\"inputElement.files[\" + i + \"]=\" + input.files[i]);\n                }\n                let file: File | null = input.files[0];\n                //console.log(\"file=\" + file);\n                console.log(file.name);\n                let inputFilename: string = file.name;\n                let reader = new FileReader();\n                let chunkSize = 1024 * 1024; // 1MB\n                let start = 0;\n                let contents = '';\n                reader.onload = function (e) {\n                    if (e.target == null) {\n                        throw new Error('Event target is null');\n                    }\n                    contents += (e.target as FileReader).result as string;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            //console.log('contents ' + contents);\n                            let parser = new DOMParser();\n                            let xml: Document = parser.parseFromString(contents, \"text/xml\");\n                            self.parse(xml);\n                        }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        };\n        input.click();\n    }\n\n    /**\n     * Parses the xml loading data into attributess and values.\n     * @param xml The XML document.\n     */\n    parse(xml: Document): void {\n        // Process the XML.\n        let xml_defaults: Element = getSingularElement(xml, this.tagName);\n        let attributes: Map<string, string> = getAttributes(xml_defaults);\n        console.log(\"Default attributes: \" + mapToString(attributes));\n        let children: HTMLCollection = xml_defaults.children;\n        console.log(\"children.length=\" + children.length);\n        for (let i = 0; i < children.length; i++) {\n            let child: Element = children[i] as Element;\n            let tagName: string = child.tagName;\n            console.log(\"tagName=\" + tagName);\n            let attributes: Map<string, string> = getAttributes(child);\n            this.attributess.set(tagName, attributes);\n            console.log(\"Attributes: \" + mapToString(attributes));\n            if (tagName == 'property') {\n                let dictRef: string = child.getAttribute('dictRef') as string;\n                try {\n                    let xml_scalar = getSingularElement(child, 'scalar');\n                    let v: string | null = xml_scalar.innerHTML;\n                    if (v != null) {\n                        console.log(\"v=\" + v);\n                        this.values.set(dictRef, v);\n                    } else {\n                        console.log(\"v is null\");\n                    }\n                } catch (e) {\n                    console.log(\"Error: \" + e);\n                }\n            } else {\n                //let v: string | null = child.nodeValue;\n                //let v: string | null = child.nodeName;\n                let v: string | null = child.innerHTML;\n                if (v != null) {\n                    console.log(\"v=\" + v);\n                    this.values.set(tagName, v);\n                } else {\n                    console.log(\"v is null\");\n                }\n            }\n        }\n\n        // Some tests.\n        console.log(\"values: \" + mapToString(this.values));\n        this.attributess.forEach((value: Map<string, string>, key: string) => {\n            console.log(\"key=\" + key + \" value=\" + mapToString(value));\n        });\n    }\n\n\n}","import Big from \"big.js\";\nimport {\n    s_Add_sy_add, addRID, level1, s_container, boundary1, getMoleculeKeys, addAnyUnits,\n    addSaveAsCSVButton, s_input, s_table, setNumberNode, addRemoveButton, IDManager, mesmer, s_Reactants, s_Products, s_Transition_States, s_Tunneling, big0, defaults\n} from \"./app.js\";\nimport {\n    createButton, s_button, createDiv, getCollapsibleDiv, createSelectElement, s_select,\n    addTableRow, createLabel, createLabelWithInput, createLabelWithSelect, createTable,\n    resizeInputElement, resizeSelectElement, createFlexDiv\n} from \"./html.js\";\nimport { ReactionList, Description, T } from \"./xml_mesmer.js\";\nimport { Molecule } from \"./xml_molecule.js\";\nimport {\n    Reaction, Reactant, ActivationEnergy, CanonicalRateList, ExcessReactantConc, Keq, Kinf,\n    MCRCMethod, MesmerILT, NInfinity, PreExponential, Product, ReactionMolecule, Rev, TInfinity,\n    TransitionState, Tunneling, Val\n} from \"./xml_reaction.js\";\nimport { getID, mapToString } from \"./util.js\";\nimport {\n    getFirstElement, getFirstChildNode, getNodeValue, getInputString, getAttributes,\n    getSingularElement\n} from './xml.js';\nimport { BathGas } from \"./xml_conditions.js\";\n\n/**\n * Create an add reaction button.\n */\nexport function getAddReactionButton(rIDM: IDManager, rlDiv: HTMLDivElement, reactions: Map<string, Reaction>,\n    molecules: Map<string, Molecule>): HTMLButtonElement {\n    let rb: HTMLButtonElement = createButton(s_Add_sy_add, addRID(Reaction.tagName, \"add\", s_button), level1);\n    rlDiv.appendChild(rb);\n    rb.addEventListener('click', () => {\n        let reactionAttributes: Map<string, string> = new Map();\n        // Get Reaction ID.\n        let rl: ReactionList = mesmer.getReactionList();\n        let i: number = rl.getNextReactionID();\n        console.log(\"Next Reaction ID=\" + i);\n        reactionAttributes.set(Reaction.s_id, \"R\" + i);\n        let r: Reaction = new Reaction(reactionAttributes);\n        reactions.set(r.id, r);\n        // Add to mesmer.\n        rl.addReaction(r);\n        let rDivID: string = rIDM.addID(Reaction.tagName, r.id);\n        let rDiv: HTMLDivElement = createDiv(rDivID);\n        rlDiv.appendChild(rDiv);\n        // Create collapsible content.\n        let rcDivID: string = rIDM.addID(rDivID, s_container);\n        let rcDiv: HTMLDivElement = getCollapsibleDiv(rcDivID, rlDiv, rb, rDiv, r.getLabel(), boundary1, level1);\n        let rcb: HTMLButtonElement = rcDiv.querySelector('button') as HTMLButtonElement;\n        // Create collapsible content for reactants.\n        let rsDivID: string = rIDM.addID(rDivID, Reactant.tagName);\n        let rsDiv: HTMLDivElement = createDiv(rsDivID);\n        let rscDivID = rIDM.addID(rsDivID, s_container);\n        let rscDiv: HTMLDivElement = getCollapsibleDiv(rscDivID, rDiv, null, rsDiv, s_Reactants, boundary1, level1);\n        let reactants: Map<string, Reactant> = new Map();\n        r.setReactants(reactants);\n        addAddReactantButton(r, rcb, rIDM, rDivID, rsDiv, molecules, reactants);\n        // Create collapsible content for products.\n        let psDivID: string = rIDM.addID(rDivID, Product.tagName);\n        let psDiv: HTMLDivElement = createDiv(psDivID);\n        let pscDivID = rIDM.addID(psDivID, s_container);\n        let pscDiv: HTMLDivElement = getCollapsibleDiv(pscDivID, rDiv, null, psDiv, s_Products, boundary1, level1);\n        let products: Map<string, Product> = new Map();\n        r.setProducts(products);\n        addAddProductButton(r, rcb, rIDM, rDivID, psDiv, molecules, products);\n        // Create collapsible content for transition states.\n        let tsDivID: string = rIDM.addID(rDivID, TransitionState.tagName);\n        let tsDiv: HTMLDivElement = createDiv(tsDivID);\n        let tscDivID = rIDM.addID(tsDivID, s_container);\n        let tscDiv: HTMLDivElement = getCollapsibleDiv(tscDivID, rDiv, null, tsDiv, s_Transition_States, boundary1, level1);\n        let transitionStates: Map<string, TransitionState> = new Map();\n        r.setTransitionStates(transitionStates);\n        addAddTransitionStateButton(rIDM, rDivID, tsDiv, molecules, transitionStates);\n        // Create collapsible content for MCRCMethod.\n        let mmDivId: string = rIDM.addID(rDivID, MCRCMethod.tagName);\n        let mmDiv: HTMLDivElement = createDiv(mmDivId);\n        let mmcDivId = rIDM.addID(mmDivId, s_container);\n        let mmcDiv: HTMLDivElement = getCollapsibleDiv(mmcDivId, rDiv, null, mmDiv, MCRCMethod.tagName, boundary1, level1);\n        //rDiv.appendChild(mmcDiv);\n        let mmAttributes: Map<string, string> = new Map();\n        mmAttributes.set(\"xsi:type\", MesmerILT.xsiType);\n        let mm: MCRCMethod = new MesmerILT(mmAttributes);\n        r.setMCRCMethod(mm);\n        let inputString: string;\n        let value: Big; \n        // PreExponential.\n        if (true) {\n            // Get value from defaults.\n            if (defaults != undefined) {\n                inputString = defaults.values.get(PreExponential.tagName) ?? \"\";\n                if (inputString == \"\") {\n                    inputString= \"6.00e-12\";\n                }\n            } else {\n                inputString= \"6.00e-12\";\n            }\n            value = new Big(inputString);\n            let peAttributes: Map<string, string> = new Map();\n            let pe: PreExponential = new PreExponential(peAttributes, value);\n            (mm as MesmerILT).setPreExponential(pe);\n                let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, PreExponential.tagName, s_input),\n                boundary1, level1,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(pe, target);\n                }, inputString, PreExponential.tagName);\n            mmDiv.appendChild(lwi);\n            let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n            input.value = inputString;\n            resizeInputElement(input);\n            input.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                inputString = target.value;\n                pe.value = new Big(inputString);\n                console.log(PreExponential.tagName + \" changed to \" + inputString);\n                resizeInputElement(input);\n            });\n            addAnyUnits(undefined, peAttributes, lwi, null, addRID(mmDivId, PreExponential.tagName),\n                PreExponential.tagName, boundary1, boundary1);\n            mmDiv.appendChild(lwi);\n        }\n        // ActivationEnergy.\n        if (true) {\n            // Get value from defaults.\n            if (defaults != undefined) {\n                inputString = defaults.values.get(ActivationEnergy.tagName) ?? \"\";\n                if (inputString == \"\") {\n                    inputString = \"0.0\";\n                }\n            } else {\n                inputString= \"0.0\";\n            }\n            value = new Big(inputString);\n            let aeAttributes: Map<string, string> = new Map();\n            let ae: ActivationEnergy = new ActivationEnergy(aeAttributes, value);\n            (mm as MesmerILT).setActivationEnergy(ae);\n            // Create a new div element for the input.\n            let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, ActivationEnergy.tagName, s_input), boundary1, level1,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(ae, target);\n                }, inputString, ActivationEnergy.tagName);\n            let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n            input.value = inputString;\n            resizeInputElement(input);\n            input.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                inputString = target.value;\n                ae.value = new Big(inputString);\n                console.log(ActivationEnergy.tagName + \" changed to \" + inputString);\n                resizeInputElement(input);\n            });\n            addAnyUnits(undefined, aeAttributes, lwi, null, addRID(mmDivId, ActivationEnergy.tagName),\n                ActivationEnergy.tagName, boundary1, boundary1);\n            mmDiv.appendChild(lwi);\n        }\n        // TInfinity.\n        if (true) {\n            // Get value from defaults.\n            if (defaults != undefined) {\n                inputString = defaults.values.get(TInfinity.tagName) ?? \"\";\n                if (inputString == \"\") {\n                    inputString = \"298\";\n                }\n            } else {\n                inputString= \"298\";\n            }\n            value = new Big(inputString);\n            let tiAttributes: Map<string, string> = new Map();\n            let ti: TInfinity = new TInfinity(tiAttributes, value);\n            (mm as MesmerILT).setTInfinity(ti);\n            // Create a new div element for the input.\n            let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, TInfinity.tagName, s_input),\n                boundary1, level1,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(ti, target);\n                }, inputString, TInfinity.tagName);\n            let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n            input.value = inputString;\n            resizeInputElement(input);\n            input.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                inputString = target.value;\n                ti.value = new Big(inputString);\n                console.log(TInfinity.tagName + \" changed to \" + inputString);\n                resizeInputElement(input);\n            });\n            addAnyUnits(undefined, tiAttributes, lwi, null, addRID(mmDivId, TInfinity.tagName), TInfinity.tagName, boundary1, boundary1);\n            mmDiv.appendChild(lwi);\n        }\n        // NInfininty.\n        if (true) {\n            // Get value from defaults.\n            if (defaults != undefined) {\n                inputString = defaults.values.get(NInfinity.tagName) ?? \"\";\n                if (inputString == \"\") {\n                    inputString = \"0.08\";\n                }\n            } else {\n                inputString= \"0.08\";\n            }\n            value = new Big(inputString);\n            let niAttributes: Map<string, string> = new Map();\n            let ni: NInfinity = new NInfinity(niAttributes, value);\n            (mm as MesmerILT).setNInfinity(ni);\n            // Create a new div element for the input.\n            let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, NInfinity.tagName, s_input), boundary1, level1,\n                (event: Event) => {\n                    let target = event.target as HTMLInputElement;\n                    setNumberNode(ni, target);\n                }, inputString, NInfinity.tagName);\n            mmDiv.appendChild(lwi);\n            let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n            input.value = inputString;\n            resizeInputElement(input);\n            input.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                inputString = target.value;\n                ni.value = new Big(inputString);\n                console.log(NInfinity.tagName + \" set to \" + inputString);\n                resizeInputElement(input);\n            });\n            addAnyUnits(undefined, niAttributes, lwi, null, addRID(mmDivId, NInfinity.tagName), NInfinity.tagName,\n                boundary1, boundary1);\n            mmDiv.appendChild(lwi);\n        }\n        // ExcessReactantConc.\n        let ercDivId: string = rIDM.addID(rDivID, ExcessReactantConc.tagName);\n        let ercDiv: HTMLDivElement = createDiv(ercDivId);\n        // Get default value.\n        if (defaults != undefined) {\n            inputString = defaults.values.get(ExcessReactantConc.tagName) ?? \"\";\n            if (inputString == \"\") {\n                inputString = \"2.25e+16\";\n            }\n        } else {\n            inputString= \"2.25e+16\";\n        }\n        value = new Big(inputString);\n        let erc: ExcessReactantConc = new ExcessReactantConc(new Map(), value);\n        r.setExcessReactantConc(erc);\n        // Create a new div element for the input.\n        let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(ercDivId, ExcessReactantConc.tagName, s_input), boundary1, level1,\n            (event: Event) => {\n                let target = event.target as HTMLInputElement;\n                setNumberNode(erc, target);\n            }, inputString, ExcessReactantConc.tagName);\n        let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n        input.value = inputString;\n        resizeInputElement(input);\n        input.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            let inputString = target.value;\n            erc.value = new Big(inputString);\n            console.log(ExcessReactantConc.tagName + \" changed to \" + inputString);\n            resizeInputElement(input);\n        });\n        addAnyUnits(undefined, new Map(), lwi, null, addRID(ercDivId, ExcessReactantConc.tagName), ExcessReactantConc.tagName, boundary1, boundary1);\n        ercDiv.appendChild(lwi);\n        rDiv.appendChild(ercDiv);\n        \n        // Add a remove reaction button.\n        addRemoveButton(rDiv, level1, () => {\n            removeReaction(rlDiv, rcDiv, rIDM, rDivID, reactions, r);\n        });\n\n    });\n    return rb;\n}\n\n/**\n * For adding an add reactant button.\n * @param r The reaction.\n * @param rIDM The IDManager for the reaction list.\n * @param rDivID The reaction div ID.\n * @param rsDiv The reactants div.\n * @param molecules The molecules map.\n * @param reactants The reactants map.\n */\nfunction addAddReactantButton(r: Reaction, rcb: HTMLButtonElement, rIDM: IDManager, rDivID: string, rsDiv: HTMLDivElement,\n    molecules: Map<string, Molecule>, reactants: Map<string, Reactant>): void {\n    // Add an add button to add a reactant.\n    let addReactantButton: HTMLButtonElement = createButton(s_Add_sy_add,\n        rIDM.addID(rDivID, Reactant.tagName, s_button), level1);\n    rsDiv.appendChild(addReactantButton);\n    addReactantButton.addEventListener('click', () => {\n        if (molecules.size === 0) {\n            // Instruct user to add a molecule.\n            alert(\"Please add a molecule to the moleculeList first.\");\n            return;\n        }\n        //let reactantDivID: string = rIDM.addID(rDivID, Reactant.tagName, mid);\n        //let reactantDiv: HTMLDivElement = createDiv(reactantDivID);\n        let reactantDiv: HTMLDivElement = createFlexDiv(undefined);\n        rsDiv.insertBefore(reactantDiv, addReactantButton);\n        // Create a selector to select a molecule as a reactant.\n        let selectReactant: HTMLSelectElement = createSelectElement(getMoleculeKeys(molecules), s_select, \"\",\n            getID(rDivID, Reactant.tagName, s_select), level1);\n        // Have the select element update options if new molecules are added.\n        selectReactant.classList.add(BathGas.tagName);\n        reactantDiv.appendChild(selectReactant);\n        // Add an event listener to the select element.\n        selectReactant.addEventListener('click', (event: Event) => {\n            if (selectReactant.options.length === 1) {\n                // If there is only one option then select it.\n                alert(\"As there is only one molecule it will be selected.\");\n                selectReactant.selectedIndex = 0;\n                selectReactant.dispatchEvent(new Event('change'));\n            }\n        });\n        selectReactant.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            let molecule: Molecule = molecules.get(target.value) as Molecule;\n            let rmAttributes: Map<string, string> = new Map();\n            let mid: string = molecule.getID();\n            if (reactants.has(mid)) {\n                alert(\"Molecule already selected as a reactant. Please select a different molecule \\\n                (you may want to add more molecules to the moleculeList).\");\n                // Remove the select element.\n                reactantDiv.removeChild(selectReactant);\n                return;\n            }\n            reactantDiv.id = rIDM.addID(rDivID, Reactant.tagName, mid);\n            rmAttributes.set(ReactionMolecule.s_ref, mid);\n            let rm: ReactionMolecule = new ReactionMolecule(rmAttributes);\n            let reactant: Reactant = new Reactant(new Map(), rm);\n            reactants.set(mid, reactant);\n            r.addReactant(reactant);\n            // Update the collapsible button label with the molecule name.\n            rcb.textContent = r.getLabel();\n            console.log(\"ReactionLabel=\" + r.getLabel());\n            // Create a new div for the role selector.\n            let lws: HTMLDivElement = createLabelWithSelect(rm.getRef() + \" role\", Reactant.roleOptions, \"Role\",\n                rm.getRole(), getID(rDivID, s_select), boundary1, level1);\n            let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n            select?.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLSelectElement;\n                rm.setRole(target.value);\n                console.log(\"Set Role to \" + target.value);\n                resizeSelectElement(target);\n            });\n            reactantDiv.appendChild(lws);\n            // Remove the select element.\n            reactantDiv.removeChild(selectReactant);\n            // Add a remove button to remove the reactant.\n            let rrb: HTMLButtonElement = addRemoveButton(reactantDiv, boundary1, () => {\n                rsDiv.removeChild(reactantDiv);\n                reactants.delete(mid);\n                r.removeReactant(mid);\n            });\n        });\n        if (selectReactant.options.length === 1) {\n            // If there is only one option then select it.\n            selectReactant.selectedIndex = 0;\n            selectReactant.dispatchEvent(new Event('change'));\n        }\n    });\n}\n\n/**\n * For adding an add product button.\n * @param rcb The reaction button.\n * @param rIDM The IDManager for the reaction list.\n * @param rDivID The reaction div ID.\n * @param psDiv The products div.\n * @param molecules The molecules map.\n * @param products The products map.\n */\nfunction addAddProductButton(r: Reaction, rcb: HTMLButtonElement, rIDM: IDManager, rDivID: string,\n    psDiv: HTMLDivElement, molecules: Map<string, Molecule>, products: Map<string, Product>) {\n    // Add an add button to add a product.\n    let addProductButton: HTMLButtonElement = createButton(s_Add_sy_add,\n        rIDM.addID(rDivID, Product.tagName, s_button), level1);\n    psDiv.appendChild(addProductButton);\n    addProductButton.addEventListener('click', () => {\n        if (molecules.size === 0) {\n            // Instruct user to add a molecule.\n            alert(\"Please add a molecule to the moleculeList first.\");\n            return;\n        }\n        //let productDivID: string = rIDM.addID(rDivID, Product.tagName, mid);\n        //let productDiv: HTMLDivElement = createDiv(productDivID);\n        let productDiv: HTMLDivElement = createFlexDiv(undefined);\n        psDiv.insertBefore(productDiv, addProductButton);\n        // Create a selector to select a molecule as a product.\n        let selectProduct: HTMLSelectElement = createSelectElement(getMoleculeKeys(molecules), s_select, \"\",\n            getID(rDivID, Product.tagName, s_select), level1);\n        // Have the select element update options if new molecules are added.\n        selectProduct.classList.add(BathGas.tagName);\n        productDiv.appendChild(selectProduct);\n        // Add an event listener to the select element.\n        selectProduct.addEventListener('click', (event: Event) => {\n            if (selectProduct.options.length === 1) {\n                // If there is only one option then select it.\n                alert(\"As there is only one molecule it will be selected.\");\n                selectProduct.selectedIndex = 0;\n                selectProduct.dispatchEvent(new Event('change'));\n            }\n        });\n        selectProduct.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            let molecule: Molecule = molecules.get(target.value) as Molecule;\n            let rmAttributes: Map<string, string> = new Map();\n            let mid: string = molecule.getID();\n            if (products.has(mid)) {\n                alert(\"Molecule already selected as a product. Please select a different molecule (you may want to add more molecules to the moleculeList).\");\n                // Remove the select element.\n                productDiv.removeChild(selectProduct);\n                //r.removeProduct(target.value);\n                return;\n            }\n            productDiv.id = rIDM.addID(rDivID, Product.tagName, mid);\n            rmAttributes.set(ReactionMolecule.s_ref, mid);\n            let rm: ReactionMolecule = new ReactionMolecule(rmAttributes);\n            let product: Product = new Product(new Map(), rm);\n            products.set(mid, product);\n            r.addProduct(product);\n            // Update the collapsible button label with the molecule name.\n            rcb.textContent = r.getLabel();\n            console.log(\"ReactionLabel=\" + r.getLabel());\n            // Create a new div for the role selector.\n            let lws: HTMLDivElement = createLabelWithSelect(rm.getRef() + \" role\", Product.roleOptions, \"Role\",\n                rm.getRole(), getID(rDivID, s_select), boundary1, level1);\n            let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n            select?.addEventListener('change', (event: Event) => {\n                let target = event.target as HTMLSelectElement;\n                rm.setRole(target.value);\n                console.log(\"Set Role to \" + target.value);\n                resizeSelectElement(target);\n            });\n            productDiv.appendChild(lws);\n            // Remove the select element.\n            productDiv.removeChild(selectProduct);\n            // Add a remove button to remove the product.\n            let prb: HTMLButtonElement = addRemoveButton(productDiv, boundary1, () => {\n                psDiv.removeChild(productDiv);\n                products.delete(mid);\n                r.removeProduct(mid);\n            });\n        });\n        if (selectProduct.options.length === 1) {\n            // If there is only one option then select it.\n            selectProduct.selectedIndex = 0;\n            selectProduct.dispatchEvent(new Event('change'));\n        }\n    });\n}\n\n/**\n * For adding an add transition state button.\n * @param rIDM The IDManager for the reaction list.\n * @param rDivID The reaction div ID.\n * @param tsDiv The transition state div.\n * @param molecules The molecules map.\n * @param transitionStates The transition states map.\n */\nfunction addAddTransitionStateButton(rIDM: IDManager, rDivID: string, tsDiv: HTMLDivElement, molecules: Map<string, Molecule>,\n    transitionStates: Map<string, TransitionState>) {\n    // Add an add button to add a transition state.\n    let addTSButton: HTMLButtonElement = createButton(s_Add_sy_add,\n        rIDM.addID(rDivID, TransitionState.tagName, s_button), level1);\n    tsDiv.appendChild(addTSButton);\n    addTSButton.addEventListener('click', () => {\n        if (molecules.size === 0) {\n            // Instruct user to add a molecule.\n            alert(\"Please add a molecule to the moleculeList first.\");\n            return;\n        }\n        let ts2Div: HTMLDivElement = createFlexDiv(undefined);\n        tsDiv.insertBefore(ts2Div, addTSButton);\n        // Create a selector to select a molecule as a reactant.\n        let selectTS: HTMLSelectElement = createSelectElement(getMoleculeKeys(molecules), s_select, \"\",\n            getID(rDivID, TransitionState.tagName, s_select), level1);\n        // Have the select element update options if new molecules are added.\n        selectTS.classList.add(BathGas.tagName);\n        ts2Div.appendChild(selectTS);\n        // Add an event listener to the select element.\n        selectTS.addEventListener('click', (event: Event) => {\n            if (selectTS.options.length === 1) {\n                // If there is only one option then select it.\n                alert(\"As there is only one molecule it will be selected.\");\n                selectTS.selectedIndex = 0;\n                selectTS.dispatchEvent(new Event('change'));\n            }\n        });\n        selectTS.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            let molecule: Molecule = molecules.get(target.value) as Molecule;\n            let rmAttributes: Map<string, string> = new Map();\n            let mid: string = molecule.getID();\n            if (transitionStates.has(mid)) {\n                alert(\"Molecule already selected as a transitionState. Please select a different molecule (you may want to add more molecules to the moleculeList).\");\n                // Remove the select element.\n                tsDiv.removeChild(selectTS);\n                return;\n            }\n            ts2Div.id = rIDM.addID(rDivID, TransitionState.tagName, mid);\n            rmAttributes.set(ReactionMolecule.s_ref, mid);\n            let rm: ReactionMolecule = new ReactionMolecule(rmAttributes);\n            let reactant: TransitionState = new TransitionState(new Map(), rm);\n            transitionStates.set(mid, reactant);\n            // Create a label for the Transition State role.\n            let label: HTMLLabelElement = createLabel(rm.getRef() + \" role \" + TransitionState.role, level1);\n            ts2Div.appendChild(label);\n            // Remove the select element.\n            ts2Div.removeChild(selectTS);\n            // Add a remove button to remove the transition state.\n            let rrb: HTMLButtonElement = addRemoveButton(ts2Div, boundary1, () => {\n                ts2Div.removeChild(tsDiv);\n                transitionStates.delete(mid);\n            });\n        });\n        if (selectTS.options.length === 1) {\n            // If there is only one option then select it.\n            selectTS.selectedIndex = 0;\n            selectTS.dispatchEvent(new Event('change'));\n        }\n    });\n}\n\n/**\n * Remove a reaction.\n * @param rlDiv The reaction list div.\n * @param rcDiv The reaction collapsible div.\n * @param rIDM The reaction list IDManager.\n * @param rDivID The reaction div ID.\n * @param reactions The reactions map.\n * @param r The reaction to remove.\n */\nfunction removeReaction(rlDiv: HTMLDivElement, rcDiv: HTMLDivElement, rIDM: IDManager, rDivID: string,\n    reactions: Map<string, Reaction>, r: Reaction) {\n    rlDiv.removeChild(rcDiv);\n    rIDM.removeIDs(rDivID);\n    rIDM.removeIDs(getID(rDivID, s_container));\n    rIDM.removeIDs(getID(rDivID, Reactant.tagName));\n    reactions.delete(r.id);\n    mesmer.getReactionList().removeReaction(r.id);\n}\n\n/**\n * Parse XML and create HTMLDivElement for reactions.\n * @param xml The XML document.\n * @param rIDM The IDManager for the reaction list.\n * @param rb The reaction button.\n * @param reactions The reactions map.\n * @param molecules The molecules map.\n */\nexport function processReactionList(xml: XMLDocument, rIDM: IDManager, rsDivID: string,\n    reactions: Map<string, Reaction>,\n    molecules: Map<string, Molecule>): HTMLDivElement {\n    let bid: string = getID(rsDivID, s_button);\n    let rcb: HTMLButtonElement = document.querySelector(bid) as HTMLButtonElement;\n    // Create div to contain the reaction list.\n    let rlDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"reactionList\" element.\n    let xml_reactionList: Element = getSingularElement(xml, ReactionList.tagName);\n    // Check the XML \"reactionList\" element has one or more \"reaction\" elements and no other elements.\n    let reactionListTagNames: Set<string> = new Set();\n    xml_reactionList.childNodes.forEach(function (node) {\n        reactionListTagNames.add(node.nodeName);\n    });\n    if (reactionListTagNames.size > 0) {\n        if (reactionListTagNames.size != 1) {\n            if (!(reactionListTagNames.size == 2 && reactionListTagNames.has(\"#text\"))) {\n                console.error(\"reactionListTagNames:\");\n                reactionListTagNames.forEach(x => console.error(x));\n                throw new Error(\"Additional tag names in reactionList:\");\n            }\n        }\n        if (!reactionListTagNames.has(Reaction.tagName)) {\n            throw new Error(\"Expecting tags with \\\"\" + Reaction.tagName + \"\\\" tagName but there are none!\");\n        }\n        // Process the XML \"reaction\" elements.\n        let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n        let xml_reactions_length = xml_reactions.length;\n        console.log(\"Number of reactions=\" + xml_reactions_length);\n        //xml_reactions.forEach(function (xml_reaction) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n        for (let i = 0; i < xml_reactions.length; i++) {\n            // Set attributes.\n            let reactionAttributes: Map<string, string> = getAttributes(xml_reactions[i]);\n            // Create reaction.\n            let reaction = new Reaction(reactionAttributes);\n            reactions.set(reaction.id, reaction);\n            let reactionTagNames: Set<string> = new Set();\n            let cns: NodeListOf<ChildNode> = xml_reactions[i].childNodes;\n            // Create a new div for the reaction.\n            let reactionDivID: string = addRID(Reaction.tagName, i);\n            let reactionDiv: HTMLDivElement = createDiv(reactionDivID);\n            //console.log(\"cns.length=\" + cns.length);\n            //cns.forEach(function (cn) {\n            for (let j = 0; j < cns.length; j++) {\n                let cn: ChildNode = cns[j];\n                // Check for nodeName repeats that are not #text.\n                if (!reactionTagNames.has(cn.nodeName)) {\n                    reactionTagNames.add(cn.nodeName);\n                } else {\n                    // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                    if (cn.nodeName != \"#text\") {\n                        console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                        //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                    }\n                }\n                //console.log(cn.nodeName);\n            }\n\n            // Reactions typically have one or more reactant and product. They may also have one or more \"me:transitionState\" and other things...\n            // Load reactants.\n            let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n            reactionTagNames.delete(Reactant.tagName);\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            // Create a new collapsible div for the reactants.\n            let rsDivID: string = rIDM.addID(reactionDivID, Reactant.tagName);\n            let rsDiv: HTMLDivElement = createDiv(rsDivID);\n            let rscDivID = getID(rsDivID, s_container);\n            let rscDiv: HTMLDivElement = getCollapsibleDiv(rscDivID, reactionDiv, null, rsDiv, s_Reactants, boundary1, level1);\n            let reactants: Map<string, Reactant> = new Map();\n            if (xml_reactants.length > 0) {\n                for (let j = 0; j < xml_reactants.length; j++) {\n                    let reactantDivID = getID(rsDivID, Reactant.tagName, j);\n                    let reactantDiv: HTMLDivElement = createFlexDiv(reactantDivID);\n                    rsDiv.appendChild(reactantDiv);\n                    let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);\n                    let rmAttributes: Map<string, string> = getAttributes(xml_molecule);\n                    let molecule: ReactionMolecule = new ReactionMolecule(rmAttributes);\n                    let reactant: Reactant = new Reactant(getAttributes(xml_reactants[j]), molecule);\n                    reactants.set(molecule.getRef(), reactant);\n                    // Create a new div for the role.\n                    let lws: HTMLDivElement = createLabelWithSelect(molecule.getRef() + \" role\", Reactant.roleOptions, \"Role\",\n                        molecule.getRole(), rIDM.addID(reactantDivID, s_select), boundary1, level1);\n                    lws.querySelector('select')?.addEventListener('change', (event: Event) => {\n                        let target = event.target as HTMLSelectElement;\n                        molecule.setRole(target.value);\n                        console.log(\"Set Role to \" + target.value);\n                        resizeSelectElement(target);\n                    });\n                    reactantDiv.appendChild(lws);\n                    // Add a remove button to remove the reactant.\n                    let rrb: HTMLButtonElement = addRemoveButton(reactantDiv, boundary1, () => {\n                        rsDiv.removeChild(reactantDiv);\n                        rIDM.removeIDs(reactantDivID);\n                        reactants.delete(molecule.getRef());\n                    });\n                }\n                reaction.setReactants(reactants);\n            }\n            addAddReactantButton(reaction, rcb, rIDM, reactionDivID, rsDiv, molecules, reactants);\n            // Load products.\n            let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n            reactionTagNames.delete(Product.tagName);\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            // Create collapsible div for the products.\n            let psDivID: string = rIDM.addID(reactionDivID, Product.tagName);\n            let psDiv: HTMLDivElement = createFlexDiv(psDivID);\n            let pscDivID = getID(psDivID, s_container);\n            let pscDiv: HTMLDivElement = getCollapsibleDiv(pscDivID, reactionDiv, null, psDiv,\n                s_Products, boundary1, level1);\n            //let products: Product[] = [];\n            let products: Map<string, Product> = new Map();\n            if (xml_products.length > 0) {\n                for (let j = 0; j < xml_products.length; j++) {\n                    let xml_molecule: Element = getFirstElement(xml_products[j], Molecule.tagName);\n                    let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                    let product: Product = new Product(getAttributes(xml_products[j]), molecule);\n                    //products.push(product);\n                    products.set(molecule.getRef(), product);\n                    let lws: HTMLDivElement = createLabelWithSelect(molecule.getRef() + \" role\", Product.roleOptions, molecule.getRole(),\n                        molecule.getRef(), rIDM.addID(psDivID, j, \"Role\"), boundary1, level1);\n                    let select: HTMLSelectElement = lws.querySelector('select') as HTMLSelectElement;\n                    select.value = molecule.getRole();\n                    select.addEventListener('change', (event: Event) => {\n                        let target = event.target as HTMLSelectElement;\n                        molecule.setRole(target.value);\n                        console.log(\"Set Role to \" + target.value);\n                        resizeSelectElement(target);\n                    });\n                    resizeSelectElement(select);\n                    psDiv.appendChild(lws);\n                    // Add a remove button to remove the product.\n                    let prb: HTMLButtonElement = addRemoveButton(psDiv, boundary1, () => {\n                        psDiv.removeChild(lws);\n                        rIDM.removeIDs(psDivID);\n                        products.delete(molecule.getRef());\n                    });\n                }\n                reaction.setProducts(products);\n            }\n            addAddProductButton(reaction, rcb, rIDM, reactionDivID, psDiv, molecules, products);\n            // Create a new collapsible div for the reaction.\n            let reactioncDivID = addRID(reactionDivID, s_container);\n            let reactioncDiv: HTMLDivElement = getCollapsibleDiv(reactioncDivID, rlDiv, null, reactionDiv,\n                reaction.getLabel(), boundary1, level1);\n\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName(Tunneling.tagName);\n            if (xml_tunneling.length > 0) {\n                if (xml_tunneling.length > 1) {\n                    throw new Error(\"Expecting 1 \" + Tunneling.tagName + \" but finding \" + xml_tunneling.length + \"!\");\n                }\n                let tunneling: Tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n                reaction.setTunneling(tunneling);\n                let lws: HTMLDivElement = createLabelWithSelect(Tunneling.tagName, Tunneling.options, s_Tunneling, tunneling.getName(),\n                    addRID(reactionDivID, Tunneling.tagName), boundary1, level1);\n                lws.querySelector('select')?.addEventListener('change', (event: Event) => {\n                    let target = event.target as HTMLSelectElement;\n                    tunneling.setName(target.value);\n                    console.log(\"Set Tunneling to \" + target.value);\n                    resizeSelectElement(target);\n                });\n                reactionDiv.appendChild(lws);\n            }\n            // Load transition states.\n            let xml_transitionStates: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(TransitionState.tagName);\n            //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n            // Create collapsible div.\n            let tsDivID: string = addRID(reactionDivID, TransitionState.tagName);\n            let tsDiv: HTMLDivElement = createDiv(tsDivID);\n            let tscDivID = addRID(tsDivID, s_container);\n            let tscDiv: HTMLDivElement = getCollapsibleDiv(tscDivID, reactionDiv, null, tsDiv,\n                s_Transition_States, boundary1, level1);\n            let transitionStates: Map<string, TransitionState> = new Map();\n            if (xml_transitionStates.length > 0) {\n                for (let j = 0; j < xml_transitionStates.length; j++) {\n                    let xml_molecule: Element = getFirstElement(xml_transitionStates[j], Molecule.tagName);\n                    let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                    let transitionState: TransitionState = new TransitionState(getAttributes(xml_transitionStates[j]), molecule);\n                    transitionStates.set(molecule.getRef(), transitionState);\n                    // Create a label for the Transition State role.\n                    let label: HTMLLabelElement = createLabel(molecule.getRef() + \" role \" + TransitionState.role, level1);\n                    tsDiv.appendChild(label);\n                }\n                reaction.setTransitionStates(transitionStates);\n            }\n            addAddTransitionStateButton(rIDM, reactionDivID, tsDiv, molecules, transitionStates);\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                if (xml_MCRCMethod.length > 1) {\n                    throw new Error(\"Expecting 1 \" + MCRCMethod.tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n                } else {\n                    let mm: MCRCMethod;\n                    let mmAttributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                    let type: string | undefined = mmAttributes.get(\"xsi:type\") as string;\n                    if (type == undefined) {\n                        // If there is no xsi:type search for a name.\n                        type = mmAttributes.get(\"name\");\n                    }\n                    let mmDivId: string = addRID(reactionDivID, MCRCMethod.tagName);\n                    let mmDiv: HTMLDivElement = createDiv(mmDivId);\n                    if (type == MesmerILT.xsiType || type == MesmerILT.xsiType2) {\n                        // Create a collapsible div.\n                        let mmcDivId = addRID(mmDivId, s_container);\n                        let mmcDiv: HTMLDivElement = getCollapsibleDiv(mmcDivId, reactionDiv, null, mmDiv, MCRCMethod.tagName, boundary1, level1);\n                        reactionDiv.appendChild(mmcDiv);\n                        //console.log(MCRCMethod.tagName + \" name=\" + name);\n                        mm = new MesmerILT(mmAttributes);\n                        //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                        let xml_pe: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                        if (xml_pe != null) {\n                            if (xml_pe[0] != null) {\n                                let inputString: string = getInputString(xml_pe[0]);\n                                let value: Big = new Big(inputString);\n                                let peAttributes: Map<string, string> = getAttributes(xml_pe[0]);\n                                let pe: PreExponential = new PreExponential(peAttributes, value);\n                                (mm as MesmerILT).setPreExponential(pe);\n                                // Create a new div element for the input.\n                                let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, PreExponential.tagName, s_input),\n                                    boundary1, level1,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(pe, target);\n                                    }, inputString, PreExponential.tagName);\n                                mmDiv.appendChild(lwi);\n                                let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n                                input.value = inputString;\n                                resizeInputElement(input);\n                                input.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    pe.value = new Big(inputString);\n                                    console.log(PreExponential.tagName + \" changed to \" + inputString);\n                                    resizeInputElement(input);\n                                });\n                                addAnyUnits(undefined, peAttributes, lwi, null, addRID(mmDivId, PreExponential.tagName),\n                                    PreExponential.tagName, boundary1, boundary1);\n                                mmDiv.appendChild(lwi);\n                            }\n                        }\n                        //console.log(\"preExponential \" + preExponential);\n                        let xml_ae: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                        if (xml_ae != null) {\n                            if (xml_ae[0] != null) {\n                                let inputString: string = getInputString(xml_ae[0]);\n                                let value: Big = new Big(inputString);\n                                let aeAttributes: Map<string, string> = getAttributes(xml_ae[0]);\n                                let ae: ActivationEnergy = new ActivationEnergy(aeAttributes, value);\n                                (mm as MesmerILT).setActivationEnergy(ae);\n                                // Create a new div element for the input.\n                                let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, ActivationEnergy.tagName, s_input), boundary1, level1,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(ae, target);\n                                    }, inputString, ActivationEnergy.tagName);\n                                let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n                                input.value = inputString;\n                                resizeInputElement(input);\n                                input.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    ae.value = new Big(inputString);\n                                    console.log(ActivationEnergy.tagName + \" changed to \" + inputString);\n                                    resizeInputElement(input);\n                                });\n                                addAnyUnits(undefined, aeAttributes, lwi, null, addRID(mmDivId, ActivationEnergy.tagName),\n                                    ActivationEnergy.tagName, boundary1, boundary1);\n                                mmDiv.appendChild(lwi);\n                            }\n                        }\n                        //console.log(\"activationEnergy \" + activationEnergy);\n                        let xml_ti: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(TInfinity.tagName);\n                        if (xml_ti != null) {\n                            if (xml_ti[0] != null) {\n                                let inputString: string = getInputString(xml_ti[0]);\n                                let value: Big = new Big(inputString);\n                                let tiAttributes: Map<string, string> = getAttributes(xml_ti[0]);\n                                let ti: TInfinity = new TInfinity(tiAttributes, value);\n                                (mm as MesmerILT).setTInfinity(ti);\n                                // Create a new div element for the input.\n                                let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, TInfinity.tagName, s_input),\n                                    boundary1, level1,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(ti, target);\n                                    }, inputString, TInfinity.tagName);\n                                let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n                                input.value = inputString;\n                                resizeInputElement(input);\n                                input.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    ti.value = new Big(inputString);\n                                    console.log(TInfinity.tagName + \" changed to \" + inputString);\n                                    resizeInputElement(input);\n                                });\n                                addAnyUnits(undefined, tiAttributes, lwi, null, addRID(mmDivId, TInfinity.tagName), TInfinity.tagName, boundary1, boundary1);\n                                mmDiv.appendChild(lwi);\n                            }\n                        }\n                        //console.log(\"tInfinity \" + tInfinity);\n                        let xml_ni: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(NInfinity.tagName);\n                        if (xml_ni != null) {\n                            if (xml_ni[0] != null) {\n                                let inputString: string = getInputString(xml_ni[0]);\n                                let value: Big = new Big(inputString);\n                                let niAttributes: Map<string, string> = getAttributes(xml_ni[0]);\n                                let ni: NInfinity = new NInfinity(niAttributes, value);\n                                (mm as MesmerILT).setNInfinity(ni);\n                                // Create a new div element for the input.\n                                let lwi: HTMLDivElement = createLabelWithInput(\"number\", addRID(mmDivId, NInfinity.tagName, s_input), boundary1, level1,\n                                    (event: Event) => {\n                                        let target = event.target as HTMLInputElement;\n                                        setNumberNode(ni, target);\n                                    }, inputString, NInfinity.tagName);\n                                mmDiv.appendChild(lwi);\n                                let inputElement: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event: Event) => {\n                                    let target = event.target as HTMLInputElement;\n                                    inputString = target.value;\n                                    ni.value = new Big(inputString);\n                                    console.log(NInfinity.tagName + \" set to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, niAttributes, lwi, null, addRID(mmDivId, NInfinity.tagName), NInfinity.tagName,\n                                    boundary1, boundary1);\n                                mmDiv.appendChild(lwi);\n                            }\n                        }\n                    } else {\n                        mm = new MCRCMethod(mmAttributes);\n                        let mCRCMethodLabel: HTMLLabelElement = document.createElement('label');\n                        mCRCMethodLabel.textContent = MCRCMethod.tagName + \": \" + type;\n                        Object.assign(mCRCMethodLabel.style, level1);\n                        mmDiv.appendChild(mCRCMethodLabel);\n                        reactionDiv.appendChild(mmDiv);\n                    }\n                    reaction.setMCRCMethod(mm);\n                }\n            }\n            // me:excessReactantConc\n            let xml_erc = xml_reactions[i].getElementsByTagName(ExcessReactantConc.tagName);\n            //console.log(\"n_me:excessReactantConc=\" + xml_erc.length);\n            if (xml_erc.length > 0) {\n                if (xml_erc.length > 1) {\n                    throw new Error(\"Expecting 1 \" + ExcessReactantConc.tagName + \" but finding \" + xml_erc.length + \"!\");\n                }\n                let value: Big = new Big(getNodeValue(getFirstChildNode(xml_erc[0])));\n                let erc: ExcessReactantConc = new ExcessReactantConc(getAttributes(xml_erc[0]), value);\n                reaction.setExcessReactantConc(erc);\n                let id = addRID(reactionDivID, ExcessReactantConc.tagName);\n                let lwi: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, level1,\n                    (event: Event) => {\n                        let target = event.target as HTMLInputElement;\n                        setNumberNode(erc, target);\n                    }, value.toExponential(), ExcessReactantConc.tagName);\n                reactionDiv.appendChild(lwi);\n            }\n            // me:canonicalRateList\n            let xml_crl = xml_reactions[i].getElementsByTagName(CanonicalRateList.tagName);\n            //console.log(\"n_me:canonicalRateList=\" + xml_crl.length);\n            if (xml_crl.length > 0) {\n                if (xml_crl.length > 1) {\n                    throw new Error(\"Expecting 1 \" + CanonicalRateList.tagName + \" but finding \" + xml_crl.length + \"!\");\n                }\n                let clr_attributes: Map<string, string> = getAttributes(xml_crl[0]);\n                let crl: CanonicalRateList = new CanonicalRateList(clr_attributes);\n                reaction.setCanonicalRateList(crl);\n                // Create a new collapsible div for the canonicalRateList.\n                let crlDivID: string = addRID(reactionDivID, CanonicalRateList.tagName);\n                let crlDiv: HTMLDivElement = createDiv(crlDivID);\n                let crlcDivID = addRID(crlDivID, s_container);\n                let crlcDiv: HTMLDivElement = getCollapsibleDiv(crlcDivID, reactionDiv, null, crlDiv, CanonicalRateList.tagName, boundary1, level1);\n                reactionDiv.appendChild(crlcDiv);\n                //let id = addID(reaction.id, CanonicalRateList.tagName);\n                // me:description.\n                let xml_d: HTMLCollectionOf<Element> = xml_crl[0].getElementsByTagName(Description.tagName);\n                //console.log(\"xml_d.length=\" + xml_d.length);\n                if (xml_d.length > 0) {\n                    if (xml_d.length > 1) {\n                        throw new Error(\"Expecting 1 \" + Description.tagName + \" but finding \" + xml_d.length + \"!\");\n                    }\n                    let description: string = getNodeValue(getFirstChildNode(xml_d[0]));\n                    //console.log(\"description=\" + description);\n                    crl.setDescription(new Description(getAttributes(xml_d[0]), description));\n                    let l: HTMLLabelElement = createLabel(description + \" (\" + mapToString(clr_attributes) + \")\", boundary1);\n                    let ldiv = createDiv(undefined, level1);\n                    ldiv.appendChild(l);\n                    crlDiv.appendChild(ldiv);\n                }\n                // me:kinf.\n                let xml_k: HTMLCollectionOf<Element> = xml_crl[0].getElementsByTagName(Kinf.tagName);\n                //console.log(\"xml_k.length=\" + xml_k.length);\n                if (xml_k.length > 0) {\n                    // Create a table for the kinf.\n                    let t: HTMLTableElement = createTable(addRID(crlDivID, Kinf.tagName, s_table), level1);\n                    crlDiv.appendChild(t);\n                    for (let j = 0; j < xml_k.length; j++) {\n                        let k: Kinf = new Kinf(getAttributes(xml_k[j]));\n                        crl.addKinf(k);\n                        // T.\n                        let xml_T: HTMLCollectionOf<Element> = xml_k[j].getElementsByTagName(T.tagName);\n                        //console.log(\"xml_T.length=\" + xml_T.length);\n                        if (xml_T.length > 0) {\n                            if (xml_T.length > 1) {\n                                throw new Error(\"Expecting 1 \" + T.tagName + \" but finding \" + xml_T.length + \"!\");\n                            }\n                            let value: Big = new Big(getNodeValue(getFirstChildNode(xml_T[0])));\n                            k.setT(new T(getAttributes(xml_T[0]), value));\n                        }\n                        // Val.\n                        let xml_Val: HTMLCollectionOf<Element> = xml_k[j].getElementsByTagName(Val.tagName);\n                        //console.log(\"xml_Val.length=\" + xml_Val.length);\n                        if (xml_Val.length > 0) {\n                            if (xml_Val.length > 1) {\n                                throw new Error(\"Expecting 1 \" + Val.tagName + \" but finding \" + xml_Val.length + \"!\");\n                            }\n                            let value: Big = new Big(getNodeValue(getFirstChildNode(xml_Val[0])));\n                            k.setVal(new Val(getAttributes(xml_Val[0]), value));\n                        }\n                        // Rev.\n                        let xml_Rev: HTMLCollectionOf<Element> = xml_k[j].getElementsByTagName(Rev.tagName);\n                        //console.log(\"xml_Rev.length=\" + xml_Rev.length);\n                        if (xml_Rev.length > 0) {\n                            if (xml_Rev.length > 1) {\n                                throw new Error(\"Expecting 1 \" + Rev.tagName + \" but finding \" + xml_Rev.length + \"!\");\n                            }\n                            let value: Big = new Big(getNodeValue(getFirstChildNode(xml_Rev[0])));\n                            k.setRev(new Rev(getAttributes(xml_Rev[0]), value));\n                        }\n                        // Keq.\n                        let xml_Keq: HTMLCollectionOf<Element> = xml_k[j].getElementsByTagName(Keq.tagName);\n                        //console.log(\"xml_Keq.length=\" + xml_Keq.length);\n                        if (xml_Keq.length > 0) {\n                            if (xml_Keq.length > 1) {\n                                throw new Error(\"Expecting 1 \" + Keq.tagName + \" but finding \" + xml_Keq.length + \"!\");\n                            }\n                            let value: Big = new Big(getNodeValue(getFirstChildNode(xml_Keq[0])));\n                            k.setKeq(new Keq(getAttributes(xml_Keq[0]), value));\n                        }\n                        if (j == 0) {\n                            // It maybe that only the first kinf contains unit details!\n                            addTableRow(t, k.getHeader());\n                        }\n                        addTableRow(t, k.toStringArray());\n                    }\n                    addSaveAsCSVButton(crl.toCSV.bind(crl), crlDiv, t, reaction.id + \"_\" + CanonicalRateList.tagName, level1);\n                }\n            }\n            // Add a remove reaction button.\n            addRemoveButton(reactionDiv, level1, () => {\n                removeReaction(rlDiv, reactioncDiv, rIDM, reactionDivID, reactions, reaction);\n            });\n        }\n    } else {\n        console.warn(\"No reaction elements found! Please add a reaction in reactionList.\");\n    }\n    // Add a button to add a reaction.\n    getAddReactionButton(rIDM, rlDiv, reactions, molecules);\n    return rlDiv;\n}","import { Big } from 'big.js';\nimport { Molecule, ZPE } from './xml_molecule.js';\nimport { TagWithAttributes, NodeWithNodes, NumberNode, Tag, NumberArrayNode, StringNode, getAttribute } from './xml.js';\nimport { Description, T } from './xml_mesmer.js';\nimport { big0 } from './app.js';\n\n/**\n * A reference to a molecule, not to be confused with a Molecule.\n * The attribute \"ref\" is the same as a Molecule ID for a molecule in the XML \"moleculeList\".\n * The attribute \"role\" is the role of the molecule in the reaction. Expected values are:\n * [\"deficientReactant\", \"excessReactant\", \"modelled\", \"transitionState\", \"sink\"], but this may depend \n * on whether the molecule is a reactant, product or transition state.\n * In the XML, a \"molecule\" node is a child of a \"reactant\", \"product\" or \"me:transitionState\" node.\n */\nexport class ReactionMolecule extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The ref string.\n     */\n    static readonly s_ref: string = \"ref\";\n\n    /**\n     * The role string.\n     */\n    static readonly s_role: string = \"role\";\n\n    /**\n     * The ref attribute.\n     */\n    private ref: string;\n\n    /**\n     * The role attribute.\n     */\n    private role: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, ReactionMolecule.tagName);\n        this.ref = attributes.get(ReactionMolecule.s_ref) as string;\n        this.role = attributes.get(ReactionMolecule.s_role) as string;\n    }\n\n    /**\n     * @returns The ref attribute.\n     */\n    getRef(): string {\n        return this.ref;\n    }\n\n    /**\n     * @param ref The ref attribute.\n     */\n    setRef(ref: string): void {\n        this.ref = ref;\n        this.attributes.set(\"ref\", ref);\n    }\n\n    /**\n     * @returns The role attribute.\n     */\n    getRole(): string {\n        return this.role;\n    }\n\n    /**\n     * @param role The role of the molecule in the reaction.\n     */\n    setRole(role: string): void {\n        this.role = role;\n        this.attributes.set(\"role\", role);\n    }\n\n}\n\n/**\n * A molecule that reacts in a reaction.\n * In the XML, a \"reactant\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Reactant extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * The role options.\n     */\n    static readonly s_deficientReactant = \"deficientReactant\";\n    static readonly s_excessReactant = \"excessReactant\";\n    static readonly s_modelled = \"modelled\";\n    static readonly roleOptions: string[] = [Reactant.s_deficientReactant, Reactant.s_excessReactant, Reactant.s_modelled];\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Reactant.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * A molecule produced in a reaction.\n * In the XML, a \"product\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Product extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * The role options.\n     */\n    static readonly roleOptions: string[] = [\"modelled\", \"sink\"];\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Product.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n\n}\n\n/**\n * A molecule that is a transition state in a reaction.\n * In the XML, a \"me:transitionState\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class TransitionState extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * The role.\n     */\n    static readonly role: string = \"transitionState\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, TransitionState.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * In the XML, a \"me:preExponential\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:activationEnergy\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:TInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:nInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * Extended classes indicate how microcanonical rate constant is to be treated.\n * In the XML, a \"me:MCRCMethod\" node is a child of a \"reaction\" node.\n * A simple MCRCMethod has an attribute name=\"RRKM\".\n * There are extended classed representing more complicated MCRCMethods:\n * \"me:MesmerILT\"\n * \"LandauZenerCrossing\"\n * \"ZhuNakamuraCrossing\"\n * \"me:CanonicalRateCoefficient\"\n * \"DefinedSumOfStates\"\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * The Inverse Laplace Transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The xsiType.\n     */\n    static readonly xsiType: string = \"me:MesmerILT\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsiType2: string = \"MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */\n    constructor(attributes: Map<string, string>, preExponential?: PreExponential,\n        activationEnergy?: ActivationEnergy, tInfinity?: TInfinity, nInfinity?: NInfinity) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(PreExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(ActivationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(TInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(NInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    /**\n     * @param preExponential The pre-exponential factor.\n     */\n    setPreExponential(preExponential: PreExponential): void {\n        let i = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            this.index.set(PreExponential.tagName, this.nodes.size);\n            this.addNode(preExponential);\n        } else {\n            this.nodes.set(i, preExponential);\n        }\n    }\n\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    /**\n     * @param activationEnergy The activation energy.\n     */\n    setActivationEnergy(activationEnergy: ActivationEnergy): void {\n        let i = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            this.index.set(ActivationEnergy.tagName, this.nodes.size);\n            this.addNode(activationEnergy);\n        } else {\n            this.nodes.set(i, activationEnergy);\n        }\n    }\n\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    /**\n     * @param tInfinity The TInfinity.\n     */\n    setTInfinity(tInfinity: TInfinity): void {\n        let i = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(TInfinity.tagName, this.nodes.size);\n            this.addNode(tInfinity);\n        } else {\n            this.nodes.set(i, tInfinity);\n        }\n    }\n\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n\n    /**\n     * @param nInfinity The NInfinity.\n     */\n    setNInfinity(nInfinity: NInfinity): void {\n        let i = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(NInfinity.tagName, this.nodes.size);\n            this.addNode(nInfinity);\n        } else {\n            this.nodes.set(i, nInfinity);\n        }\n    }\n}\n\n/**\n * In the XML, the \"me:tunneling\" node is a child of a \"reaction\" node.\n * The \"name\" attribute is one of: [Eckart, WKB].\n */\nexport class Tunneling extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * The options.\n     */\n    static readonly options: string[] = [\"Eckart\", \"WKB\"];\n\n    /**\n     * The key to the name attribute value.\n     */\n    static readonly s_name: string = \"name\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n\n    /**\n     * @returns The name of the tunneling method.\n     */\n    getName(): string {\n        return this.attributes.get(Tunneling.s_name) as string;\n    }\n\n    /**\n     * @param The name of the tunneling method.\n     */\n    setName(name: string): void {\n        this.attributes.set(Tunneling.s_name, name);\n    }\n}\n\n/**\n * In the XML, the \"me:excessReactantConc\" node is a child of a \"reaction\" node.\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:val\" node is a child of a \"me:kinf\" node.\n */\nexport class Val extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:val\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Val.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:rev\" node is a child of a \"me:kinf\" node.\n */\nexport class Rev extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:rev\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Rev.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:val\" node is a child of a \"me:kinf\" node.\n */\nexport class Keq extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:Keq\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: Big) {\n        super(attributes, Keq.tagName, value);\n    }\n}\n\n/**\n * In the XML, the \"me:kinf\" node is a child of a \"me:canonicalRateList\" node.\n */\nexport class Kinf extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:kinf\";\n\n    /**\n     * The index for the nodes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param t The t.\n     * @param val The val.\n     * @param rev The rev.\n     * @param Keq The Keq.\n     */\n    constructor(attributes: Map<string, string>, t?: T, val?: Val, rev?: Rev, keq?: Keq) {\n        super(attributes, Kinf.tagName);\n        this.index = new Map();\n        if (t != undefined) {\n            this.index.set(T.tagName, this.nodes.size);\n            this.addNode(t);\n        }\n        if (val != undefined) {\n            this.index.set(Val.tagName, this.nodes.size);\n            this.addNode(val);\n        }\n        if (rev != undefined) {\n            this.index.set(Rev.tagName, this.nodes.size);\n            this.addNode(rev);\n        }\n        if (keq != undefined) {\n            this.index.set(Keq.tagName, this.nodes.size);\n            this.addNode(keq);\n        }\n    }\n\n    /**\n     * @returns The T node or undefined if it does not exist.\n     */\n    getT(): T | undefined {\n        let i: number | undefined = this.index.get(T.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as T;\n    }\n\n    /**\n     * @param t The T node.\n     */\n    setT(t: T): void {\n        let i = this.index.get(T.tagName);\n        if (i == undefined) {\n            this.index.set(T.tagName, this.nodes.size);\n            this.addNode(t);\n        } else {\n            this.nodes.set(i, t);\n        }\n    }\n\n    /**\n     * @returns The Val node or undefined if it does not exist.\n     */\n    getVal(): Val | undefined {\n        let i: number | undefined = this.index.get(Val.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Val;\n    }\n\n    /**\n     * @param val The Val node.\n     */\n    setVal(val: Val): void {\n        let i = this.index.get(Val.tagName);\n        if (i == undefined) {\n            this.index.set(Val.tagName, this.nodes.size);\n            this.addNode(val);\n        } else {\n            this.nodes.set(i, val);\n        }\n    }\n\n    /**\n     * @returns The Rev node or undefined if it does not exist.\n     */\n    getRev(): Rev | undefined {\n        let i: number | undefined = this.index.get(Rev.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Rev;\n    }\n\n    /**\n     * @param rev The Rev node.\n     */\n    setRev(rev: Rev): void {\n        let i = this.index.get(Rev.tagName);\n        if (i == undefined) {\n            this.index.set(Rev.tagName, this.nodes.size);\n            this.addNode(rev);\n        } else {\n            this.nodes.set(i, rev);\n        }\n    }\n\n    /**\n     * @returns The Keq node or undefined if it does not exist.\n     */\n    getKeq(): Keq | undefined {\n        let i: number | undefined = this.index.get(Keq.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Keq;\n    }\n\n    /**\n     * @param keq The Keq node.\n     */\n    setKeq(keq: Keq): void {\n        let i = this.index.get(Keq.tagName);\n        if (i == undefined) {\n            this.index.set(Keq.tagName, this.nodes.size);\n            this.addNode(keq);\n        } else {\n            this.nodes.set(i, keq);\n        }\n    }\n\n    /**\n    * The header.\n    */\n    getHeader(): string[] {\n        let header: string[] = [];\n        header.push(\"T (\" + this.getT()?.attributes.get(\"units\") + \")\");\n        header.push(\"kf (\" + this.getVal()?.attributes.get(\"units\") + \")\");\n        header.push(\"krev (\" + this.getRev()?.attributes.get(\"units\") + \")\");\n        header.push(\"Keq (\" + this.getKeq()?.attributes.get(\"units\") + \")\");\n        return header;\n    }\n\n    /**\n     * @returns The Kinf as a string[].\n     */\n    toStringArray(): string[] {\n        let t: T = this.getT()!;\n        let val: Val = this.getVal()!;\n        let rev: Rev = this.getRev()!;\n        let keq: Keq = this.getKeq()!;\n        //return [t.getValue().toString(), val.getValue().toString(), rev.getValue().toString(), keq.getValue().toString()];\n        return [t.value.toString(), val.value.toString(), rev.value.toString(), keq.value.toString()];\n    }\n\n    /**\n     * @returns The Kinf as a CSV string.\n     */\n    toCSV() {\n        return this.toStringArray().join(\",\");\n    }\n}\n\n/**\n * In the XML, the \"me:canonicalRateList\" node is a child of a \"reaction\" node.\n */\nexport class CanonicalRateList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:canonicalRateList\";\n\n    /**\n     * The index for the nodes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * The Kinf index. The key is the index of the Kinf node, the value is the index of the Kinf node in the nodes array.\n     */\n    kinfIndex: Map<number, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param canonicalRate The canonical rate.\n     */\n    constructor(attributes: Map<string, string>, description?: Description, kinfs?: Kinf[]) {\n        super(attributes, CanonicalRateList.tagName);\n        this.index = new Map();\n        this.kinfIndex = new Map();\n        if (description != undefined) {\n            this.index.set(Description.tagName, this.nodes.size);\n            this.addNode(description);\n        }\n        if (kinfs != undefined) {\n            kinfs.forEach(kinf => {\n                this.kinfIndex.set(this.nodes.size, this.nodes.size);\n                this.addNode(kinf);\n            });\n        }\n    }\n\n    /**\n     * @returns The Description node or undefined if it does not exist.\n     */\n    getDescription(): Description | undefined {\n        let i: number | undefined = this.index.get(Description.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Description;\n    }\n\n    /**\n     * @param description The Description node.\n     */\n    setDescription(description: Description): void {\n        let i = this.index.get(Description.tagName);\n        if (i == undefined) {\n            this.index.set(Description.tagName, this.nodes.size);\n            this.addNode(description);\n        } else {\n            this.nodes.set(i, description);\n        }\n    }\n\n    /**\n     * @returns The Kinf nodes.\n     */\n    getKinfs(): Kinf[] {\n        return Array.from(this.kinfIndex.values()).map(index => this.nodes.get(index) as Kinf);\n    }\n\n    /**\n     * @param kinf The Kinf node.\n     */\n    addKinf(kinf: Kinf): void {\n        this.kinfIndex.set(this.kinfIndex.size, this.nodes.size);\n        this.addNode(kinf);\n    }\n\n    /**\n     * @returns The CanonicalRateList as a CSV string.\n     */\n    toCSV(): string {\n        let csv: string = \"\";\n        let first: boolean = true;\n        this.getKinfs().forEach((k) => {\n            if (first) {\n                first = false;\n                csv += k.getHeader().join(\",\") + \"\\n\";\n            }\n            csv += k.toCSV() + \"\\n\";\n        });\n        return csv;\n    }\n}\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The key to the id attribute value.\n     */\n    static readonly s_id: string = \"id\";\n\n    /**\n     * The index for the nodes.\n     * The key is the type of node.\n     * The value is the index of the node in the nodes array or if there are multiple nodes of this type, \n     * the value is a Map where the key of the map is the dictRef of the Node and the value is the respective node index for that specific thing.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The reactants index.\n     * The key is the ref of the reactant.\n     * The value is the index of the reactant in the nodes array.\n     */\n    reactantsIndex: Map<string, number>;\n\n    /**\n     * The products index.\n     * The key is the ref of the product.\n     * The value is the index of the product in the nodes array.\n     */\n    productsIndex: Map<string, number>;\n\n    /**\n     * The transition states index.\n     * The key is the ref of the transition state.\n     * The value is the index of the transition state in the nodes array.\n     */\n    transitionStatesIndex: Map<string, number>;\n\n    /**\n     * The id of the reaction.\n     */\n    id: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     * @param canonicalRateList The canonical rate list (optional).\n     */\n    constructor(attributes: Map<string, string>,\n        reactants?: Map<string, Reactant>, products?: Map<string, Product>, tunneling?: Tunneling,\n        transitionStates?: Map<string, TransitionState>, mCRCMethod?: MCRCMethod,\n        excessReactantConc?: ExcessReactantConc, canonicalRateList?: CanonicalRateList) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map();\n        this.reactantsIndex = new Map();\n        this.productsIndex = new Map();\n        this.transitionStatesIndex = new Map();\n        let id: string | undefined = attributes.get(Reaction.s_id);\n        if (id == undefined) {\n            throw new Error(Reaction.s_id + ' is undefined!');\n        }\n        this.id = id;\n        if (reactants != undefined) {\n            reactants.forEach((r, key) => {\n                this.reactantsIndex.set(r.getMolecule().getRef(), this.nodes.size);\n                this.addNode(r);\n            });\n            this.index.set(Reactant.tagName, this.reactantsIndex);\n        }\n        if (products != undefined) {\n            products.forEach((p, key) => {\n                this.productsIndex.set(p.getMolecule().getRef(), this.nodes.size);\n                this.addNode(p);\n            });\n            this.index.set(Product.tagName, this.productsIndex);\n        }\n        if (tunneling != undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach((t, key) => {\n                this.transitionStatesIndex.set(t.getMolecule().getRef(), this.nodes.size);\n                this.addNode(t);\n            });\n            this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n        if (canonicalRateList != undefined) {\n            this.index.set(CanonicalRateList.tagName, this.nodes.size);\n            this.addNode(canonicalRateList);\n        }\n    }\n\n    /**\n     * Add a node to the index.\n     */\n    addToIndex(tagName: string, node: NodeWithNodes): void {\n        let v: Map<string, number> | number | undefined = this.index.get(tagName);\n        if (v == undefined) {\n            this.index.set(tagName, this.nodes.size);\n        } else if (v instanceof Map) {\n            (v as Map<string, number>).set(node.tagName, this.nodes.size);\n        } else {\n            let map: Map<string, number> = new Map<string, number>();\n            map.set((this.nodes.get(v) as ReactionMolecule).getRef(), v as number);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n\n    /**\n     * @returns The reactants.\n     */\n    getReactants(): Map<string, Reactant> {\n        let i: Map<string, number> | number | undefined = this.index.get(Reactant.tagName);\n        if (i == undefined) {\n            return new Map();\n        }\n        let reactants: Map<string, Reactant> = new Map();\n        if (i instanceof Map) {\n            (i as Map<string, number>).forEach((index, ref) => {\n                reactants.set(ref, this.nodes.get(index) as Reactant);\n            });\n        } else {\n            let r: Reactant = this.nodes.get(i) as Reactant;\n            reactants.set(r.getMolecule().getRef(), r);\n        }\n        return reactants;\n    }\n\n    /**\n     * Set the reactants.\n     */\n    setReactants(reactants: Map<string, Reactant>): void {\n        reactants.forEach((reactant, key) => {\n            this.reactantsIndex.set(reactant.getMolecule().getRef(), this.nodes.size);\n            this.addNode(reactant);\n        });\n        this.index.set(Reactant.tagName, this.reactantsIndex);\n    }\n\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */\n    getReactant(ref: string): Reactant {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Reactant;\n    }\n\n    /**\n     * @param reactant The reactant to add.\n     */\n    addReactant(reactant: Reactant): void {\n        this.reactantsIndex.set(reactant.getMolecule().getRef(), this.nodes.size);\n        this.addNode(reactant);\n    }\n\n    /**\n     * @param ref The ref of the reactant to remove.\n     */\n    removeReactant(ref: string): void {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.reactantsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The products.\n     */\n    getProducts(): Map<string, Product> {\n        /*\n        let i: Map<string, number> | number | undefined = this.index.get(Product.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Product);\n        } else {\n            return [this.nodes.get(i) as Product];\n        }*/\n        let i: Map<string, number> | number | undefined = this.index.get(Product.tagName);\n        if (i == undefined) {\n            return new Map();\n        }\n        let products: Map<string, Product> = new Map();\n        if (i instanceof Map) {\n            (i as Map<string, number>).forEach((index, ref) => {\n                products.set(ref, this.nodes.get(index) as Product);\n            });\n        } else {\n            let r: Product = this.nodes.get(i) as Product;\n            products.set(r.getMolecule().getRef(), r);\n        }\n        return products;\n    }\n\n    /**\n     * Set the products.\n     */\n    setProducts(products: Map<string, Product>): void {\n        products.forEach((product, key) => {\n            this.productsIndex.set(product.getMolecule().getRef(), this.nodes.size);\n            this.addNode(product);\n        });\n        this.index.set(Product.tagName, this.productsIndex);\n    }\n\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */\n    getProduct(ref: string): Product {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Product;\n    }\n\n    /**\n     * @param product The product to add.\n     */\n    addProduct(product: Product): void {\n        this.productsIndex.set(product.getMolecule().getRef(), this.nodes.size);\n        this.addNode(product);\n    }\n\n    /**\n     * @param ref The ref of the product to remove.\n     */\n    removeProduct(ref: string): void {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.productsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */\n    getTunneling(): Tunneling | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as Tunneling;\n    }\n\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */\n    setTunneling(tunneling: Tunneling): void {\n        let i = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, tunneling);\n            }\n        }\n    }\n\n    /**\n     * @returns The transition states.\n     */\n    getTransitionStates(): Map<string, TransitionState> {\n        let i: Map<string, number> | number | undefined = this.index.get(TransitionState.tagName);\n        if (i == undefined) {\n            return new Map();\n        }\n        let transitionStates: Map<string, TransitionState> = new Map();\n        if (i instanceof Map) {\n            (i as Map<string, number>).forEach((index, ref) => {\n                transitionStates.set(ref, this.nodes.get(index) as TransitionState);\n            });\n        } else {\n            let r: TransitionState = this.nodes.get(i) as TransitionState;\n            transitionStates.set(r.getMolecule().getRef(), r);\n        }\n        return transitionStates;\n    }\n\n    /**\n     * Set the transition states.\n     */\n    setTransitionStates(transitionStates: Map<string, TransitionState>): void {\n        transitionStates.forEach((transitionState, key) => {\n            this.transitionStatesIndex.set(transitionState.getMolecule().getRef(), this.nodes.size);\n            this.addNode(transitionState);\n        });\n        this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n    }\n\n    /**\n     * @returns A particular TransitionState.\n     * @param ref The ref of the transition state to return.\n     * @returns The transition state at the given index.\n     */\n    getTransitionState(ref: string): TransitionState {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition state with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as TransitionState;\n    }\n\n    /**\n     * @param transitionState The transition state to add.\n     */\n    addTransitionState(transitionState: TransitionState): void {\n        this.transitionStatesIndex.set(transitionState.getMolecule().getRef(), this.nodes.size);\n        this.addNode(transitionState);\n    }\n\n    /**\n     * @param ref The ref of the transition state to remove.\n     */\n    removeTransitionState(ref: string): void {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition State with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.transitionStatesIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as MCRCMethod;\n    }\n\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */\n    setMCRCMethod(mCRCMethod: MCRCMethod): void {\n        let i = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, mCRCMethod);\n            }\n        }\n    }\n\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */\n    getExcessReactantConc(): ExcessReactantConc | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as ExcessReactantConc;\n    }\n\n    /**\n     * Set the excess reactant concentration or create it if it is undefined.\n     */\n    setExcessReactantConc(excessReactantConc: ExcessReactantConc): void {\n        let i = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"ExcessReactantConc is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, excessReactantConc);\n            }\n        }\n    }\n\n    /**\n     * @returns The canonical rate list or undefined if it does not exist.\n     */\n    getCanonicalRateList(): CanonicalRateList | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(CanonicalRateList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as CanonicalRateList;\n    }\n\n    /**\n     * Set the canonical rate list or create it if it is undefined.\n     */\n    setCanonicalRateList(canonicalRateList: CanonicalRateList): void {\n        let i = this.index.get(CanonicalRateList.tagName);\n        if (i == undefined) {\n            this.index.set(CanonicalRateList.tagName, this.nodes.size);\n            this.addNode(canonicalRateList);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"CanonicalRateList is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, canonicalRateList);\n            }\n        }\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return Array.from(this.getReactants().values()).map(reactant => reactant.getMolecule().getRef()).join(' + ');\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        //return this.getProducts().map(product => product.getMolecule().getRef()).join(' + ');\n        return Array.from(this.getProducts().values()).map(product => product.getMolecule().getRef()).join(' + ');\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.id + ' (' + this.getReactantsLabel() + ' -> ' + this.getProductsLabel() + ')';\n        return label;\n    }\n\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */\n    //getReactantsEnergy(retrieveMolecule: Function, molecules: Map<string, Molecule>): Big {\n    getReactantsEnergy(retrieveMolecule: Function, molecules: Map<string, Molecule>): Big {\n            // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants().values()).map(reactant => {\n            let ref: string = reactant.getMolecule().getRef();\n            //console.log(\"ref=\\\"\" + ref + \"\\\"\");\n            let molecule: Molecule = retrieveMolecule(ref, molecules);\n            if (molecule == undefined) {\n                console.log(\"molecule with ref \" + ref + \" not found\");\n                // Create alert user to add the molecule to the list of molecules.\n                alert(\"Molecule with ref \" + ref + \" not found. Please add it to the list of molecules. \\\n                 In the meantime it will be treated as having an energy of 0.\");\n                //throw new Error(`Molecule with ref ${ref} not found`);\n                return big0;\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a.add(b), new Big(0));\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(retrieveMolecule: Function, molecules: Map<string, Molecule>): Big {\n        // Sum up the energy values of all the products in the reaction\n        //return Array.from(this.getProducts()).map(product => {\n        return Array.from(this.getProducts().values()).map(product => {\n            let ref: string = product.getMolecule().getRef();\n            //console.log(\"ref=\\\"\" + ref + \"\\\"\");\n            let molecule: Molecule = retrieveMolecule(ref, molecules);\n            if (molecule == undefined) {\n                console.log(\"molecule with ref \" + ref + \" not found\");\n                // Print the keys in the molecules map\n                console.log(molecules.keys());\n                throw new Error(`Molecule with ref ${ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a.add(b), new Big(0));\n    }\n\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */\n    get(tagName: string, dictRef: string): NodeWithNodes | TagWithAttributes | Tag | undefined {\n        if (this.index.has(tagName)) {\n            let i: number | Map<string, number> | undefined = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex: number | undefined = i.get(dictRef);\n                    if (nodeIndex != undefined) {\n                        return this.nodes.get(nodeIndex);\n                    }\n                } else {\n                    return this.nodes.get(i);\n                }\n            }\n        }\n    }\n\n}","import Big from \"big.js\";\nimport { boundary1, addRID, s_container, level1, addRemoveButton, mesmer, remove, s_Add_sy_add, s_selectOption, \n    getMoleculeKeys, addAnyUnits, level0, sy_selected, sy_deselected, s_optionOn, s_optionOff, s_input, \n    selectAnotherOptionEventListener, setNumberNode, IDManager, s_Add_from_spreadsheet, big0 } from \"./app\";\nimport { Conditions, BathGas, PTs, PTpair, ExperimentalRate, ExperimentalYield, ExperimentalEigenvalue } from \"./xml_conditions\";\nimport { createDiv, getCollapsibleDiv, createButton, s_button, createFlexDiv, createInput, createLabelWithInput, \n    resizeInputElement, createSelectElement, resizeSelectElement, s_select } from \"./html\";\nimport { Mesmer } from \"./xml_mesmer\";\nimport { Molecule } from \"./xml_molecule\";\nimport { getID } from \"./util\";\nimport { getAttributes, getNodeValue, getFirstChildNode } from \"./xml\";\n\n/**\n * Parse xml to initialise conditions.\n * @param xml The XML document.\n * @returns The conditions div.\n */\nexport function processConditions(xml: XMLDocument, conditionsIDs: IDManager, molecules: Map<string, Molecule>): HTMLDivElement {\n    console.log(Conditions.tagName);\n    // Create a div for the conditionss.\n    let conditionssDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"me:conditions\" element.\n    let xml_conditionss: HTMLCollectionOf<Element> = xml.getElementsByTagName(Conditions.tagName);\n    for (let i = 0; i < xml_conditionss.length; i++) {\n        let xml_conditions: Element = xml_conditionss[i];\n        // Create a collapsible div for each conditions.\n        let cDivID: string = addRID(Conditions.tagName, i.toString());\n        let cDiv: HTMLDivElement = createDiv(cDivID, boundary1);\n        let ccDivID = addRID(cDivID, s_container);\n        let ccDiv: HTMLDivElement = getCollapsibleDiv(ccDivID, conditionssDiv, null, cDiv, Conditions.tagName + \" \" + i.toString(),\n            boundary1, level1);\n        let conditions: Conditions = addConditions(getAttributes(xml_conditions), i);\n        handleBathGases(conditions, cDiv, xml_conditions, conditionsIDs, molecules);\n        handlePTs(conditions, cDiv, xml_conditions, conditionsIDs, molecules);\n        // Add a remove conditions button.\n        let removeButton: HTMLButtonElement = addRemoveButton(cDiv, level1, mesmer.removeConditions.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the conditions.\n            remove(ccDivID);\n            conditionsIDs.removeIDs(cDivID);\n        });\n    }\n    // Create an add button to add a conditions.\n    createAddConditionsButton(conditionssDiv, conditionsIDs, molecules);\n    return conditionssDiv;\n}\n\n/**\n * @param conditions The conditions.\n * @param cDiv The conditions div.\n * @param conditionsIndex The conditions index.\n * @param xml_conditions The XML conditions.\n */\nfunction handleBathGases(conditions: Conditions, cDiv: HTMLDivElement, xml_conditions: Element | null, conditionsIDs: IDManager,\n    molecules: Map<string, Molecule> ): void {\n    // Bath Gases\n    // Create a collapsible div.\n    let bsDivID: string = conditionsIDs.addID(cDiv.id, BathGas.tagName);\n    let bsDiv: HTMLDivElement = createDiv(bsDivID);\n    let bscDivID = conditionsIDs.addID(cDiv.id, BathGas.tagName, s_container);\n    let bscDiv: HTMLDivElement = getCollapsibleDiv(bscDivID, cDiv, null, bsDiv, BathGas.tagName, boundary1, level1);\n    // Add add button.\n    let addBathGasButton: HTMLButtonElement = createButton(s_Add_sy_add, conditionsIDs.addID(cDiv.id, BathGas.tagName, s_button), level1);\n    bsDiv.appendChild(addBathGasButton);\n    addBathGasButton.addEventListener('click', () => {\n        let bathGas: BathGas = new BathGas(new Map(), s_selectOption);\n        let bathGasIndex = conditions.addBathGas(bathGas);\n        let div: HTMLDivElement = createFlexDiv(undefined, level1);\n        let id: string = conditionsIDs.addID(cDiv.id, BathGas.tagName, bathGasIndex.toString());\n        let select: HTMLSelectElement = createSelectElementBathGas(Array.from(getMoleculeKeys(molecules)), bathGas, true, id);\n        select.classList.add(BathGas.tagName);\n        div.appendChild(select);\n        addRemoveButton(div, boundary1, (bathGas) => {\n            bsDiv.removeChild(div);\n            conditionsIDs.removeIDs(id),\n                conditions.removeBathGas(bathGas);\n        });\n        bsDiv.insertBefore(div, addBathGasButton);\n    });\n    // Process any \"bathGas\" elements that are immediate children of xml_conditions.\n    if (xml_conditions != null) {\n        let xml_bathGases: Element[] = Array.from(xml_conditions.children).filter(child => child.tagName === BathGas.tagName);\n        if (xml_bathGases.length > 0) {\n            for (let i = 0; i < xml_bathGases.length; i++) {\n                let attributes: Map<string, string> = getAttributes(xml_bathGases[i]);\n                let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGases[i]));\n                let bathGas: BathGas = new BathGas(attributes, moleculeID);\n                //console.log(\"bathGas \" + bathGas.toString());\n                let bathGasIndex = conditions.addBathGas(bathGas);\n                let id: string = conditionsIDs.addID(cDiv.id, BathGas.tagName, bathGasIndex.toString());\n                let div: HTMLDivElement = createFlexDiv(id, level1);\n                div.appendChild(createSelectElementBathGas(Array.from(getMoleculeKeys(molecules)), bathGas, false, id));\n                addRemoveButton(div, boundary1, (bathGas) => {\n                    bsDiv.removeChild(div);\n                    conditionsIDs.removeIDs(id);\n                    conditions.removeBathGas(bathGas);\n                });\n                bsDiv.insertBefore(div, addBathGasButton);\n            }\n        } else {\n            let div: HTMLDivElement = createFlexDiv(undefined, level1);\n            let id: string = conditionsIDs.addID(cDiv.id, BathGas.tagName, 0);\n            div.appendChild(createSelectElementBathGas(Array.from(getMoleculeKeys(molecules)), undefined, false, id));\n            addRemoveButton(div, boundary1, (bathGas) => {\n                bsDiv.removeChild(div);\n                conditionsIDs.removeIDs(id);\n                conditions.removeBathGas(bathGas);\n            });\n            bsDiv.insertBefore(div, addBathGasButton);\n        }\n    }\n}\n\n/**\n * \n * @param conditions \n * @param cDiv\n * @param xml_conditions \n * @param level \n * @param nextLevel \n */\nfunction handlePTs(conditions: Conditions, cDiv: HTMLDivElement, xml_conditions: Element | null, \n    conditionsIDs: IDManager, molecules: Map<string, Molecule>): void {\n    // PTs\n    let moleculeKeys: Set<string> = getMoleculeKeys(molecules);\n    // Create collapsible div.\n    let pTsDivId: string = conditionsIDs.addID(cDiv.id, PTs.tagName);\n    let pTsDiv: HTMLDivElement = createDiv(pTsDivId);\n    let pTscDivId = conditionsIDs.addID(cDiv.id, pTsDivId, s_container);\n    let pTscDiv: HTMLDivElement = getCollapsibleDiv(pTscDivId, cDiv, null, pTsDiv, PTs.tagName, boundary1, level1);\n    let pTs: PTs = new PTs(new Map());\n    if (xml_conditions) {\n        let xml_PTss: HTMLCollectionOf<Element> = xml_conditions.getElementsByTagName(PTs.tagName);\n        if (xml_PTss.length > 0) {\n            if (xml_PTss.length > 1) {\n                throw new Error(\"Expecting 1 \" + PTs.tagName + \" but finding \" + xml_PTss.length + \"!\");\n            }\n            let attributes: Map<string, string> = getAttributes(xml_PTss[0]);\n            let xml_PTpairs: HTMLCollectionOf<Element> = xml_PTss[0].getElementsByTagName(PTpair.tagName);\n            if (xml_PTpairs.length == 0) {\n                console.warn(\"Expecting 1 or more \" + PTpair.tagName + \" but finding 0! Please add some PTpairs in \"\n                + Conditions.tagName + \" \" + conditions.id + \".\");\n            } else {\n                pTs = new PTs(attributes);\n                for (let i = 0; i < xml_PTpairs.length; i++) {\n                    let pTpairAttributes: Map<string, string> = getAttributes(xml_PTpairs[i]);\n                    //console.log(\"pTpairAttributes=\" + mapToString(pTpairAttributes));\n                    let pTpair = new PTpair(pTpairAttributes);\n                    pTs.add(pTpair);\n                    // BathGas.\n                    let xml_bathGass: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(BathGas.tagName);\n                    if (xml_bathGass.length > 0) {\n                        if (xml_bathGass.length > 1) {\n                            console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n                        }\n                        pTpair.setBathGas(new BathGas(getAttributes(xml_bathGass[0]),\n                            getNodeValue(getFirstChildNode(xml_bathGass[0]))));\n                    }\n                    // ExperimentRate.\n                    let xml_ers: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(ExperimentalRate.tagName);\n                    if (xml_ers.length > 0) {\n                        if (xml_ers.length > 1) {\n                            console.warn(\"xml_experimentRates.length=\" + xml_ers.length);\n                        }\n                        pTpair.setExperimentalRate(new ExperimentalRate(getAttributes(xml_ers[0]),\n                            new Big(getNodeValue(getFirstChildNode(xml_ers[0])).trim())));\n                    }\n                    // ExperimentalYield.\n                    let xml_eys: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(ExperimentalYield.tagName);\n                    if (xml_eys.length > 0) {\n                        if (xml_eys.length > 1) {\n                            console.warn(\"xml_experimentalYields.length=\" + xml_eys.length);\n                        }\n                        pTpair.setExperimentalYield(new ExperimentalYield(getAttributes(xml_eys[0]),\n                            new Big(getNodeValue(getFirstChildNode(xml_eys[0])).trim())));\n                    }\n                    // ExperimentalEigenvalue.\n                    let xml_ees: HTMLCollectionOf<Element> = xml_PTpairs[i].getElementsByTagName(ExperimentalEigenvalue.tagName);\n                    if (xml_ees.length > 0) {\n                        if (xml_ees.length > 1) {\n                            console.warn(\"xml_experimentalEigenvalues.length=\" + xml_ees.length);\n                        }\n                        pTpair.setExperimentalEigenvalue(new ExperimentalEigenvalue(getAttributes(xml_ees[0]),\n                            new Big(getNodeValue(getFirstChildNode(xml_ees[0])).trim())));\n                    }\n                    // Create pTpairDiv.\n                    pTsDiv.appendChild(createPTpairDiv(pTs, pTsDiv, pTpair, cDiv.id, i, moleculeKeys, level1));\n                }\n            }\n        }\n    }\n    conditions.setPTs(pTs);\n    // Create a buttons div for the add, add from spreadsheet and remove all buttons.\n    let pTsButtonsDiv = createDiv(undefined, level1);\n    pTsDiv.appendChild(pTsButtonsDiv);\n    // Create an add button to add a new PTpair.\n    let addButton: HTMLButtonElement = createButton(s_Add_sy_add, undefined, boundary1);\n    pTsButtonsDiv.appendChild(addButton);\n    // Add event listener to the addButton.\n    addButton.addEventListener('click', () => {\n        // Create a new PTpair.\n        let pTpairAttributes: Map<string, string> = new Map();\n        pTpairAttributes.set(\"units\", \"Torr\");\n        let pTpair: PTpair = new PTpair(pTpairAttributes);\n        let pTpairIndex: number = pTs.add(pTpair);\n        console.log(\"Added new pTpair pTpairIndex=\" + pTpairIndex);\n        // Create a new div for the PTpair.\n        pTsDiv.insertBefore(createPTpairDiv(pTs, pTsDiv, pTpair, cDiv.id, pTpairIndex, moleculeKeys, level1), pTsButtonsDiv);\n    });\n    // Create an add from spreadsheet button to add multiple PTPairs.\n    let addMultipleButton: HTMLButtonElement = createButton(s_Add_from_spreadsheet, undefined, boundary1);\n    pTsButtonsDiv.appendChild(addMultipleButton);\n    // Add event listener to the addMultipleButton.\n    addMultipleButton.addEventListener('click', () => {\n        // Add a new text input for the user to paste the PTPairs.\n        let div: HTMLDivElement = createFlexDiv(undefined, level1);\n        let addFromSpreadsheetId = addRID(PTs.tagName, \"addFromSpreadsheet\");\n        let input: HTMLInputElement = createInput(\"text\", addFromSpreadsheetId, level1);\n        div.appendChild(input);\n        pTsDiv.insertBefore(div, pTsButtonsDiv);\n        // Add an event listener to the inputElement.\n        input.addEventListener('change', () => {\n            console.log(\"inputElement.value=\" + input.value);\n            console.log(\"inputElement.value.length=\" + input.value.length);\n            if (input.value.length > 0) {\n                let pTpairsArray: string[] = input.value.split(\" \");\n                // Is there a header?\n                let index: Map<string, number> = new Map();\n                pTpairsArray[0].split(\"\\t\").forEach((value, i) => {\n                    index.set(value, i);\n                });\n                console.log(\"pTpairsArray.length=\" + pTpairsArray.length);\n                for (let i = 1; i < pTpairsArray.length; i++) {\n                    let pTpairArray: string[] = pTpairsArray[i].split(\"\\t\");\n                    let pIndex: number = index.get(\"P\") as number;\n                    let p: Big = new Big(pTpairArray[pIndex]);\n                    let unitsIndex: number = index.get(\"units\") as number;\n                    let pTpairAttributes: Map<string, string> = new Map();\n                    if (index.has(\"units\")) {\n                        let units: string = pTpairArray[unitsIndex];\n                        pTpairAttributes.set(\"units\", units);\n                    }\n                    let pTpair: PTpair = new PTpair(pTpairAttributes);\n                    pTs.add(pTpair);\n                    let tIndex: number = index.get(\"T\") as number;\n                    let t: Big = new Big(pTpairArray[tIndex]);\n                    pTpair.setP(p);\n                    pTpair.setT(t);\n                    if (index.has(PTpair.s_excessReactantConc)) {\n                        let excessReactantConIndex: number = index.get(PTpair.s_excessReactantConc) as number;\n                        let excessReactantConc: string = pTpairArray[excessReactantConIndex];\n                        pTpairAttributes.set(PTpair.s_excessReactantConc, excessReactantConc);\n                    }\n                    if (index.has(PTpair.s_percentExcessReactantConc)) {\n                        let percentExcessReactantConIndex: number = index.get(PTpair.s_percentExcessReactantConc) as number;\n                        let percentExcessReactantConc: string = pTpairArray[percentExcessReactantConIndex];\n                        pTpairAttributes.set(PTpair.s_percentExcessReactantConc, percentExcessReactantConc);\n                    }\n                    if (index.has(PTpair.s_precision)) {\n                        console.log(\"index.has(PTpair.s_precision)\");\n                        let precisionIndex: number = index.get(PTpair.s_precision) as number;\n                        let precision: string = pTpairArray[precisionIndex];\n                        pTpairAttributes.set(PTpair.s_precision, precision);\n                        //console.log(\"precision=\" + precision);\n                    }\n                    if (index.has(BathGas.tagName)) {\n                        let bathGasIndex: number = index.get(BathGas.tagName) as number;\n                        let bathGas: string = pTpairArray[bathGasIndex];\n                        pTpair.setBathGas(new BathGas(new Map(), bathGas));\n                    }\n                    if (index.has(ExperimentalRate.tagName)) {\n                        let eri: number = index.get(ExperimentalRate.tagName) as number;\n                        let er: string = pTpairArray[eri];\n                        if (er.length > 0) {\n                            pTpairAttributes.set(ExperimentalRate.tagName, er);\n                            pTpair.setExperimentalRate(new ExperimentalRate(new Map(), new Big(er)));\n                            // Set the attributes of the experimentalRate.\n                            // ref1.\n                            let err1i = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref1) as number;\n                            let err1 = pTpairArray[err1i];\n                            pTpair.getExperimentalRate()?.setRef1(err1);\n                            // ref2.\n                            let err2i = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref2) as number;\n                            let err2 = pTpairArray[err2i];\n                            pTpair.getExperimentalRate()?.setRef2(err2);\n                            // refReaction.\n                            let errri = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_refReaction) as number;\n                            let errr = pTpairArray[errri];\n                            pTpair.getExperimentalRate()?.setRefReaction(errr);\n                            // error.\n                            let erei = index.get(ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_error) as number;\n                            let ere = pTpairArray[erei];\n                            pTpair.getExperimentalRate()?.setError(new Big(ere));\n                        }\n                    }\n                    if (index.has(ExperimentalYield.tagName)) {\n                        let eyi: number = index.get(ExperimentalYield.tagName) as number;\n                        let ey: string = pTpairArray[eyi];\n                        if (ey.length > 0) {\n                            pTpair.setExperimentalYield(new ExperimentalYield(new Map(), new Big(ey)));\n                            // Set the attributes of the experimentalYield.\n                            // ref.\n                            let eyri = index.get(ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_ref) as number;\n                            let eyr = pTpairArray[eyri];\n                            pTpair.getExperimentalYield()?.setRef(eyr);\n                            // yieldTime.\n                            let eyyti = index.get(ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_yieldTime) as number;\n                            let eyyt = pTpairArray[eyyti];\n                            pTpair.getExperimentalYield()?.setYieldTime(new Big(eyyt));\n                            // error.\n                            let eyei = index.get(ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_error) as number;\n                            let eye = pTpairArray[eyei];\n                            pTpair.getExperimentalYield()?.setError(new Big(eye));\n                        }\n                    }\n                    if (index.has(ExperimentalEigenvalue.tagName)) {\n                        let eei: number = index.get(ExperimentalEigenvalue.tagName) as number;\n                        let ee: string = pTpairArray[eei];\n                        if (ee.length > 0) {\n                            pTpair.setExperimentalEigenvalue(new ExperimentalEigenvalue(new Map(), new Big(ee)));\n                            // Set the attributes of the experimentalEigenvalue.\n                            // EigenvalueID.\n                            let eeeidi = index.get(ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_EigenvalueID) as number;\n                            let eeeid = pTpairArray[eeeidi];\n                            pTpair.getExperimentalEigenvalue()?.setEigenvalueID(eeeid);\n                            // error.\n                            let eeei = index.get(ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_error) as number;\n                            let eee = pTpairArray[eeei];\n                            pTpair.getExperimentalEigenvalue()?.setError(new Big(eee));\n                        }\n                    }\n                    //console.log(\"pTpair=\" + pTpair);\n                    let pTpairIndex: number = pTs.ptps.length - 1;\n                    // Create a new div for the PTpair.\n                    pTsDiv.insertBefore(createPTpairDiv(pTs, pTsDiv, pTpair, cDiv.id, pTpairIndex, moleculeKeys, level1), pTsButtonsDiv);\n                }\n                pTsDiv.removeChild(div);\n            }\n        });\n    });\n    // Add a remove all button.\n    let removeAllButton: HTMLButtonElement = createButton(\"Remove All\", undefined, boundary1);\n    pTsButtonsDiv.appendChild(removeAllButton);\n    removeAllButton.addEventListener('click', () => {\n        pTs.clear();\n        // Remove all elements before the pTsButtonsDiv.\n        let child: Node | null = pTsDiv.firstChild;\n        while (child != null && child != pTsButtonsDiv) {\n            let nextSibling: Node | null = child.nextSibling;\n            pTsDiv.removeChild(child);\n            child = nextSibling;\n        }\n    });\n}\n\n/**\n * Create an add conditions button and append it to conditionssDiv.\n * @param conditionssDiv The conditionss div.\n * @param conditionsDivIDs The conditions IDs.\n * @param molecules The molecules.\n * @returns The button.\n */\nexport function createAddConditionsButton(conditionssDiv: HTMLDivElement, conditionsDivIDs: IDManager,\n    molecules: Map<string, Molecule>): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    conditionssDiv.appendChild(button);\n    button.addEventListener('click', (event: MouseEvent) => {\n        let i: number = mesmer.getNextConditionsID();\n        console.log(\"Add Conditions \" + i.toString());\n        // Create collapsible div.\n        let cDivID: string = conditionsDivIDs.addID(Conditions.tagName, i.toString());\n        let cDiv: HTMLDivElement = createDiv(cDivID, boundary1);\n        let ccDivID = addRID(cDivID, s_container);\n        // ElementToInsert before is element after the conditions div with the previous index.\n        let elementToInsertBefore: Element | null;\n        if (i > 0) {\n            let aboveElement = document.getElementById(getID(Conditions.tagName, (i - 1).toString(), s_container)) as Element;\n            let nextElementSibling: Element | null = aboveElement.nextElementSibling;\n            // If nextElementSibling is not a child of conditionssDiv the element.\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == conditionssDiv) {\n                    elementToInsertBefore = nextElementSibling;\n                } else {\n                    elementToInsertBefore = button;\n                }\n            } else {\n                elementToInsertBefore = button;\n            }\n        } else {\n            elementToInsertBefore = button;\n        }\n        let ccDiv: HTMLDivElement = getCollapsibleDiv(ccDivID, conditionssDiv, elementToInsertBefore, cDiv,\n            Conditions.tagName + \" \" + i.toString(), boundary1, level1);\n        // Add the conditions\n        let conditions: Conditions = addConditions(new Map(), i);\n        handleBathGases(conditions, cDiv, null, conditionsDivIDs, molecules);\n        handlePTs(conditions, cDiv, null, conditionsDivIDs, molecules);\n        // Add a remove conditions button.\n        let removeButton: HTMLButtonElement = addRemoveButton(cDiv, level1, mesmer.removeConditions.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the conditions.\n            remove(ccDivID);\n            conditionsDivIDs.removeIDs(cDivID);\n        });\n    });\n    return button;\n}\n\n/**\n * Add and return a new conditions.\n */\nfunction addConditions(attributes: Map<string, string>, i: number): Conditions {\n    let conditions: Conditions = new Conditions(attributes, i);\n    mesmer.addConditions(conditions);\n    return conditions;\n}\n\n/**\n * @param pTs The PTs.\n * @param pTsDiv The PTs div.\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param pTIndex The index.\n * @param moleculeKeys The molecule keys.\n * @param level The level.\n */\nfunction createPTpairDiv(pTs: PTs, pTsDiv: HTMLDivElement, pTpair: PTpair, cDivID: string, pTIndex: number,\n    moleculeKeys: Set<string>,\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }): HTMLDivElement {\n    let pTpairDiv: HTMLDivElement = createFlexDiv(addRID(pTsDiv.id, pTIndex), level);\n    addPorT(pTpairDiv, PTpair.s_P, pTpair.getP.bind(pTpair), pTpair.setP.bind(pTpair)); // The binding is necessary to maintain the correct \"this\".\n    addAnyUnits(Mesmer.pressureUnits, pTpair.attributes, pTpairDiv, null, PTpair.tagName, PTpair.tagName, boundary1, level1);\n    addPorT(pTpairDiv, PTpair.s_T, pTpair.getT.bind(pTpair), pTpair.setT.bind(pTpair)); // The binding is necessary to maintain the correct \"this\".\n    //let id: string = conditionsIDs.addID(cDivID, pTsDiv.id, pTIndex.toString());\n\n    // ExcessReactantConc.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_excessReactantConc, addID(id, PTpair.s_excessReactantConc),\n    //    [pTpair], createExcessReactantConcInputElement);\n    //addExcessReactantConc(pTpairDiv, pTpair, pTIndex);\n    addAttribute(pTpairDiv, pTpair, PTpair.s_excessReactantConc, createExcessReactantConcInputElement);\n    //addAttribute(    pTpairDiv,     pTpair,    pTIndex,     PTpair.s_excessReactantConc,     createExcessReactantConcInputElement,\n    //(pTpair, attribute) => pTpair.attributes.has(attribute),    (pTpair, attribute) => null);\n\n    // PercentExcessReactantConc.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_percentExcessReactantConc);\n    addPercentExcessReactantConc(pTpairDiv, pTpair);\n\n    // Precision.\n    //addButtonWithToggle(pTpairDiv, pTpair, PTpair.s_precision, addID(id, PTpair.s_precision),\n    //    [pTpair], createPrecisionSelectElement);\n    //addPrecision(pTpairDiv, pTpair, pTIndex);\n    addAttribute(pTpairDiv, pTpair, PTpair.s_precision, createPrecisionSelectElement);\n    //addAttribute(    pTpairDiv,     pTpair,    pTIndex,     PTpair.s_precision, createPrecisionSelectElement,\n    //    (pTpair, attribute) => pTpair.attributes.has(attribute),    (pTpair, attribute) => null);\n\n\n    // BathGas.\n    //addButtonWithToggle(pTpairDiv, pTpair, BathGas.tagName, addID(id, BathGas.tagName),\n    //    [pTpair, moleculeKeys, true], createBathGasSelectElement);\n    addBathGas(pTpairDiv, pTpair, moleculeKeys);\n    /*\n    addAttribute(pTpairDiv, pTpair, pTIndex, BathGas.tagName, createBathGasSelectElement,\n        (pTpair, attribute) => pTpair.getBathGas() !== undefined,  (pTpair, attribute) => pTpair.getBathGas(), moleculeKeys\n    );\n    */\n\n    // ExperimentalRate.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalRate.tagName, addID(id, ExperimentalRate.tagName),\n    //    [undefined, pTpair, pTIndex], addExperimentalRateDetails);\n    //addExperimentalRate(pTpairDiv, pTpair, pTIndex);\n    addExperimentalElement(pTpairDiv, pTpair, pTIndex, ExperimentalRate.tagName,\n        (pTpair) => pTpair.getExperimentalRate(), createExperimentalRateDetails);\n\n    // ExperimentalYield.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalYield.tagName, addID(id, ExperimentalYield.tagName),\n    //    [undefined, pTpair, pTIndex], addExperimentalYieldDetails);\n    //addExperimentalYield(pTpairDiv, pTpair, pTIndex);\n    addExperimentalElement(pTpairDiv, pTpair, pTIndex, ExperimentalYield.tagName,\n        (pTpair) => pTpair.getExperimentalYield(), createExperimentalYieldDetails\n    );\n\n    // ExperimentalEigenvalue.\n    //addButtonWithToggle(pTpairDiv, pTpair, ExperimentalEigenvalue.tagName, addID(id, ExperimentalEigenvalue.tagName),\n    //   [undefined, pTpair, pTIndex], addExperimentalEigenvalueDetails);\n    //addExperimentalEigenvalue(pTpairDiv, pTpair, pTIndex);\n    addExperimentalElement(pTpairDiv, pTpair, pTIndex, ExperimentalEigenvalue.tagName,\n        (pTpair) => pTpair.getExperimentalEigenvalue(), createExperimentalEigenvalueDetails\n    );\n\n    // Function to be used to remove a PTpair.\n    let removePTpair: (pTpairDiv: HTMLDivElement, i: number | undefined, pTpair: PTpair) => void = (pTpairDiv, i, pTpair) => {\n        pTsDiv.removeChild(pTpairDiv);\n        if (i !== undefined) {\n            pTs.remove(i);\n        }\n        pTpair.removeBathGas();\n    };\n    addRemoveButton(pTpairDiv, boundary1, removePTpair, pTpairDiv, pTIndex, pTpair);\n    return pTpairDiv;\n}\n\n/**\n * @param pTpairDiv The pTpair div.\n * @param name The name (\"P\" or \"T\").\n * @param getter The getter method.\n * @param setter The setter method.\n */\nfunction addPorT(pTpairDiv: HTMLDivElement, name: string, getter: () => Big | undefined, setter: (value: Big) => void): void {\n    let lwi: HTMLDivElement = createLabelWithInput(\"text\", PTpair.tagName + \"_\" + name,\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            try {\n                setter(new Big(target.value));\n                console.log(`Set ${name} to ${target.value}`);\n            } catch (e) {\n                alert(\"Invalid input, resetting...\");\n                input.value = getValue(getter);\n            }\n            resizeInputElement(target);\n        }, getValue(getter), name);\n    let input: HTMLInputElement = lwi.querySelector('input') as HTMLInputElement;\n    input.value = getValue(getter);\n    resizeInputElement(input);\n    pTpairDiv.appendChild(lwi);\n}\n\nfunction getValue(getter: () => Big | undefined): string {\n    let value: Big | undefined = getter();\n    if (value !== undefined) {\n        return value.toString();\n    } else {\n        return \"\";\n    }\n}\n\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n */\nfunction addPercentExcessReactantConc(pTpairDiv: HTMLDivElement, pTpair: PTpair): void {\n    let id: string = addRID(pTpairDiv.id, PTpair.s_percentExcessReactantConc);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.appendChild(div);\n    let attribute: string = PTpair.s_percentExcessReactantConc;\n    let buttonTextContentSelected: string = attribute + sy_selected;\n    let buttonTextContentDeselected: string = attribute + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, addRID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    if (pTpair.attributes.get(attribute)?.toLowerCase() == \"true\") {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            pTpair.attributes.set(attribute, \"true\");\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            pTpair.attributes.delete(attribute);\n        }\n    });\n}\n\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param conditionsIndex The conditions index.\n * @param pTIndex The pTindex.\n * @param attribute The attribute.\n * @param createInputElement The function to create the input element.\n */\nfunction addAttribute(pTpairDiv: HTMLDivElement, pTpair: PTpair, attribute: string,\n    createInputElement: (id: string, pTpair: PTpair) => HTMLInputElement | HTMLSelectElement): void {\n    let id: string = addRID(pTpairDiv.id, attribute);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.appendChild(div);\n    let buttonTextContentSelected: string = attribute + sy_selected;\n    let buttonTextContentDeselected: string = attribute + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, addRID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let iid = addRID(id, s_input);\n    if (pTpair.attributes.has(attribute)) {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        let input = createInputElement(iid, pTpair);\n        div.insertBefore(input, button.nextSibling);\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            let input = createInputElement(iid, pTpair);\n            div.insertBefore(input, button.nextSibling);\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the input element.\n            remove(iid);\n        }\n    });\n}\n\n/**\n * @param pTpairDiv The PTpair div.\n * @param pTpair The PTpair.\n * @param i The index.\n * @param moleculeKeys The molecule keys.\n */\nfunction addBathGas(pTpairDiv: HTMLDivElement, pTpair: PTpair, moleculeKeys: Set<string>): void {\n    let id: string = addRID(pTpairDiv.id, BathGas.tagName);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.appendChild(div);\n    let tagName: string = BathGas.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, addRID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let iid = addRID(id, s_input);\n    let bathGas: BathGas | undefined = pTpair.getBathGas();\n    if (bathGas == undefined) {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    } else {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        if (moleculeKeys.has(bathGas.value) == false) {\n            console.warn(\"moleculeKeys does not contain \" + bathGas.value);\n        }\n        div.appendChild(createBathGasSelectElement(iid, pTpair, bathGas, false, moleculeKeys));\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            div.appendChild(createBathGasSelectElement(iid, pTpair, bathGas, false, moleculeKeys));\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the select element.\n            remove(iid);\n        }\n    });\n}\n\n/**\n * \n * @param pTpairDiv \n * @param pTpair \n * @param conditionsIndex \n * @param pTIndex \n * @param tagName \n * @param getAttribute \n * @param createElement \n */\nfunction addExperimentalElement(pTpairDiv: HTMLDivElement, pTpair: PTpair, pTIndex: number, tagName: string,\n    getAttribute: (pTpair: PTpair) => any, createElement: (id: string, pTpair: PTpair, i: number) => HTMLElement): void {\n    let id: string = addRID(pTpairDiv.id, tagName);\n    let div: HTMLDivElement = createDiv(id, boundary1);\n    pTpairDiv.appendChild(div);\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, addRID(id, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let iid = addRID(id, s_input);\n    if (getAttribute(pTpair) == undefined) {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    } else {\n        button.classList.toggle(s_optionOff);\n        button.textContent = buttonTextContentSelected;\n        div.appendChild(createElement(iid, pTpair, pTIndex));\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        button.classList.toggle(s_optionOn);\n        button.classList.toggle(s_optionOff);\n        if (button.textContent === buttonTextContentDeselected) {\n            button.textContent = buttonTextContentSelected;\n            div.appendChild(createElement(iid, pTpair, pTIndex));\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            // Remove the element.\n            remove(iid);\n        }\n    });\n}\n\n/**\n * @param id The id.\n * @param pTpair The PTpair.\n * @returns A select element.\n */\nfunction createPrecisionSelectElement(id: string, pTpair: PTpair): HTMLSelectElement {\n    let value: string;\n    if (pTpair.attributes.has(PTpair.s_precision)) {\n        value = pTpair.attributes.get(PTpair.s_precision) as string;\n    } else {\n        value = Mesmer.precisionOptions[0];\n    }\n    let select: HTMLSelectElement = createSelectElement(Mesmer.precisionOptions, PTpair.s_precision, value, id, boundary1);\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        pTpair.setPrecision(target.value);\n        console.log(\"Set \" + PTpair.s_precision + \" to \" + target.value);\n        resizeSelectElement(target);\n    });\n    resizeSelectElement(select);\n    return select;\n}\n\n/**\n * @param id The id for the HTMLInputElement created.\n * @param pTpair The PTpair.\n * @returns An HTMLInputElement.\n */\nfunction createExcessReactantConcInputElement(id: string, pTpair: PTpair): HTMLInputElement {\n    let input: HTMLInputElement = createInput(\"number\", id, boundary1);\n    let value: string;\n    if (pTpair.attributes.has(PTpair.s_excessReactantConc)) {\n        value = pTpair.attributes.get(PTpair.s_excessReactantConc) as string;\n    } else {\n        value = NaN.toString();\n    }\n    console.log(PTpair.s_excessReactantConc + \"=\" + value);\n    input.value = value;\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        pTpair.setExcessReactantConc(target.value);\n        console.log(\"Set \" + PTpair.s_excessReactantConc + \" to \" + target.value);\n        resizeInputElement(target);\n    });\n    resizeInputElement(input);\n    return input;\n}\n\n/**\n * @param pTpair The PTpair.\n * @param id The id.\n * @param bathGas The bath gas.\n * @returns A select element.\n */\nfunction createBathGasSelectElement(id: string, pTpair: PTpair, bathGas: BathGas | undefined, first: boolean,\n    moleculeKeys: Set<string>): HTMLSelectElement {\n    //console.log(\"createBathGasSelectElement\");\n    //console.log(\"pTpair \" + pTpair.toString());\n    let select: HTMLSelectElement = createSelectElementBathGas(Array.from(moleculeKeys), bathGas, first, id);\n    //select.id = id;\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        pTpair.setBathGas(new BathGas(new Map(), target.value));\n        console.log(\"Set bathGas to \" + target.value);\n        resizeSelectElement(target);\n    });\n    resizeSelectElement(select);\n    return select;\n}\n\n/**\n * @param options The options.\n * @param bathGas The bath gas.\n * @param first True if this is the first selection, flase otherwise?\n * @param id The id used to generate other ids.\n */\nfunction createSelectElementBathGas(options: string[], bathGas: BathGas | undefined, first: boolean, id: string): HTMLSelectElement {\n    let value: string;\n    if (first) {\n        options.push(s_selectOption);\n    } else {\n        // remove selectAnotherOption if it is present.\n        let index = options.indexOf(s_selectOption);\n        if (index > -1) {\n            options.splice(index, 1);\n        }\n    }\n    if (bathGas == undefined) {\n        bathGas = new BathGas(new Map(), s_selectOption);\n        value = s_selectOption;\n    } else {\n        value = bathGas.value;\n    }\n    let select: HTMLSelectElement = createSelectElement(options, BathGas.tagName, value, addRID(id, s_select), boundary1);\n    select.classList.add(BathGas.tagName);\n    selectAnotherOptionEventListener(options, select);\n    // Add event listener to selectElement.\n    select.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        (bathGas as BathGas).value = target.value;\n        console.log(\"Added \" + target.value + \" as \" + BathGas.tagName);\n        resizeSelectElement(target);\n    });\n    select.value = value;\n    resizeSelectElement(select);\n    return select;\n}\n\n/**\n * Create a div for the experimental rate details.\n * @param id The id.\n * @param pTpair The PTpair.\n * @returns A div.\n */\nfunction createExperimentalRateDetails(id: string, pTpair: PTpair): HTMLDivElement {\n    return addExperimentalDetails(\n        pTpair,\n        id,\n        pTpair => pTpair.getExperimentalRate(),\n        (pTpair, value) => pTpair.setExperimentalRate(value),\n        ExperimentalRate,\n        [\n            {\n                tagName: ExperimentalRate.tagName, type: \"number\",\n                eventHandler: (event, target) => setNumberNode(pTpair.getExperimentalRate() as ExperimentalRate, target),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).value.toString()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref1, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setRef1(target.value),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getRef1()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_ref2, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setRef2(target.value),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getRef2()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_refReaction, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setRefReaction(target.value),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getRefReaction()\n            },\n            {\n                tagName: ExperimentalRate.tagName + \"_\" + ExperimentalRate.s_error, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalRate()?.setError(new Big(target.value)),\n                valueGetter: () => (pTpair.getExperimentalRate() as ExperimentalRate).getError().toString()\n            }\n        ]\n    );\n}\n\n/**\n * Create a div for the experimental yield details.\n * @param id The id.\n * @param pTpair The PTpair.\n * @returns A div.\n */\nfunction createExperimentalYieldDetails(id: string, pTpair: PTpair): HTMLDivElement {\n    return addExperimentalDetails(\n        pTpair,\n        id,\n        pTpair => pTpair.getExperimentalYield(),\n        (pTpair, value) => pTpair.setExperimentalYield(value),\n        ExperimentalYield,\n        [\n            {\n                tagName: ExperimentalYield.tagName, type: \"number\",\n                eventHandler: (event, target) => setNumberNode(pTpair.getExperimentalYield() as ExperimentalYield, target),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).value.toString()\n            },\n            {\n                tagName: ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_ref, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalYield()?.setRef(target.value),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).getRef()\n            },\n            {\n                tagName: ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_yieldTime, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalYield()?.setYieldTime(new Big(target.value)),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).getYieldTime().toString()\n            },\n            {\n                tagName: ExperimentalYield.tagName + \"_\" + ExperimentalYield.s_error, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalYield()?.setError(new Big(target.value)),\n                valueGetter: () => (pTpair.getExperimentalYield() as ExperimentalYield).getError().toString()\n            }\n        ]\n    );\n}\n\n/**\n * Create a div for the experimental eigenvalue.\n * @param id The id.\n * @param pTpair The PTpair.\n * @returns A div.\n */\nfunction createExperimentalEigenvalueDetails(id: string, pTpair: PTpair): HTMLDivElement {\n    return addExperimentalDetails(\n        pTpair,\n        id,\n        pTpair => pTpair.getExperimentalEigenvalue(),\n        (pTpair, value) => pTpair.setExperimentalEigenvalue(value),\n        ExperimentalEigenvalue,\n        [\n            {\n                tagName: ExperimentalEigenvalue.tagName, type: \"number\",\n                eventHandler: (event, target) => setNumberNode(pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue, target),\n                valueGetter: () => (pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue).value.toString()\n            },\n            {\n                tagName: ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_EigenvalueID, type: \"text\",\n                eventHandler: (event, target) => pTpair.getExperimentalEigenvalue()?.setEigenvalueID(target.value),\n                valueGetter: () => (pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue).getEigenvalueID()\n            },\n            {\n                tagName: ExperimentalEigenvalue.tagName + \"_\" + ExperimentalEigenvalue.s_error, type: \"number\",\n                eventHandler: (event, target) => pTpair.getExperimentalEigenvalue()?.setError(new Big(target.value)),\n                valueGetter: () => (pTpair.getExperimentalEigenvalue() as ExperimentalEigenvalue).getError().toString()\n            }\n        ]\n    );\n}\n\n/**\n * @param pTpair The PTpair.\n * @param id The id.\n * @param getExperimental The getter.\n * @param setExperimental The setter.\n * @param ExperimentalClass The class.\n * @param details The details.\n * @returns HTMLDivElement.\n */\nfunction addExperimentalDetails<T extends ExperimentalRate | ExperimentalYield | ExperimentalEigenvalue>(\n    pTpair: PTpair,\n    id: string,\n    getExperimental: (pTpair: PTpair) => T | undefined,\n    setExperimental: (pTpair: PTpair, value: T) => void,\n    ExperimentalClass: { new(attributes: Map<string, any>, value: Big): T },\n    details: {\n        tagName: string, type: string, eventHandler: (event: Event, target: HTMLInputElement) => void,\n        valueGetter: () => string, label?: string\n    }[]): HTMLDivElement {\n    let div = createDiv(undefined, boundary1);\n    div.id = id;\n    let experimental: T | undefined = getExperimental(pTpair);\n    if (experimental == undefined) {\n        experimental = new ExperimentalClass(new Map(), big0);\n        setExperimental(pTpair, experimental);\n    }\n    for (let detail of details) {\n        let detailId = id + \"_\" + detail.tagName;\n        div.appendChild(createLabelWithInput(detail.type, detailId, boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            detail.eventHandler(event, target);\n            console.log(\"Set \" + detail.tagName + \" to \" + target.value);\n            resizeInputElement(target);\n        }, detail.valueGetter(), detail.label || \"\"));\n    }\n    return div;\n}","import Big from \"big.js\";\nimport { boundary1, addRID, s_container, level1, addRemoveButton, mesmer, remove, sy_selected, sy_deselected, s_optionOn, s_optionOff, s_input, defaults, big0, setNumberNode, addAnyUnits, s_Add_sy_add, IDManager, s_units } from \"./app\";\nimport { AutomaticallySetMaxEne } from \"./xml_control\";\nimport { createDiv, getCollapsibleDiv, createFlexDiv, createButton, s_button, resizeInputElement, createInput } from \"./html\";\nimport { Mesmer } from \"./xml_mesmer\";\nimport { ModelParameters, EnergyAboveTheTopHill, MaxTemperature, GrainSize } from \"./xml_modelParameters\";\nimport { getID } from \"./util\";\nimport { getAttributes, getNodeValue, getFirstChildNode } from \"./xml\";\n\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */\nexport function processModelParameters(xml: XMLDocument, mpIDM: IDManager): HTMLDivElement {\n    console.log(ModelParameters.tagName);\n    // Create a div for the modelParameterss.\n    let mpsDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    let xml_mps: HTMLCollectionOf<Element> = xml.getElementsByTagName(ModelParameters.tagName);\n    for (let i = 0; i < xml_mps.length; i++) {\n        // Create a collapsible div for the model parameters.\n        let mpDivID: string = mpIDM.addID(ModelParameters.tagName, i.toString());\n        let mpDiv: HTMLDivElement = createDiv(mpDivID, boundary1);\n        let mpcDivID = mpIDM.addID(mpDivID, s_container);\n        let mpcDiv: HTMLDivElement = getCollapsibleDiv(mpcDivID, mpsDiv, null, mpDiv,\n            ModelParameters.tagName + \" \" + i.toString(), boundary1, level1);\n        let mp: ModelParameters = addModelParameters(getAttributes(xml_mps[i]), i);\n        processGrainSize(mp, xml_mps[i], mpDiv, mpIDM);\n        //setGrainSize(mp, xml_mps[i], mpDiv);\n        processModelParametersN(mp, mpIDM, xml_mps[i], mpDiv, AutomaticallySetMaxEne,\n            mp.setAutomaticallySetMaxEne, mp.removeAutomaticallySetMaxEne.bind(mp));\n        processModelParametersN(mp, mpIDM, xml_mps[i], mpDiv, EnergyAboveTheTopHill,\n            mp.setEnergyAboveTheTopHill, mp.removeEnergyAboveTheTopHill.bind(mp));\n        processModelParametersN(mp, mpIDM, xml_mps[i], mpDiv, MaxTemperature,\n            mp.setMaxTemperature, mp.removeMaxTemperature.bind(mp));\n        // Add a remove modelParameters button.\n        let removeButton: HTMLButtonElement = addRemoveButton(mpDiv, level1, mesmer.removeModelParameters.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the modelParameters.\n            remove(mpcDivID);\n            mpIDM.removeIDs(mpDivID);\n        });\n    }\n    // Create an add button to add a modelParameters.\n    createAddModelParametersButton(mpsDiv, mpIDM);\n    return mpsDiv;\n}\n\n/**\n * Add and return a new modelParameters.\n */\nfunction addModelParameters(attributes: Map<string, string>, i: number): ModelParameters {\n    let mp: ModelParameters = new ModelParameters(attributes, i);\n    mesmer.addModelParameters(mp);\n    return mp;\n}\n\n/**\n * @param mps The model parameters.\n * @param xml_mps The XML model parameters.\n * @param mpsDiv The model parameters div.\n */\nfunction processGrainSize(mps: ModelParameters, xml_mps: Element | null, mpsDiv: HTMLDivElement, modelParametersIDs: IDManager) {\n    let tagName: string = GrainSize.tagName;\n    let id: string = modelParametersIDs.addID(mpsDiv.id, tagName);\n    let div: HTMLDivElement = createFlexDiv(id, level1);\n    mpsDiv.appendChild(div);\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(tagName, modelParametersIDs.addID(mpsDiv.id, tagName, s_button), boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    div.appendChild(button);\n    let idi: string = modelParametersIDs.addID(mpsDiv.id, tagName, s_input);\n    let gs: GrainSize;\n    let valueString: string;\n    if (xml_mps != null) {\n        let xml: HTMLCollectionOf<Element> = xml_mps.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            valueString = getNodeValue(getFirstChildNode(xml[0]));\n            let value: Big = new Big(Number(valueString));\n            gs = new GrainSize(getAttributes(xml[0]), value);\n            button.textContent = buttonTextContentSelected;\n            createInputModelParameters(mps, div, gs, idi, valueString, mps.setGrainSize, Mesmer.energyUnits);\n            button.classList.toggle(s_optionOff);\n        } else {\n            gs = getDefaultGrainsize(tagName);\n            button.textContent = buttonTextContentDeselected;\n            button.classList.toggle(s_optionOn);\n        }\n    } else {\n        gs = getDefaultGrainsize(tagName);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', () => {\n        // Check if the GrainSize already exists\n        if (!mps.index.has(GrainSize.tagName)) {\n            createInputModelParameters(mps, div, gs, idi, valueString, mps.setGrainSize, Mesmer.energyUnits);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            mps.removeGrainSize();\n            document.getElementById(idi)?.remove();\n            document.getElementById(getID(idi, s_units))?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param mps The model parameters.\n * @param xml_mps The XML model parameters.\n * @param mpsDiv The model parameters div.\n */\nfunction setGrainSize(mps: ModelParameters, xml_mps: Element, mpsDiv: HTMLDivElement, modelParametersIDs: IDManager) {\n    let tagName: string = GrainSize.tagName;\n\n    let div: HTMLDivElement = addGrainSize(mps, mpsDiv, modelParametersIDs);\n\n\n    // Save the current display style of the div\n    let originalDisplay = div.style.display;\n    // Make the div visible\n    div.style.display = \"block\";\n    let input: HTMLInputElement = div.querySelector('input') as HTMLInputElement;\n    // restore the original display style\n    div.style.display = originalDisplay;\n\n\n    //let input: HTMLInputElement = document.getElementById(getID(mpsDiv.id, tagName, s_input)) as HTMLInputElement;\n\n    let xml: HTMLCollectionOf<Element> = xml_mps.getElementsByTagName(tagName);\n    if (xml.length > 0) {\n        if (xml.length > 1) {\n            console.warn(\"More than one GrainSize found in XML. The first is used!\");\n        }\n        let valueString: string = getNodeValue(getFirstChildNode(xml[0]));\n        let value: Big = new Big(valueString);\n        (mps.getGrainSize() as GrainSize).value = value;\n        if (input !== null) {\n            input.value = valueString;\n            resizeInputElement(input);\n        } else {\n            console.warn(\"GrainSize input element not found.\");\n        }\n    }\n}\n\n/**\n * @param mps The model parameters.\n * @param xml_mps The XML model parameters.\n * @param mpsDiv The model parameters div.\n */\nfunction addGrainSize(mps: ModelParameters, mpsDiv: HTMLDivElement, modelParametersIDs: IDManager): HTMLDivElement {\n    let tagName: string = GrainSize.tagName;\n    let id: string = modelParametersIDs.addID(mpsDiv.id, tagName);\n    let div: HTMLDivElement = createFlexDiv(id, level1);\n    mpsDiv.appendChild(div);\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(tagName, modelParametersIDs.addID(mpsDiv.id, tagName, s_button), boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    div.appendChild(button);\n    let idi: string = modelParametersIDs.addID(mpsDiv.id, tagName, s_input);\n    let gs: GrainSize;\n    button.textContent = buttonTextContentDeselected;\n    button.classList.toggle(s_optionOn);\n    // Add event listener for the button.\n    button.addEventListener('click', () => {\n        // Check if the GrainSize already exists\n        if (!mps.index.has(GrainSize.tagName)) {\n            console.log(\"Adding GrainSize input\");\n            gs = getDefaultGrainsize(tagName);\n            mps.setGrainSize(gs);\n            createInputModelParameters(mps, div, gs, idi, gs.value.toString(), mps.setGrainSize, Mesmer.energyUnits);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            console.log(\"Removing GrainSize input\");\n            mps.removeGrainSize();\n            document.getElementById(idi)?.remove();\n            document.getElementById(getID(idi, s_units))?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n    //button.click();\n    return div;\n}\n\nfunction getDefaultGrainsize(tagName: string): GrainSize {\n    let value: Big;\n    let attributes: Map<string, string>;\n    if (defaults != undefined) {\n        let valueString: string = defaults.values.get(tagName) ?? \"\";\n        if (valueString == \"\") {\n            value = big0;\n        } else {\n            value = new Big(valueString);\n        }\n        attributes = defaults.attributess.get(tagName) ?? new Map();\n    } else {\n        console.log(tagName + \" set using hardcoded default.\");\n        value = new Big(101);\n        attributes = new Map();\n        attributes.set(s_units, \"cm-1\");\n    }\n    return new GrainSize(attributes, value);\n}\n\n/**\n * Process numerical modelParameters.\n * @param mps The ModelParameters.\n * @param mpsDiv The modelParameters div.\n * @param xml_mps The xml modelParameters.\n */\nfunction processModelParametersN<T extends { new(attributes: Map<string, string>, value: Big): any; tagName: string }>(\n    mps: ModelParameters, modelParametersIDs: IDManager, xml_mps: Element | null, mpsDiv: HTMLDivElement, mpt: T,\n    setModelParameter: (mp: InstanceType<T>) => void, removeModelParameter: () => void): void {\n    let tagName: string = mpt.tagName;\n    let id: string = modelParametersIDs.addID(mpsDiv.id, tagName);\n    let div: HTMLDivElement = createFlexDiv(id, level1);\n    mpsDiv.appendChild(div);\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(tagName, modelParametersIDs.addID(mpsDiv.id, tagName, s_button), boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    div.appendChild(button);\n    let idi: string = modelParametersIDs.addID(mpsDiv.id, tagName, s_input);\n    let mp: InstanceType<T>;\n    let valueString: string;\n    if (xml_mps != null) {\n        let xml: HTMLCollectionOf<Element> = xml_mps.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            valueString = getNodeValue(getFirstChildNode(xml[0]));\n            let value: Big = new Big(valueString);\n            mp = new mpt(getAttributes(xml[0]), value);\n            button.textContent = buttonTextContentSelected;\n            createInputModelParameters(mps, div, mp, idi, valueString, setModelParameter, undefined);\n            button.classList.toggle(s_optionOff);\n        } else {\n            valueString = \"\";\n            mp = new mpt(new Map(), big0);\n            button.textContent = buttonTextContentDeselected;\n            button.classList.toggle(s_optionOn);\n        }\n    } else {\n        valueString = \"\";\n        mp = new mpt(new Map(), big0);\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', () => {\n        // Check if the ModelParameter already exists\n        if (!mps.index.has(tagName)) {\n            createInputModelParameters(mps, div, mp, idi, valueString, setModelParameter, undefined);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            //valueString = mp.value.toExponential();\n            removeModelParameter();\n            remove(idi);\n            modelParametersIDs.removeIDs(idi);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param mps The model parameters.\n * @param div The div.\n * @param element The element.\n * @param id The id.\n * @param ids The id for the units select.\n * @param valueString The value string.\n * @param setElementMethod The method to set the element.\n * @param units The units.\n */\nfunction createInputModelParameters(mps: ModelParameters, div: HTMLDivElement, element: any,\n    id: string, valueString: string, setElementMethod: (value: any) => void, units: any): void {\n    setElementMethod.call(mps, element);\n    let input: HTMLInputElement = createInput(\"text\", id, boundary1);\n    div.appendChild(input);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setNumberNode(element, target);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    addAnyUnits(units, element.attributes, div, input, getID(id, s_units), element.constructor.tagName, boundary1, boundary1);\n}\n\n/**\n * Create an add modelParameters button.\n * @param mpsDiv The modelParameters div.\n * @param mpIDM The modelParameters IDs.\n * @returns A button.\n */\nexport function createAddModelParametersButton(mpsDiv: HTMLDivElement, mpIDM: IDManager): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    let tn: string = ModelParameters.tagName;\n    mpsDiv.appendChild(button);\n    button.addEventListener('click', (event: MouseEvent) => {\n        let i: number = mesmer.getNextModelParametersID();\n        console.log(\"Add \" + tn + i.toString());\n        // Create collapsible div.\n        let mpDivID: string = addRID(tn, i.toString());\n        let mpDiv: HTMLDivElement = createDiv(mpDivID, boundary1);\n        let mpcDivID = addRID(mpDivID, s_container);\n        let elementToInsertBefore: Element | null;\n        if (i > 0) {\n            let aboveElement = document.getElementById(getID(tn, (i - 1).toString(), s_container)) as Element;\n            let nextElementSibling: Element | null = aboveElement.nextElementSibling;\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == mpsDiv) {\n                    elementToInsertBefore = nextElementSibling;\n                } else {\n                    elementToInsertBefore = button;\n                }\n            } else {\n                elementToInsertBefore = button;\n            }\n        } else {\n            elementToInsertBefore = button;\n        }\n        let mpcDiv: HTMLDivElement = getCollapsibleDiv(mpcDivID, mpsDiv, elementToInsertBefore, mpDiv,\n            tn + \" \" + i.toString(), boundary1, level1);\n        // Add the modelParameters.\n        let mp: ModelParameters = addModelParameters(new Map(), i);\n        addGrainSize(mp, mpDiv, mpIDM);\n        processModelParametersN(mp, mpIDM, null, mpDiv, AutomaticallySetMaxEne,\n            mp.setAutomaticallySetMaxEne, mp.removeAutomaticallySetMaxEne);\n        processModelParametersN(mp, mpIDM, null, mpDiv, EnergyAboveTheTopHill,\n            mp.setEnergyAboveTheTopHill, mp.removeEnergyAboveTheTopHill);\n        processModelParametersN(mp, mpIDM, null, mpDiv, MaxTemperature,\n            mp.setMaxTemperature, mp.removeMaxTemperature);\n        // Add a remove modelParameters button.\n        let removeButton: HTMLButtonElement = addRemoveButton(mpDiv, level1, mesmer.removeModelParameters.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the modelParameters.\n            remove(mpcDivID);\n            mpIDM.removeIDs(mpDivID);\n        });\n    });\n    return button;\n}","import Big from \"big.js\";\nimport { boundary1, s_container, level1, addRemoveButton, mesmer, remove, s_Add_sy_add, setNumberNode, \n    sy_selected, sy_deselected, s_optionOn, s_optionOff, s_input, s_selectOption, level0, big0, \n    selectAnotherOptionEventListener, IDManager } from \"./app\";\nimport { Control, ForceMacroDetailedBalance, CalculateRateCoefficientsOnly, PrintCellDOS, \n    PrintCellTransitionStateFlux, PrintReactionOperatorColumnSums, PrintGrainBoltzmann, PrintGrainDOS, \n    PrintGrainkbE, PrintGrainkfE, PrintTSsos, PrintGrainedSpeciesProfile, PrintGrainTransitionStateFlux, \n    PrintReactionOperatorSize, PrintSpeciesProfile, PrintPhenomenologicalEvolution, \n    PrintTunnelingCoefficients, PrintCrossingCoefficients, TestDOS, TestRateConstant, \n    UseTheSameCellNumberForAllConditions, Eigenvalues, ShortestTimeOfInterest, MaximumEvolutionTime, \n    AutomaticallySetMaxEne, DiagramEnergyOffset, CalcMethod, TestMicroRates, Tmax, Tmin, Tstep, \n    CalcMethodSimpleCalc, CalcMethodGridSearch, CalcMethodFitting, FittingIterations, CalcMethodMarquardt, \n    MarquardtIterations, MarquardtTolerance, MarquardtDerivDelta, CalcMethodAnalyticalRepresentation, \n    Format, Precision, ChebNumTemp, ChebNumConc, ChebMaxTemp, ChebMinTemp, ChebMaxConc, ChebMinConc, \n    ChebTExSize, ChebPExSize, CalcMethodThermodynamicTable, Tmid, CalcMethodSensitivityAnalysis, \n    SensitivityAnalysisSamples, SensitivityAnalysisOrder, SensitivityNumVarRedIters, \n    SensitivityVarRedMethod } from \"./xml_control\";\nimport { createDiv, getCollapsibleDiv, createFlexDiv, createLabel, createButton, createInput, \n    resizeInputElement, s_button, createLabelWithInput, createLabelWithSelect, resizeSelectElement, \n    createSelectElement } from \"./html\";\nimport { Mesmer } from \"./xml_mesmer\";\nimport { mapToString, getID, isNumeric } from \"./util\";\nimport { getAttributes, getNodeValue, getFirstChildNode } from \"./xml\";\n\n/**\n * Parses xml to initialise controls.\n * @param xml The XML document.\n * @returns The controls div.\n * \n * Tag control options:\n * me:calculateRateCoefficientsOnly\n * me:printCellDOS\n * me:printCellTransitionStateFlux\n * me:printReactionOperatorColumnSums\n * me:printGrainBoltzmann\n * me:printGrainDOS\n * me:printGrainkbE\n * me:printGrainkfE\n * me:printTSsos\n * me:printGrainedSpeciesProfile\n * me:printGrainTransitionStateFlux\n * me:printReactionOperatorSize\n * me:printSpeciesProfile\n * me:printPhenomenologicalEvolution\n * me:printTunnelingCoefficients\n * me:printCrossingCoefficients\n * me:testDOS\n * me:testRateConstants\n * me:useTheSameCellNumberForAllConditions\n * me:hideInactive\n * me:ForceMacroDetailedBalance\n * \n * TagWithAttribute control options:\n * me:testMicroRates\n * \n * StringNode control options:\n * me:calcMethod \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\"\n * \n * NumberNode control options:\n * me:eigenvalues\n * me:shortestTimeOfInterest\n * me:MaximumEvolutionTime\n * me:automaticallySetMaxEne\n * me:diagramEnergyOffset\n */\nexport function processControl(xml: XMLDocument, controlIDM: IDManager): HTMLDivElement {\n    console.log(Control.tagName);\n    // Create a div for the controls.\n    let controlsDiv: HTMLDivElement = createDiv(undefined, boundary1);\n    // Get the XML \"me:control\" element.\n    let xml_controls: HTMLCollectionOf<Element> = xml.getElementsByTagName(Control.tagName);\n    for (let i = 0; i < xml_controls.length; i++) {\n        //console.log(\"Control \" + i);\n        let xml_control: Element = xml_controls[i];\n        // Create a collapsible divfor the control.\n        let cDivID: string = controlIDM.addID(Control.tagName, i.toString());\n        let cDiv: HTMLDivElement = createDiv(cDivID, boundary1);\n        controlsDiv.appendChild(cDiv);\n        let ccDivID = controlIDM.addID(cDivID, s_container);\n        let ccDiv: HTMLDivElement = getCollapsibleDiv(ccDivID, controlsDiv, null, cDiv, Control.tagName + \" \" + i.toString(),\n            boundary1, level1);\n        let control: Control = addControl(getAttributes(xml_control), i);\n        // Create a map of the on/off control options. The keys are the tag names and the values are the buttons.\n        let onOffControls: Map<string, HTMLButtonElement> = new Map();\n        getControlOptionsSimple(control).forEach(option => {\n            handleControl(control, cDiv, controlIDM, onOffControls, xml_control, null, option.class, option.setMethod, option.removeMethod);\n        });\n        // Create a div for the on/off controls.\n        let onOffControlsDiv: HTMLDivElement = createFlexDiv(undefined, level1);\n        let orderedOnOffControls = new Map([...onOffControls.entries()].sort());\n        orderedOnOffControls.forEach((button: HTMLButtonElement) => {\n            onOffControlsDiv.appendChild(button);\n        });\n        cDiv.appendChild(onOffControlsDiv);\n        // Controls with additional things to set.\n        handleTestMicroRates(control, cDiv, controlIDM, null, level1);\n        handleCalcMethod(control, cDiv, controlIDM, xml_control, level1);\n        getControlItems(control).forEach(item => {\n            handleControl(control, cDiv, controlIDM, onOffControls, xml_control, level1, item.class, item.setMethod, item.removeMethod, true);\n        });\n        // me:ForceMacroDetailedBalance\n        let xml_fdb: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(ForceMacroDetailedBalance.tagName);\n        if (xml_fdb.length == 1) {\n            let fdb: ForceMacroDetailedBalance = new ForceMacroDetailedBalance();\n            control.setForceMacroDetailedBalance(fdb);\n            let fdbDiv: HTMLDivElement = createFlexDiv(controlIDM.addID(cDivID, ForceMacroDetailedBalance.tagName), level1);\n            cDiv.appendChild(fdbDiv);\n            let fdbl: HTMLLabelElement = createLabel(ForceMacroDetailedBalance.tagName, boundary1);\n            fdbDiv.appendChild(fdbl);\n        }\n        // Add a remove control button.\n        let removeButton: HTMLButtonElement = addRemoveButton(cDiv, level1, mesmer.removeControl.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the control.\n            remove(ccDivID);\n            controlIDM.removeIDs(cDivID);\n            let divCmId = getID(cDivID, CalcMethod.tagName);\n            controlIDM.removeIDs(divCmId);\n            let divCmDetailsId = getID(divCmId, \"details\");\n            controlIDM.removeIDs(divCmDetailsId);\n            let divCmDetailsSelectId = getID(divCmDetailsId, \"select\");\n            controlIDM.removeIDs(divCmDetailsSelectId);\n        });\n    }\n    // Create an add button to add a control.\n    createAddControlButton(controlsDiv, controlIDM);\n    return controlsDiv;\n}\n\n/**\n * @param control The control.\n * @return An array of the on/off control options.\n */\nfunction getControlOptionsSimple(control: Control): { class: any, setMethod: (value: any) => void, removeMethod: () => void }[] {\n    return [\n        { class: CalculateRateCoefficientsOnly, setMethod: control.setCalculateRateCoefficientsOnly, removeMethod: control.removeCalculateRateCoefficientsOnly },\n        { class: PrintCellDOS, setMethod: control.setPrintCellDOS, removeMethod: control.removePrintCellDOS },\n        { class: PrintCellTransitionStateFlux, setMethod: control.setPrintCellTransitionStateFlux, removeMethod: control.removePrintCellTransitionStateFlux },\n        { class: PrintReactionOperatorColumnSums, setMethod: control.setPrintReactionOperatorColumnSums, removeMethod: control.removePrintReactionOperatorColumnSums },\n        { class: PrintGrainBoltzmann, setMethod: control.setPrintGrainBoltzmann, removeMethod: control.removePrintGrainBoltzmann },\n        { class: PrintGrainDOS, setMethod: control.setPrintGrainDOS, removeMethod: control.removePrintGrainDOS },\n        { class: PrintGrainkbE, setMethod: control.setPrintGrainkbE, removeMethod: control.removePrintGrainkbE },\n        { class: PrintGrainkfE, setMethod: control.setPrintGrainkfE, removeMethod: control.removePrintGrainkfE },\n        { class: PrintTSsos, setMethod: control.setPrintTSsos, removeMethod: control.removePrintTSsos },\n        { class: PrintGrainedSpeciesProfile, setMethod: control.setPrintGrainedSpeciesProfile, removeMethod: control.removePrintGrainedSpeciesProfile },\n        { class: PrintGrainTransitionStateFlux, setMethod: control.setPrintGrainTransitionStateFlux, removeMethod: control.removePrintGrainTransitionStateFlux },\n        { class: PrintReactionOperatorSize, setMethod: control.setPrintReactionOperatorSize, removeMethod: control.removePrintReactionOperatorSize },\n        { class: PrintSpeciesProfile, setMethod: control.setPrintSpeciesProfile, removeMethod: control.removePrintSpeciesProfile },\n        { class: PrintPhenomenologicalEvolution, setMethod: control.setPrintPhenomenologicalEvolution, removeMethod: control.removePrintPhenomenologicalEvolution },\n        { class: PrintTunnelingCoefficients, setMethod: control.setPrintTunnelingCoefficients, removeMethod: control.removePrintTunnelingCoefficients },\n        { class: PrintCrossingCoefficients, setMethod: control.setPrintCrossingCoefficients, removeMethod: control.removePrintCrossingCoefficients },\n        { class: TestDOS, setMethod: control.setTestDOS, removeMethod: control.removeTestDOS },\n        { class: TestRateConstant, setMethod: control.setTestRateConstants, removeMethod: control.removeTestRateConstants },\n        { class: UseTheSameCellNumberForAllConditions, setMethod: control.setUseTheSameCellNumberForAllConditions, removeMethod: control.removeUseTheSameCellNumberForAllConditions },\n        //{ class: HideInactive, setMethod: control.setHideInactive, removeMethod: control.removeHideInactive }\n        { class: ForceMacroDetailedBalance, setMethod: control.setForceMacroDetailedBalance, removeMethod: control.removeForceMacroDetailedBalance },\n    ];\n}\n\n/**\n * @param control The control.\n * @return An array of the control items.\n */\n\nfunction getControlItems(control: Control): { class: any, setMethod: (value: any) => void, removeMethod: () => void }[] {\n    return [\n        { class: Eigenvalues, setMethod: control.setEigenvalues, removeMethod: control.removeEigenvalues },\n        { class: ShortestTimeOfInterest, setMethod: control.setShortestTimeOfInterest, removeMethod: control.removeShortestTimeOfInterest },\n        { class: MaximumEvolutionTime, setMethod: control.setMaximumEvolutionTime, removeMethod: control.removeMaximumEvolutionTime },\n        { class: AutomaticallySetMaxEne, setMethod: control.setAutomaticallySetMaxEne, removeMethod: control.removeAutomaticallySetMaxEne },\n        { class: DiagramEnergyOffset, setMethod: control.setDiagramEnergyOffset, removeMethod: control.removeDiagramEnergyOffset },\n    ];\n}\n\n/**\n * Create an add control button and append to controlsDiv.\n * @param controlsDiv The controls div.\n * @param controlIDM The control IDs.\n * @returns A button.\n */\nexport function createAddControlButton(controlsDiv: HTMLDivElement, controlIDM: IDManager): HTMLButtonElement {\n    let button: HTMLButtonElement = createButton(s_Add_sy_add, undefined, level1);\n    controlsDiv.appendChild(button);\n    button.addEventListener('click', (event: MouseEvent) => {\n        let i: number = mesmer.getNextControlID();\n        console.log(\"Add Control \" + i.toString());\n        let cDivID: string = controlIDM.addID(Control.tagName, i.toString());\n        let cDiv: HTMLDivElement = createDiv(cDivID, boundary1);\n        // ElementToInsert before is element after the control div with the previous index.\n        let elementToInsertBefore: Element | null;\n        if (i > 0) {\n            let aboveElement = document.getElementById(getID(Control.tagName, (i - 1).toString(), s_container)) as Element;\n            let nextElementSibling: Element | null = aboveElement.nextElementSibling;\n            // If nextElementSibling is not a child of controlsDiv the element.\n            if (nextElementSibling != null) {\n                if (nextElementSibling.parentElement == controlsDiv) {\n                    elementToInsertBefore = nextElementSibling;\n                } else {\n                    elementToInsertBefore = button;\n                }\n            } else {\n                elementToInsertBefore = button;\n            }\n        } else {\n            elementToInsertBefore = button;\n        }\n        // Create a collapsible div for each conditions.\n        let ccDivID = controlIDM.addID(cDivID, s_container);\n        let ccDiv: HTMLDivElement = getCollapsibleDiv(ccDivID, controlsDiv, elementToInsertBefore, cDiv, Control.tagName + \" \" + i.toString(),\n            boundary1, level1);\n        // Add the control\n        let control: Control = addControl(new Map(), i);\n        // Create a map of the on/off control options. The keys are the tag names and the values are the buttons.\n        let onOffControls: Map<string, HTMLButtonElement> = new Map();\n        getControlOptionsSimple(control).forEach(option => {\n            handleControl(control, cDiv, controlIDM, onOffControls, null, null, option.class, option.setMethod, option.removeMethod);\n        });\n        // Create a div for the on/off controls.\n        let onOffControlsDiv: HTMLDivElement = createFlexDiv(undefined, level1);\n        let orderedOnOffControls = new Map([...onOffControls.entries()].sort());\n        orderedOnOffControls.forEach((button: HTMLButtonElement) => {\n            onOffControlsDiv.appendChild(button);\n        });\n        cDiv.appendChild(onOffControlsDiv);\n        // Controls with additional things to set.\n        handleTestMicroRates(control, cDiv, controlIDM, null, level1);\n        handleCalcMethod(control, cDiv, controlIDM, null, level1);\n        getControlItems(control).forEach(item => {\n            handleControl(control, cDiv, controlIDM, onOffControls, null, level1, item.class, item.setMethod, item.removeMethod, true);\n        });\n        // Add a remove control button.\n        let removeButton: HTMLButtonElement = addRemoveButton(cDiv, level1, mesmer.removeControl.bind(mesmer), i);\n        removeButton.addEventListener('click', (event: MouseEvent) => {\n            // Remove the control.\n            remove(ccDivID);\n            controlIDM.removeIDs(cDivID);\n            let divCmId = getID(cDivID, CalcMethod.tagName);\n            controlIDM.removeIDs(divCmId);\n            let divCmDetailsId = getID(divCmId, \"details\");\n            controlIDM.removeIDs(divCmDetailsId);\n            let divCmDetailsSelectId = getID(divCmDetailsId, \"select\");\n            controlIDM.removeIDs(divCmDetailsSelectId);\n        });\n    });\n    return button;\n}\n\n/**\n * Add and return a new control.\n */\nfunction addControl(attributes: Map<string, string>, i: number): Control {\n    let control: Control = new Control(attributes, i);\n    mesmer.addControl(control);\n    return control;\n}\n\n/**\n * @param control The control.\n * @param div The div.\n * @param obj The object.\n * @param setControlMethod The set control method. \n * @param id The id for the input.\n * @param valueString The value string.\n */\nfunction createInputControlItem(control: Control, div: HTMLDivElement, obj: any,\n    setControlMethod: (value: any) => void, id: string, valueString: string) {\n    setControlMethod.call(control, obj);\n    let input: HTMLInputElement = createInput(\"number\", id, boundary1);\n    input.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        setNumberNode(obj, target);\n        resizeInputElement(target);\n    });\n    input.value = valueString;\n    resizeInputElement(input);\n    div.appendChild(input);\n}\n\n/**\n * \n * @param control The control.\n * @param cDiv The control div.\n * @param onOffControls The on/off controls.\n * @param xml_control The xml control.\n * @param ControlClass The control class.\n * @param setControlMethod The set control method.\n * @param removeControlMethod The remove control method.\n */\nfunction handleControl(control: Control, cDiv: HTMLDivElement, controlIDs: IDManager, onOffControls: Map<string, HTMLButtonElement> | null,\n    xml_control: Element | null, level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string } | null,\n    ControlClass: any, setControlMethod: (value: any) => void, removeControlMethod: () => void, handleInput: boolean = false): void {\n    let tagName: string = ControlClass.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, boundary1);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    if (onOffControls) {\n        onOffControls.set(tagName, button);\n    }\n    let controlInstance: any;\n    let div: HTMLDivElement;\n    let id: string;\n\n    if (level) {\n        id = controlIDs.addID(cDiv.id, tagName);\n        div = createFlexDiv(id, level);\n        cDiv.appendChild(div);\n        div.appendChild(button);\n        id = controlIDs.addID(cDiv.id, id, s_input);\n    }\n\n    if (xml_control) {\n        let xml: HTMLCollectionOf<Element> = xml_control!.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            if (handleInput) {\n                let valueString = getNodeValue(getFirstChildNode(xml[0]));\n                let value: Big;\n                // Deal with the special case of eigenvalues, which can take either numerical or string values.\n                value = (valueString == \"all\") ? new Big(0) : new Big(valueString);\n                controlInstance = new ControlClass(getAttributes(xml[0]), value);\n                createInputControlItem(control, div!, controlInstance, setControlMethod, id!, valueString);\n            } else {\n                controlInstance = new ControlClass(getAttributes(xml[0]));\n                setControlMethod.call(control, controlInstance);\n            }\n            button.textContent = buttonTextContentSelected;\n            button.classList.toggle(s_optionOff);\n        } else {\n            button.textContent = buttonTextContentDeselected;\n            button.classList.toggle(s_optionOn);\n        }\n    } else {\n        controlInstance = new ControlClass(new Map());\n        button.textContent = buttonTextContentDeselected;\n        button.classList.toggle(s_optionOn);\n    }\n\n    button.addEventListener('click', (event: MouseEvent) => {\n        if (!control.index.has(tagName)) {\n            if (handleInput) {\n                createInputControlItem(control, div!, controlInstance, setControlMethod, id!, \"\");\n            } else {\n                setControlMethod.call(control, controlInstance);\n            }\n            button.textContent = buttonTextContentSelected;\n        } else {\n            if (handleInput) {\n                remove(id!);\n            }\n            removeControlMethod.call(control);\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param control The control.\n * @param cDiv The control div.\n * @param xml_control The xml control. \n * @param level The level.\n */\nfunction handleCalcMethod(control: Control, cDiv: HTMLDivElement, controlIDM: IDManager, xml_control: Element | null,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): void {\n    //console.log(\"handleCalcMethod \" + (xml_control == null));\n    let div: HTMLDivElement = createFlexDiv(undefined, level);\n    cDiv.appendChild(div);\n    let tagName: string = CalcMethod.tagName;\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(buttonTextContentDeselected, undefined, boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    // Add the div for the CalcMethod.\n    let divCmId = controlIDM.addID(cDiv.id, tagName);\n    let divCm: HTMLDivElement = createFlexDiv(divCmId, boundary1);\n    div.appendChild(divCm);\n    let options: string[] = CalcMethod.options;\n    let divCmDetailsId = controlIDM.addID(divCmId, \"details\");\n    let divCmDetailsSelectId = controlIDM.addID(divCmDetailsId, \"select\");\n    let cm: CalcMethod;\n    let first: boolean = true;\n    if (xml_control != null) {\n        //let xml: HTMLCollectionOf<Element> = xml_control.getElementsByTagNameNS(\"http://www.chem.leeds.ac.uk/mesmer\", \"calcMethod\");\n        let xml: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(tagName);\n        //console.log(\"xml.length \" + xml.length);\n        if (xml.length > 0) {\n            if (xml.length > 1) {\n                throw new Error(\"More than one CalcMethod element.\");\n            }\n            let attributes: Map<string, string> = getAttributes(xml[0]);\n            let xsi_type: string = attributes.get(\"xsi:type\") as string;\n            cm = getCalcMethod(controlIDM, control, divCm, xml, options, attributes, tagName, xsi_type, divCmDetailsId, divCmDetailsSelectId);\n            control.setCalcMethod(cm);\n            button.classList.toggle(s_optionOff);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            button.classList.toggle(s_optionOn);\n            button.textContent = buttonTextContentDeselected;\n        }\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        // Check if the CalcMethod already exists\n        if (!control.index.has(tagName)) {\n            if (first) {\n                if (options[options.length - 1] != s_selectOption) {\n                    options.push(s_selectOption);\n                }\n            }\n            // Remove select.\n            //remove(divCmId);\n            controlIDM.removeIDs(divCmDetailsId);\n            controlIDM.removeIDs(divCmDetailsSelectId);\n            // Create the select element.\n            let select: HTMLSelectElement = createSelectElementCalcMethod(controlIDM, control, div, options, tagName, s_selectOption, divCmDetailsId, divCmDetailsSelectId);\n            divCm.appendChild(select);\n            button.textContent = buttonTextContentSelected;\n            button.classList.toggle(s_optionOn)\n            button.classList.toggle(s_optionOff);\n        } else {\n            if (control.getCalcMethod() != null) {\n                control.removeCalcMethod();\n                // Remove any existing div.\n                //remove(divCmId);\n                controlIDM.removeIDs(divCmDetailsId);\n                //console.log(\"remove(divCmDetailsSelectId) \" + divCmDetailsSelectId);\n                //console.log(\"button.textContent \" + button.textContent);\n                controlIDM.removeIDs(divCmDetailsSelectId);\n                button.textContent = buttonTextContentDeselected;\n                button.classList.toggle(s_optionOn)\n                button.classList.toggle(s_optionOff);\n            }\n        }\n    });\n}\n\n/**\n * Process \"me:testMicroRates\".\n * @param control The control.\n * @param cDiv The control div.\n * @param xml_control The xml control.\n * @param level The level.\n */\nfunction handleTestMicroRates(control: Control, cDiv: HTMLDivElement, controlIDM: IDManager, xml_control: Element | null,\n    level: { marginLeft?: string; marginTop?: string; marginBottom?: string; marginRight?: string }): void {\n    let tagName: string = TestMicroRates.tagName;\n    let divID = controlIDM.addID(cDiv.id, tagName);\n    let div: HTMLDivElement = createFlexDiv(divID, level);\n    cDiv.appendChild(div);\n    let buttonTextContentSelected: string = tagName + sy_selected;\n    let buttonTextContentDeselected: string = tagName + sy_deselected;\n    let button = createButton(tagName, controlIDM.addID(cDiv.id, tagName, s_button), boundary1);\n    div.appendChild(button);\n    button.classList.add(s_optionOn);\n    button.classList.add(s_optionOff);\n    let idTmax = controlIDM.addID(cDiv.id, tagName, Tmax.tagName);\n    let idTmin = controlIDM.addID(cDiv.id, tagName, Tmin.tagName);\n    let idTstep = controlIDM.addID(cDiv.id, tagName, Tstep.tagName);\n    if (xml_control) {\n        let xml: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(tagName);\n        if (xml.length == 1) {\n            createTestMicroRates(control, div, xml, idTmax, idTmin, idTstep);\n            button.classList.toggle(s_optionOff);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            button.classList.toggle(s_optionOn);\n            button.textContent = buttonTextContentDeselected;\n        }\n    } else {\n        button.classList.toggle(s_optionOn);\n        button.textContent = buttonTextContentDeselected;\n    }\n    // Add event listener for the button.\n    button.addEventListener('click', (event: MouseEvent) => {\n        // Check if the TestMicroRates already exists\n        if (!control.index.has(tagName)) {\n            createTestMicroRates(control, div, null, idTmax, idTmin, idTstep);\n            button.textContent = buttonTextContentSelected;\n        } else {\n            control.removeTestMicroRates();\n            // Remove any existing Tmax.\n            document.getElementById(idTmax)?.remove();\n            // Remove any existing Tmin.\n            document.getElementById(idTmin)?.remove();\n            // Remove any existing Tstep.\n            document.getElementById(idTstep)?.remove();\n            button.textContent = buttonTextContentDeselected;\n        }\n        button.classList.toggle(s_optionOn)\n        button.classList.toggle(s_optionOff);\n    });\n}\n\n/**\n * @param control The control.\n * @param div The div.\n * @param xml_tmr The xml.\n * @param idTmax The Tmax id.\n * @param idTmin The Tmin id.\n * @param idTstep The Tstep id.\n */\nfunction createTestMicroRates(control: Control, div: HTMLDivElement, xml_tmr: HTMLCollectionOf<Element> | null,\n    idTmax: string, idTmin: string, idTstep: string): void {\n    let attributes: Map<string, string>;\n    let tmr: TestMicroRates;\n    if (xml_tmr != null && xml_tmr.length > 0) {\n        if (xml_tmr.length > 1) {\n            throw new Error(\"More than one TestMicroRates element.\");\n        }\n        attributes = getAttributes(xml_tmr[0]);\n        tmr = new TestMicroRates(attributes);\n    } else {\n        attributes = new Map<string, string>();\n        // Set some default values.\n        attributes.set(TestMicroRates.s_Tmax, \"2000\"); // These should load from some kind of default...\n        attributes.set(TestMicroRates.s_Tmin, \"100\");\n        attributes.set(TestMicroRates.s_Tstep, \"100\");\n        tmr = new TestMicroRates(attributes);\n    }\n    control.setTestMicroRates(tmr);\n    // Tmax.\n    let tMax: Big = tmr.getTmax();\n    let tMaxlwi: HTMLDivElement = createLabelWithInput(\"text\", getID(idTmax, \"input\"),\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            try {\n                tmr.setTmax(new Big(target.value));\n                console.log(\"Set \" + TestMicroRates.s_Tmax + \" to \" + target.value);\n            } catch (e) {\n                alert(\"Invalid input, resetting...\");\n                target.value = tMax.toString();\n            }\n            resizeInputElement(target);\n        }, tMax.toString(), TestMicroRates.s_Tmax);\n    tMaxlwi.id = idTmax;\n    resizeInputElement(tMaxlwi.querySelector('input') as HTMLInputElement);\n    div.appendChild(tMaxlwi);\n    // Tmin.\n    let tMin: Big = tmr.getTmin();\n    let tMinlwi: HTMLDivElement = createLabelWithInput(\"number\", getID(idTmin + \"input\"),\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                tmr.setTmin(new Big(target.value));\n                console.log(\"Set \" + TestMicroRates.s_Tmin + \" to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = tMin.toString();\n            }\n            resizeInputElement(target);\n        }, tMin.toString(), TestMicroRates.s_Tmin);\n    tMinlwi.id = idTmin;\n    resizeInputElement(tMinlwi.querySelector('input') as HTMLInputElement);\n    div.appendChild(tMinlwi);\n    // Tstep.\n    let tStep: Big = tmr.getTstep();\n    let tSteplwi: HTMLDivElement = createLabelWithInput(\"text\", getID(idTstep + \"input\"),\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                tmr.setTstep(new Big(target.value));\n                console.log(\"Set \" + TestMicroRates.s_Tstep + \" to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = tStep.toString();\n            }\n            resizeInputElement(target);\n        }, tStep.toString(), TestMicroRates.s_Tstep);\n    tSteplwi.id = idTstep;\n    resizeInputElement(tSteplwi.querySelector('input') as HTMLInputElement);\n    div.appendChild(tSteplwi);\n}\n\n/**\n * Get the CalcMethod from the XML.\n * @param control The control.\n * @param divCm The div cm.\n * @param xml The xml.\n * @param options The options.\n * @param attributes The attributes.\n * @param tagName The tag name.\n * @param xsi_type The xsi:type.\n * @param divCmDetailsId The div cm details id.\n * @param divCmDetailsSelectId The div cm details select id.\n * @returns The CalcMethod.\n */\nfunction getCalcMethod(controlIDM: IDManager, control: Control, divCm: HTMLDivElement, xml: HTMLCollectionOf<Element>, options: string[],\n    attributes: Map<string, string>, tagName: string, xsi_type: string,\n    divCmDetailsId: string, divCmDetailsSelectId: string): CalcMethod {\n    //console.log(\"getCalcMethod\");\n    let cm: CalcMethod;\n    // Create the select element.\n    let select: HTMLSelectElement = createSelectElementCalcMethod(controlIDM, control, divCm, options, tagName, xsi_type, divCmDetailsId,\n        divCmDetailsSelectId);\n    // Set the select element to the correct value.\n    select.value = xsi_type;\n    divCm.appendChild(select);\n    // Add the details div.\n    let divCmDetails: HTMLDivElement = createFlexDiv(divCmDetailsId, boundary1);\n    divCm.appendChild(divCmDetails);\n    if (xsi_type == CalcMethodSimpleCalc.xsi_type || xsi_type == CalcMethodSimpleCalc.xsi_type2) {\n        //console.log(\"CalcMethodSimpleCalc\");\n        cm = new CalcMethodSimpleCalc(attributes);\n    } else if (xsi_type == CalcMethodGridSearch.xsi_type || xsi_type == CalcMethodGridSearch.xsi_type2) {\n        cm = new CalcMethodGridSearch(attributes);\n    } else if (xsi_type == CalcMethodFitting.xsi_type || xsi_type == CalcMethodFitting.xsi_type2) {\n        let cmf: CalcMethodFitting = new CalcMethodFitting(attributes);\n        cm = cmf;\n        // FittingIterations.\n        let fi_xml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(FittingIterations.tagName);\n        if (fi_xml.length > 0) {\n            if (fi_xml.length == 1) {\n                let value: Big = new Big(getNodeValue(getFirstChildNode(fi_xml[0])));\n                let fittingIterations: FittingIterations = new FittingIterations(getAttributes(fi_xml[0]), value);\n                cmf.setFittingIterations(fittingIterations);\n            } else {\n                throw new Error(\"More than one FittingIterations element.\");\n            }\n        }\n        processCalcMethodFitting(divCmDetails, cmf);\n    } else if (xsi_type == CalcMethodMarquardt.xsi_type || xsi_type == CalcMethodMarquardt.xsi_type2) {\n        let cmm: CalcMethodMarquardt = new CalcMethodMarquardt(attributes);\n        cm = cmm;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = MarquardtIterations.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: Big = new Big(getNodeValue(getFirstChildNode(elementXml[0])));\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, MarquardtIterations, cmm.setMarquardtIterations.bind(cmm));\n        processElement(xml, MarquardtTolerance, cmm.setMarquardtTolerance.bind(cmm));\n        processElement(xml, MarquardtDerivDelta, cmm.setMarquardtDerivDelta.bind(cmm));\n        processCalcMethodMarquardt(divCmDetails, cmm);\n    } else if (xsi_type == CalcMethodAnalyticalRepresentation.xsi_type || xsi_type == CalcMethodAnalyticalRepresentation.xsi_type2) {\n        let cmar: CalcMethodAnalyticalRepresentation = new CalcMethodAnalyticalRepresentation(attributes);\n        cm = cmar;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void, isNumber: boolean) {\n            let tagName: string = ClassConstructor.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: any = getNodeValue(getFirstChildNode(elementXml[0]));\n                    if (isNumber) {\n                        if (value != undefined) {\n                            if (value != \"\" && value != \"NaN\") {\n                                value = new Big(value);\n                            }\n                        }\n                    }\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, Format, cmar.setFormat.bind(cmar), false);\n        processElement(xml, Precision, cmar.setPrecision.bind(cmar), false);\n        processElement(xml, ChebNumTemp, cmar.setChebNumTemp.bind(cmar), true);\n        processElement(xml, ChebNumConc, cmar.setChebNumConc.bind(cmar), true);\n        processElement(xml, ChebMaxTemp, cmar.setChebMaxTemp.bind(cmar), true);\n        processElement(xml, ChebMinTemp, cmar.setChebMinTemp.bind(cmar), true);\n        processElement(xml, ChebMaxConc, cmar.setChebMaxConc.bind(cmar), true);\n        processElement(xml, ChebMinConc, cmar.setChebMinConc.bind(cmar), true);\n        processElement(xml, ChebTExSize, cmar.setChebTExSize.bind(cmar), true);\n        processElement(xml, ChebPExSize, cmar.setChebPExSize.bind(cmar), true);\n        processCalcMethodAnalyticalRepresentation(divCmDetails, cmar);\n    } else if (xsi_type == CalcMethodThermodynamicTable.xsi_type || xsi_type == CalcMethodThermodynamicTable.xsi_type2) {\n        let cmtt: CalcMethodThermodynamicTable = new CalcMethodThermodynamicTable(attributes);\n        cm = cmtt;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = ClassConstructor.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: Big = new Big(getNodeValue(getFirstChildNode(elementXml[0])));\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, Tmin, cmtt.setTmin.bind(cmtt));\n        processElement(xml, Tmid, cmtt.setTmid.bind(cmtt));\n        processElement(xml, Tmax, cmtt.setTmax.bind(cmtt));\n        processElement(xml, Tstep, cmtt.setTstep.bind(cmtt));\n        processCalcMethodThermodynamicTable(divCmDetails, cmtt);\n    } else if (xsi_type == CalcMethodSensitivityAnalysis.xsi_type || xsi_type == CalcMethodSensitivityAnalysis.xsi_type2) {\n        let cmsa: CalcMethodSensitivityAnalysis = new CalcMethodSensitivityAnalysis(attributes);\n        cm = cmsa;\n        function processElement(xml: HTMLCollectionOf<Element>, ClassConstructor: any, setterMethod: (value: any) => void) {\n            let tagName: string = ClassConstructor.tagName;\n            let elementXml: HTMLCollectionOf<Element> = xml[0].getElementsByTagName(tagName);\n            if (elementXml.length > 0) {\n                if (elementXml.length == 1) {\n                    let value: any = getNodeValue(getFirstChildNode(elementXml[0]));\n                    if (value != undefined) {\n                        value = new Big(value);\n                    }\n                    let instance = new ClassConstructor(getAttributes(elementXml[0]), value);\n                    setterMethod(instance);\n                } else {\n                    throw new Error(`More than one ${tagName} element.`);\n                }\n            }\n        }\n        processElement(xml, SensitivityAnalysisSamples, cmsa.setSensitivityAnalysisSamples.bind(cmsa));\n        processElement(xml, SensitivityAnalysisOrder, cmsa.setSensitivityAnalysisOrder.bind(cmsa));\n        processElement(xml, SensitivityNumVarRedIters, cmsa.setSensitivityNumVarRedIters.bind(cmsa));\n        processElement(xml, SensitivityVarRedMethod, cmsa.setSensitivityVarRedMethod.bind(cmsa));\n        processCalcMethodSensitivityAnalysis(divCmDetails, cmsa);\n    } else {\n        // If there is a name attribute instead, try this in place of the xsi:type.\n        let name: string | undefined = attributes.get(\"name\");\n        if (name != undefined && name !== xsi_type) {\n            attributes.set(\"xsi:type\", name);\n            console.warn(`Using name attribute as xsi:type: ${name}`);\n            return getCalcMethod(controlIDM, control, divCm, xml, options, attributes, tagName, name, divCmDetailsId,\n                divCmDetailsSelectId);\n        } else {\n            throw new Error(`Unable to determine calculation method for xsi_type: ${xsi_type}`);\n        }\n    }\n    return cm;\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodFitting.\n */\nfunction processCalcMethodFitting(divCmDetails: HTMLDivElement, cm: CalcMethodFitting) {\n    // FittingIterations.\n    let fi: MarquardtIterations = cm.getFittingIterations() || new FittingIterations(new Map(), big0);\n    cm.setFittingIterations(fi);\n    divCmDetails.appendChild(createLabelWithInput(\"number\", getID(divCmDetails.id, FittingIterations.tagName, s_input),\n        boundary1, level0, (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                fi.value = new Big(target.value);\n                console.log(\"Set FittingIterations to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = fi.value.toString();\n            }\n            resizeInputElement(target);\n        }, fi.value.toString(), FittingIterations.tagName));\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodMarquardt.\n */\nfunction processCalcMethodMarquardt(divCmDetails: HTMLDivElement, cm: CalcMethodMarquardt) {\n    function createLabelWithInputForObject(obj: { value: Big, tagName: string }, divCmDetails: HTMLElement,\n        boundary: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string },\n        level: { marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string }) {\n        let id = getID(divCmDetails.id, obj.tagName, s_input);\n        let value = obj.value.toString();\n        let labelTextContent = obj.tagName;\n        let inputHandler = (event: Event) => {\n            let target = event.target as HTMLInputElement;\n            // Check the value is a number.\n            if (isNumeric(target.value)) {\n                obj.value = new Big(target.value);\n                console.log(\"Set \" + obj.tagName + \" to \" + target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                target.value = obj.value.toString();\n            }\n            resizeInputElement(target);\n        };\n        divCmDetails.appendChild(createLabelWithInput(\"number\", id, boundary, level, inputHandler, value, labelTextContent));\n    }\n    // MarquardtIterations.\n    let mi: MarquardtIterations = cm.getMarquardtIterations() || new MarquardtIterations(new Map(), big0);\n    cm.setMarquardtIterations(mi);\n    createLabelWithInputForObject(mi, divCmDetails, boundary1, level0);\n    // MarquardtTolerance.\n    let mt: MarquardtTolerance = cm.getMarquardtTolerance() || new MarquardtTolerance(new Map(), big0);\n    cm.setMarquardtTolerance(mt);\n    createLabelWithInputForObject(mt, divCmDetails, boundary1, level0);\n    // MarquardtDerivDelta.\n    let mdd: MarquardtDerivDelta = cm.getMarquardtDerivDelta() || new MarquardtDerivDelta(new Map(), big0);\n    cm.setMarquardtDerivDelta(mdd);\n    createLabelWithInputForObject(mdd, divCmDetails, boundary1, level0);\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodAnalyticalRepresentation.\n */\nfunction processCalcMethodAnalyticalRepresentation(divCmDetails: HTMLDivElement, cm: CalcMethodAnalyticalRepresentation) {\n    // \"me:format\".\n    let format: Format = cm.getFormat() || new Format(new Map(), Format.options[0]);\n    // value, rateUnits, \"me:precision\"\n    function processSelectElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string, options: string[]) {\n        let element: any = getter() || new ClassConstructor(new Map(), options[0]);\n        setter(element);\n        let lwsElement: HTMLDivElement = createLabelWithSelect(tagName, options, tagName, element.value,\n            divCmDetails.id, boundary1, boundary1);\n        lwsElement.querySelector('select')?.addEventListener('change', (event: Event) => {\n            let target = event.target as HTMLSelectElement;\n            element.value = target.value;\n            console.log(`Set ${tagName} to ` + target.value);\n            resizeSelectElement(target);\n        });\n        divCmDetails.appendChild(lwsElement);\n    }\n    processSelectElement(Format, cm.getFormat.bind(cm), cm.setFormat.bind(cm), Format.tagName, Format.options);\n    processSelectElement(Format, () => format.getRateUnits(), format.setRateUnits.bind(format), Format.rateUnits, Format.rateUnitsOptions);\n    processSelectElement(Precision, cm.getPrecision.bind(cm), cm.setPrecision.bind(cm), Precision.tagName, Mesmer.precisionOptions);\n    // \"me:chebNumTemp\", \"me:chebNumConc\", \"me:chebMaxTemp\", \"me:chebMaxTemp\", \"me:chebMinTemp\", \"me:chebMaxConc\", \"me:chebMinConc\",\n    // \"me:chebTExSize\", \"me:chebPExSize\".\n    function processElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string) {\n        let element: any = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild(createLabelWithInput(\"text\", divCmDetails.id + `_${tagName}_input`, boundary1, level0,\n            handleEvent(element, tagName), element.value.toString(), tagName));\n    }\n    processElement(ChebNumTemp, cm.getChebNumTemp.bind(cm), cm.setChebNumTemp.bind(cm), ChebNumTemp.tagName);\n    processElement(ChebNumConc, cm.getChebNumConc.bind(cm), cm.setChebNumConc.bind(cm), ChebNumConc.tagName);\n    processElement(ChebMaxTemp, cm.getChebMaxTemp.bind(cm), cm.setChebMaxTemp.bind(cm), ChebMaxTemp.tagName);\n    processElement(ChebMinTemp, cm.getChebMinTemp.bind(cm), cm.setChebMinTemp.bind(cm), ChebMinTemp.tagName);\n    processElement(ChebMaxConc, cm.getChebMaxConc.bind(cm), cm.setChebMaxConc.bind(cm), ChebMaxConc.tagName);\n    processElement(ChebMinConc, cm.getChebMinConc.bind(cm), cm.setChebMinConc.bind(cm), ChebMinConc.tagName);\n    processElement(ChebTExSize, cm.getChebTExSize.bind(cm), cm.setChebTExSize.bind(cm), ChebTExSize.tagName);\n    processElement(ChebPExSize, cm.getChebPExSize.bind(cm), cm.setChebPExSize.bind(cm), ChebPExSize.tagName);\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodThermodynamicTable.\n */\nfunction processCalcMethodThermodynamicTable(divCmDetails: HTMLDivElement, cm: CalcMethodThermodynamicTable) {\n    // \"me:Tmin\", \"me:Tmid\", \"me:Tmax, \"me:Tstep\".\n    function processElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string) {\n        let element: any = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild(createLabelWithInput(\"text\", divCmDetails.id + `_${tagName}_input`, boundary1, level0,\n            handleEvent(element, tagName), element.value.toString(), tagName));\n    }\n    processElement(Tmin, cm.getTmin.bind(cm), cm.setTmin.bind(cm), Tmin.tagName);\n    processElement(Tmid, cm.getTmid.bind(cm), cm.setTmid.bind(cm), Tmid.tagName);\n    processElement(Tmax, cm.getTmax.bind(cm), cm.setTmax.bind(cm), Tmax.tagName);\n    processElement(Tstep, cm.getTstep.bind(cm), cm.setTstep.bind(cm), Tstep.tagName);\n}\n\nfunction handleEvent(element: any, tagName: string): (event: Event) => void {\n    return (event: Event) => {\n        let target = event.target as HTMLInputElement;\n        try {\n            element.value = new Big(target.value);\n        } catch (e) {\n            alert(\"Invalid input value \" + target.value + \" , resetting...\");\n            target.value = element.value.toString();\n        }\n        resizeInputElement(target);\n    };\n}\n\n/**\n * @param divCmDetails The details div.\n * @param cm The CalcMethodSensitivityAnalysis.\n */\nfunction processCalcMethodSensitivityAnalysis(divCmDetails: HTMLDivElement, cm: CalcMethodSensitivityAnalysis) {\n    // \"me:sensitivityAnalysisSamples\", \"me:sensitivityAnalysisOrder\", \"me:sensitivityNumVarRedIters\".\n    function processNumberElement(ClassConstructor: any, getter: () => any, setter: (value: any) => void, tagName: string) {\n        let element: any = getter() || new ClassConstructor(new Map(), NaN);\n        setter(element);\n        divCmDetails.appendChild(createLabelWithInput(\"text\", getID(divCmDetails.id, tagName, s_input), boundary1, level0,\n            handleEvent(element, tagName), element.value.toString(), tagName));\n    }\n    processNumberElement(SensitivityAnalysisSamples, cm.getSensitivityAnalysisSamples.bind(cm), cm.setSensitivityAnalysisSamples.bind(cm), SensitivityAnalysisSamples.tagName);\n    processNumberElement(SensitivityAnalysisOrder, cm.getSensitivityAnalysisOrder.bind(cm), cm.setSensitivityAnalysisOrder.bind(cm), SensitivityAnalysisOrder.tagName);\n    processNumberElement(SensitivityNumVarRedIters, cm.getSensitivityNumVarRedIters.bind(cm), cm.setSensitivityNumVarRedIters.bind(cm), SensitivityNumVarRedIters.tagName);\n    // \"me:sensitivityVarRedMethod\".\n    let sensitivityVarRedMethod: SensitivityVarRedMethod = cm.getSensitivityVarRedMethod() || new SensitivityVarRedMethod(new Map(), \"\");\n    cm.setSensitivityVarRedMethod(sensitivityVarRedMethod);\n    let tagName: string = SensitivityVarRedMethod.tagName;\n    divCmDetails.appendChild(createLabelWithSelect(tagName, SensitivityVarRedMethod.options, tagName, SensitivityVarRedMethod.options[0],\n        getID(divCmDetails.id, tagName, 'select'), boundary1, boundary1));\n    // Add event listener for the select element.\n    let select: HTMLSelectElement = divCmDetails.querySelector('select') as HTMLSelectElement;\n    select?.addEventListener('change', (event: Event) => {\n        let target = event.target as HTMLSelectElement;\n        sensitivityVarRedMethod.value = target.value;\n        console.log(tagName + \" set to \" + target.value);\n        resizeSelectElement(target);\n    });\n}\n\n/**\n * @param control The control.\n * @param div The div. \n * @param options The options.\n * @param tagName The tag name.\n * @param value The value.\n * @param id The id for the HTMLSelectElement.\n * @returns An HTMLSelectElement.\n */\nfunction createSelectElementCalcMethod(controlIDM: IDManager, control: Control, div: HTMLDivElement, options: string[],\n    tagName: string, value: string, divCmDetailsId: string, divCmDetailsSelectId: string): HTMLSelectElement {\n    let select: HTMLSelectElement = createSelectElement(options, tagName, value, divCmDetailsSelectId, boundary1);\n    div.appendChild(select);\n    selectAnotherOptionEventListener(options, select);\n    select.addEventListener('change', (event: Event) => {\n        // Remove any existing div.\n        let divCmDetails: HTMLDivElement = document.getElementById(divCmDetailsId) as HTMLDivElement;\n        if (divCmDetails != null) {\n            divCmDetails.remove();\n            controlIDM.removeIDs(divCmDetailsId);\n        }\n        divCmDetails = createFlexDiv(divCmDetailsId, boundary1);\n        div.appendChild(divCmDetails);\n        let target = event.target as HTMLSelectElement;\n        let value: string = target.value;\n        let attributes: Map<string, string> = new Map();\n        attributes.set(\"xsi:type\", value);\n        if (value == CalcMethodSimpleCalc.xsi_type || value == CalcMethodSimpleCalc.xsi_type2) {\n            // \"me:simpleCalc\", \"simpleCalc\".\n            control.setCalcMethod(new CalcMethodSimpleCalc(attributes));\n        } else if (value == CalcMethodGridSearch.xsi_type || value == CalcMethodGridSearch.xsi_type2) {\n            // \"me:gridSearch\", \"gridSearch\".\n            control.setCalcMethod(new CalcMethodGridSearch(attributes));\n        } else if (value == CalcMethodFitting.xsi_type || value == CalcMethodFitting.xsi_type2) {\n            let cm: CalcMethodFitting = new CalcMethodFitting(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodFitting(divCmDetails, cm);\n        } else if (value == CalcMethodMarquardt.xsi_type || value == CalcMethodMarquardt.xsi_type2) {\n            // \"me:marquardt\", \"marquardt\".\n            let cm: CalcMethodMarquardt = new CalcMethodMarquardt(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodMarquardt(divCmDetails, cm);\n        } else if (value == CalcMethodAnalyticalRepresentation.xsi_type || value == CalcMethodAnalyticalRepresentation.xsi_type2) {\n            // \"me:analyticalRepresentation\", \"analyticalRepresentation\".\n            let cm: CalcMethodAnalyticalRepresentation = new CalcMethodAnalyticalRepresentation(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodAnalyticalRepresentation(divCmDetails, cm);\n        } else if (value == CalcMethodThermodynamicTable.xsi_type || value == CalcMethodThermodynamicTable.xsi_type2) {\n            // \"me:ThermodynamicTable\", \"ThermodynamicTable\".\n            let cm: CalcMethodThermodynamicTable = new CalcMethodThermodynamicTable(attributes);\n            control.setCalcMethod(cm);\n            processCalcMethodThermodynamicTable(divCmDetails, cm);\n        } else if (value == CalcMethodSensitivityAnalysis.xsi_type || value == CalcMethodSensitivityAnalysis.xsi_type2) {\n            // \"me:sensitivityAnalysis\", \"sensitivityAnalysis\".\n            let cm: CalcMethodSensitivityAnalysis = new CalcMethodSensitivityAnalysis(new Map());\n            control.setCalcMethod(cm);\n            processCalcMethodSensitivityAnalysis(divCmDetails, cm);\n        } else {\n            throw new Error(\"Unknown CalcMethod type.\");\n        }\n        resizeSelectElement(target);\n    });\n    return select;\n}","import { addRID, addSaveAsPNGButton, big0, getMolecule, remove, s_Reactions_Diagram } from \"./app\";\nimport { getTextHeight, getTextWidth, drawLine, drawLevel } from \"./canvas\";\nimport { s_button, createDiv, createButton } from \"./html\";\nimport { Molecule } from \"./xml_molecule\";\nimport { Reaction, TransitionState } from \"./xml_reaction\";\nimport { min, max, get, rescale } from \"./util\";\n\n/**\n * Create the reaction diagram.\n * @param rdDiv The reaction diagram div.\n * @param rdcID The reaction diagram canvas ID.\n * @param rdcHeight The reaction diagram canvas height.\n * @param dark Whether to use dark mode.\n * @param rd_font The font to use.\n * @param rd_lw The line width of reactants, transition states and products.\n * @param rd_lwc The line width of connector lines.\n * @param rdWindow The window to pop the diagram into.\n * @param draw Whether to draw the reaction diagram.\n */\nexport function createReactionDiagram(rdDiv: HTMLDivElement, rdcID: string, rdcHeight: number, dark: boolean,\n    rd_font: string, rd_lw: number, rd_lwc: number, rdWindow: Window | null, molecules: Map<string, Molecule>,\n    reactions: Map<string, Reaction>, draw: boolean): void {\n    // Create a pop diagram button in its own div.\n    let bDivId = addRID(rdDiv.id, s_button + 's');\n    let bDiv = createDiv(bDivId);\n    rdDiv.appendChild(bDiv);\n    let pbID = addRID(bDivId, s_button);\n    let popOutText: string = \"Pop into a new Window\";\n    let pb: HTMLButtonElement = createButton(popOutText, pbID);\n    bDiv.appendChild(pb);\n    let rdCanvas: HTMLCanvasElement = document.createElement('canvas');\n    rdCanvas.id = rdcID;\n    rdDiv.appendChild(rdCanvas);\n    //rd_canvas.width = rd_canvas_width;\n    rdCanvas.height = rdcHeight;\n    rdCanvas.style.border = \"1px solid black\";\n    //rdCanvas.style.margin = \"1px\";\n    if (draw) {\n        drawReactionDiagram(rdCanvas, rdcHeight, dark, rd_font, rd_lw, rd_lwc, molecules, reactions);\n    }\n    // Add action listener to the pop diagram button.\n    pb.addEventListener('click', () => {\n        //if (rdWindow == null || rdWindow.closed) {\n        if (rdWindow == null) {\n            let popWindowRDCanvas: HTMLCanvasElement = document.createElement('canvas');\n            popWindowRDCanvas.id = rdcID;\n            rdWindow = window.open(\"\", s_Reactions_Diagram, \"width=\" + rdCanvas.width + \", height=\" + rdCanvas.height) as Window;\n            rdWindow.document.body.appendChild(popWindowRDCanvas);\n            if (draw) {\n                drawReactionDiagram(popWindowRDCanvas, rdcHeight, dark, rd_font, rd_lw, rd_lwc, molecules, reactions);\n            }\n            remove(rdcID);\n            pb.textContent = \"Pop into this Window\";\n        } else {\n            rdCanvas = document.createElement('canvas');\n            rdCanvas.id = rdcID;\n            rdDiv.appendChild(rdCanvas);\n            rdCanvas.height = rdcHeight;\n            rdCanvas.style.border = \"1px solid black\";\n            if (draw) {\n                drawReactionDiagram(rdCanvas, rdcHeight, dark, rd_font, rd_lw, rd_lwc, molecules, reactions);\n            }\n            rdWindow.close();\n            rdWindow = null;\n            pb.textContent = popOutText;\n        }\n    });\n    addSaveAsPNGButton(rdCanvas, bDiv, null, s_Reactions_Diagram);\n}\n\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param rdcHeight The reaction diagram canvas height.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width of connector lines.\n * @param molecules The molecules.\n * @param reactions The reactions.\n */\nexport function drawReactionDiagram(canvas: HTMLCanvasElement | null, rdcHeight: number, dark: boolean, \n    font: string, lw: number, lwc: number,\n    molecules: Map<string, Molecule>, reactions: Map<string, Reaction>): void {\n    console.log(\"drawReactionDiagram\");\n    if (canvas != null && reactions.size > 0) {\n        // Set foreground and background colors.\n        let foreground: string;\n        let background: string;\n        let blue: string;\n        let orange: string;\n        if (dark) {\n            foreground = \"lightgrey\";\n            background = \"darkgrey\";\n            blue = \"lightblue\";\n            orange = \"orange\";\n        } else {\n            foreground = \"darkgrey\";\n            background = \"lightgrey\";\n            blue = \"blue\";\n            orange = \"darkorange\";\n        }\n        let green = \"green\";\n        let red = \"red\";\n        const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n        ctx.clearRect(0, 0, canvas.width, canvas.height); // Clear the canvas.\n        //ctx.fillStyle = background;\n        // Make font bold.\n        ctx.font = \"bold \" + font;\n        // Get text height for font size.\n        let th = getTextHeight(ctx, \"Aj\", ctx.font);\n        //console.log(\"th=\" + th);\n        // Go through reactions:\n        // 1. Create sets of reactants, end products, intermediate products and transition states.\n        // 2. Create maps of orders and energies.\n        // 3. Calculate maximum energy.\n        let reactants: string[] = [];\n        let products: Set<string> = new Set();\n        let intProducts: Set<string> = new Set();\n        let tss: Set<string> = new Set();\n        let orders: Map<string, number> = new Map();\n        let energies: Map<string, Big> = new Map();\n        let i: number = 0;\n        let energyMin: Big;\n        let energyMax: Big;\n        reactions.forEach(function (reaction, id) {\n            // Get TransitionStates.\n            //let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n            let rtss: Map<string, TransitionState> = reaction.getTransitionStates();\n            //console.log(\"reactant=\" + reactant);\n            let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n            if (reactantsLabel != undefined) {\n                reactants.push(reactantsLabel);\n                if (products.has(reactantsLabel)) {\n                    intProducts.add(reactantsLabel);\n                }\n                let energy: Big = reaction.getReactantsEnergy(getMolecule, molecules);\n                console.log(\"energy=\" + energy.toString());\n                energyMin = min(energyMin, energy);\n                energyMax = max(energyMax, energy);\n                energies.set(reactantsLabel, energy);\n                if (!orders.has(reactantsLabel)) {\n                    orders.set(reactantsLabel, i);\n                    i++;\n                }\n            }\n            let productsLabel: string | undefined = reaction.getProductsLabel();\n            if (productsLabel != undefined) {\n                products.add(productsLabel);\n                let energy = reaction.getProductsEnergy(getMolecule, molecules);\n                console.log(\"energy=\" + energy.toString());\n                energyMin = min(energyMin, energy);\n                energyMax = max(energyMax, energy);\n                energies.set(productsLabel, energy);\n                if (orders.has(productsLabel)) {\n                    i--;\n                    let j: number = get(orders, productsLabel);\n                    // Move product to end and shift everything back.\n                    orders.forEach(function (value, key) {\n                        if (value > j) {\n                            orders.set(key, value - 1);\n                        }\n                    });\n                    // Insert transition states.\n                    if (rtss != undefined) {\n                        rtss.forEach(function (ts, ref) {\n                            let moleculeRef: string = ts.getMolecule().getRef();\n                            tss.add(moleculeRef);\n                            orders.set(moleculeRef, i);\n                            energy = (getMolecule(moleculeRef, molecules) as Molecule).getEnergy() ?? big0;\n                            console.log(\"energy=\" + energy.toString());\n                            energyMin = min(energyMin, energy);\n                            energyMax = max(energyMax, energy);\n                            energies.set(moleculeRef, energy);\n                            i++;\n                        });\n                        orders.set(productsLabel, i);\n                        i++\n                    }\n                } else {\n                    if (rtss != undefined) {\n                        rtss.forEach(function (ts, ref) {\n                            let moleculeRef: string = ts.getMolecule().getRef();\n                            tss.add(moleculeRef);\n                            orders.set(moleculeRef, i);\n                            energy = (getMolecule(moleculeRef, molecules) as Molecule).getEnergy() ?? big0;\n                            console.log(\"energy=\" + energy.toString());\n                            energyMin = min(energyMin, energy);\n                            energyMax = max(energyMax, energy);\n                            energies.set(moleculeRef, energy);\n                            i++;\n                        });\n                    }\n                    orders.set(productsLabel, i);\n                    i++;\n                }\n            }\n        });\n        //console.log(\"orders=\" + mapToString(orders));\n        //console.log(\"energies=\" + mapToString(energies));\n        //console.log(\"energyMax=\" + energyMax);\n        //console.log(\"energyMin=\" + energyMin);\n        let energyRange: number = (energyMax!.minus(energyMin!)).toNumber();\n        //console.log(\"energyRange=\" + energyRange);\n        //console.log(\"reactants=\" + reactants);\n        //console.log(\"products=\" + products);\n        //console.log(\"transitionStates=\" + transitionStates);\n        // Create a lookup from order to label.\n        let reorders: string[] = [];\n        orders.forEach(function (value, key) {\n            reorders[value] = key;\n        });\n        //console.log(\"reorders=\" + arrayToString(reorders));\n        // Iterate through the reorders:\n        // 1. Capture coordinates for connecting lines.\n        // 2. Store maximum x.\n        let x0: number = 0;\n        let y0: number;\n        let x1: number;\n        let y1: number;\n        let xmax: number = 0;\n        let tw: number;\n        let textSpacing: number = 5; // Spacing between end of line and start of text.\n        let stepSpacing: number = 10; // Spacing between steps.\n        let reactantsInXY: Map<string, number[]> = new Map();\n        let reactantsOutXY: Map<string, number[]> = new Map();\n        let productsInXY: Map<string, number[]> = new Map();\n        let productsOutXY: Map<string, number[]> = new Map();\n        let tssInXY: Map<string, number[]> = new Map();\n        let tssOutXY: Map<string, number[]> = new Map();\n        reorders.forEach(function (value) {\n            //console.log(\"value=\" + value + \".\");\n            //console.log(\"energies=\" + mapToString(energies));\n            let energy: number = get(energies, value);\n            console.log(\"energy=\" + energy.toString());\n            let energyRescaled: number = rescale(energyMin.toNumber(), energyRange, 0, rdcHeight, energy);\n            // Get text width.\n            tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n            x1 = x0 + tw + textSpacing;\n            y0 = energyRescaled + lw;\n            y1 = y0;\n            // Draw horizontal line and add label.\n            // (The drawing is now not done here but done later so labels are on top of lines, but\n            // the code is left here commented out for code comprehension.)\n            //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n            reactantsInXY.set(value, [x0, y0]);\n            reactantsOutXY.set(value, [x1, y1]);\n            if (products.has(value)) {\n                productsInXY.set(value, [x0, y0]);\n                productsOutXY.set(value, [x1, y1]);\n            }\n            if (tss.has(value)) {\n                tssInXY.set(value, [x0, y0]);\n                tssOutXY.set(value, [x1, y1]);\n            }\n            x0 = x1 + stepSpacing;\n            xmax = x1;\n        });\n        // Set canvas width to maximum x.\n        canvas.width = xmax;\n        //console.log(\"canvas.width=\" + canvas.width);\n        // Set canvas height to maximum energy plus the label.\n        let canvasHeightWithBorder = rdcHeight + (4 * th) + (2 * lw);\n        //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n        let originalCanvasHeight = rdcHeight;\n        // Update the canvas height.\n        canvas.height = canvasHeightWithBorder;\n        // Set the transformation matrix.\n        //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n        ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n        // Go through reactions and draw connecting lines.\n        reactions.forEach(function (reaction, id) {\n            //console.log(\"id=\" + id);\n            //console.log(\"reaction=\" + reaction);\n            // Get TransitionState if there is one.\n            //let tss: TransitionState[] = reaction.getTransitionStates();\n            let rtss: Map<string, TransitionState> = reaction.getTransitionStates();\n            //console.log(\"reactant=\" + reactant);\n            let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n            let productsLabel: string | undefined = reaction.getProductsLabel();\n            let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n            let productInXY: number[] = get(productsInXY, productsLabel);\n            if (rtss.size > 0) {\n                //tss.forEach(function (ts, ref) {\n                rtss.forEach(function (ts, ref) {\n                        let tsInXY: number[] = get(tssInXY, ref);\n                    drawLine(ctx, foreground, lwc, reactantOutXY[0], reactantOutXY[1], tsInXY[0],\n                        tsInXY[1]);\n                    let tsOutXY: number[] = get(tssOutXY, ref);\n                    drawLine(ctx, foreground, lwc, tsOutXY[0], tsOutXY[1],\n                        productInXY[0], productInXY[1]);\n                });\n            } else {\n                drawLine(ctx, foreground, lwc, reactantOutXY[0], reactantOutXY[1],\n                    productInXY[0], productInXY[1]);\n            }\n        });\n        // Draw horizontal lines and labels.\n        // (This is done last so that the labels are on top of the vertical lines.)\n        reactants.forEach(function (value) {\n            let energy: number = get(energies, value);\n            console.log(\"energy=\" + energy.toString());\n            let energyRescaled: number = rescale(energyMin.toNumber(), energyRange, 0, originalCanvasHeight, energy);\n            console.log(\"energyRescaled=\" + energyRescaled.toString());\n            let x0: number = get(reactantsInXY, value)[0];\n            let y: number = energyRescaled + lw;\n            let x1: number = get(reactantsOutXY, value)[0];\n            let energyString: string = energy.toString();\n            drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n        products.forEach(function (value) {\n            let energy: number = get(energies, value);\n            console.log(\"energy=\" + energy.toString());\n            let energyRescaled: number = rescale(energyMin.toNumber(), energyRange, 0, originalCanvasHeight, energy);\n            console.log(\"energyRescaled=\" + energyRescaled.toString());\n            let x0: number = get(productsInXY, value)[0];\n            let y: number = energyRescaled + lw;\n            let x1: number = get(productsOutXY, value)[0];\n            let energyString: string = energy.toString();\n            if (intProducts.has(value)) {\n                drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n            } else {\n                drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n            }\n        });\n        tss.forEach(function (value) {\n            let energy: number = get(energies, value);\n            console.log(\"energy=\" + energy.toString());\n            let energyRescaled: number = rescale(energyMin.toNumber(), energyRange, 0, originalCanvasHeight, energy);\n            console.log(\"energyRescaled=\" + energyRescaled.toString());\n            let x0: number = get(tssInXY, value)[0];\n            let y: number = energyRescaled + lw;\n            let x1: number = get(tssOutXY, value)[0];\n            let energyString: string = energy.toString();\n            drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n        });\n    }\n}","/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param x1 The end x-coordinate of the line.\n * @param y1 The end y-coordinate of the line.\n * @param font The font to use.\n * @param th The height of the text in pixels.\n * @param label The label.\n * @param energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string,\n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param ctx The context to use.\n * @param text The text to get the start x-coordinate of.\n * @paramfont The font to use.  \n * @param x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param x1 The start x-coordinate of the line.\n * @param y1 The start y-coordinate of the line.\n * @param x2 The end x-coordinate of the line.\n * @param y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param ctx The context to use.\n * @param text The text to write.\n * @param font The font to use.\n * @param colour The colour of the text.\n * @param x The horizontal position of the text.\n * @param y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param ctx The context to use.\n * @param text The text to get the height of.\n * @param font The font to use.\n * @returns The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param ctx The context to use.\n * @param text The text to get the width of.\n * @param font The font to use.\n * @returns The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}"],"names":[],"version":3,"file":"index.929725ca.js.map"}