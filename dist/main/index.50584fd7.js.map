{"mappings":"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","sources":["node_modules/@parcel/runtime-browser-hmr/lib/runtime-5d2ab101cbbca1c9.js","src/ts/app.ts","src/ts/util.ts","node_modules/@parcel/transformer-js/src/esmodule-helpers.js","src/ts/xml.ts","src/ts/html.ts","src/ts/molecule.ts","src/ts/reaction.ts","src/ts/canvas.ts","src/ts/conditions.ts","src/ts/modelParameters.ts","src/ts/control.ts","src/ts/mesmer.ts"],"sourcesContent":["var HMR_HOST = null;var HMR_PORT = null;var HMR_SECURE = false;var HMR_ENV_HASH = \"d6ea1d42532a7575\";module.bundle.HMR_BUNDLE_ID = \"3bddbeb250584fd7\";\"use strict\";\n\n/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */\n/*::\nimport type {\n  HMRAsset,\n  HMRMessage,\n} from '@parcel/reporter-dev-server/src/HMRServer.js';\ninterface ParcelRequire {\n  (string): mixed;\n  cache: {|[string]: ParcelModule|};\n  hotData: {|[string]: mixed|};\n  Module: any;\n  parent: ?ParcelRequire;\n  isParcelRequire: true;\n  modules: {|[string]: [Function, {|[string]: string|}]|};\n  HMR_BUNDLE_ID: string;\n  root: ParcelRequire;\n}\ninterface ParcelModule {\n  hot: {|\n    data: mixed,\n    accept(cb: (Function) => void): void,\n    dispose(cb: (mixed) => void): void,\n    // accept(deps: Array<string> | string, cb: (Function) => void): void,\n    // decline(): void,\n    _acceptCallbacks: Array<(Function) => void>,\n    _disposeCallbacks: Array<(mixed) => void>,\n  |};\n}\ninterface ExtensionContext {\n  runtime: {|\n    reload(): void,\n    getURL(url: string): string;\n    getManifest(): {manifest_version: number, ...};\n  |};\n}\ndeclare var module: {bundle: ParcelRequire, ...};\ndeclare var HMR_HOST: string;\ndeclare var HMR_PORT: string;\ndeclare var HMR_ENV_HASH: string;\ndeclare var HMR_SECURE: boolean;\ndeclare var chrome: ExtensionContext;\ndeclare var browser: ExtensionContext;\ndeclare var __parcel__import__: (string) => Promise<void>;\ndeclare var __parcel__importScripts__: (string) => Promise<void>;\ndeclare var globalThis: typeof self;\ndeclare var ServiceWorkerGlobalScope: Object;\n*/\nvar OVERLAY_ID = '__parcel__error__overlay__';\nvar OldModule = module.bundle.Module;\nfunction Module(moduleName) {\n  OldModule.call(this, moduleName);\n  this.hot = {\n    data: module.bundle.hotData[moduleName],\n    _acceptCallbacks: [],\n    _disposeCallbacks: [],\n    accept: function (fn) {\n      this._acceptCallbacks.push(fn || function () {});\n    },\n    dispose: function (fn) {\n      this._disposeCallbacks.push(fn);\n    }\n  };\n  module.bundle.hotData[moduleName] = undefined;\n}\nmodule.bundle.Module = Module;\nmodule.bundle.hotData = {};\nvar checkedAssets /*: {|[string]: boolean|} */, assetsToDispose /*: Array<[ParcelRequire, string]> */, assetsToAccept /*: Array<[ParcelRequire, string]> */;\n\nfunction getHostname() {\n  return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');\n}\nfunction getPort() {\n  return HMR_PORT || location.port;\n}\n\n// eslint-disable-next-line no-redeclare\nvar parent = module.bundle.parent;\nif ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {\n  var hostname = getHostname();\n  var port = getPort();\n  var protocol = HMR_SECURE || location.protocol == 'https:' && !['localhost', '127.0.0.1', '0.0.0.0'].includes(hostname) ? 'wss' : 'ws';\n  var ws;\n  try {\n    ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/');\n  } catch (err) {\n    if (err.message) {\n      console.error(err.message);\n    }\n    ws = {};\n  }\n\n  // Web extension context\n  var extCtx = typeof browser === 'undefined' ? typeof chrome === 'undefined' ? null : chrome : browser;\n\n  // Safari doesn't support sourceURL in error stacks.\n  // eval may also be disabled via CSP, so do a quick check.\n  var supportsSourceURL = false;\n  try {\n    (0, eval)('throw new Error(\"test\"); //# sourceURL=test.js');\n  } catch (err) {\n    supportsSourceURL = err.stack.includes('test.js');\n  }\n\n  // $FlowFixMe\n  ws.onmessage = async function (event /*: {data: string, ...} */) {\n    checkedAssets = {} /*: {|[string]: boolean|} */;\n    assetsToAccept = [];\n    assetsToDispose = [];\n    var data /*: HMRMessage */ = JSON.parse(event.data);\n    if (data.type === 'update') {\n      // Remove error overlay if there is one\n      if (typeof document !== 'undefined') {\n        removeErrorOverlay();\n      }\n      let assets = data.assets.filter(asset => asset.envHash === HMR_ENV_HASH);\n\n      // Handle HMR Update\n      let handled = assets.every(asset => {\n        return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);\n      });\n      if (handled) {\n        console.clear();\n\n        // Dispatch custom event so other runtimes (e.g React Refresh) are aware.\n        if (typeof window !== 'undefined' && typeof CustomEvent !== 'undefined') {\n          window.dispatchEvent(new CustomEvent('parcelhmraccept'));\n        }\n        await hmrApplyUpdates(assets);\n\n        // Dispose all old assets.\n        let processedAssets = {} /*: {|[string]: boolean|} */;\n        for (let i = 0; i < assetsToDispose.length; i++) {\n          let id = assetsToDispose[i][1];\n          if (!processedAssets[id]) {\n            hmrDispose(assetsToDispose[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n\n        // Run accept callbacks. This will also re-execute other disposed assets in topological order.\n        processedAssets = {};\n        for (let i = 0; i < assetsToAccept.length; i++) {\n          let id = assetsToAccept[i][1];\n          if (!processedAssets[id]) {\n            hmrAccept(assetsToAccept[i][0], id);\n            processedAssets[id] = true;\n          }\n        }\n      } else fullReload();\n    }\n    if (data.type === 'error') {\n      // Log parcel errors to console\n      for (let ansiDiagnostic of data.diagnostics.ansi) {\n        let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;\n        console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\\n' + stack + '\\n\\n' + ansiDiagnostic.hints.join('\\n'));\n      }\n      if (typeof document !== 'undefined') {\n        // Render the fancy html overlay\n        removeErrorOverlay();\n        var overlay = createErrorOverlay(data.diagnostics.html);\n        // $FlowFixMe\n        document.body.appendChild(overlay);\n      }\n    }\n  };\n  ws.onerror = function (e) {\n    if (e.message) {\n      console.error(e.message);\n    }\n  };\n  ws.onclose = function () {\n    console.warn('[parcel] 🚨 Connection to the HMR server was lost');\n  };\n}\nfunction removeErrorOverlay() {\n  var overlay = document.getElementById(OVERLAY_ID);\n  if (overlay) {\n    overlay.remove();\n    console.log('[parcel] ✨ Error resolved');\n  }\n}\nfunction createErrorOverlay(diagnostics) {\n  var overlay = document.createElement('div');\n  overlay.id = OVERLAY_ID;\n  let errorHTML = '<div style=\"background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;\">';\n  for (let diagnostic of diagnostics) {\n    let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame) => {\n      return `${p}\n<a href=\"/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}\" style=\"text-decoration: underline; color: #888\" onclick=\"fetch(this.href); return false\">${frame.location}</a>\n${frame.code}`;\n    }, '') : diagnostic.stack;\n    errorHTML += `\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          🚨 ${diagnostic.message}\n        </div>\n        <pre>${stack}</pre>\n        <div>\n          ${diagnostic.hints.map(hint => '<div>💡 ' + hint + '</div>').join('')}\n        </div>\n        ${diagnostic.documentation ? `<div>📝 <a style=\"color: violet\" href=\"${diagnostic.documentation}\" target=\"_blank\">Learn more</a></div>` : ''}\n      </div>\n    `;\n  }\n  errorHTML += '</div>';\n  overlay.innerHTML = errorHTML;\n  return overlay;\n}\nfunction fullReload() {\n  if ('reload' in location) {\n    location.reload();\n  } else if (extCtx && extCtx.runtime && extCtx.runtime.reload) {\n    extCtx.runtime.reload();\n  }\n}\nfunction getParents(bundle, id) /*: Array<[ParcelRequire, string]> */{\n  var modules = bundle.modules;\n  if (!modules) {\n    return [];\n  }\n  var parents = [];\n  var k, d, dep;\n  for (k in modules) {\n    for (d in modules[k][1]) {\n      dep = modules[k][1][d];\n      if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) {\n        parents.push([bundle, k]);\n      }\n    }\n  }\n  if (bundle.parent) {\n    parents = parents.concat(getParents(bundle.parent, id));\n  }\n  return parents;\n}\nfunction updateLink(link) {\n  var href = link.getAttribute('href');\n  if (!href) {\n    return;\n  }\n  var newLink = link.cloneNode();\n  newLink.onload = function () {\n    if (link.parentNode !== null) {\n      // $FlowFixMe\n      link.parentNode.removeChild(link);\n    }\n  };\n  newLink.setAttribute('href',\n  // $FlowFixMe\n  href.split('?')[0] + '?' + Date.now());\n  // $FlowFixMe\n  link.parentNode.insertBefore(newLink, link.nextSibling);\n}\nvar cssTimeout = null;\nfunction reloadCSS() {\n  if (cssTimeout) {\n    return;\n  }\n  cssTimeout = setTimeout(function () {\n    var links = document.querySelectorAll('link[rel=\"stylesheet\"]');\n    for (var i = 0; i < links.length; i++) {\n      // $FlowFixMe[incompatible-type]\n      var href /*: string */ = links[i].getAttribute('href');\n      var hostname = getHostname();\n      var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\\\/\\\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());\n      var absolute = /^https?:\\/\\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;\n      if (!absolute) {\n        updateLink(links[i]);\n      }\n    }\n    cssTimeout = null;\n  }, 50);\n}\nfunction hmrDownload(asset) {\n  if (asset.type === 'js') {\n    if (typeof document !== 'undefined') {\n      let script = document.createElement('script');\n      script.src = asset.url + '?t=' + Date.now();\n      if (asset.outputFormat === 'esmodule') {\n        script.type = 'module';\n      }\n      return new Promise((resolve, reject) => {\n        var _document$head;\n        script.onload = () => resolve(script);\n        script.onerror = reject;\n        (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);\n      });\n    } else if (typeof importScripts === 'function') {\n      // Worker scripts\n      if (asset.outputFormat === 'esmodule') {\n        return __parcel__import__(asset.url + '?t=' + Date.now());\n      } else {\n        return new Promise((resolve, reject) => {\n          try {\n            __parcel__importScripts__(asset.url + '?t=' + Date.now());\n            resolve();\n          } catch (err) {\n            reject(err);\n          }\n        });\n      }\n    }\n  }\n}\nasync function hmrApplyUpdates(assets) {\n  global.parcelHotUpdate = Object.create(null);\n  let scriptsToRemove;\n  try {\n    // If sourceURL comments aren't supported in eval, we need to load\n    // the update from the dev server over HTTP so that stack traces\n    // are correct in errors/logs. This is much slower than eval, so\n    // we only do it if needed (currently just Safari).\n    // https://bugs.webkit.org/show_bug.cgi?id=137297\n    // This path is also taken if a CSP disallows eval.\n    if (!supportsSourceURL) {\n      let promises = assets.map(asset => {\n        var _hmrDownload;\n        return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch(err => {\n          // Web extension fix\n          if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != 'undefined' && global instanceof ServiceWorkerGlobalScope) {\n            extCtx.runtime.reload();\n            return;\n          }\n          throw err;\n        });\n      });\n      scriptsToRemove = await Promise.all(promises);\n    }\n    assets.forEach(function (asset) {\n      hmrApply(module.bundle.root, asset);\n    });\n  } finally {\n    delete global.parcelHotUpdate;\n    if (scriptsToRemove) {\n      scriptsToRemove.forEach(script => {\n        if (script) {\n          var _document$head2;\n          (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);\n        }\n      });\n    }\n  }\n}\nfunction hmrApply(bundle /*: ParcelRequire */, asset /*:  HMRAsset */) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (asset.type === 'css') {\n    reloadCSS();\n  } else if (asset.type === 'js') {\n    let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];\n    if (deps) {\n      if (modules[asset.id]) {\n        // Remove dependencies that are removed and will become orphaned.\n        // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.\n        let oldDeps = modules[asset.id][1];\n        for (let dep in oldDeps) {\n          if (!deps[dep] || deps[dep] !== oldDeps[dep]) {\n            let id = oldDeps[dep];\n            let parents = getParents(module.bundle.root, id);\n            if (parents.length === 1) {\n              hmrDelete(module.bundle.root, id);\n            }\n          }\n        }\n      }\n      if (supportsSourceURL) {\n        // Global eval. We would use `new Function` here but browser\n        // support for source maps is better with eval.\n        (0, eval)(asset.output);\n      }\n\n      // $FlowFixMe\n      let fn = global.parcelHotUpdate[asset.id];\n      modules[asset.id] = [fn, deps];\n    } else if (bundle.parent) {\n      hmrApply(bundle.parent, asset);\n    }\n  }\n}\nfunction hmrDelete(bundle, id) {\n  let modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (modules[id]) {\n    // Collect dependencies that will become orphaned when this module is deleted.\n    let deps = modules[id][1];\n    let orphans = [];\n    for (let dep in deps) {\n      let parents = getParents(module.bundle.root, deps[dep]);\n      if (parents.length === 1) {\n        orphans.push(deps[dep]);\n      }\n    }\n\n    // Delete the module. This must be done before deleting dependencies in case of circular dependencies.\n    delete modules[id];\n    delete bundle.cache[id];\n\n    // Now delete the orphans.\n    orphans.forEach(id => {\n      hmrDelete(module.bundle.root, id);\n    });\n  } else if (bundle.parent) {\n    hmrDelete(bundle.parent, id);\n  }\n}\nfunction hmrAcceptCheck(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  if (hmrAcceptCheckOne(bundle, id, depsByBundle)) {\n    return true;\n  }\n\n  // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.\n  let parents = getParents(module.bundle.root, id);\n  let accepted = false;\n  while (parents.length > 0) {\n    let v = parents.shift();\n    let a = hmrAcceptCheckOne(v[0], v[1], null);\n    if (a) {\n      // If this parent accepts, stop traversing upward, but still consider siblings.\n      accepted = true;\n    } else {\n      // Otherwise, queue the parents in the next level upward.\n      let p = getParents(module.bundle.root, v[1]);\n      if (p.length === 0) {\n        // If there are no parents, then we've reached an entry without accepting. Reload.\n        accepted = false;\n        break;\n      }\n      parents.push(...p);\n    }\n  }\n  return accepted;\n}\nfunction hmrAcceptCheckOne(bundle /*: ParcelRequire */, id /*: string */, depsByBundle /*: ?{ [string]: { [string]: string } }*/) {\n  var modules = bundle.modules;\n  if (!modules) {\n    return;\n  }\n  if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {\n    // If we reached the root bundle without finding where the asset should go,\n    // there's nothing to do. Mark as \"accepted\" so we don't reload the page.\n    if (!bundle.parent) {\n      return true;\n    }\n    return hmrAcceptCheck(bundle.parent, id, depsByBundle);\n  }\n  if (checkedAssets[id]) {\n    return true;\n  }\n  checkedAssets[id] = true;\n  var cached = bundle.cache[id];\n  assetsToDispose.push([bundle, id]);\n  if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {\n    assetsToAccept.push([bundle, id]);\n    return true;\n  }\n}\nfunction hmrDispose(bundle /*: ParcelRequire */, id /*: string */) {\n  var cached = bundle.cache[id];\n  bundle.hotData[id] = {};\n  if (cached && cached.hot) {\n    cached.hot.data = bundle.hotData[id];\n  }\n  if (cached && cached.hot && cached.hot._disposeCallbacks.length) {\n    cached.hot._disposeCallbacks.forEach(function (cb) {\n      cb(bundle.hotData[id]);\n    });\n  }\n  delete bundle.cache[id];\n}\nfunction hmrAccept(bundle /*: ParcelRequire */, id /*: string */) {\n  // Execute the module.\n  bundle(id);\n\n  // Run the accept callbacks in the new version of the module.\n  var cached = bundle.cache[id];\n  if (cached && cached.hot && cached.hot._acceptCallbacks.length) {\n    cached.hot._acceptCallbacks.forEach(function (cb) {\n      var assetsToAlsoAccept = cb(function () {\n        return getParents(module.bundle.root, id);\n      });\n      if (assetsToAlsoAccept && assetsToAccept.length) {\n        assetsToAlsoAccept.forEach(function (a) {\n          hmrDispose(a[0], a[1]);\n        });\n\n        // $FlowFixMe[method-unbinding]\n        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);\n      }\n    });\n  }\n}","\n//import * as $3Dmol from '3dmol';\n\nimport { get, isNumeric, rescale } from './util.js';\n\nimport {\n    getFirstElement, getFirstChildNode, getNodeValue, getInputString, getAttributes,\n    getSingularElement, NumberArrayNode, NumberNode\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property, AtomArray, BondArray,\n    PropertyList, PropertyScalar, PropertyArray, ExtraDOSCMethod, BondRef, HinderedRotorPotential,\n    PotentialPoint, Periodicity, ReservoirSize, ZPE, RotConsts, VibFreqs\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, ReactionMolecule, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, Tunneling, TInfinity, ExcessReactantConc\n} from './reaction.js';\n\nimport { arrayToString, toNumberArray } from './util.js';\n\nimport {\n    createLabelWithInput, makeCollapsible, getCollapsibleDiv, resizeInputElement, createSelectElement,\n    resizeSelectElement, createFlexDiv, createButton, remove, createLabel, createInputWithFunction, createInput, createLabelWithSelectElement\n} from './html.js';\n\nimport { drawLevel, drawLine, getTextHeight, getTextWidth } from './canvas.js';\n\nimport { BathGas, Conditions, ExperimentRate, PTpair, PTs } from './conditions.js';\n\nimport { EnergyAboveTheTopHill, GrainSize, MaxTemperature, ModelParameters } from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset, Eigenvalues, HideInactive, TestDOS, PrintSpeciesProfile,\n    TestMicroRates, TestRateConstants, PrintGrainDOS, PrintCellDOS, PrintReactionOperatorColumnSums,\n    PrintTunnelingCoefficients, PrintGrainkfE, PrintGrainBoltzmann, PrintGrainkbE, CalculateRateCoefficientsOnly,\n    PrintCellTransitionStateFlux, PrintTSsos, PrintGrainedSpeciesProfile, PrintGrainTransitionStateFlux,\n    PrintReactionOperatorSize, PrintPhenomenologicalEvolution, PrintCrossingCoefficients,\n    UseTheSameCellNumberForAllConditions, ForceMacroDetailedBalance, CalcMethod, ShortestTimeOfInterest,\n    MaximumEvolutionTime, AutomaticallySetMaxEne\n} from './control.js';\n\nimport { Mesmer, MoleculeList, ReactionList, Title } from './mesmer.js';\n\n/**\n * The font sizes for different levels of the GUI.\n */\nlet fontSize1: string = \"1.5em\";\nlet fontSize2: string = \"1.25em\";\nlet fontSize3: string = \"1.0em\";\nlet fontSize4: string = \"0.75em\";\n\n/**\n * Margins for spacing GUI components.\n */\n//let margin0: string = \"0px\";\nlet margin1: string = \"1px\";\nlet margin2: string = \"2px\";\nlet margin3: string = \"3px\";\nlet margin5: string = \"5px\";\nlet margin25: string = \"25px\";\nlet margin50: string = \"50px\";\nlet margin75: string = \"75px\";\nlet margin100: string = \"100px\";\nlet margin125: string = \"125px\";\nlet level0 = { marginTop: margin1, marginBottom: margin1 };\nlet level1 = { marginLeft: margin25, marginTop: margin1, marginBottom: margin1 };\nlet level2 = { marginLeft: margin50, marginTop: margin1, marginBottom: margin1 };\nlet level3 = { marginLeft: margin75, marginTop: margin1, marginBottom: margin1 };\nlet level4 = { marginLeft: margin100, marginTop: margin1, marginBottom: margin1 };\nlet level5 = { marginLeft: margin125, marginTop: margin1, marginBottom: margin1 };\nlet boundary1 = { marginLeft: margin1, marginTop: margin1, marginBottom: margin1, marginRight: margin1 };\nlet boundary3 = { marginLeft: margin3, marginTop: margin3, marginBottom: margin3, marginRight: margin3 };\n\n/**\n * Symbology for the GUI.\n */\nlet addString: string = \"add\";\nlet addSymbol: string = \"\\uFF0B\";\nlet removeString: string = \"remove\";\nlet removeSymbol: string = \"\\u2715\";\nlet addFromSpreadsheetString: string = \"Add from spreadsheet\";\n\n/**\n * Units for different things.\n */\nlet unitsEnergy: string[] = [\"kJ/mol\", \"cm-1\", \"kcal/mol\", \"Hartree\"];\nlet unitsRotConsts: string[] = [\"cm-1\", \"GHz\"];\nlet unitsPressure: string[] = [\"Torr\", \"PPCC\", \"atm\", \"mbar\", \"psi\", \"mols/cc\"];\n\n/**\n * For mesmer.\n */\nlet mesmer: Mesmer;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map();\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map();\n\n/**\n * Once the DOM is loaded, add a load button.\n */\ndocument.addEventListener('DOMContentLoaded', () => {\n\n    // Create load button\n    let loadButton = createButton('Load', boundary1);\n    loadButton.addEventListener('click', load);\n\n    // Append loadButton to menu and set the display style of the menu.\n    let menuDiv: HTMLDivElement = document.getElementById('menu') as HTMLDivElement;\n    if (menuDiv) {\n        menuDiv.appendChild(loadButton);\n    }\n    menuDiv.style.display = 'flex';\n});\n\n/**\n * Prompts the user for a MESMER XML file, initiates the parsing of the chosen file, and \n * creates a save button for saving a new XML file.\n */\nfunction load() {\n    let inputElement: HTMLInputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            let inputFilename: string = file.name;\n            let reader = new FileReader();\n            let chunkSize = 1024 * 1024; // 1MB\n            let start = 0;\n            let contents = '';\n            reader.onload = function (e) {\n                if (e.target == null) {\n                    throw new Error('Event target is null');\n                }\n                contents += (e.target as FileReader).result as string;\n                if (file != null) {\n                    if (start < file.size) {\n                        // Read the next chunk\n                        let blob = file.slice(start, start + chunkSize);\n                        reader.readAsText(blob);\n                        start += chunkSize;\n                    } else {\n                        // All chunks have been read\n                        contents = contents.trim();\n                        displayXML(inputFilename, contents);\n                        let parser = new DOMParser();\n                        let xml = parser.parseFromString(contents, \"text/xml\");\n                        parse(xml);\n                        /*\n                        // Sending to the server for validation is no longer implemented as there is currently no server.\n                        // Send XML to the server\n                        fetch('http://localhost:1234/', {\n                            method: 'POST',\n                            headers: {\n                                'Content-Type': 'text/xml',\n                            },\n                            body: contents,\n                        })\n                            .then(response => {\n                                if (!response.ok) {\n                                    throw new Error(`HTTP error! status: ${response.status}`);\n                                }\n                                return response.text();\n                            })\n                            .then(data => {\n                                console.log('Server response:', data);\n                            })\n                            .catch(error => {\n                                console.error('There was a problem with the fetch operation:', error);\n                            });\n                        */\n                    }\n                }\n            };\n            // Read the first chunk\n            let blob = file.slice(start, start + chunkSize);\n            reader.readAsText(blob);\n            start += chunkSize;\n            // Create save button.\n            let saveButtonId = 'saveButtonId';\n            remove(saveButtonId);\n            let saveButton = createButton('Save', boundary1);\n            saveButton.id = saveButtonId;\n            saveButton.addEventListener('click', saveXML);\n            let menuDiv: HTMLDivElement = document.getElementById('menu') as HTMLDivElement;\n            menuDiv.appendChild(saveButton);\n        }\n    };\n    inputElement.click();\n}\n\n/**\n * Parse an XMLDocument and create the mesmer object.\n * @param xml The XML.\n */\nfunction parse(xml: XMLDocument) {\n    console.log(\"parse: \" + xml);\n\n    // Process the XML.\n    let xml_mesmer: Element = getSingularElement(xml, Mesmer.tagName);\n    mesmer = new Mesmer(getAttributes(xml_mesmer));\n\n    // Title.\n    let xml_title: HTMLCollectionOf<Element> = xml.getElementsByTagName(Title.tagName) as HTMLCollectionOf<Element>;\n    if (xml_title.length != 1) {\n        throw new Error('Multiple ' + Title.tagName + ' tags found');\n    } else {\n        let title: string = (xml_title[0].childNodes[0].nodeValue as string).trim();\n        let titleNode: Title = new Title(getAttributes(xml_title[0]), title);\n        let titleElement: HTMLElement = document.getElementById(\"title\") as HTMLElement;\n        let titleString: string = titleNode.value;\n        mesmer.setTitle(titleNode);\n        let titleId = 'titleId';\n        // Remove any existing titleDiv.\n        remove(titleId);\n        // Create input element.\n        let titleDiv: HTMLDivElement = createLabelWithInput(\"text\", titleId + \"Input\", boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                titleNode.value = event.target.value;\n                console.log(titleNode.tagName + \" changed to \" + titleNode.value);\n                resizeInputElement(event.target);\n            }\n        }, titleString, \"Title\");\n        titleDiv.id = titleId;\n        let input: HTMLInputElement = titleDiv.querySelector('input') as HTMLInputElement;\n        input.style.fontSize = fontSize1;\n        resizeInputElement(input, 0);\n        // Insert.\n        titleElement.parentNode?.insertBefore(titleDiv, titleElement);\n    }\n\n    // Molecules.\n    let moleculesElement: HTMLElement | null = document.getElementById(\"molecules\");\n    let moleculesDivId = 'moleculesDivId';\n    // If there is an existing moleculesDiv remove it.\n    remove(moleculesDivId);\n    if (moleculesElement == null) {\n        // Create a molecules section from scratch?\n    } else {\n        let moleculesDiv: HTMLDivElement = processMoleculeList(xml);\n        moleculesDiv.id = moleculesDivId;\n        moleculesElement.appendChild(\n            getCollapsibleDiv({\n                content: moleculesDiv,\n                buttonLabel: \"Molecules\",\n                buttonFontSize: fontSize1,\n                level: level0,\n                contentDivId: moleculesDivId\n            })\n        );\n        mesmer.setMoleculeList(new MoleculeList(getAttributes(moleculesDiv), Array.from(molecules.values())));\n    }\n\n    // Reactions.\n    let reactionsElement: HTMLElement | null = document.getElementById(\"reactions\");\n    let reactionsDivId = 'reactionsDivId';\n    // If there is an existing reactionsDiv remove it.\n    remove(reactionsDivId);\n    if (reactionsElement == null) {\n        // Create a reactions section from scratch?\n    } else {\n        let reactionsDiv: HTMLDivElement = processReactionList(xml);\n        reactionsDiv.id = reactionsDivId;\n        reactionsElement.appendChild(\n            getCollapsibleDiv({\n                content: reactionsDiv,\n                buttonLabel: \"Reactions\",\n                buttonFontSize: fontSize1,\n                level: level0,\n                contentDivId: reactionsDivId\n            })\n        );\n        mesmer.setReactionList(new ReactionList(getAttributes(reactionsDiv), Array.from(reactions.values())));\n    }\n    // Display reaction diagram. \n    displayReactionsDiagram();\n\n    // Conditions\n    let conditionsElement: HTMLElement | null = document.getElementById(\"conditions\");\n    let conditionsDivId = 'conditionsDivId';\n    // If there is an existing conditionsDiv remove it.\n    remove(conditionsDivId);\n    if (conditionsElement == null) {\n        // Create a conditions section from scratch?\n    } else {\n        let conditionsDiv: HTMLDivElement = processConditions(xml);\n        conditionsDiv.id = conditionsDivId;\n        conditionsElement.appendChild(\n            getCollapsibleDiv({\n                content: conditionsDiv,\n                buttonLabel: \"Conditions\",\n                buttonFontSize: fontSize1,\n                level: level0,\n                contentDivId: conditionsDivId\n            })\n        );\n    }\n\n    // Model Parameters.\n    let modelParametersElement: HTMLElement | null = document.getElementById(\"modelParameters\");\n    let modelParametersDivId = 'modelParametersDivId';\n    // If there is an existing modelParametersDiv remove it.\n    remove(modelParametersDivId);\n    if (modelParametersElement == null) {\n        // Create a model parameters section from scratch?\n    } else {\n        let modelParametersDiv: HTMLDivElement = processModelParameters(xml);\n        modelParametersDiv.id = modelParametersDivId;\n        modelParametersElement.appendChild(\n            getCollapsibleDiv({\n                content: modelParametersDiv,\n                buttonLabel: \"Model Parameters\",\n                buttonFontSize: fontSize1,\n                level: level0,\n                contentDivId: modelParametersDivId\n            })\n        );\n    }\n\n    // Control.\n    let controlElement: HTMLElement | null = document.getElementById(\"control\");\n    let controlDivId = 'controlDivId';\n    // If there is an existing controlDiv remove it.\n    remove(controlDivId);\n    if (controlElement == null) {\n        // Create a control section from scratch?\n    } else {\n        let controlDiv: HTMLDivElement = processControl(xml);\n        controlDiv.id = controlDivId;\n        controlElement.appendChild(\n            getCollapsibleDiv({\n                content: controlDiv,\n                buttonLabel: \"Control\",\n                buttonFontSize: fontSize1,\n                level: level0,\n                contentDivId: controlDivId\n            })\n        );\n    }\n\n    // Initiate action listeners for collapsible content.\n    makeCollapsible();\n}\n\n/**\n * Parse XML and create HTMLDivElement for molecules.\n * @param xml The XML.\n * @returns The HTMLDivElement.\n */\nfunction processMoleculeList(xml: XMLDocument): HTMLDivElement {\n    // Create div to contain the molecules list.\n    let moleculeListDiv: HTMLDivElement = document.createElement(\"div\");\n    // Get the XML \"moleculeList\" element.\n    let xml_moleculeList: Element = getSingularElement(xml, MoleculeList.tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(Molecule.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"molecule\" elements.\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName(Molecule.tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        let moleculeDiv: HTMLDivElement = document.createElement(\"div\");\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n        // Init atomsNode.\n        let atomsNode: AtomArray | Atom | undefined;\n        // There can be an individual atom not in an atom array, or an attom array.\n        let xml_atomArrays: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(AtomArray.tagName);\n        if (xml_atomArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + AtomArray.tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        }\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms: HTMLCollectionOf<Element> = xml_atomArray.getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length < 2) {\n                throw new Error(\"Expecting 2 or more atoms in \" + AtomArray.tagName + \", but finding \" + xml_atoms.length + \"!\");\n            }\n            let atoms: Atom[] = [];\n            for (let j = 0; j < xml_atoms.length; j++) {\n                atoms.push(new Atom(getAttributes(xml_atoms[j])));\n            }\n            atomsNode = new AtomArray(getAttributes(xml_atomArray), atoms);\n            moleculeTagNames.delete(AtomArray.tagName);\n        } else {\n            let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length == 1) {\n                atomsNode = new Atom(getAttributes(xml_atoms[0]));\n            } else if (xml_atoms.length > 1) {\n                throw new Error(\"Expecting 1 \" + Atom.tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + AtomArray.tagName + \"?\");\n            }\n        }\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete(Atom.tagName);\n        // Init bondsNode.\n        let bondsNode: BondArray | Bond | undefined;\n        // There can be an individual bond not in a bond array, or a bond array.\n        let xml_bondArrays: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(BondArray.tagName);\n        if (xml_bondArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + BondArray.tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n        }\n        if (xml_bondArrays.length == 1) {\n            let xml_bondArray = xml_bondArrays[0];\n            let xml_bonds: HTMLCollectionOf<Element> = xml_bondArray.getElementsByTagName(Bond.tagName);\n            // There may be only 1 bond in a BondArray.\n            let bonds: Bond[] = [];\n            for (let j = 0; j < xml_bonds.length; j++) {\n                bonds.push(new Bond(getAttributes(xml_bonds[j])));\n            }\n            bondsNode = new BondArray(getAttributes(xml_bondArray), bonds);\n            moleculeTagNames.delete(BondArray.tagName);\n        } else {\n            let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Bond.tagName);\n            if (xml_bonds.length == 1) {\n                bondsNode = new Bond(getAttributes(xml_bonds[0]));\n            } else if (xml_bonds.length > 1) {\n                throw new Error(\"Expecting 1 \" + Bond.tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + BondArray.tagName + \"?\");\n            }\n        }\n        moleculeTagNames.delete(Bond.tagName);\n\n        // Create molecule.\n        let molecule = new Molecule(attributes, atomsNode, bondsNode);\n        molecules.set(molecule.id, molecule);\n\n        // Organise PropertyList or individual Property.\n        // (There can be an individual property not in a propertyList?)\n        // If there is a PropertyList, then create a property list.\n        let xml_PLs: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(PropertyList.tagName);\n        if (xml_PLs.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_PLs.length + \"!\");\n        }\n        if (xml_PLs.length == 1) {\n            // Create a new collapsible div for the PropertyList.\n            let plDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let contentDivId: string = molecule.id + \"_\" + PropertyList.tagName + \"_\";\n            let collapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: plDiv,\n                buttonLabel: PropertyList.tagName,\n                buttonFontSize: fontSize3,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            moleculeDiv.appendChild(collapsibleDiv);\n            // Create a new PropertyList.\n            let pl: PropertyList = new PropertyList(getAttributes(xml_PLs[0]));\n            molecule.setProperties(pl);\n            let xml_Ps: HTMLCollectionOf<Element> = xml_PLs[0].getElementsByTagName(Property.tagName);\n            for (let j = 0; j < xml_Ps.length; j++) {\n                let p: Property = new Property(getAttributes(xml_Ps[j]));\n                pl.setProperty(p);\n                molecule.setProperties(pl);\n                if (p.dictRef == ZPE.dictRef) {\n                    processProperty(p, unitsEnergy, molecule, xml_Ps[j], plDiv);\n                } else if (p.dictRef == RotConsts.dictRef) {\n                    processProperty(p, unitsRotConsts, molecule, xml_Ps[j], plDiv);\n                } else {\n                    processProperty(p, undefined, molecule, xml_Ps[j], plDiv);\n                }\n            }\n            moleculeTagNames.delete(PropertyList.tagName);\n        } else {\n            // If there is a Property on its own, then create a property on its own.\n            let xml_Ps: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Property.tagName);\n            if (xml_Ps.length != 1) {\n                throw new Error(\"Expecting 1 \" + Property.tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + PropertyList.tagName + \"?\");\n            }\n            // Create a new Property.\n            let p: Property = new Property(getAttributes(xml_Ps[0]));\n            molecule.setProperties(p);\n            if (p.dictRef == ZPE.dictRef) {\n                processProperty(p, unitsEnergy, molecule, xml_Ps[0], moleculeDiv);\n            } else if (p.dictRef == RotConsts.dictRef) {\n                processProperty(p, unitsRotConsts, molecule, xml_Ps[0], moleculeDiv);\n            } else {\n                processProperty(p, undefined, molecule, xml_Ps[0], moleculeDiv);\n            }\n            moleculeTagNames.delete(Property.tagName);\n        }\n        // Organise EnergyTransferModel.\n        let xml_ETMs: HTMLCollectionOf<Element> | null = xml_molecules[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (xml_ETMs.length > 0) {\n            if (xml_ETMs.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + EnergyTransferModel.tagName + \" but finding \" + xml_ETMs.length + \"!\");\n            }\n            let etm = new EnergyTransferModel(getAttributes(xml_ETMs[0]));\n            processEnergyTransferModel(etm, molecule, xml_ETMs[0], moleculeDiv, margin75);\n            moleculeTagNames.delete(EnergyTransferModel.tagName);\n        }\n        // Organise DOSCMethod.\n        let xml_DOSCMethod: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(DOSCMethod.tagName);\n        if (xml_DOSCMethod.length > 0) {\n            if (xml_DOSCMethod.length > 1) {\n                throw new Error(\"Expecting 1 or 0 \" + DOSCMethod.tagName + \" but finding \" + xml_DOSCMethod.length + \"!\");\n            }\n            let dOSCMethod = new DOSCMethod(getAttributes(xml_DOSCMethod[0]));\n            processDOSCMethod(dOSCMethod, molecule, moleculeDiv);\n            moleculeTagNames.delete(DOSCMethod.tagName);\n        }\n        // Organise ExtraDOSCMethod.\n        let xml_ExtraDOSCMethod = xml_molecules[i].getElementsByTagName(ExtraDOSCMethod.tagName);\n        if (xml_ExtraDOSCMethod.length > 0) {\n            if (xml_ExtraDOSCMethod.length != 1) {\n                throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + xml_ExtraDOSCMethod.length);\n            }\n\n            //console.warn(\"ExtraDOSCMethod detected: This is not displayed in the GUI - more coding needed!\");\n\n            let extraDOSCMethod: ExtraDOSCMethod = new ExtraDOSCMethod(getAttributes(xml_DOSCMethod[0]));\n            // Create a new collapsible div for the ExtraDOSCMethod.\n            let extraDOSCMethodDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let contentDivId: string = molecule.id + \"_\" + ExtraDOSCMethod.tagName + \"_\";\n            let extraDOSCMethodCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: extraDOSCMethodDiv,\n                buttonLabel: ExtraDOSCMethod.tagName,\n                buttonFontSize: fontSize3,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            moleculeDiv.appendChild(extraDOSCMethodCollapsibleDiv);\n            // Read bondRef.\n            let xml_bondRefs: HTMLCollectionOf<Element> = xml_ExtraDOSCMethod[0].getElementsByTagName(BondRef.tagName);\n            if (xml_bondRefs.length > 0) {\n                if (xml_bondRefs.length != 1) {\n                    throw new Error(\"Expecting only 1 bondRef, but there are \" + xml_bondRefs.length);\n                }\n                let container: HTMLDivElement = createFlexDiv(level3);\n                let label: HTMLLabelElement = document.createElement(\"label\");\n                label.textContent = BondRef.tagName + \": \";\n                container.appendChild(label);\n                let bondRef: BondRef = new BondRef(getAttributes(xml_bondRefs[0]), getNodeValue(getFirstChildNode(xml_bondRefs[0])));\n                extraDOSCMethod.setBondRef(bondRef);\n                // Create a HTMLSelectElement to select the bondRef.\n                let bondIds: Set<string> = (molecule.getBonds() as BondArray).getBondIds();\n                let selectElement: HTMLSelectElement = createSelectElement(bondIds, bondRef.value, molecule.id + \"_\" + BondRef.tagName, boundary1);\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        bondRef.value = event.target.value;\n                        resizeSelectElement(event.target);\n                    }\n                });\n                resizeSelectElement(selectElement);\n                container.appendChild(selectElement);\n                extraDOSCMethodDiv.appendChild(container);\n            }\n            // Read hinderedRotorPotential.\n            let xml_hinderedRotorPotentials: HTMLCollectionOf<Element> = xml_ExtraDOSCMethod[0].getElementsByTagName(HinderedRotorPotential.tagName);\n            if (xml_hinderedRotorPotentials.length > 0) {\n                if (xml_hinderedRotorPotentials.length != 1) {\n                    throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + xml_hinderedRotorPotentials.length);\n                }\n                let hinderedRotorPotentialAttributes: Map<string, string> = getAttributes(xml_hinderedRotorPotentials[0]);\n                let hinderedRotorPotential: HinderedRotorPotential = new HinderedRotorPotential(hinderedRotorPotentialAttributes);\n                // Create a new collapsible div for the HinderedRotorPotential.\n                let hinderedRotorPotentialDiv: HTMLDivElement = createFlexDiv(boundary1);\n                let contentDivId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName;\n                let hinderedRotorPotentialCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                    content: hinderedRotorPotentialDiv,\n                    buttonLabel: HinderedRotorPotential.tagName,\n                    buttonFontSize: fontSize3,\n                    level: level3,\n                    contentDivId: contentDivId\n                });\n                extraDOSCMethodDiv.appendChild(hinderedRotorPotentialCollapsibleDiv);\n                // Formats\n                let formatLabel: HTMLLabelElement = createLabel(\"Format:\", level4);\n                hinderedRotorPotentialDiv.appendChild(formatLabel);\n                let selectElement: HTMLSelectElement = createSelectElement(HinderedRotorPotential.formats,\n                    hinderedRotorPotential.format, molecule.id + \"_\" + HinderedRotorPotential.tagName, boundary1);\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        hinderedRotorPotential.format = event.target.value;\n                        resizeSelectElement(event.target);\n                    }\n                });\n                resizeSelectElement(selectElement);\n                hinderedRotorPotentialDiv.appendChild(selectElement);\n                // Add any units.\n                let unitsLabel: HTMLLabelElement = createLabel(\"Units:\", boundary1);\n                hinderedRotorPotentialDiv.appendChild(unitsLabel);\n                addAnyUnits(HinderedRotorPotential.units, hinderedRotorPotentialAttributes, hinderedRotorPotentialDiv,\n                    molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName,\n                    HinderedRotorPotential.tagName, boundary1);\n                // Add expansionSize.\n                let expansionSizeLabel: HTMLLabelElement = createLabel(\"Expansion size:\", boundary1);\n                hinderedRotorPotentialDiv.appendChild(expansionSizeLabel);\n                let expansionSizeInputElementId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName + \"_expansionSize\";\n                let expansionSizeInputElement: HTMLInputElement = createInput(\"number\", expansionSizeInputElementId, boundary1);\n                expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                expansionSizeInputElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the input is a number.\n                        if (isNumeric(event.target.value)) {\n                            hinderedRotorPotential.setExpansionSize(parseInt(event.target.value));\n                        } else {\n                            // Reset the input to the current value.\n                            alert(\"Expansion size input is not a number, resetting...\");\n                            expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                        }\n                        resizeInputElement(expansionSizeInputElement);\n                    }\n                });\n                expansionSizeInputElement.value = hinderedRotorPotential.getExpansionSize().toString();\n                resizeInputElement(expansionSizeInputElement);\n                hinderedRotorPotentialDiv.appendChild(expansionSizeInputElement);\n                // Add useSineTerms.\n                let useSineTermsLabel: HTMLLabelElement = createLabel(\"Use sine terms:\", boundary1);\n                hinderedRotorPotentialDiv.appendChild(useSineTermsLabel);\n                let useSineTermsInputId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName + \"_useSineTerms\";\n                let useSineTermsInput: HTMLInputElement = createInput(\"checkbox\", useSineTermsInputId, boundary1);\n                useSineTermsInput.checked = hinderedRotorPotential.getUseSineTerms();\n                useSineTermsInput.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        hinderedRotorPotential.setUseSineTerms(event.target.checked);\n                    }\n                });\n                hinderedRotorPotentialDiv.appendChild(useSineTermsInput);\n                // Load PotentialPoints.\n                // Create a new collapsible div for the potential points.\n                let potentialPointsDiv: HTMLDivElement = document.createElement(\"div\");\n                let potentialPointContentDivId: string = molecule.id + \"_\" + DOSCMethod.tagName + \"_\" + HinderedRotorPotential.tagName + \"_\" + PotentialPoint.tagName;\n                let potentialPointCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                    content: potentialPointsDiv,\n                    buttonLabel: PotentialPoint.tagName,\n                    buttonFontSize: fontSize3,\n                    level: level4,\n                    contentDivId: potentialPointContentDivId\n                });\n                hinderedRotorPotentialDiv.appendChild(potentialPointCollapsibleDiv);\n                let potentialPoints: PotentialPoint[] = [];\n                let xml_potentialPoints: HTMLCollectionOf<Element> = xml_hinderedRotorPotentials[0].getElementsByTagName(PotentialPoint.tagName);\n                for (let k = 0; k < xml_potentialPoints.length; k++) {\n                    let potentialPoint: PotentialPoint = new PotentialPoint(getAttributes(xml_potentialPoints[k]));\n                    potentialPoints.push(potentialPoint);\n                    let potentialPointDiv: HTMLDivElement = createFlexDiv(level5);\n                    potentialPointCollapsibleDiv.appendChild(potentialPointDiv);\n                    // Process angle\n                    let angleLabel: HTMLLabelElement = createLabel(\"Angle:\", boundary1);\n                    potentialPointDiv.appendChild(angleLabel);\n                    let angleInputElementId: string = molecule.id + \"_\" + PotentialPoint.tagName + \"_angle\";\n                    let angleInputElement: HTMLInputElement = createInput(\"number\", angleInputElementId, boundary1);\n                    angleInputElement.addEventListener('change', (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            // Check the input is a number.\n                            if (isNumeric(event.target.value)) {\n                                potentialPoint.setAngle(parseFloat(event.target.value));\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Angle input is not a number, resetting...\");\n                                angleInputElement.value = potentialPoint.getAngle().toString();\n                            }\n                            resizeInputElement(angleInputElement);\n                        }\n                    });\n                    angleInputElement.value = potentialPoint.getAngle().toString();\n                    resizeInputElement(angleInputElement);\n                    potentialPointDiv.appendChild(angleInputElement);\n                    // Create a new div element for the potential.\n                    let potentialLabel: HTMLLabelElement = createLabel(\"Potential:\", boundary1);\n                    potentialPointDiv.appendChild(potentialLabel);\n                    let potentialInputElementId = molecule.id + \"_\" + PotentialPoint.tagName + \"_potential\";\n                                        let potentialInputElement: HTMLInputElement = createInput(\"number\", potentialInputElementId, boundary1);\n                    potentialInputElement.addEventListener('change', (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            // Check the input is a number.\n                            if (isNumeric(event.target.value)) {\n                                potentialPoint.setPotential(parseFloat(event.target.value));\n                            } else {\n                                // Reset the input to the current value.\n                                alert(\"Potential input is not a number, resetting...\");\n                                potentialInputElement.value = potentialPoint.getPotential().toString();\n                            }\n                            resizeInputElement(potentialInputElement);\n                        }\n                    });\n                    potentialInputElement.value = potentialPoint.getPotential().toString();\n                    resizeInputElement(potentialInputElement);\n                    potentialPointDiv.appendChild(potentialInputElement);\n                    potentialPointsDiv.appendChild(potentialPointDiv);\n                }\n                potentialPointCollapsibleDiv.appendChild(potentialPointsDiv);\n                hinderedRotorPotential.setPotentialPoints(potentialPoints);\n                extraDOSCMethod.setHinderedRotorPotential(hinderedRotorPotential);\n            }\n            // Read periodicities.\n            let xml_periodicities: HTMLCollectionOf<Element> = xml_DOSCMethod[0].getElementsByTagName(Periodicity.tagName);\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) {\n                    throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                }\n                let valueString: string = getNodeValue(getFirstChildNode(xml_periodicities[0]));\n                let periodicity: Periodicity = new Periodicity(getAttributes(xml_periodicities[0]), parseFloat(valueString));\n                extraDOSCMethod.setPeriodicity(periodicity);\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + Periodicity.tagName, boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        periodicity.value = parseFloat(event.target.value);\n                    }\n                }, valueString, Periodicity.tagName);\n                extraDOSCMethodDiv.appendChild(inputDiv);\n            }\n            molecule.setExtraDOSCMethod(extraDOSCMethod);\n            moleculeTagNames.delete(ExtraDOSCMethod.tagName);\n        }\n\n        // Organise ReservoirSize.\n        moleculeTagNames.delete(ReservoirSize.tagName);\n        let xml_ReservoirSize = xml_molecules[i].getElementsByTagName(ReservoirSize.tagName);\n        if (xml_ReservoirSize.length > 0) {\n            if (xml_ReservoirSize.length != 1) {\n                throw new Error(\"Expecting only 1 reservoirSize, but there are \" + xml_ReservoirSize.length);\n            }\n            let valueString: string = getNodeValue(getFirstChildNode(xml_ReservoirSize[0]));\n            let value: number = parseFloat(valueString);\n            let reservoirSizeAttributes: Map<string, string> = getAttributes(xml_ReservoirSize[0]);\n            let reservoirSize: ReservoirSize = new ReservoirSize(reservoirSizeAttributes, value);\n            molecule.setReservoirSize(reservoirSize);\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + ReservoirSize.tagName, boundary1, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    reservoirSize.value = parseFloat(event.target.value);\n                    resizeInputElement(event.target);\n                }\n            }, valueString, ReservoirSize.tagName);\n            resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n            moleculeDiv.appendChild(inputDiv);\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.warn(x));\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        // Create a molstar molecule visualisation\n        let molstarDiv: HTMLDivElement = document.createElement(\"div\");\n        molstarDiv.id = molecule.id + \"_molstar\";\n        moleculeDiv.appendChild(molstarDiv);\n\n        // Create a new collapsible div for the molecule.\n        let collapsibleDiv = getCollapsibleDiv({\n            content: moleculeDiv,\n            buttonLabel: molecule.getLabel(),\n            buttonFontSize: fontSize2,\n            level: level1,\n            contentDivId: molecule.tagName + \"_\" + molecule.id\n        });\n        // Append the collapsibleDiv to the moleculeListDiv.\n        moleculeListDiv.appendChild(collapsibleDiv);\n    }\n    return moleculeListDiv;\n}\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xmlFilename: string, xml: string) {\n    let xmlDiv: HTMLDivElement = document.getElementById(\"xml\") as HTMLDivElement;\n    // xmlHeading\n    let xmlHeadingId: string = \"xmlHeading\";\n    remove(xmlHeadingId);\n    let xmlHeading: HTMLHeadingElement = document.createElement(\"h2\");\n    xmlHeading.textContent = xmlFilename;\n    xmlDiv.appendChild(xmlHeading);\n    // xmlParagraph\n    let xmlParagraphId: string = \"xmlParagraph\";\n    remove(xmlParagraphId);\n    let xmlPre: HTMLPreElement = document.createElement(\"pre\");\n    xmlPre.textContent = xml;\n    xmlDiv.appendChild(xmlPre);\n}\n\n/**\n * For processing a molecule property.\n * @param p The property.\n * @param units The possible units.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */\nfunction processProperty(p: Property, units: string[] | undefined, molecule: Molecule, element: Element, moleculeDiv: HTMLDivElement) {\n    // Handle scalar or array property\n    let scalarNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyScalar.tagName);\n    if (scalarNodes.length > 0) {\n        if (scalarNodes.length != 1) {\n            throw new Error(\"Expecting 1 \" + PropertyScalar.tagName + \" but finding \" + scalarNodes.length + \"!\");\n        }\n        let inputString: string = getInputString(scalarNodes[0]);\n        let value: number = parseFloat(inputString);\n        let psAttributes: Map<string, string> = getAttributes(scalarNodes[0]);\n        let ps: PropertyScalar = new PropertyScalar(psAttributes, value);\n        p.setProperty(ps);\n        let label: string = p.dictRef;\n        // Create a new div element for the input.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", molecule.id + \"_\" + p.dictRef, boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(ps, event.target);\n            }\n        }, inputString, label);\n        let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n        inputElement.value = inputString;\n        resizeInputElement(inputElement);\n        inputElement.addEventListener('change', (event) => {\n            let eventTarget = event.target as HTMLInputElement;\n            inputString = eventTarget.value;\n            ps = p.getProperty() as PropertyScalar;\n            ps.value = parseFloat(inputString);\n            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n            resizeInputElement(inputElement);\n            if (p.dictRef == ZPE.dictRef) {\n                // Update the min and max molecule energy.\n                if (value < minMoleculeEnergy) {\n                    minMoleculeEnergy = value;\n                }\n                if (value > maxMoleculeEnergy) {\n                    maxMoleculeEnergy = value;\n                }\n                // Update the molecule energy diagram.\n                displayReactionsDiagram();\n            }\n        });\n        addAnyUnits(units, psAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary1);\n        moleculeDiv.appendChild(inputDiv);\n    } else {\n        let arrayNodes: HTMLCollectionOf<Element> = element.getElementsByTagName(PropertyArray.tagName);\n        if (arrayNodes.length > 0) {\n            if (arrayNodes.length != 1) {\n                throw new Error(\"Expecting 1 \" + PropertyArray.tagName + \" but finding \" + arrayNodes.length + \"!\");\n            }\n            let inputString: string = getInputString(arrayNodes[0]);\n            let values: number[] = toNumberArray(inputString.split(/\\s+/));\n            let paAttributes: Map<string, string> = getAttributes(arrayNodes[0]);\n            let pa: PropertyArray = new PropertyArray(paAttributes, values);\n            p.setProperty(pa);\n            let label: string = p.dictRef;\n            // Create a new div element for the input.\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"text\", molecule.id + \"_\" + p.dictRef, boundary1, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    setNumberArrayNode(pa, event.target);\n                }\n            }, inputString, label);\n            let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n            inputElement.value = inputString;\n            resizeInputElement(inputElement);\n            inputElement.addEventListener('change', (event) => {\n                let eventTarget = event.target as HTMLInputElement;\n                inputString = eventTarget.value;\n                pa = p.getProperty() as PropertyArray;\n                values = toNumberArray(inputString.split(/\\s+/));\n                pa.values = values;\n                console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                resizeInputElement(inputElement);\n            });\n            addAnyUnits(units, paAttributes, inputDiv, molecule.id + \"_\" + p.dictRef + \"_Select_Units\", p.dictRef, boundary1);\n            moleculeDiv.appendChild(inputDiv);\n        } else {\n            throw new Error(\"Expecting \" + PropertyScalar.tagName + \" or \" + PropertyArray.tagName);\n        }\n    }\n}\n\n/**\n * If there are a choice of units, then add a new select element to display/select them.\n * @param units The possible units.\n * @param attributes The attributes.\n * @param inputDiv The input div.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n */\nfunction addAnyUnits(units: string[] | undefined, attributes: Map<string, string>, inputDiv: HTMLDivElement,\n    id: string, tagOrDictRef: string, boundary: {marginLeft: string, marginTop: string, marginBottom: string, marginRight: string}) {\n    if (units != undefined) {\n        let unitsSelectElement: HTMLSelectElement | undefined = getUnitsSelectElement(units, attributes, id, tagOrDictRef);\n        if (unitsSelectElement != undefined) {\n            Object.assign(unitsSelectElement.style, boundary);\n            inputDiv.appendChild(unitsSelectElement);\n        }\n    } else {\n        let attributesUnits: string | undefined = attributes.get(\"units\");\n        if (attributesUnits != undefined) {\n            let label: HTMLLabelElement = createLabel(attributesUnits, boundary);\n            inputDiv.appendChild(label);\n        }\n    }\n}\n\n/**\n * @param attributes The attributes.\n * @param id The id.\n * @param tagOrDictRef The tag or dictionary reference.\n * @returns A select element for setting the units or undefined if there is not attribute for units.\n */\nfunction getUnitsSelectElement(units: string[], attributes: Map<string, string>, id: string, tagOrDictRef: string): HTMLSelectElement | undefined {\n    let psUnits: string | undefined = attributes.get(\"units\");\n    if (psUnits != undefined) {\n        // Get a select element for setting the units.\n        let selectElement: HTMLSelectElement = createSelectElement(units, \"Units\", id, boundary1);\n        // Set the initial value to the units.\n        selectElement.value = psUnits;\n        // Add event listener to selectElement.\n        resizeSelectElement(selectElement);\n        selectElement.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLSelectElement) {\n                attributes.set(\"units\", event.target.value);\n                console.log(\"Set \" + tagOrDictRef + \" units to \" + event.target.value);\n            }\n            resizeSelectElement(selectElement);\n        });\n        return selectElement;\n    }\n    return undefined;\n}\n\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param margin The margin.\n * @param moleculeDiv The molecule div.\n */\nfunction processDOSCMethod(dOSCMethod: DOSCMethod, molecule: Molecule, moleculeDiv: HTMLDivElement): void {\n    let label: HTMLLabelElement = document.createElement('label');\n    label.textContent = DOSCMethod.tagName + \": \";\n    let container: HTMLDivElement = document.createElement('div');\n    container.appendChild(label);\n    // Create a HTMLSelectElement to select the DOSCMethod.\n    let options: string[] = [\"ClassicalRotors\", \"me:QMRotors\", \"QMRotors\"];\n    let selectElement: HTMLSelectElement = createSelectElement(options, \"DOSCMethod\", molecule.id + \"_\" + 'Select_DOSCMethod', boundary1);\n    // Set the initial value to the DOSCMethod.\n    selectElement.value = dOSCMethod.getXsiType();\n    // Add event listener to selectElement.\n    selectElement.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLSelectElement) {\n            dOSCMethod.setXsiType(event.target.value);\n            console.log(\"Set DOSCMethod to \" + event.target.value);\n        }\n    });\n    molecule.setDOSCMethod(dOSCMethod);\n    container.appendChild(selectElement);\n    Object.assign(container.style, level2);\n    moleculeDiv.appendChild(container);\n}\n\n/**\n * For processing a molecule energy transfer model.\n * @param etm The energy transfer model.\n * @param molecule The molecule.\n * @param element The element.\n * @param moleculeDiv The molecule div.\n */\nfunction processEnergyTransferModel(etm: EnergyTransferModel, molecule: Molecule, element: Element, moleculeDiv: HTMLDivElement, margin: string) {\n    let xml_deltaEDowns: HTMLCollectionOf<Element> = element.getElementsByTagName(DeltaEDown.tagName);\n    if (xml_deltaEDowns.length > 0) {\n        // Create a new collapsible div for the energyTransferModel.\n        let etmDiv: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n        let contentDivId: string = molecule.id + \"_\" + EnergyTransferModel.tagName;\n        let collapsibleDiv = getCollapsibleDiv({\n            content: etmDiv,\n            buttonLabel: EnergyTransferModel.tagName,\n            buttonFontSize: fontSize3,\n            level: level2,\n            contentDivId: contentDivId\n        });\n        moleculeDiv.appendChild(collapsibleDiv);\n        let deltaEDowns: DeltaEDown[] = [];\n        for (let k = 0; k < xml_deltaEDowns.length; k++) {\n            let inputString: string = getInputString(xml_deltaEDowns[k]);\n            let value: number = parseFloat(inputString);\n            let deltaEDownAttributes: Map<string, string> = getAttributes(xml_deltaEDowns[k]);\n            let deltaEDown: DeltaEDown = new DeltaEDown(deltaEDownAttributes, value);\n            deltaEDowns.push(deltaEDown);\n            let label: string = DeltaEDown.tagName;\n            // Create a new div element for the input.\n            let id = molecule.id + \"_\" + EnergyTransferModel.tagName + \"_\" + DeltaEDown.tagName + \"_\" + k;\n            let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n                if (event.target instanceof HTMLInputElement) {\n                    setNumberNode(deltaEDown, event.target);\n                }\n            }, inputString, label);\n            etmDiv.appendChild(inputDiv);\n            let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n            inputElement.value = inputString;\n            resizeInputElement(inputElement);\n            inputElement.addEventListener('change', (event) => {\n                let eventTarget = event.target as HTMLInputElement;\n                inputString = eventTarget.value;\n                deltaEDowns[k].setValue(parseFloat(inputString));\n                console.log(\"Set \" + id + \" to \" + inputString);\n                resizeInputElement(inputElement);\n            });\n            let unitsLabel: HTMLLabelElement = document.createElement('label');\n            unitsLabel.textContent = \"cm-1\";\n            inputDiv.appendChild(unitsLabel);\n        }\n        etm.setDeltaEDowns(deltaEDowns);\n        molecule.setEnergyTransferModel(etm);\n    }\n}\n\n/**\n * Set a molecule property array when the input value is changed.\n * @param dictRef The dictionary reference of the property.\n * @param input The input element.\n */\nexport function setNumberArrayNode(node: NumberArrayNode, input: HTMLInputElement): void {\n    let inputString: string = input.value.trim();\n    if (inputString == \"\") {\n        alert(\"Empty input resetting...\");\n        input.value = arrayToString(node.values, \" \");\n        return;\n    }\n    let inputStrings: string[] = inputString.split(/\\s+/);\n    let values: number[] = [];\n    let success: boolean = true;\n    inputStrings.forEach(function (value) {\n        if (!isNumeric(value)) {\n            success = false;\n        }\n        values.push(parseFloat(value));\n    });\n    if (!success) {\n        alert(\"An input is not a number, resetting...\");\n        input.value = arrayToString(node.values, \" \");\n        return;\n    }\n    //console.log(\"propertyArray=\" + propertyArray);\n    if (values.length == node.values.length) {\n        console.log(\"Changed \" + node.tagName + \" from: \\\"\" + inputString + \"\\\" to: \\\"\" + arrayToString(node.values, \" \") + \"\\\"\");\n        //console.log(\"molecule=\" + molecule);\n    } else {\n        alert(\"Expecting \" + node.values.length + \" values for, but finding \" + values.length + \" resetting...\");\n        input.value = arrayToString(node.values, \" \");\n    }\n}\n\n(window as any).setNumberArrayNode = setNumberArrayNode;\n\n/**\n * Set a molecule number node when the input value is changed.\n * @param node The number node.\n * @param input The input element.\n */\nexport function setNumberNode(node: NumberNode, input: HTMLInputElement): void {\n    if (isNumeric(input.value)) {\n        let inputNumber: number = parseFloat(input.value);\n        node.value = inputNumber;\n        console.log(\"Value set to \" + inputNumber);\n    } else {\n        alert(\"Value is not numeric, resetting...\");\n        input.value = node.value.toString();\n    }\n}\n\n(window as any).set = setNumberNode;\n\n/**\n * Parse XML and create HTMLDivElement for reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction processReactionList(xml: XMLDocument): HTMLDivElement {\n    // Create div to contain the reaction list.\n    let reactionListDiv: HTMLDivElement = createFlexDiv(boundary1);\n    // Get the XML \"reactionList\" element.\n    let xml_reactionList: Element = getSingularElement(xml, ReactionList.tagName);\n    // Check the XML \"reactionList\" element has one or more \"reaction\" elements and no other elements.\n    let reactionListTagNames: Set<string> = new Set();\n    xml_reactionList.childNodes.forEach(function (node) {\n        reactionListTagNames.add(node.nodeName);\n    });\n    if (reactionListTagNames.size != 1) {\n        if (!(reactionListTagNames.size == 2 && reactionListTagNames.has(\"#text\"))) {\n            console.error(\"reactionListTagNames:\");\n            reactionListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in reactionList:\");\n        }\n    }\n    if (!reactionListTagNames.has(Reaction.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Reaction.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"reaction\" elements.\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    //xml_reactions.forEach(function (xml_reaction) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_reactions.length; i++) {\n        let reactionDiv: HTMLDivElement = document.createElement(\"div\");\n        // Set attributes.\n        let reactionAttributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_reactions[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!reactionTagNames.has(cn.nodeName)) {\n                reactionTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n\n        // Create reaction.\n        let reaction = new Reaction(reactionAttributes);\n        reactions.set(reaction.id, reaction);\n\n        // Reactions typically have one or more reactant and product. They may also have one or more \"me:transitionState\" and other things...\n        // Load reactants.\n        let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n        reactionTagNames.delete(Reactant.tagName);\n        //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n        if (xml_reactants.length > 0) {\n            // Create a new div for the reactants.\n            let reactantsDiv: HTMLDivElement = document.createElement(\"div\");\n            let reactants: Reactant[] = [];\n            for (let j = 0; j < xml_reactants.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let reactant: Reactant = new Reactant(getAttributes(xml_reactants[j]), molecule);\n                reactants.push(reactant);\n                // Create a new div for the role.\n                let container: HTMLDivElement = document.createElement(\"div\");\n                let label: HTMLLabelElement = document.createElement('label');\n                label.textContent = molecule.ref + \" role: \";\n                container.appendChild(label);\n                // Create a HTMLSelectElement to select the Role.\n                let options: string[] = [\"deficientReactant\", \"excessReactant\", \"modelled\"];\n                let selectElement: HTMLSelectElement = createSelectElement(options, \"Role\", molecule.ref + \"_\" + 'Select_Role', boundary1);\n                // Set the initial value.\n                selectElement.value = molecule.role;\n                // Add event listener to selectElement.\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        molecule.setRole(event.target.value);\n                        console.log(\"Set Role to \" + event.target.value);\n                    }\n                });\n                container.appendChild(selectElement);\n                Object.assign(container.style, level3);\n                reactantsDiv.appendChild(container);\n            }\n            reaction.setReactants(reactants);\n            // Create a new collapsible div for the reactants.\n            let contentDivId: string = reaction.id + \"_\" + Reactant.tagName;\n            let reactantCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: reactantsDiv,\n                buttonLabel: \"Reactants\",\n                buttonFontSize: fontSize3,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(reactantCollapsibleDiv);\n        }\n        // Load products.\n        let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n        reactionTagNames.delete(Product.tagName);\n        //console.log(\"xml_products.length=\" + xml_products.length);\n        if (xml_products.length > 0) {\n            let productsDiv: HTMLDivElement = document.createElement(\"div\");\n            let products: Product[] = [];\n            for (let j = 0; j < xml_products.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_products[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let product: Product = new Product(getAttributes(xml_products[j]), molecule);\n                products.push(product);\n                let options: string[] = [\"modelled\", \"sink\"];\n                let container: HTMLDivElement = createLabelWithSelectElement(molecule.ref + \" role:\", options, \n                    molecule.ref + \"_\" + 'Select_Role', \"Role\", boundary1);\n                let selectElement: HTMLSelectElement = container.querySelector('select') as HTMLSelectElement;\n                selectElement.value = molecule.role;\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        molecule.setRole(event.target.value);\n                        console.log(\"Set Role to \" + event.target.value);\n                    }\n                });\n                Object.assign(container.style, level3);\n                productsDiv.appendChild(container);\n            }\n            reaction.setProducts(products);\n            // Create collapsible div for the products.\n            let contentDivId: string = reaction.id + \"_\" + Product.tagName;\n            let productCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: productsDiv,\n                buttonLabel: \"Products\",\n                buttonFontSize: fontSize3,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(productCollapsibleDiv);\n        }\n        // Load tunneling.\n        let xml_tunneling = xml_reactions[i].getElementsByTagName(Tunneling.tagName);\n        if (xml_tunneling.length > 0) {\n            if (xml_tunneling.length > 1) {\n                throw new Error(\"Expecting 1 \" + Tunneling.tagName + \" but finding \" + xml_tunneling.length + \"!\");\n            }\n            let tunneling: Tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            reaction.setTunneling(tunneling);\n            // Create a new div for the tunneling.\n            let container: HTMLDivElement = document.createElement(\"div\") as HTMLDivElement;\n            let label: HTMLLabelElement = document.createElement('label');\n            label.textContent = Tunneling.tagName + \": \";\n            container.appendChild(label);\n            // Create a HTMLSelectElement to select the Tunneling.\n            let options: string[] = [\"Eckart\", \"WKB\"];\n            let selectElement: HTMLSelectElement = createSelectElement(options, \"Tunneling\", reaction.id + \"_\" + 'Select_Tunneling', boundary1);\n            // Set the initial value.\n            selectElement.value = tunneling.getName();\n            // Add event listener to selectElement.\n            selectElement.addEventListener('change', (event) => {\n                if (event.target instanceof HTMLSelectElement) {\n                    tunneling.setName(event.target.value);\n                    console.log(\"Set Tunneling to \" + event.target.value);\n                }\n            });\n            container.appendChild(selectElement);\n            Object.assign(container.style, level2);\n            reactionDiv.appendChild(container);\n        }\n        // Load transition states.\n        let xml_transitionStates: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(TransitionState.tagName);\n        //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n        if (xml_transitionStates.length > 0) {\n            let transitionStatesDiv: HTMLDivElement = document.createElement(\"div\");\n            let transitionStates: TransitionState[] = [];\n            for (let j = 0; j < xml_transitionStates.length; j++) {\n                let xml_molecule: Element = getFirstElement(xml_transitionStates[j], Molecule.tagName);\n                let molecule: ReactionMolecule = new ReactionMolecule(getAttributes(xml_molecule));\n                let transitionState: TransitionState = new TransitionState(getAttributes(xml_transitionStates[j]), molecule);\n                transitionStates.push(transitionState);\n                // Create a label for the Transition State.\n                let label: HTMLLabelElement = createLabel(molecule.ref + \" role: transitionState\", level3);\n                transitionStatesDiv.appendChild(label);\n            }\n            reaction.setTransitionStates(transitionStates);\n            // Create a new collapsible div for the transition states.\n            let contentDivId: string = reaction.id + \"_\" + TransitionState.tagName;\n            let transitionStatesCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                content: transitionStatesDiv,\n                buttonLabel: \"Transition States\",\n                buttonFontSize: fontSize3,\n                level: level2,\n                contentDivId: contentDivId\n            });\n            reactionDiv.appendChild(transitionStatesCollapsibleDiv);\n        }\n        // Load MCRCMethod.\n        //console.log(\"Load MCRCMethod...\");\n        let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n        //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n        //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n        if (xml_MCRCMethod.length > 0) {\n            if (xml_MCRCMethod.length > 1) {\n                throw new Error(\"Expecting 1 \" + MCRCMethod.tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n            } else {\n                let mCRCMethodDiv: HTMLDivElement = document.createElement(\"div\");\n                let mCRCMethod: MCRCMethod;\n                let mCRCMethodAttributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                let name: string | undefined = mCRCMethodAttributes.get(\"name\");\n                //console.log(MCRCMethod.tagName + \" name=\" + name);\n                if (name == undefined || name == MesmerILT.xsiType2) {\n                    let type: string = mCRCMethodAttributes.get(\"xsi:type\") as string;\n                    mCRCMethod = new MesmerILT(mCRCMethodAttributes);\n                    //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                    if (type == MesmerILT.xsiType || type == MesmerILT.xsiType2) {\n                        let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                        if (xml_preExponential != null) {\n                            if (xml_preExponential[0] != null) {\n                                let inputString: string = getInputString(xml_preExponential[0]);\n                                let value: number = parseFloat(inputString);\n                                let preExponentialAttributes: Map<string, string> = getAttributes(xml_preExponential[0]);\n                                let preExponential: PreExponential = new PreExponential(preExponentialAttributes, value);\n                                (mCRCMethod as MesmerILT).setPreExponential(preExponential);\n                                let label: string = PreExponential.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + PreExponential.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(preExponential, event.target);\n                                    }\n                                }, inputString, label);\n                                Object.assign(inputDiv.style, level3);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    preExponential.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, preExponentialAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + PreExponential.tagName,\n                                    PreExponential.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"preExponential \" + preExponential);\n                        let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                        if (xml_activationEnergy != null) {\n                            if (xml_activationEnergy[0] != null) {\n                                let inputString: string = getInputString(xml_activationEnergy[0]);\n                                let value: number = parseFloat(inputString);\n                                let activationEnergyAttributes: Map<string, string> = getAttributes(xml_activationEnergy[0]);\n                                let activationEnergy: ActivationEnergy = new ActivationEnergy(activationEnergyAttributes, value);\n                                (mCRCMethod as MesmerILT).setActivationEnergy(activationEnergy);\n                                let label: string = ActivationEnergy.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + ActivationEnergy.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(activationEnergy, event.target);\n                                    }\n                                }, inputString, label);\n                                Object.assign(inputDiv.style, level3);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    activationEnergy.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, activationEnergyAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + ActivationEnergy.tagName,\n                                    ActivationEnergy.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"activationEnergy \" + activationEnergy);\n                        let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(TInfinity.tagName);\n                        if (xml_tInfinity != null) {\n                            if (xml_tInfinity[0] != null) {\n                                let inputString: string = getInputString(xml_tInfinity[0]);\n                                let value: number = parseFloat(inputString);\n                                let tInfinityAttributes: Map<string, string> = getAttributes(xml_tInfinity[0]);\n                                let tInfinity: TInfinity = new TInfinity(tInfinityAttributes, value);\n                                (mCRCMethod as MesmerILT).setTInfinity(tInfinity);\n                                let label: string = TInfinity.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + TInfinity.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(tInfinity, event.target);\n                                    }\n                                }, inputString, label);\n                                Object.assign(inputDiv.style, level3);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    tInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, tInfinityAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + TInfinity.tagName,\n                                    TInfinity.tagName, boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"tInfinity \" + tInfinity);\n                        let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(NInfinity.tagName);\n                        if (xml_nInfinity != null) {\n                            if (xml_nInfinity[0] != null) {\n                                let inputString: string = getInputString(xml_nInfinity[0]);\n                                let value: number = parseFloat(inputString);\n                                let nInfinityAttributes: Map<string, string> = getAttributes(xml_nInfinity[0]);\n                                let nInfinity: NInfinity = new NInfinity(nInfinityAttributes, value);\n                                (mCRCMethod as MesmerILT).setNInfinity(nInfinity);\n                                let label: string = NInfinity.tagName;\n                                // Create a new div element for the input.\n                                let id = reaction.id + \"_\" + MesmerILT.tagName + \"_\" + NInfinity.tagName;\n                                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n                                    if (event.target instanceof HTMLInputElement) {\n                                        setNumberNode(nInfinity, event.target);\n                                    }\n                                }, inputString, label);\n                                Object.assign(inputDiv.style, level3);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                                let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                                inputElement.value = inputString;\n                                resizeInputElement(inputElement);\n                                inputElement.addEventListener('change', (event) => {\n                                    let eventTarget = event.target as HTMLInputElement;\n                                    inputString = eventTarget.value;\n                                    nInfinity.value = parseFloat(inputString);\n                                    console.log(\"Set \" + id + \" to \" + inputString);\n                                    resizeInputElement(inputElement);\n                                });\n                                addAnyUnits(undefined, nInfinityAttributes, inputDiv, reaction.id + \"_\" + MesmerILT.xsiType + \"_\" + NInfinity.tagName, NInfinity.tagName,\n                                    boundary1);\n                                mCRCMethodDiv.appendChild(inputDiv);\n                            }\n                        }\n                        //console.log(\"nInfinity \" + nInfinity);\n                        // Create a new collapsible div for the MCRCMethod.\n                        let contentDivId: string = reaction.id + \"_\" + MCRCMethod.tagName;\n                        let mCRCMethodCollapsibleDiv: HTMLDivElement = getCollapsibleDiv({\n                            content: mCRCMethodDiv,\n                            buttonLabel: MCRCMethod.tagName,\n                            buttonFontSize: fontSize3,\n                            level: level2,\n                            contentDivId: contentDivId\n                        });\n                        reactionDiv.appendChild(mCRCMethodCollapsibleDiv);\n                    } else {\n                        throw new Error(\"Unexpected xsi:type=\" + type);\n                    }\n                } else {\n                    mCRCMethod = new MCRCMethod(mCRCMethodAttributes);\n                    let mCRCMethodLabel: HTMLLabelElement = document.createElement('label');\n                    mCRCMethodLabel.textContent = MCRCMethod.tagName + \": \" + mCRCMethodAttributes.get(\"name\") as string;\n                    Object.assign(mCRCMethodLabel.style, level2);\n                    mCRCMethodDiv.appendChild(mCRCMethodLabel);\n                    reactionDiv.appendChild(mCRCMethodDiv);\n                }\n                reaction.setMCRCMethod(mCRCMethod);\n            }\n        }\n\n        // Load excessReactantConc\n        let xml_excessReactantConc = xml_reactions[i].getElementsByTagName(ExcessReactantConc.tagName);\n        if (xml_excessReactantConc.length > 0) {\n            if (xml_excessReactantConc.length > 1) {\n                throw new Error(\"Expecting 1 \" + ExcessReactantConc.tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n            }\n            let excessReactantConc: ExcessReactantConc | undefined;\n            let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_excessReactantConc[0])));\n            excessReactantConc = new ExcessReactantConc(getAttributes(xml_excessReactantConc[0]), value);\n            reaction.setExcessReactantConc(excessReactantConc);\n        }\n\n        // Create a new collapsible div for the reaction.\n        let reactionCollapsibleDiv = getCollapsibleDiv({\n            content: reactionDiv,\n            buttonLabel: reaction.id + \"(\" + reaction.getLabel() + \")\",\n            buttonFontSize: fontSize2,\n            level: level1,\n            contentDivId: reaction.tagName + \"_\" + reaction.id\n        });\n\n        // Append the collapsibleDiv to the reactionListDiv.\n        reactionListDiv.appendChild(reactionCollapsibleDiv);\n\n    }\n    return reactionListDiv;\n}\n\n/**\n * Parse xml to initialise conditions.\n * @param xml The XML document.\n * @returns The conditions div.\n */\nfunction processConditions(xml: XMLDocument): HTMLDivElement {\n    console.log(Conditions.tagName);\n    // Create div to contain the conditions.\n    let conditionsDiv: HTMLDivElement = document.createElement(\"div\");\n    // Get the XML \"moleculeList\" element.\n    let xml_conditions: Element = getSingularElement(xml, Conditions.tagName);\n    let conditions: Conditions = new Conditions(getAttributes(xml_conditions));\n    mesmer.setConditions(conditions);\n\n    // Bath Gases\n    let bathGasesDiv: HTMLDivElement = document.createElement(\"div\");\n    conditionsDiv.appendChild(bathGasesDiv);\n    // Add collapsible div.\n    conditionsDiv.appendChild(getCollapsibleDiv({\n        content: bathGasesDiv,\n        buttonLabel: BathGas.name,\n        buttonFontSize: fontSize2,\n        level: level1,\n        contentDivId: BathGas.tagName\n    }));\n\n    // Add add button.\n    let addBathGasButton: HTMLButtonElement = createButton(addString, level2);\n    bathGasesDiv.appendChild(addBathGasButton);\n    addBathGasButton.addEventListener('click', () => {\n        let bathGas: BathGas = new BathGas(new Map(), \"\");\n        conditions.addBathGas(bathGas);\n        let containerDiv: HTMLDivElement = createFlexDiv(level2);\n        let bathGasLabel: HTMLLabelElement = document.createElement('label');\n        bathGasLabel.textContent = BathGas.tagName + \": \";\n        containerDiv.appendChild(bathGasLabel);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs: Set<string> = new Set(molecules.keys());\n        let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName,\n            Conditions.tagName + \"_\" + BathGas.tagName, boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Added \" + event.target.value + \" as a \" + BathGas.tagName);\n                resizeSelectElement(event.target);\n            }\n        });\n        selectElement.style.marginLeft = margin2;\n        resizeSelectElement(selectElement);\n        containerDiv.appendChild(selectElement);\n        // Add a remove button.\n        let removeButton: HTMLButtonElement = createButton(removeString, boundary1);\n        removeButton.addEventListener('click', () => {\n            bathGasesDiv.removeChild(containerDiv);\n            conditions.removeBathGas(bathGas);\n        });\n        containerDiv.appendChild(removeButton);\n        bathGasesDiv.appendChild(containerDiv);\n    });\n\n    // Process any \"bathGas\" elements that are immediate children of xml_conditions.\n    let xml_bathGases: Element[] = Array.from(xml_conditions.children).filter(child => child.tagName === BathGas.tagName);\n    if (xml_bathGases.length > 0) {\n        for (let i = 0; i < xml_bathGases.length; i++) {\n            let attributes: Map<string, string> = getAttributes(xml_bathGases[i]);\n            let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGases[i]));\n            let bathGas: BathGas = new BathGas(attributes, moleculeID);\n            console.log(\"bathGas\" + bathGas.toString());\n            conditions.addBathGas(bathGas);\n            let containerDiv: HTMLDivElement = document.createElement(\"div\");\n            let bathGasLabel: HTMLLabelElement = document.createElement('label');\n            bathGasLabel.textContent = BathGas.tagName + \": \";\n            containerDiv.appendChild(bathGasLabel);\n            // Create a HTMLSelectInput for the BathGas.\n            // Get the ids of all the molecules.\n            let moleculeIDs: Set<string> = new Set(molecules.keys());\n            let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName, Conditions.tagName + \"_\" + BathGas.tagName, boundary1);\n            // Set the initial value.\n            selectElement.value = bathGas.value;\n            // Add event listener to selectElement.\n            selectElement.addEventListener('change', (event) => {\n                if (event.target instanceof HTMLSelectElement) {\n                    bathGas.value = event.target.value;\n                    console.log(\"Set \" + PTpair.tagName + \"_\" + BathGas.tagName + \" to \" + event.target.value);\n                    resizeSelectElement(event.target);\n                }\n            });\n            resizeSelectElement(selectElement);\n            Object.assign(selectElement.style, level2);\n            containerDiv.appendChild(selectElement);\n            // Add a remove button.\n            let removeButton: HTMLButtonElement = createButton(removeString, boundary1);\n            removeButton.addEventListener('click', () => {\n                bathGasesDiv.removeChild(containerDiv);\n                conditions.removeBathGas(bathGas);\n            });\n            containerDiv.appendChild(removeButton);\n            bathGasesDiv.appendChild(containerDiv);\n        }\n    }\n\n    // PTs\n    let pTsDiv: HTMLDivElement = document.createElement(\"div\");\n    conditionsDiv.appendChild(pTsDiv);\n    let pTs: PTs = new PTs(new Map());\n    // Add collapsible div.\n    conditionsDiv.appendChild(getCollapsibleDiv({\n        content: pTsDiv,\n        buttonLabel: PTs.name,\n        buttonFontSize: fontSize2,\n        level: level1,\n        contentDivId: BathGas.tagName\n    }));\n    // Create an add button to add a new PTpair.\n    let addButton: HTMLButtonElement = createButton(addString, level2);\n    pTsDiv.appendChild(addButton);\n    // Add event listener to the addButton.\n    addButton.addEventListener('click', () => {\n        // Create a new PTpair.\n        let pTPairAttributes: Map<string, string> = new Map();\n        pTPairAttributes.set(\"units\", \"Torr\");\n        let pTPair: PTpair = new PTpair(pTPairAttributes);\n        let pTPairIndex: number = pTs.addPTpair(pTPair);\n        let pTPairDiv: HTMLDivElement = createFlexDiv(level2);\n        addP(pTPairDiv, pTPair);\n        addT(pTPairDiv, pTPair);\n        addAnyUnits(undefined, pTPairAttributes, pTPairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n        // Create an add button for adding details.\n        let addDetailsButton: HTMLButtonElement = createButton(addString + \" details\", boundary1);\n        pTPairDiv.appendChild(addDetailsButton);\n        // Add event listener to the addDetailsButton.\n        addDetailsButton.addEventListener('click', () => {\n            let detailsDiv: HTMLDivElement = document.createElement(\"div\");\n            addExcessReactantConc(pTPairDiv, pTPair);\n            addPercentExcessReactantConc(pTPairDiv, pTPair);\n            addPrecision(pTPairDiv, pTPair);\n            addBathGas(pTPairDiv, pTPair);\n            addExperimentRateButton(pTPairDiv, pTPair);\n\n            pTPairDiv.insertBefore(detailsDiv, addDetailsButton);\n            pTPairDiv.removeChild(addDetailsButton);\n        });\n\n\n\n\n\n\n\n        /*\n        addExperimentRateButton.addEventListener('click', () => {\n            let experimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n            let experimentRate: ExperimentRate = new ExperimentRate(new Map(), NaN);\n            pTPair.setExperimentRate(experimentRate);\n            let experimentRateLabel: HTMLLabelElement = document.createElement('label');\n            experimentRateLabel.textContent = ExperimentRate.tagName + \": \";\n            experimentRateDiv.appendChild(experimentRateLabel);\n            pTPairDiv.insertBefore(experimentRateDiv, addExperimentRateButton);\n            pTPairDiv.removeChild(addExperimentRateButton);\n        });\n        pTPairDiv.appendChild(addExperimentRateDiv);\n        */\n\n\n        // Add a remove button.\n        let removeButton: HTMLButtonElement = createButton(removeString, boundary1);\n        removeButton.addEventListener('click', () => {\n            pTsDiv.removeChild(pTPairDiv);\n            pTs.removePTpair(pTPairIndex);\n            pTPair.removeBathGas();\n        });\n        pTPairDiv.appendChild(removeButton);\n        pTsDiv.appendChild(pTPairDiv);\n    });\n    // Create an add from spreadsheet button to add multiple PTPairs.\n    let addMultipleButton: HTMLButtonElement = createButton(addFromSpreadsheetString, boundary1);\n    pTsDiv.appendChild(addMultipleButton);\n    // Add event listener to the addMultipleButton.\n    addMultipleButton.addEventListener('click', () => {\n        // Add a new text input for the user to paste the PTPairs.\n        let inputDiv: HTMLDivElement = createFlexDiv(level2);\n        let addFromSpreadsheetId = PTs.tagName + \"_\" + \"addFromSpreadsheet\";\n        let inputElement: HTMLInputElement = createInput(\"text\", addFromSpreadsheetId, level2);\n        inputDiv.appendChild(inputElement);\n        pTsDiv.insertBefore(inputDiv, addButton);\n        // Add an event listener to the inputElement.\n        inputElement.addEventListener('change', () => {\n            console.log(\"inputElement.value=\" + inputElement.value);\n            console.log(\"inputElement.value.length=\" + inputElement.value.length);\n            if (inputElement.value.length > 0) {\n                let pTPairsArray: string[] = inputElement.value.split(\" \");\n                console.log(\"pTPairsArray.length=\" + pTPairsArray.length);\n                for (let i = 0; i < pTPairsArray.length; i++) {\n                    let pTPairAttributes: Map<string, string> = new Map();\n                    pTPairAttributes.set(\"units\", \"Torr\");\n                    let pTPair: PTpair = new PTpair(pTPairAttributes);\n                    let pTPairArray: string[] = pTPairsArray[i].split(\"\\t\");\n                    if (pTPairArray.length == 2) {\n                        let p: number = parseFloat(pTPairArray[0]);\n                        let t: number = parseFloat(pTPairArray[1]);\n                        pTPair.setP(p);\n                        pTPair.setT(t);\n                        console.log(\"pTPair=\" + pTPair);\n                    } else {\n                        console.warn(\"pTPairArray.length=\" + pTPairArray.length);\n                    }\n                    let pTPairDiv: HTMLDivElement = createFlexDiv(level2);\n                    addP(pTPairDiv, pTPair);\n                    addT(pTPairDiv, pTPair);\n                    addAnyUnits(undefined, pTPairAttributes, pTPairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n                    addExcessReactantConc(pTPairDiv, pTPair);\n                    addPercentExcessReactantConc(pTPairDiv, pTPair);\n                    addPrecision(pTPairDiv, pTPair);\n                    addBathGas(pTPairDiv, pTPair);\n                    console.log(addButton);  // Check the value of addButton\n                    console.log(pTsDiv);  // Check the value of pTsDiv\n                    pTsDiv.insertBefore(pTPairDiv, addButton);\n                    pTs.addPTpair(pTPair);\n                }\n                //pTs.addPTpairs(pTPairs);\n                pTsDiv.removeChild(inputDiv);\n            }\n        });\n    });\n\n    let xml_PTss: HTMLCollectionOf<Element> = xml_conditions.getElementsByTagName(PTs.tagName);\n    if (xml_PTss.length > 0) {\n        if (xml_PTss.length > 1) {\n            throw new Error(\"Expecting 1 \" + PTs.tagName + \" but finding \" + xml_PTss.length + \"!\");\n        }\n        let pTsDiv: HTMLDivElement = document.createElement(\"div\");\n        conditionsDiv.appendChild(pTsDiv);\n        let attributes: Map<string, string> = getAttributes(xml_PTss[0]);\n        let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTss[0].getElementsByTagName(PTpair.tagName);\n        if (xml_PTPairs.length == 0) {\n            throw new Error(\"Expecting 1 or more \" + PTpair.tagName + \" but finding 0!\");\n        } else {\n            let pTs: PTs = new PTs(attributes);\n            for (let i = 0; i < xml_PTPairs.length; i++) {\n                let pTPair = new PTpair(getAttributes(xml_PTPairs[i]));\n                // Create a container div for P, T and units.\n                let pTPairDiv: HTMLDivElement = createFlexDiv(level2);\n                pTsDiv.appendChild(pTPairDiv);\n                // Add any optional BathGas\n                let xml_bathGass: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(BathGas.tagName);\n                if (xml_bathGass.length > 0) {\n                    if (xml_bathGass.length > 1) {\n                        console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n                    }\n                    // Add a label for the BathGas.\n                    let bathGasLabel: HTMLLabelElement = document.createElement('label');\n                    bathGasLabel.textContent = BathGas.tagName + \": \";\n                    pTPairDiv.appendChild(bathGasLabel);\n                    let bathGasValue = getNodeValue(getFirstChildNode(xml_bathGass[0]));\n                    let bathGas: BathGas = new BathGas(getAttributes(xml_bathGass[0]), bathGasValue);\n                    pTPair.setBathGas(bathGas);\n                    // Create a HTMLSelectInput for the BathGas.\n                    // Get the ids of all the molecules.\n                    let moleculeIDs: Set<string> = new Set(molecules.keys());\n                    let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName, PTpair.tagName + \"_\" + BathGas.tagName, boundary1);\n                    // Set the initial value.\n                    selectElement.value = bathGas.value;\n                    // Add event listener to selectElement.\n                    selectElement.addEventListener('change', (event) => {\n                        if (event.target instanceof HTMLSelectElement) {\n                            bathGas.value = event.target.value;\n                            console.log(\"Set \" + PTpair.tagName + \"_\" + BathGas.tagName + \" to \" + event.target.value);\n                            resizeSelectElement(event.target);\n                        }\n                    });\n                    resizeSelectElement(selectElement);\n                    pTPairDiv.appendChild(selectElement);\n                }\n                // Add any optional ExperimentRate\n                let xml_experimentRates: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(ExperimentRate.tagName);\n                if (xml_experimentRates.length > 0) {\n                    if (xml_experimentRates.length > 1) {\n                        console.warn(\"xml_experimentRates.length=\" + xml_experimentRates.length);\n                    }\n                    let valueString: string = getNodeValue(getFirstChildNode(xml_experimentRates[0]));\n                    let experimentRate: ExperimentRate = new ExperimentRate(getAttributes(xml_experimentRates[0]), parseFloat(valueString));\n                    pTPair.setExperimentRate(experimentRate);\n                    // Create a new div for the ExperimentRate.\n                    let id = PTpair.tagName + \"_\" + ExperimentRate.tagName;\n                    let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            setNumberNode(experimentRate, event.target);\n                        }\n                    }, experimentRate.value.toString(), ExperimentRate.tagName);\n                    Object.assign(inputDiv.style, boundary1);\n                    pTPairDiv.appendChild(inputDiv);\n                }\n                addP(pTPairDiv, pTPair);\n                addT(pTPairDiv, pTPair);\n                addAnyUnits(undefined, getAttributes(xml_PTPairs[i]), pTPairDiv, PTpair.tagName, PTpair.tagName, boundary1);\n                addExcessReactantConc(pTPairDiv, pTPair);\n                addPercentExcessReactantConc(pTPairDiv, pTPair);\n                addPrecision(pTPairDiv, pTPair);\n                addBathGas(pTPairDiv, pTPair);\n\n                pTs.addPTpair(pTPair);\n                // Add the pTPairDiv to the pTsDiv.\n                pTsDiv.appendChild(pTPairDiv);\n            }\n            conditions.setPTs(pTs);\n        }\n    }\n    return conditionsDiv;\n}\n\n/**\n * @param containerDiv The container div.\n * @param pTPair The PTpair.\n */\nfunction addP(containerDiv: HTMLDivElement, pTPair: PTpair): void {\n    let pInputDiv: HTMLDivElement = createLabelWithInput(\"number\", PTpair.tagName + \"_\" + \"P\", boundary1, (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (isNumeric(event.target.value)) {\n                pTPair.setP(parseFloat(event.target.value));\n                console.log(\"Set P to \" + event.target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                event.target.value = pTPair.getP().toString();\n            }\n            resizeInputElement(event.target);\n        }\n    }, pTPair.getP().toString(), \"P\");\n    let pInputElement: HTMLInputElement = pInputDiv.querySelector('input') as HTMLInputElement;\n    pInputElement.value = pTPair.getP().toString();\n    resizeInputElement(pInputElement);\n    containerDiv.appendChild(pInputDiv);\n}\n\n/**\n * @param containerDiv The container div.\n * @param pTPair The PTpair.\n */\nfunction addT(containerDiv: HTMLDivElement, pTPair: PTpair): void {\n    let tInputDiv: HTMLDivElement = createLabelWithInput(\"number\", PTpair.tagName + \"_\" + \"T\", boundary1, (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (isNumeric(event.target.value)) {\n                pTPair.setT(parseFloat(event.target.value));\n                console.log(\"Set T to \" + event.target.value);\n            } else {\n                alert(\"Value is not numeric, resetting...\");\n                event.target.value = pTPair.getT().toString();\n            }\n            resizeInputElement(event.target);\n        }\n    }, pTPair.getT().toString(), \"T\");\n    let tInputElement: HTMLInputElement = tInputDiv.querySelector('input') as HTMLInputElement;\n    tInputElement.value = pTPair.getT().toString();\n    resizeInputElement(tInputElement);\n    containerDiv.appendChild(tInputDiv);\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addExcessReactantConc(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + ExcessReactantConc.tagName, boundary1);\n    pTPairDiv.append(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let excessReactantConcLabel: HTMLLabelElement = document.createElement('label');\n        excessReactantConcLabel.textContent = \"excessReactantConc: \";\n        pTPairDiv.appendChild(excessReactantConcLabel);\n        let excessReactantConcInput: HTMLInputElement = createInput(\"number\", PTpair.tagName + \"_\" + ExcessReactantConc.tagName, boundary1) as HTMLInputElement;\n        excessReactantConcInput.value = NaN.toString();\n        excessReactantConcInput.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setExcessReactantConc(event.target.value);\n                console.log(\"Set excessReactantConc to \" + event.target.value);\n                resizeInputElement(event.target);\n            }\n        });\n        resizeInputElement(excessReactantConcInput);\n        pTPairDiv.appendChild(excessReactantConcInput);\n        // Add a remove button.\n        let removeButton: HTMLButtonElement = createButton(removeSymbol, boundary1);\n        removeButton.addEventListener('click', () => {\n            pTPairDiv.removeChild(excessReactantConcLabel);\n            pTPairDiv.removeChild(excessReactantConcInput);\n            pTPairDiv.removeChild(removeButton);\n            addExcessReactantConc(pTPairDiv, pTPair)\n        });\n        pTPairDiv.appendChild(removeButton);\n        // Remove the add button.\n        pTPairDiv.removeChild(button);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addPercentExcessReactantConc(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" percentExcessReactantConc\", boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let percentExcessReactantConcLabel: HTMLLabelElement = document.createElement('label');\n        percentExcessReactantConcLabel.textContent = \"percentExcessReactantConc: \";\n        pTPairDiv.appendChild(percentExcessReactantConcLabel);\n        let percentExcessReactantConcInput: HTMLInputElement = createInput(\"number\", PTpair.tagName + \"_\" + \"percentExcessReactantConc\", boundary1) as HTMLInputElement;\n        percentExcessReactantConcInput.value = NaN.toString();\n        percentExcessReactantConcInput.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setPercentExcessReactantConc(event.target.value);\n                console.log(\"Set percentExcessReactantConc to \" + event.target.value);\n                resizeInputElement(event.target);\n            }\n        });\n        resizeInputElement(percentExcessReactantConcInput);\n        pTPairDiv.appendChild(percentExcessReactantConcInput);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addPrecision(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + \"precision\", boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let precisionLabel: HTMLLabelElement = document.createElement('label');\n        precisionLabel.textContent = \"Precision: \";\n        pTPairDiv.appendChild(precisionLabel);\n        let precisionInput: HTMLInputElement = createInput(\"number\", PTpair.tagName + \"_\" + \"precision\", boundary1) as HTMLInputElement;\n        precisionInput.value = NaN.toString();\n        precisionInput.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                pTPair.setPrecision(event.target.value);\n                console.log(\"Set Precision to \" + event.target.value);\n                resizeInputElement(event.target);\n            }\n        });\n        resizeInputElement(precisionInput);\n        pTPairDiv.appendChild(precisionInput);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addBathGas(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + BathGas.tagName, boundary1);\n    pTPairDiv.appendChild(button);\n    // Add event listener to the addBathGasButton.\n    button.addEventListener('click', () => {\n        let bathGasDiv: HTMLDivElement = document.createElement(\"div\");\n        let bathGas: BathGas = new BathGas(new Map(), \"\");\n        pTPair.setBathGas(bathGas);\n        let bathGasLabel: HTMLLabelElement = document.createElement('label');\n        bathGasLabel.textContent = BathGas.tagName + \": \";\n        bathGasDiv.appendChild(bathGasLabel);\n        pTPairDiv.insertBefore(bathGasDiv, button);\n        // Create a HTMLSelectInput for the BathGas.\n        // Get the ids of all the molecules.\n        let moleculeIDs: Set<string> = new Set(molecules.keys());\n        let selectElement: HTMLSelectElement = createSelectElement(Array.from(moleculeIDs), BathGas.tagName,\n            PTs.tagName + \"_\" + BathGas.tagName, boundary1);\n        // Set the initial value.\n        selectElement.value = bathGas.value;\n        // Add event listener to selectElement.\n        selectElement.addEventListener('change', (event) => {\n            if (event.target instanceof HTMLSelectElement) {\n                bathGas.value = event.target.value;\n                console.log(\"Added \" + event.target.value + \" as a \" + BathGas.tagName);\n                resizeSelectElement(event.target);\n            }\n        });\n        resizeSelectElement(selectElement);\n        bathGasDiv.appendChild(selectElement);\n        pTPairDiv.insertBefore(bathGasDiv, button);\n        pTPairDiv.removeChild(button);\n    });\n}\n\n/**\n * @param pTPairDiv The PTpair div.\n * @param pTPair The PTpair.\n */\nfunction addExperimentRateButton(pTPairDiv: HTMLDivElement, pTPair: PTpair): void {\n    let button: HTMLButtonElement = createButton(addString + \" \" + ExperimentRate.tagName, boundary1);\n    //let addExperimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n    //addExperimentRateDiv.appendChild(addExperimentRateButton);\n    // Add event listener to the addExperimentRateButton.\n    button.addEventListener('click', () => {\n        let experimentRateDiv: HTMLDivElement = document.createElement(\"div\");\n        experimentRateDiv.style.marginLeft = margin5;\n        let experimentRate: ExperimentRate = new ExperimentRate(new Map(), NaN);\n        pTPair.setExperimentRate(experimentRate);\n        // Create a new div element for the input.\n        let id = PTpair.tagName + \"_\" + ExperimentRate.tagName;\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id, boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(experimentRate, event.target);\n            }\n        }, \"\", ExperimentRate.tagName);\n        Object.assign(inputDiv.style, level3);\n        pTPairDiv.insertBefore(experimentRateDiv, button);\n        pTPairDiv.removeChild(button);\n    });\n    /*\n    pTsDiv.appendChild(button);\n    pTPairDiv.appendChild(button);\n    // Add the pTPairDiv to the pTsDiv.\n    pTsDiv.insertBefore(pTPairDiv, addButton);\n    */\n}\n\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */\nfunction processModelParameters(xml: XMLDocument): HTMLDivElement {\n    console.log(ModelParameters.tagName);\n    let modelParametersDiv: HTMLDivElement = document.createElement(\"div\");\n    let xml_modelParameters: Element = getSingularElement(xml, ModelParameters.tagName);\n    let modelParameters: ModelParameters = new ModelParameters(getAttributes(xml_modelParameters));\n    mesmer.setModelParameters(modelParameters);\n    // Process any \"me:grainSize\" element.\n    let xml_grainSizes: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(GrainSize.tagName);\n    if (xml_grainSizes.length > 0) {\n        if (xml_grainSizes.length > 1) {\n            throw new Error(\"Expecting 1 \" + GrainSize.tagName + \" but finding \" + xml_grainSizes.length + \"!\");\n        }\n        let grainSizeAttributes: Map<string, string> = getAttributes(xml_grainSizes[0]);\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSizes[0])));\n        let grainSize: GrainSize = new GrainSize(grainSizeAttributes, value);\n        modelParameters.setGrainSize(grainSize);\n        let grainSizeDiv: HTMLDivElement = createFlexDiv(level1);\n        // Create a new div for the grainSize.\n        let grainSizeId = ModelParameters.tagName + \"_\" + GrainSize.tagName;\n        let grainSizeInputDiv: HTMLDivElement = createLabelWithInput(\"number\", grainSizeId, boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(grainSize, event.target);\n                resizeInputElement(event.target);\n            }\n        }, value.toString(), GrainSize.tagName);\n        resizeInputElement(grainSizeInputDiv.querySelector('input') as HTMLInputElement);\n        grainSizeDiv.appendChild(grainSizeInputDiv);\n        // Add any units\n        addAnyUnits(undefined, grainSizeAttributes, grainSizeDiv, ModelParameters.tagName + \"_\" + GrainSize.tagName, GrainSize.tagName, boundary1);\n        modelParametersDiv.appendChild(grainSizeDiv);\n    }\n    // Process any \"me:automaticallySetMaxEne\" element.\n    let xml_automaticallySetMaxEnes: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(AutomaticallySetMaxEne.tagName);\n    if (xml_automaticallySetMaxEnes.length > 0) {\n        if (xml_automaticallySetMaxEnes.length > 1) {\n            throw new Error(\"Expecting 1 \" + AutomaticallySetMaxEne.tagName + \" but finding \" + xml_automaticallySetMaxEnes.length + \"!\");\n        }\n        let automaticallySetMaxEneAttributes: Map<string, string> = getAttributes(xml_automaticallySetMaxEnes[0]);\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_automaticallySetMaxEnes[0])));\n        let automaticallySetMaxEne: AutomaticallySetMaxEne = new AutomaticallySetMaxEne(automaticallySetMaxEneAttributes, value);\n        modelParameters.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n        // Create a new div for the automaticallySetMaxEne.\n        let automaticallySetMaxEneId = ModelParameters.tagName + \"_\" + AutomaticallySetMaxEne.tagName;\n        let automaticallySetMaxEneInputDiv: HTMLDivElement = createLabelWithInput(\"number\", automaticallySetMaxEneId, boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(automaticallySetMaxEne, event.target);\n                resizeInputElement(event.target);\n            }\n        }, value.toString(), AutomaticallySetMaxEne.tagName);\n        resizeInputElement(automaticallySetMaxEneInputDiv.querySelector('input') as HTMLInputElement);\n        Object.assign(automaticallySetMaxEneInputDiv.style, level1);\n        modelParametersDiv.appendChild(automaticallySetMaxEneInputDiv);\n        // Add any units\n        addAnyUnits(undefined, automaticallySetMaxEneAttributes, modelParametersDiv, ModelParameters.tagName + \"_\" + AutomaticallySetMaxEne.tagName, AutomaticallySetMaxEne.tagName, boundary1);\n    }\n\n    // Process any \"me:energyAboveTheTopHill\" element.\n    let xml_energyAboveTheTopHills: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(EnergyAboveTheTopHill.tagName);\n    if (xml_energyAboveTheTopHills.length > 0) {\n        if (xml_energyAboveTheTopHills.length > 1) {\n            throw new Error(\"Expecting 1 \" + EnergyAboveTheTopHill.tagName + \" but finding \" + xml_energyAboveTheTopHills.length + \"!\");\n        }\n        let energyAboveTheTopHillAttributes: Map<string, string> = getAttributes(xml_energyAboveTheTopHills[0]);\n        let energyAboveTheTopHillValue: number = parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHills[0])));\n        let energyAboveTheTopHill: EnergyAboveTheTopHill = new EnergyAboveTheTopHill(energyAboveTheTopHillAttributes,\n            energyAboveTheTopHillValue);\n        modelParameters.setEnergyAboveTheTopHill(energyAboveTheTopHill);\n        // Create a new div for the energyAboveTheTopHill.\n        let energyAboveTheTopHillId = ModelParameters.tagName + \"_\" + EnergyAboveTheTopHill.tagName;\n        let energyAboveTheTopHillInputDiv: HTMLDivElement = createLabelWithInput(\"number\", energyAboveTheTopHillId, boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(energyAboveTheTopHill, event.target);\n                resizeInputElement(event.target);\n            }\n        }, energyAboveTheTopHill.value.toString(), EnergyAboveTheTopHill.tagName);\n        resizeInputElement(energyAboveTheTopHillInputDiv.querySelector('input') as HTMLInputElement);\n        Object.assign(energyAboveTheTopHillInputDiv.style, level1);\n        modelParametersDiv.appendChild(energyAboveTheTopHillInputDiv);\n        // Add any units\n        addAnyUnits(undefined, energyAboveTheTopHillAttributes, modelParametersDiv, ModelParameters.tagName + \"_\" + EnergyAboveTheTopHill.tagName, EnergyAboveTheTopHill.tagName, boundary1);\n    }\n\n    // Process any \"me:maxTemperature\" element.\n    let xml_maxTemperatures: HTMLCollectionOf<Element> = xml_modelParameters.getElementsByTagName(MaxTemperature.tagName);\n    if (xml_maxTemperatures.length > 0) {\n        if (xml_maxTemperatures.length > 1) {\n            throw new Error(\"Expecting 1 \" + MaxTemperature.tagName + \" but finding \" + xml_maxTemperatures.length + \"!\");\n        }\n        let maxTemperatureAttributes: Map<string, string> = getAttributes(xml_maxTemperatures[0]);\n        let maxTemperatureValue: number = parseFloat(getNodeValue(getFirstChildNode(xml_maxTemperatures[0])));\n        let maxTemperature: MaxTemperature = new MaxTemperature(maxTemperatureAttributes, maxTemperatureValue);\n        modelParameters.setMaxTemperature(maxTemperature);\n        // Create a new div for the maxTemperature.\n        let maxTemperatureId = ModelParameters.tagName + \"_\" + MaxTemperature.tagName;\n        let maxTemperatureInputDiv: HTMLDivElement = createLabelWithInput(\"number\", maxTemperatureId, boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(maxTemperature, event.target);\n                resizeInputElement(event.target);\n            }\n        }, maxTemperature.value.toString(), MaxTemperature.tagName);\n        resizeInputElement(maxTemperatureInputDiv.querySelector('input') as HTMLInputElement);\n        Object.assign(modelParametersDiv.style, level1);\n        modelParametersDiv.appendChild(maxTemperatureInputDiv);\n        // Add any units\n        addAnyUnits(undefined, maxTemperatureAttributes, modelParametersDiv, ModelParameters.tagName + \"_\" + MaxTemperature.tagName, MaxTemperature.tagName, boundary1);\n    }\n\n    return modelParametersDiv;\n}\n\n/**\n * Parses xml to initialise controls.\n * @param xml The XML document.\n * @returns The controls div.\n * \n * Tag control options:\n * me:calculateRateCoefficientsOnly\n * me:printCellDOS\n * me:printCellTransitionStateFlux\n * me:printReactionOperatorColumnSums\n * me:printGrainBoltzmann\n * me:printGrainDOS\n * me:printGrainkbE\n * me:printGrainkfE\n * me:printTSsos\n * me:printGrainedSpeciesProfile\n * me:printGrainTransitionStateFlux\n * me:printReactionOperatorSize\n * me:printSpeciesProfile\n * me:printPhenomenologicalEvolution\n * me:printTunnelingCoefficients\n * me:printCrossingCoefficients\n * me:testDOS\n * me:testRateConstants\n * me:useTheSameCellNumberForAllConditions\n * me:hideInactive\n * me:ForceMacroDetailedBalance\n * \n * TagWithAttribute control options:\n * me:testMicroRates\n * \n * StringNode control options:\n * me:calcMethod \"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\", \"ThermodynamicTable\", \"sensitivityAnalysis\"\n * \n * NumberNode control options:\n * me:eigenvalues\n * me:shortestTimeOfInterest\n * me:MaximumEvolutionTime\n * me:automaticallySetMaxEne\n * me:diagramEnergyOffset\n */\nfunction processControl(xml: XMLDocument): HTMLDivElement {\n    console.log(Control.tagName);\n    // Create div to contain the controls.\n    let controlsDiv: HTMLDivElement = document.createElement(\"div\");\n    // Get the XML \"me:control\" element.\n    let xml_control: Element = getSingularElement(xml, Control.tagName);\n    let control: Control = new Control(getAttributes(xml_control));\n    mesmer.setControl(control);\n\n    // me:calculateRateCoefficientsOnly\n    let calculateRateCoefficientsOnlyDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(calculateRateCoefficientsOnlyDiv);\n    let xml_calculateRateCoefficientsOnly: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(CalculateRateCoefficientsOnly.tagName);\n    // Create a input checkbox for the CalculateRateCoefficientsOnly.\n    let calculateRateCoefficientsOnlyLabel: HTMLLabelElement = document.createElement(\"label\");\n    calculateRateCoefficientsOnlyDiv.appendChild(calculateRateCoefficientsOnlyLabel);\n    calculateRateCoefficientsOnlyLabel.textContent = CalculateRateCoefficientsOnly.tagName;\n    let calculateRateCoefficientsOnlyInput: HTMLInputElement = document.createElement(\"input\");\n    calculateRateCoefficientsOnlyDiv.appendChild(calculateRateCoefficientsOnlyInput);\n    calculateRateCoefficientsOnlyInput.type = \"checkbox\";\n    calculateRateCoefficientsOnlyInput.id = CalculateRateCoefficientsOnly.tagName;\n    if (xml_calculateRateCoefficientsOnly.length == 1) {\n        calculateRateCoefficientsOnlyInput.checked = true;\n        control.setCalculateRateCoefficientsOnly(new CalculateRateCoefficientsOnly());\n    } else {\n        if (xml_calculateRateCoefficientsOnly.length > 1) {\n            console.warn(\"xml_calculateRateCoefficientsOnly.length=\" + xml_calculateRateCoefficientsOnly.length);\n        }\n    }\n    calculateRateCoefficientsOnlyInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setCalculateRateCoefficientsOnly(new CalculateRateCoefficientsOnly());\n            } else {\n                control.removeCalculateRateCoefficientsOnly();\n            }\n        }\n    });\n\n    // me:printCellDOS\n    let printCellDOSDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printCellDOSDiv);\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellDOS.tagName);\n    // Create a input checkbox for the PrintCellDOS.\n    let printCellDOSLabel: HTMLLabelElement = document.createElement(\"label\");\n    printCellDOSDiv.appendChild(printCellDOSLabel);\n    printCellDOSLabel.textContent = PrintCellDOS.tagName;\n    let printCellDOSInput: HTMLInputElement = document.createElement(\"input\");\n    printCellDOSDiv.appendChild(printCellDOSInput);\n    printCellDOSInput.type = \"checkbox\";\n    printCellDOSInput.id = PrintCellDOS.tagName;\n    if (xml_printCellDOS.length == 1) {\n        printCellDOSInput.checked = true;\n        control.setPrintCellDOS(new PrintCellDOS());\n    } else {\n        if (xml_printCellDOS.length > 1) {\n            console.warn(\"xml_printCellDOS.length=\" + xml_printCellDOS.length);\n        }\n    }\n    printCellDOSInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintCellDOS(new PrintCellDOS());\n            } else {\n                control.removePrintCellDOS();\n            }\n        }\n    });\n\n    // me:printCellTransitionStateFlux\n    let printCellTransitionStateFluxDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printCellTransitionStateFluxDiv);\n    let xml_printCellTransitionStateFlux: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellTransitionStateFlux.tagName);\n    // Create a input checkbox for the PrintCellTransitionStateFlux.\n    let printCellTransitionStateFluxLabel: HTMLLabelElement = document.createElement(\"label\");\n    printCellTransitionStateFluxDiv.appendChild(printCellTransitionStateFluxLabel);\n    printCellTransitionStateFluxLabel.textContent = PrintCellTransitionStateFlux.tagName;\n    let printCellTransitionStateFluxInput: HTMLInputElement = document.createElement(\"input\");\n    printCellTransitionStateFluxDiv.appendChild(printCellTransitionStateFluxInput);\n    printCellTransitionStateFluxInput.type = \"checkbox\";\n    printCellTransitionStateFluxInput.id = PrintCellTransitionStateFlux.tagName;\n    if (xml_printCellTransitionStateFlux.length == 1) {\n        printCellTransitionStateFluxInput.checked = true;\n        control.setPrintCellTransitionStateFlux(new PrintCellTransitionStateFlux());\n    } else {\n        if (xml_printCellTransitionStateFlux.length > 1) {\n            console.warn(\"xml_printCellTransitionStateFlux.length=\" + xml_printCellTransitionStateFlux.length);\n        }\n    }\n    printCellTransitionStateFluxInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintCellTransitionStateFlux(new PrintCellTransitionStateFlux());\n            } else {\n                control.removePrintCellTransitionStateFlux();\n            }\n        }\n    });\n\n    // me:printReactionOperatorColumnSums\n    let printReactionOperatorColumnSumsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printReactionOperatorColumnSumsDiv);\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorColumnSums.tagName);\n    // Create a input checkbox for the PrintReactionOperatorColumnSums.\n    let printReactionOperatorColumnSumsLabel: HTMLLabelElement = document.createElement(\"label\");\n    printReactionOperatorColumnSumsDiv.appendChild(printReactionOperatorColumnSumsLabel);\n    printReactionOperatorColumnSumsLabel.textContent = PrintReactionOperatorColumnSums.tagName;\n    let printReactionOperatorColumnSumsInput: HTMLInputElement = document.createElement(\"input\");\n    printReactionOperatorColumnSumsDiv.appendChild(printReactionOperatorColumnSumsInput);\n    printReactionOperatorColumnSumsInput.type = \"checkbox\";\n    printReactionOperatorColumnSumsInput.id = PrintReactionOperatorColumnSums.tagName;\n    if (xml_printReactionOperatorColumnSums.length == 1) {\n        printReactionOperatorColumnSumsInput.checked = true;\n        control.setPrintReactionOperatorColumnSums(new PrintReactionOperatorColumnSums());\n    } else {\n        if (xml_printReactionOperatorColumnSums.length > 1) {\n            console.warn(\"xml_printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n        }\n    }\n    printReactionOperatorColumnSumsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintReactionOperatorColumnSums(new PrintReactionOperatorColumnSums());\n            } else {\n                control.removePrintReactionOperatorColumnSums();\n            }\n        }\n    });\n\n    // me:printGrainBoltzmann\n    let printGrainBoltzmannDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainBoltzmannDiv);\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainBoltzmann.tagName);\n    // Create a input checkbox for the PrintGrainBoltzmann.\n    let printGrainBoltzmannLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainBoltzmannDiv.appendChild(printGrainBoltzmannLabel);\n    printGrainBoltzmannLabel.textContent = PrintGrainBoltzmann.tagName;\n    let printGrainBoltzmannInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainBoltzmannDiv.appendChild(printGrainBoltzmannInput);\n    printGrainBoltzmannInput.type = \"checkbox\";\n    printGrainBoltzmannInput.id = PrintGrainBoltzmann.tagName;\n    if (xml_printGrainBoltzmann.length == 1) {\n        printGrainBoltzmannInput.checked = true;\n        control.setPrintGrainBoltzmann(new PrintGrainBoltzmann());\n    } else {\n        if (xml_printGrainBoltzmann.length > 1) {\n            console.warn(\"xml_printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n        }\n    }\n    printGrainBoltzmannInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainBoltzmann(new PrintGrainBoltzmann());\n            } else {\n                control.removePrintGrainBoltzmann();\n            }\n        }\n    });\n\n    // me:printGrainDOS\n    let printGrainDOSDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainDOSDiv);\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainDOS.tagName);\n    // Create a input checkbox for the PrintGrainDOS.\n    let printGrainDOSLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainDOSDiv.appendChild(printGrainDOSLabel);\n    printGrainDOSLabel.textContent = PrintGrainDOS.tagName;\n    let printGrainDOSInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainDOSDiv.appendChild(printGrainDOSInput);\n    printGrainDOSInput.type = \"checkbox\";\n    printGrainDOSInput.id = PrintGrainDOS.tagName;\n    if (xml_printGrainDOS.length == 1) {\n        printGrainDOSInput.checked = true;\n        control.setPrintGrainDOS(new PrintGrainDOS());\n    } else {\n        if (xml_printGrainDOS.length > 1) {\n            console.warn(\"xml_printGrainDOS.length=\" + xml_printGrainDOS.length);\n        }\n    }\n    printGrainDOSInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainDOS(new PrintGrainDOS());\n            } else {\n                control.removePrintGrainDOS();\n            }\n        }\n    });\n\n    // me:printGrainkbE\n    let printGrainkbEDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainkbEDiv);\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkbE.tagName);\n    // Create a input checkbox for the PrintGrainkbE.\n    let printGrainkbELabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainkbEDiv.appendChild(printGrainkbELabel);\n    printGrainkbELabel.textContent = PrintGrainkbE.tagName;\n    let printGrainkbEInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainkbEDiv.appendChild(printGrainkbEInput);\n    printGrainkbEInput.type = \"checkbox\";\n    printGrainkbEInput.id = PrintGrainkbE.tagName;\n    if (xml_printGrainkbE.length == 1) {\n        printGrainkbEInput.checked = true;\n        control.setPrintGrainkbE(new PrintGrainkbE());\n    } else {\n        if (xml_printGrainkbE.length > 1) {\n            console.warn(\"xml_printGrainkbE.length=\" + xml_printGrainkbE.length);\n        }\n    }\n    printGrainkbEInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainkbE(new PrintGrainkbE());\n            } else {\n                control.removePrintGrainkbE();\n            }\n        }\n    });\n\n    // me:printGrainkfE\n    let printGrainkfEDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainkfEDiv);\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkfE.tagName);\n    // Create a input checkbox for the PrintGrainkfE.\n    let printGrainkfELabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainkfEDiv.appendChild(printGrainkfELabel);\n    printGrainkfELabel.textContent = PrintGrainkfE.tagName;\n    let printGrainkfEInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainkfEDiv.appendChild(printGrainkfEInput);\n    printGrainkfEInput.type = \"checkbox\";\n    printGrainkfEInput.id = PrintGrainkfE.tagName;\n    if (xml_printGrainkfE.length == 1) {\n        printGrainkfEInput.checked = true;\n        control.setPrintGrainkfE(new PrintGrainkfE());\n    } else {\n        if (xml_printGrainkfE.length > 1) {\n            console.warn(\"xml_printGrainkfE.length=\" + xml_printGrainkfE.length);\n        }\n    }\n    printGrainkfEInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainkfE(new PrintGrainkfE());\n            } else {\n                control.removePrintGrainkfE();\n            }\n        }\n    });\n\n    // me:printTSsos\n    let printTSsosDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printTSsosDiv);\n    let xml_printTSsos: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTSsos.tagName);\n    // Create a input checkbox for the PrintTSsos.\n    let printTSsosLabel: HTMLLabelElement = document.createElement(\"label\");\n    printTSsosDiv.appendChild(printTSsosLabel);\n    printTSsosLabel.textContent = PrintTSsos.tagName;\n    let printTSsosInput: HTMLInputElement = document.createElement(\"input\");\n    printTSsosDiv.appendChild(printTSsosInput);\n    printTSsosInput.type = \"checkbox\";\n    printTSsosInput.id = PrintTSsos.tagName;\n    if (xml_printTSsos.length == 1) {\n        printTSsosInput.checked = true;\n        control.setPrintTSsos(new PrintTSsos());\n    } else {\n        if (xml_printTSsos.length > 1) {\n            console.warn(\"xml_printTSsos.length=\" + xml_printTSsos.length);\n        }\n    }\n    printTSsosInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintTSsos(new PrintTSsos());\n            } else {\n                control.removePrintTSsos();\n            }\n        }\n    });\n\n    // me:printGrainedSpeciesProfile\n    let printGrainedSpeciesProfileDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainedSpeciesProfileDiv);\n    let xml_printGrainedSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainedSpeciesProfile.tagName);\n    // Create a input checkbox for the PrintGrainedSpeciesProfile.\n    let printGrainedSpeciesProfileLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainedSpeciesProfileDiv.appendChild(printGrainedSpeciesProfileLabel);\n    printGrainedSpeciesProfileLabel.textContent = PrintGrainedSpeciesProfile.tagName;\n    let printGrainedSpeciesProfileInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainedSpeciesProfileDiv.appendChild(printGrainedSpeciesProfileInput);\n    printGrainedSpeciesProfileInput.type = \"checkbox\";\n    printGrainedSpeciesProfileInput.id = PrintGrainedSpeciesProfile.tagName;\n    if (xml_printGrainedSpeciesProfile.length == 1) {\n        printGrainedSpeciesProfileInput.checked = true;\n        control.setPrintGrainedSpeciesProfile(new PrintGrainedSpeciesProfile());\n    } else {\n        if (xml_printGrainedSpeciesProfile.length > 1) {\n            console.warn(\"xml_printGrainedSpeciesProfile.length=\" + xml_printGrainedSpeciesProfile.length);\n        }\n    }\n    printGrainedSpeciesProfileInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainedSpeciesProfile(new PrintGrainedSpeciesProfile());\n            } else {\n                control.removePrintGrainedSpeciesProfile();\n            }\n        }\n    });\n\n    // me:printGrainTransitionStateFlux\n    let printGrainTransitionStateFluxDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printGrainTransitionStateFluxDiv);\n    let xml_printGrainTransitionStateFlux: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainTransitionStateFlux.tagName);\n    // Create a input checkbox for the PrintGrainTransitionStateFlux.\n    let printGrainTransitionStateFluxLabel: HTMLLabelElement = document.createElement(\"label\");\n    printGrainTransitionStateFluxDiv.appendChild(printGrainTransitionStateFluxLabel);\n    printGrainTransitionStateFluxLabel.textContent = PrintGrainTransitionStateFlux.tagName;\n    let printGrainTransitionStateFluxInput: HTMLInputElement = document.createElement(\"input\");\n    printGrainTransitionStateFluxDiv.appendChild(printGrainTransitionStateFluxInput);\n    printGrainTransitionStateFluxInput.type = \"checkbox\";\n    printGrainTransitionStateFluxInput.id = PrintGrainTransitionStateFlux.tagName;\n    if (xml_printGrainTransitionStateFlux.length == 1) {\n        printGrainTransitionStateFluxInput.checked = true;\n        control.setPrintGrainTransitionStateFlux(new PrintGrainTransitionStateFlux());\n    } else {\n        if (xml_printGrainTransitionStateFlux.length > 1) {\n            console.warn(\"xml_printGrainTransitionStateFlux.length=\" + xml_printGrainTransitionStateFlux.length);\n        }\n    }\n    printGrainTransitionStateFluxInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintGrainTransitionStateFlux(new PrintGrainTransitionStateFlux());\n            } else {\n                control.removePrintGrainTransitionStateFlux();\n            }\n        }\n    });\n\n    // me:printReactionOperatorSize\n    let printReactionOperatorSizeDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printReactionOperatorSizeDiv);\n    let xml_printReactionOperatorSize: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorSize.tagName);\n    // Create a input checkbox for the PrintReactionOperatorSize.\n    let printReactionOperatorSizeLabel: HTMLLabelElement = document.createElement(\"label\");\n    printReactionOperatorSizeDiv.appendChild(printReactionOperatorSizeLabel);\n    printReactionOperatorSizeLabel.textContent = PrintReactionOperatorSize.tagName;\n    let printReactionOperatorSizeInput: HTMLInputElement = document.createElement(\"input\");\n    printReactionOperatorSizeDiv.appendChild(printReactionOperatorSizeInput);\n    printReactionOperatorSizeInput.type = \"checkbox\";\n    printReactionOperatorSizeInput.id = PrintReactionOperatorSize.tagName;\n    if (xml_printReactionOperatorSize.length == 1) {\n        printReactionOperatorSizeInput.checked = true;\n        control.setPrintReactionOperatorSize(new PrintReactionOperatorSize());\n    } else {\n        if (xml_printReactionOperatorSize.length > 1) {\n            console.warn(\"xml_printReactionOperatorSize.length=\" + xml_printReactionOperatorSize.length);\n        }\n    }\n    printReactionOperatorSizeInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintReactionOperatorSize(new PrintReactionOperatorSize());\n            } else {\n                control.removePrintReactionOperatorSize();\n            }\n        }\n    });\n\n    // me:printSpeciesProfile\n    let printSpeciesProfileDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printSpeciesProfileDiv);\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintSpeciesProfile.tagName);\n    // Create a input checkbox for the PrintSpeciesProfile.\n    let printSpeciesProfileLabel: HTMLLabelElement = document.createElement(\"label\");\n    printSpeciesProfileDiv.appendChild(printSpeciesProfileLabel);\n    printSpeciesProfileLabel.textContent = PrintSpeciesProfile.tagName;\n    let printSpeciesProfileInput: HTMLInputElement = document.createElement(\"input\");\n    printSpeciesProfileDiv.appendChild(printSpeciesProfileInput);\n    printSpeciesProfileInput.type = \"checkbox\";\n    printSpeciesProfileInput.id = PrintSpeciesProfile.tagName;\n    if (xml_printSpeciesProfile.length == 1) {\n        printSpeciesProfileInput.checked = true;\n        control.setPrintSpeciesProfile(new PrintSpeciesProfile());\n    } else {\n        if (xml_printSpeciesProfile.length > 1) {\n            console.warn(\"xml_printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n        }\n    }\n    printSpeciesProfileInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintSpeciesProfile(new PrintSpeciesProfile());\n            } else {\n                control.removePrintSpeciesProfile();\n            }\n        }\n    });\n\n    // me:printPhenomenologicalEvolution\n    let printPhenomenologicalEvolutionDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printPhenomenologicalEvolutionDiv);\n    let xml_printPhenomenologicalEvolution: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintPhenomenologicalEvolution.tagName);\n    // Create a input checkbox for the PrintPhenomenologicalEvolution.\n    let printPhenomenologicalEvolutionLabel: HTMLLabelElement = document.createElement(\"label\");\n    printPhenomenologicalEvolutionDiv.appendChild(printPhenomenologicalEvolutionLabel);\n    printPhenomenologicalEvolutionLabel.textContent = PrintPhenomenologicalEvolution.tagName;\n    let printPhenomenologicalEvolutionInput: HTMLInputElement = document.createElement(\"input\");\n    printPhenomenologicalEvolutionDiv.appendChild(printPhenomenologicalEvolutionInput);\n    printPhenomenologicalEvolutionInput.type = \"checkbox\";\n    printPhenomenologicalEvolutionInput.id = PrintPhenomenologicalEvolution.tagName;\n    if (xml_printPhenomenologicalEvolution.length == 1) {\n        printPhenomenologicalEvolutionInput.checked = true;\n        control.setPrintPhenomenologicalEvolution(new PrintPhenomenologicalEvolution());\n    } else {\n        if (xml_printPhenomenologicalEvolution.length > 1) {\n            console.warn(\"xml_printPhenomenologicalEvolution.length=\" + xml_printPhenomenologicalEvolution.length);\n        }\n    }\n    printPhenomenologicalEvolutionInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintPhenomenologicalEvolution(new PrintPhenomenologicalEvolution());\n            } else {\n                control.removePrintPhenomenologicalEvolution();\n            }\n        }\n    });\n\n    // me:printTunnelingCoefficients\n    let printTunnelingCoefficientsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printTunnelingCoefficientsDiv);\n    let xml_printTunnelingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTunnelingCoefficients.tagName);\n    // Create a input checkbox for the PrintTunnelingCoefficients.\n    let printTunnelingCoefficientsLabel: HTMLLabelElement = document.createElement(\"label\");\n    printTunnelingCoefficientsDiv.appendChild(printTunnelingCoefficientsLabel);\n    printTunnelingCoefficientsLabel.textContent = PrintTunnelingCoefficients.tagName;\n    let printTunnelingCoefficientsInput: HTMLInputElement = document.createElement(\"input\");\n    printTunnelingCoefficientsDiv.appendChild(printTunnelingCoefficientsInput);\n    printTunnelingCoefficientsInput.type = \"checkbox\";\n    printTunnelingCoefficientsInput.id = PrintTunnelingCoefficients.tagName;\n    if (xml_printTunnelingCoefficients.length == 1) {\n        printTunnelingCoefficientsInput.checked = true;\n        control.setPrintTunnelingCoefficients(new PrintTunnelingCoefficients());\n    } else {\n        if (xml_printTunnelingCoefficients.length > 1) {\n            console.warn(\"xml_printTunnelingCoefficients.length=\" + xml_printTunnelingCoefficients.length);\n        }\n    }\n    printTunnelingCoefficientsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintTunnelingCoefficients(new PrintTunnelingCoefficients());\n            } else {\n                control.removePrintTunnelingCoefficients();\n            }\n        }\n    });\n\n    // me:printCrossingCoefficients\n    let printCrossingCoefficientsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(printCrossingCoefficientsDiv);\n    let xml_printCrossingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCrossingCoefficients.tagName);\n    // Create a input checkbox for the PrintCrossingCoefficients.\n    let printCrossingCoefficientsLabel: HTMLLabelElement = document.createElement(\"label\");\n    printCrossingCoefficientsDiv.appendChild(printCrossingCoefficientsLabel);\n    printCrossingCoefficientsLabel.textContent = PrintCrossingCoefficients.tagName;\n    let printCrossingCoefficientsInput: HTMLInputElement = document.createElement(\"input\");\n    printCrossingCoefficientsDiv.appendChild(printCrossingCoefficientsInput);\n    printCrossingCoefficientsInput.type = \"checkbox\";\n    printCrossingCoefficientsInput.id = PrintCrossingCoefficients.tagName;\n    if (xml_printCrossingCoefficients.length == 1) {\n        printCrossingCoefficientsInput.checked = true;\n        control.setPrintCrossingCoefficients(new PrintCrossingCoefficients());\n    } else {\n        if (xml_printCrossingCoefficients.length > 1) {\n            console.warn(\"xml_printCrossingCoefficients.length=\" + xml_printCrossingCoefficients.length);\n        }\n    }\n    printCrossingCoefficientsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setPrintCrossingCoefficients(new PrintCrossingCoefficients());\n            } else {\n                control.removePrintCrossingCoefficients();\n            }\n        }\n    });\n\n    // me:testDOS\n    let testDOSDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(testDOSDiv);\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestDOS.tagName);\n    // Create a input checkbox for the TestDOS.\n    let testDOSLabel: HTMLLabelElement = document.createElement(\"label\");\n    testDOSDiv.appendChild(testDOSLabel);\n    testDOSLabel.textContent = TestDOS.tagName;\n    let testDOSInput: HTMLInputElement = document.createElement(\"input\");\n    testDOSDiv.appendChild(testDOSInput);\n    testDOSInput.type = \"checkbox\";\n    testDOSInput.id = TestDOS.tagName;\n    if (xml_testDOS.length == 1) {\n        testDOSInput.checked = true;\n        control.setTestDOS(new TestDOS());\n    } else {\n        if (xml_testDOS.length > 1) {\n            console.warn(\"xml_testDOS.length=\" + xml_testDOS.length);\n        }\n    }\n    testDOSInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestDOS(new TestDOS());\n            } else {\n                control.removeTestDOS();\n            }\n        }\n    });\n\n    // me:testRateConstants\n    let testRateConstantsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(testRateConstantsDiv);\n    let xml_testRateConstants: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestRateConstants.tagName);\n    // Create a input checkbox for the TestRateConstants.\n    let testRateConstantsLabel: HTMLLabelElement = document.createElement(\"label\");\n    testRateConstantsDiv.appendChild(testRateConstantsLabel);\n    testRateConstantsLabel.textContent = TestRateConstants.tagName;\n    let testRateConstantsInput: HTMLInputElement = document.createElement(\"input\");\n    testRateConstantsDiv.appendChild(testRateConstantsInput);\n    testRateConstantsInput.type = \"checkbox\";\n    testRateConstantsInput.id = TestRateConstants.tagName;\n    if (xml_testRateConstants.length == 1) {\n        testRateConstantsInput.checked = true;\n        control.setTestRateConstants(new TestRateConstants());\n    } else {\n        if (xml_testRateConstants.length > 1) {\n            console.warn(\"xml_testRateConstants.length=\" + xml_testRateConstants.length);\n        }\n    }\n    testRateConstantsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestRateConstants(new TestRateConstants());\n            } else {\n                control.removeTestRateConstants();\n            }\n        }\n    });\n\n    // me:useTheSameCellNumberForAllConditions\n    let useTheSameCellNumberForAllConditionsDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(useTheSameCellNumberForAllConditionsDiv);\n    let xml_useTheSameCellNumberForAllConditions: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(UseTheSameCellNumberForAllConditions.tagName);\n    // Create a input checkbox for the UseTheSameCellNumberForAllConditions.\n    let useTheSameCellNumberForAllConditionsLabel: HTMLLabelElement = document.createElement(\"label\");\n    useTheSameCellNumberForAllConditionsDiv.appendChild(useTheSameCellNumberForAllConditionsLabel);\n    useTheSameCellNumberForAllConditionsLabel.textContent = UseTheSameCellNumberForAllConditions.tagName;\n    let useTheSameCellNumberForAllConditionsInput: HTMLInputElement = document.createElement(\"input\");\n    useTheSameCellNumberForAllConditionsDiv.appendChild(useTheSameCellNumberForAllConditionsInput);\n    useTheSameCellNumberForAllConditionsInput.type = \"checkbox\";\n    useTheSameCellNumberForAllConditionsInput.id = UseTheSameCellNumberForAllConditions.tagName;\n    if (xml_useTheSameCellNumberForAllConditions.length == 1) {\n        useTheSameCellNumberForAllConditionsInput.checked = true;\n        control.setUseTheSameCellNumberForAllConditions(new UseTheSameCellNumberForAllConditions());\n    } else {\n        if (xml_useTheSameCellNumberForAllConditions.length > 1) {\n            console.warn(\"xml_useTheSameCellNumberForAllConditions.length=\" + xml_useTheSameCellNumberForAllConditions.length);\n        }\n    }\n    useTheSameCellNumberForAllConditionsInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setUseTheSameCellNumberForAllConditions(new UseTheSameCellNumberForAllConditions());\n            } else {\n                control.removeUseTheSameCellNumberForAllConditions();\n            }\n        }\n    });\n\n    // me:hideInactive\n    let hideInactiveDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(hideInactiveDiv);\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(HideInactive.tagName);\n    // Create a input checkbox for the HideInactive.\n    let hideInactiveLabel: HTMLLabelElement = document.createElement(\"label\");\n    hideInactiveDiv.appendChild(hideInactiveLabel);\n    hideInactiveLabel.textContent = HideInactive.tagName;\n    let hideInactiveInput: HTMLInputElement = document.createElement(\"input\");\n    hideInactiveDiv.appendChild(hideInactiveInput);\n    hideInactiveInput.type = \"checkbox\";\n    hideInactiveInput.id = HideInactive.tagName;\n    if (xml_hideInactive.length == 1) {\n        hideInactiveInput.checked = true;\n        control.setHideInactive(new HideInactive());\n    } else {\n        if (xml_hideInactive.length > 1) {\n            console.warn(\"xml_hideInactive.length=\" + xml_hideInactive.length);\n        }\n    }\n    hideInactiveInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setHideInactive(new HideInactive());\n            } else {\n                control.removeHideInactive();\n            }\n        }\n    });\n\n    // me:ForceMacroDetailedBalance\n    let forceMacroDetailedBalanceDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(forceMacroDetailedBalanceDiv);\n    let xml_forceMacroDetailedBalance: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(ForceMacroDetailedBalance.tagName);\n    // Create a input checkbox for the ForceMacroDetailedBalance.\n    let forceMacroDetailedBalanceLabel: HTMLLabelElement = document.createElement(\"label\");\n    forceMacroDetailedBalanceDiv.appendChild(forceMacroDetailedBalanceLabel);\n    forceMacroDetailedBalanceLabel.textContent = ForceMacroDetailedBalance.tagName;\n    let forceMacroDetailedBalanceInput: HTMLInputElement = document.createElement(\"input\");\n    forceMacroDetailedBalanceDiv.appendChild(forceMacroDetailedBalanceInput);\n    forceMacroDetailedBalanceInput.type = \"checkbox\";\n    forceMacroDetailedBalanceInput.id = ForceMacroDetailedBalance.tagName;\n    if (xml_forceMacroDetailedBalance.length == 1) {\n        forceMacroDetailedBalanceInput.checked = true;\n        control.setForceMacroDetailedBalance(new ForceMacroDetailedBalance());\n    } else {\n        if (xml_forceMacroDetailedBalance.length > 1) {\n            console.warn(\"xml_forceMacroDetailedBalance.length=\" + xml_forceMacroDetailedBalance.length);\n        }\n    }\n    forceMacroDetailedBalanceInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setForceMacroDetailedBalance(new ForceMacroDetailedBalance());\n            } else {\n                control.removeForceMacroDetailedBalance();\n            }\n        }\n    });\n\n    // me:testMicroRates\n    let testMicroRatesDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(testMicroRatesDiv);\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestMicroRates.tagName);\n    // Create a input checkbox for the TestMicroRates.\n    let testMicroRatesLabel: HTMLLabelElement = document.createElement(\"label\");\n    testMicroRatesDiv.appendChild(testMicroRatesLabel);\n    testMicroRatesLabel.textContent = TestMicroRates.tagName;\n    let testMicroRatesInput: HTMLInputElement = document.createElement(\"input\");\n    testMicroRatesDiv.appendChild(testMicroRatesInput);\n    testMicroRatesInput.type = \"checkbox\";\n    testMicroRatesInput.id = TestMicroRates.tagName;\n    let testMicroRatesAttributes: Map<string, string>;\n    let testMicroRates: TestMicroRates;\n    if (xml_testMicroRates.length == 1) {\n        testMicroRatesInput.checked = true;\n        testMicroRatesAttributes = getAttributes(xml_testMicroRates[0]);\n        testMicroRates = new TestMicroRates(testMicroRatesAttributes);\n        control.setTestMicroRates(testMicroRates);\n    } else {\n        testMicroRatesAttributes = new Map<string, string>();\n        testMicroRatesAttributes.set(\"Tmax\", \"\");\n        testMicroRatesAttributes.set(\"Tmin\", \"\");\n        testMicroRatesAttributes.set(\"Tstep\", \"\");\n        testMicroRates = new TestMicroRates(testMicroRatesAttributes);\n    }\n    testMicroRatesInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setTestMicroRates(testMicroRates);\n                // Tmax.\n                let idTmax = Control.tagName + \"_\" + TestMicroRates.tagName + \"_Tmax\";\n                // Remove any exising div for tMax.\n                let existingTmaxDiv: HTMLDivElement = document.getElementById(idTmax) as HTMLDivElement;\n                if (existingTmaxDiv != null) {\n                    existingTmaxDiv.remove();\n                }\n                // Create a new div for tMax.\n                let tMax: number = testMicroRates.getTmax();\n                let tMaxInputDiv: HTMLDivElement = createLabelWithInput(\"number\", idTmax + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if (isNumeric(event.target.value)) {\n                            testMicroRates.setTmax(parseFloat(event.target.value));\n                            console.log(\"Set Tmax to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        resizeInputElement(event.target);\n                    }\n                }, tMax.toString(), \"Tmax\");\n                tMaxInputDiv.id = idTmax;\n                resizeInputElement(tMaxInputDiv.querySelector('input') as HTMLInputElement);\n                testMicroRatesDiv.appendChild(tMaxInputDiv);\n                // Tmin.\n                let idTmin = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tMin\";\n                // Remove any exising div for tMin.\n                let existingTminDiv = document.getElementById(idTmin) as HTMLDivElement;\n                if (existingTminDiv != null) {\n                    existingTminDiv.remove();\n                }\n                // Create a new div for the tMin.\n                let tMin: number = testMicroRates.getTmin();\n                let tMinInputDiv: HTMLDivElement = createLabelWithInput(\"number\", idTmin + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if (isNumeric(event.target.value)) {\n                            testMicroRates.setTmin(parseFloat(event.target.value));\n                            console.log(\"Set Tmin to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        resizeInputElement(event.target);\n                    }\n                }, tMin.toString(), \"Tmin\");\n                tMinInputDiv.id = idTmin;\n                resizeInputElement(tMinInputDiv.querySelector('input') as HTMLInputElement);\n                testMicroRatesDiv.appendChild(tMinInputDiv);\n                // Tstep.\n                let idTstep = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tStep\";\n                // Remove any exising div for tStep.\n                let existingTstepDiv = document.getElementById(idTstep) as HTMLDivElement;\n                if (existingTstepDiv != null) {\n                    existingTstepDiv.remove();\n                }\n                // Create a new div for the tStep.\n                let tStep: number = testMicroRates.getTstep();\n                let tStepInputDiv: HTMLDivElement = createLabelWithInput(\"number\", idTstep + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        // Check the value is a number.\n                        if (isNumeric(event.target.value)) {\n                            testMicroRates.setTstep(parseFloat(event.target.value));\n                            console.log(\"Set Tstep to \" + event.target.value);\n                        } else {\n                            alert(\"Value is not numeric, resetting...\");\n                            event.target.value = tMax.toString();\n                        }\n                        resizeInputElement(event.target);\n                    }\n                }, tStep.toString(), \"Tstep\");\n                tStepInputDiv.id = idTstep;\n                resizeInputElement(tStepInputDiv.querySelector('input') as HTMLInputElement);\n                testMicroRatesDiv.appendChild(tStepInputDiv);\n            } else {\n                control.removeTestMicroRates();\n                // Tmax.\n                let idTmax = Control.tagName + \"_\" + TestMicroRates.tagName + \"_Tmax\";\n                // Remove any exising div for tMax.\n                let existingTmaxDiv = document.getElementById(idTmax) as HTMLDivElement;\n                if (existingTmaxDiv != null) {\n                    existingTmaxDiv.remove();\n                }\n                // Tmin.\n                let idTmin = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tMin\";\n                // Remove any exising div for tMin.\n                let existingTminDiv = document.getElementById(idTmin) as HTMLDivElement;\n                if (existingTminDiv != null) {\n                    existingTminDiv.remove();\n                }\n                // Tstep.\n                let idTstep = Control.tagName + \"_\" + TestMicroRates.tagName + \"_tStep\";\n                // Remove any exising div for tStep.\n                let existingTstepDiv = document.getElementById(idTstep) as HTMLDivElement;\n                if (existingTstepDiv != null) {\n                    existingTstepDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:calcMethod\n    let calcMethodDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(calcMethodDiv);\n    let xml_calcMethod: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(CalcMethod.tagName);\n    // Create a input checkbox for the CalcMethod.\n    let calcMethodLabel: HTMLLabelElement = document.createElement(\"label\");\n    calcMethodDiv.appendChild(calcMethodLabel);\n    calcMethodLabel.textContent = CalcMethod.tagName;\n    let calcMethodInput: HTMLInputElement = document.createElement(\"input\");\n    calcMethodDiv.appendChild(calcMethodInput);\n    calcMethodInput.type = \"checkbox\";\n    calcMethodInput.id = CalcMethod.tagName;\n    let calcMethodAttributes: Map<string, string>;\n    let calcMethod: CalcMethod;\n    if (xml_calcMethod.length == 1) {\n        calcMethodInput.checked = true;\n        calcMethodAttributes = getAttributes(xml_calcMethod[0]);\n        let value: string = getNodeValue(getFirstChildNode(xml_calcMethod[0]));\n        calcMethod = new CalcMethod(calcMethodAttributes, value);\n        control.setCalcMethod(calcMethod);\n    } else {\n        calcMethodInput.checked = false;\n        calcMethodAttributes = new Map<string, string>();\n        calcMethod = new CalcMethod(calcMethodAttributes, \"\");\n    }\n    calcMethodInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setCalcMethod(calcMethod);\n                let id = Control.tagName + \"_\" + CalcMethod.tagName + \"_select\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div.\n                let value: string = calcMethod.value;\n                let selectElement: HTMLSelectElement = createSelectElement(CalcMethod.options, value, id, boundary1);\n                selectElement.addEventListener('change', (event) => {\n                    if (event.target instanceof HTMLSelectElement) {\n                        calcMethod.value = event.target.value;\n                        resizeSelectElement(event.target);\n                    }\n                });\n                resizeSelectElement(selectElement);\n                calcMethodDiv.appendChild(selectElement);\n            } else {\n                control.removeCalcMethod();\n                let id = Control.tagName + \"_\" + CalcMethod.tagName + \"_select\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:eigenvalues\n    let eigenvaluesDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(eigenvaluesDiv);\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(Eigenvalues.tagName);\n    // Create a input checkbox for the Eigenvalues.\n    let eigenvaluesLabel: HTMLLabelElement = document.createElement(\"label\");\n    eigenvaluesDiv.appendChild(eigenvaluesLabel);\n    eigenvaluesLabel.textContent = Eigenvalues.tagName;\n    let eigenvaluesInput: HTMLInputElement = document.createElement(\"input\");\n    eigenvaluesDiv.appendChild(eigenvaluesInput);\n    eigenvaluesInput.type = \"checkbox\";\n    eigenvaluesInput.id = Eigenvalues.tagName;\n    let eigenvalues: Eigenvalues;\n    let eigenvaluesAttributes: Map<string, string>;\n    if (xml_eigenvalues.length == 1) {\n        eigenvaluesInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0])));\n        eigenvaluesAttributes = getAttributes(xml_eigenvalues[0]);\n        eigenvalues = new Eigenvalues(eigenvaluesAttributes, value);\n        control.setEigenvalues(eigenvalues);\n        let id = Control.tagName + \"_\" + Eigenvalues.tagName + \"_number\";\n        // Create a new div for the eigenvalues.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(eigenvalues, event.target);\n                resizeInputElement(event.target);\n            }\n        }, eigenvalues.value.toString(), Eigenvalues.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        eigenvaluesDiv.appendChild(inputDiv);\n    } else {\n        eigenvaluesInput.checked = false;\n        eigenvaluesAttributes = new Map<string, string>();\n        eigenvalues = new Eigenvalues(eigenvaluesAttributes, NaN);\n    }\n    eigenvaluesInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setEigenvalues(eigenvalues);\n                let id = Control.tagName + \"_\" + Eigenvalues.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the eigenvalues.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(eigenvalues, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, eigenvalues.value.toString(), Eigenvalues.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                eigenvaluesDiv.appendChild(inputDiv);\n            } else {\n                control.removeEigenvalues();\n                let id = Control.tagName + \"_\" + Eigenvalues.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:shortestTimeOfInterest\n    let shortestTimeOfInterestDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(shortestTimeOfInterestDiv);\n    let xml_shortestTimeOfInterest: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(ShortestTimeOfInterest.tagName);\n    // Create a input checkbox for the ShortestTimeOfInterest.\n    let shortestTimeOfInterestLabel: HTMLLabelElement = document.createElement(\"label\");\n    shortestTimeOfInterestDiv.appendChild(shortestTimeOfInterestLabel);\n    shortestTimeOfInterestLabel.textContent = ShortestTimeOfInterest.tagName;\n    let shortestTimeOfInterestInput: HTMLInputElement = document.createElement(\"input\");\n    shortestTimeOfInterestDiv.appendChild(shortestTimeOfInterestInput);\n    shortestTimeOfInterestInput.type = \"checkbox\";\n    shortestTimeOfInterestInput.id = ShortestTimeOfInterest.tagName;\n    let shortestTimeOfInterest: ShortestTimeOfInterest;\n    let shortestTimeOfInterestAttributes: Map<string, string>;\n    if (xml_shortestTimeOfInterest.length == 1) {\n        shortestTimeOfInterestInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_shortestTimeOfInterest[0])));\n        shortestTimeOfInterestAttributes = getAttributes(xml_shortestTimeOfInterest[0]);\n        shortestTimeOfInterest = new ShortestTimeOfInterest(shortestTimeOfInterestAttributes, value);\n        control.setShortestTimeOfInterest(shortestTimeOfInterest);\n        let id = Control.tagName + \"_\" + ShortestTimeOfInterest.tagName + \"_number\";\n        // Create a new div for the shortestTimeOfInterest.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(shortestTimeOfInterest, event.target);\n                resizeInputElement(event.target);\n            }\n        }, shortestTimeOfInterest.value.toString(), ShortestTimeOfInterest.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        shortestTimeOfInterestDiv.appendChild(inputDiv);\n    } else {\n        shortestTimeOfInterestInput.checked = false;\n        shortestTimeOfInterestAttributes = new Map<string, string>();\n        shortestTimeOfInterest = new ShortestTimeOfInterest(shortestTimeOfInterestAttributes, NaN);\n    }\n    shortestTimeOfInterestInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setShortestTimeOfInterest(shortestTimeOfInterest);\n                let id = Control.tagName + \"_\" + ShortestTimeOfInterest.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the shortestTimeOfInterest.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(shortestTimeOfInterest, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, shortestTimeOfInterest.value.toString(), ShortestTimeOfInterest.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                shortestTimeOfInterestDiv.appendChild(inputDiv);\n            } else {\n                control.removeShortestTimeOfInterest();\n                let id = Control.tagName + \"_\" + ShortestTimeOfInterest.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:MaximumEvolutionTime\n    let maximumEvolutionTimeDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(maximumEvolutionTimeDiv);\n    let xml_maximumEvolutionTime: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(MaximumEvolutionTime.tagName);\n    // Create a input checkbox for the MaximumEvolutionTime.\n    let maximumEvolutionTimeLabel: HTMLLabelElement = document.createElement(\"label\");\n    maximumEvolutionTimeDiv.appendChild(maximumEvolutionTimeLabel);\n    maximumEvolutionTimeLabel.textContent = MaximumEvolutionTime.tagName;\n    let maximumEvolutionTimeInput: HTMLInputElement = document.createElement(\"input\");\n    maximumEvolutionTimeDiv.appendChild(maximumEvolutionTimeInput);\n    maximumEvolutionTimeInput.type = \"checkbox\";\n    maximumEvolutionTimeInput.id = MaximumEvolutionTime.tagName;\n    let maximumEvolutionTime: MaximumEvolutionTime;\n    let maximumEvolutionTimeAttributes: Map<string, string>;\n    if (xml_maximumEvolutionTime.length == 1) {\n        maximumEvolutionTimeInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_maximumEvolutionTime[0])));\n        maximumEvolutionTimeAttributes = getAttributes(xml_maximumEvolutionTime[0]);\n        maximumEvolutionTime = new MaximumEvolutionTime(maximumEvolutionTimeAttributes, value);\n        control.setMaximumEvolutionTime(maximumEvolutionTime);\n        let id = Control.tagName + \"_\" + MaximumEvolutionTime.tagName + \"_number\";\n        // Create a new div for the maximumEvolutionTime.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(maximumEvolutionTime, event.target);\n                resizeInputElement(event.target);\n            }\n        }, maximumEvolutionTime.value.toString(), MaximumEvolutionTime.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        maximumEvolutionTimeDiv.appendChild(inputDiv);\n    } else {\n        maximumEvolutionTimeInput.checked = false;\n        maximumEvolutionTimeAttributes = new Map<string, string>();\n        maximumEvolutionTime = new MaximumEvolutionTime(maximumEvolutionTimeAttributes, NaN);\n    }\n    maximumEvolutionTimeInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setMaximumEvolutionTime(maximumEvolutionTime);\n                let id = Control.tagName + \"_\" + MaximumEvolutionTime.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the maximumEvolutionTime.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(maximumEvolutionTime, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, maximumEvolutionTime.value.toString(), MaximumEvolutionTime.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                maximumEvolutionTimeDiv.appendChild(inputDiv);\n            } else {\n                control.removeMaximumEvolutionTime();\n                let id = Control.tagName + \"_\" + MaximumEvolutionTime.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:automaticallySetMaxEne\n    let automaticallySetMaxEneDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(automaticallySetMaxEneDiv);\n    let xml_automaticallySetMaxEne: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(AutomaticallySetMaxEne.tagName);\n    // Create a input checkbox for the AutomaticallySetMaxEne.\n    let automaticallySetMaxEneLabel: HTMLLabelElement = document.createElement(\"label\");\n    automaticallySetMaxEneDiv.appendChild(automaticallySetMaxEneLabel);\n    automaticallySetMaxEneLabel.textContent = AutomaticallySetMaxEne.tagName;\n    let automaticallySetMaxEneInput: HTMLInputElement = document.createElement(\"input\");\n    automaticallySetMaxEneDiv.appendChild(automaticallySetMaxEneInput);\n    automaticallySetMaxEneInput.type = \"checkbox\";\n    automaticallySetMaxEneInput.id = AutomaticallySetMaxEne.tagName;\n    let automaticallySetMaxEneAttributes: Map<string, string>;\n    let automaticallySetMaxEne: AutomaticallySetMaxEne;\n    if (xml_automaticallySetMaxEne.length == 1) {\n        automaticallySetMaxEneInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_automaticallySetMaxEne[0])));\n        automaticallySetMaxEneAttributes = getAttributes(xml_automaticallySetMaxEne[0]);\n        automaticallySetMaxEne = new AutomaticallySetMaxEne(automaticallySetMaxEneAttributes, value);\n        control.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n    } else {\n        automaticallySetMaxEneInput.checked = false;\n        automaticallySetMaxEneAttributes = new Map<string, string>();\n        automaticallySetMaxEne = new AutomaticallySetMaxEne(automaticallySetMaxEneAttributes, NaN);\n    }\n    automaticallySetMaxEneInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setAutomaticallySetMaxEne(automaticallySetMaxEne);\n                let id = Control.tagName + \"_\" + AutomaticallySetMaxEne.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the automaticallySetMaxEne.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(automaticallySetMaxEne, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, automaticallySetMaxEne.value.toString(), AutomaticallySetMaxEne.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                automaticallySetMaxEneDiv.appendChild(inputDiv);\n            } else {\n                control.removeAutomaticallySetMaxEne();\n                let id = Control.tagName + \"_\" + AutomaticallySetMaxEne.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    // me:diagramEnergyOffset\n    let diagramEnergyOffsetDiv: HTMLDivElement = createFlexDiv(level1);\n    controlsDiv.appendChild(diagramEnergyOffsetDiv);\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(DiagramEnergyOffset.tagName);\n    // Create a input checkbox for the DiagramEnergyOffset.\n    let diagramEnergyOffsetLabel: HTMLLabelElement = document.createElement(\"label\");\n    diagramEnergyOffsetDiv.appendChild(diagramEnergyOffsetLabel);\n    diagramEnergyOffsetLabel.textContent = DiagramEnergyOffset.tagName;\n    let diagramEnergyOffsetInput: HTMLInputElement = document.createElement(\"input\");\n    diagramEnergyOffsetDiv.appendChild(diagramEnergyOffsetInput);\n    diagramEnergyOffsetInput.type = \"checkbox\";\n    diagramEnergyOffsetInput.id = DiagramEnergyOffset.tagName;\n    let diagramEnergyOffset: DiagramEnergyOffset;\n    let diagramEnergyOffsetAttributes: Map<string, string>;\n    if (xml_diagramEnergyOffset.length == 1) {\n        diagramEnergyOffsetInput.checked = true;\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffsetAttributes = getAttributes(xml_diagramEnergyOffset[0]);\n        diagramEnergyOffset = new DiagramEnergyOffset(diagramEnergyOffsetAttributes, value);\n        control.setDiagramEnergyOffset(diagramEnergyOffset);\n        let id = Control.tagName + \"_\" + DiagramEnergyOffset.tagName + \"_number\";\n        // Create a new div for the diagramEnergyOffset.\n        let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n            if (event.target instanceof HTMLInputElement) {\n                setNumberNode(diagramEnergyOffset, event.target);\n                resizeInputElement(event.target);\n            }\n        }, diagramEnergyOffset.value.toString(), DiagramEnergyOffset.tagName);\n        resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n        inputDiv.id = id;\n        diagramEnergyOffsetDiv.appendChild(inputDiv);\n    } else {\n        diagramEnergyOffsetInput.checked = false;\n        diagramEnergyOffsetAttributes = new Map<string, string>();\n        diagramEnergyOffset = new DiagramEnergyOffset(diagramEnergyOffsetAttributes, NaN);\n    }\n    diagramEnergyOffsetInput.addEventListener('change', (event) => {\n        if (event.target instanceof HTMLInputElement) {\n            if (event.target.checked) {\n                control.setDiagramEnergyOffset(diagramEnergyOffset);\n                let id = Control.tagName + \"_\" + DiagramEnergyOffset.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n                // Create a new div for the diagramEnergyOffset.\n                let inputDiv: HTMLDivElement = createLabelWithInput(\"number\", id + \"_input\", boundary1, (event) => {\n                    if (event.target instanceof HTMLInputElement) {\n                        setNumberNode(diagramEnergyOffset, event.target);\n                        resizeInputElement(event.target);\n                    }\n                }, diagramEnergyOffset.value.toString(), DiagramEnergyOffset.tagName);\n                resizeInputElement(inputDiv.querySelector('input') as HTMLInputElement);\n                inputDiv.id = id;\n                diagramEnergyOffsetDiv.appendChild(inputDiv);\n            } else {\n                control.removeDiagramEnergyOffset();\n                let id = Control.tagName + \"_\" + DiagramEnergyOffset.tagName + \"_number\";\n                // Remove any existing div.\n                let existingDiv: HTMLDivElement = document.getElementById(id) as HTMLDivElement;\n                if (existingDiv != null) {\n                    existingDiv.remove();\n                }\n            }\n        }\n    });\n\n    return controlsDiv;\n}\n\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: string[] = [];\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionStates.\n        let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        if (reactantsLabel != undefined) {\n            reactants.push(reactantsLabel);\n            if (products.has(reactantsLabel)) {\n                intProducts.add(reactantsLabel);\n            }\n            let energy: number = reaction.getReactantsEnergy(molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(reactantsLabel, energy);\n            if (!orders.has(reactantsLabel)) {\n                orders.set(reactantsLabel, i);\n                i++;\n            }\n        }\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        if (productsLabel != undefined) {\n            products.add(productsLabel);\n            let energy = reaction.getProductsEnergy(molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(productsLabel, energy);\n            if (orders.has(productsLabel)) {\n                i--;\n                let j: number = get(orders, productsLabel);\n                // Move product to end and shift everything back.\n                orders.forEach(function (value, key) {\n                    if (value > j) {\n                        orders.set(key, value - 1);\n                    }\n                });\n                // Insert transition states.\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function (ts) {\n                        let ref: string = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                    orders.set(productsLabel, i);\n                    i++\n                }\n            } else {\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function (ts) {\n                        let ref: string = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                }\n                orders.set(productsLabel, i);\n                i++;\n            }\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines, but\n        // the code is left here commented out for code comprehension.)\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n    let originalCanvasHeight = canvas.height;\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (reactionTransitionStates.length > 0) {\n            reactionTransitionStates.forEach(function (ts) {\n                let transitionStateLabel: string = ts.getMolecule().ref;\n                let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                    transitionStateInXY[1]);\n                let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                    productInXY[0], productInXY[1]);\n            });\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 0) {\n        let reactionsDiv: HTMLDivElement = document.getElementById(\"reactions\") as HTMLDivElement;\n        let id = \"reactionsDiagram\";\n        // Remove any existing canvas.\n        let existingCanvas: HTMLCanvasElement = document.getElementById(id) as HTMLCanvasElement;\n        if (existingCanvas != null) {\n            existingCanvas.remove();\n        }\n        // Create a new canvas.\n        let canvas: HTMLCanvasElement = document.createElement('canvas');\n        canvas.id = id;\n        canvas.width = 800;\n        canvas.height = 400;\n        canvas.style.border = \"1px solid black\";\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, dark, font, lw, lwc);\n        }\n        // Add the canvas to the document.\n        reactionsDiv.appendChild(canvas);\n    }\n}\n\n/**\n * Save to XML file.\n */\nfunction saveXML() {\n    console.log(\"saveXML\");\n    const pad: string = \"  \";\n    // Create a Blob object from the data\n    let blob = new Blob([Mesmer.header, mesmer.toXML(pad, pad)],\n        { type: \"text/plain\" });\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    let title: string = mesmer.getTitle()?.value as string;\n    a.download = title.replace(/[^a-z0-9]/gi, '_') + \".xml\";\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n}","/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @param delimiter The (optional) delimiter.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>, delimiter?: string): string {\n    if (map == null) {\n        return \"\";\n    }\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} set The set to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function setToString(set: Set<any>, delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(set).map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (isNumeric(s[i])) {\n            r.push(parseFloat(s[i]));\n        //} else {\n        //    throw new Error(`toNumberArray: ${s[i]} is not a number`);\n        }\n    }\n    return r;\n}\n\n/**\n * @param s The string to check.\n * @returns true iff s is a number.\n */\nexport function isNumeric(s: string) : boolean {\n    if (s === \"\") {\n      return false;\n    }\n    return !isNaN(Number(s))\n}","exports.interopDefault = function (a) {\n  return a && a.__esModule ? a : {default: a};\n};\n\nexports.defineInteropFlag = function (a) {\n  Object.defineProperty(a, '__esModule', {value: true});\n};\n\nexports.exportAll = function (source, dest) {\n  Object.keys(source).forEach(function (key) {\n    if (\n      key === 'default' ||\n      key === '__esModule' ||\n      Object.prototype.hasOwnProperty.call(dest, key)\n    ) {\n      return;\n    }\n\n    Object.defineProperty(dest, key, {\n      enumerable: true,\n      get: function () {\n        return source[key];\n      },\n    });\n  });\n\n  return dest;\n};\n\nexports.export = function (dest, destName, get) {\n  Object.defineProperty(dest, destName, {\n    enumerable: true,\n    get: get,\n  });\n};\n","import {\n    getSelfClosingTag\n} from \"./html\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param element The xml element to search in.\n * @returns The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a Node throwing an Error if this is null.\n * @param node The node to get the nodeValue of.\n * @returns The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: Node): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * For convenience and to cope with when there is no node value as there is a blank.\n * @param e The Element\n * @returns The node value of the first child or \"\".\n */\nexport function getInputString(e: Element) {\n    let s: string;\n    let firstChildNode = getFirstChildNode(e);\n    if (firstChildNode) {\n        s = getNodeValue(firstChildNode).trim();\n    } else {\n        s = \"\";\n    }\n    return s;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(undefined, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }\n}\n\n/**\n * A class for representing A Tag with attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     * This class is identified with the name \"TagWithAttributes\", but often there are no attributes\n     * for an XML Tag, so this is allowed to be undefined. This is thought to be beneficial for memory \n     * reasons and the performance implications of having to test if this is undefined is thought to \n     * be balanced by not having to set up to iterate over an empty Map. There are assumptions in this\n     * approach that might be worth testing if performance is an issue...\n     */\n    attributes: Map<string, string> | undefined;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        if (this.attributes) {\n            this.attributes.forEach((value, key) => {\n                r += `${key}(${value}), `;\n            });\n        }\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n        if (this.attributes) {\n            for (let [k, v] of this.attributes) {\n                s += ' ' + k + '=\"' + v.toString() + '\"';\n            }\n        }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: number;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string, value: number) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string, values: number[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter != undefined) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): number {\n        this.nodes.set(this.nodes.size, node);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    override toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        if (this.nodes.size > 0) {\n            this.nodes.forEach((v) => {\n                if (v instanceof NodeWithNodes) {\n                    s += (v as NodeWithNodes).toXML(pad, padding1);\n                } else if (v instanceof TagWithAttributes) {\n                    s += (v as TagWithAttributes).toXML(padding1);\n                } else {\n                    s += (v as Tag).toXML(padding1);\n                }\n            });\n            return getTag(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s: string = getSelfClosingTag(this.attributes, this.tagName);\n            if (padding != undefined) {\n                return \"\\n\" + padding + s;\n            }\n            return s;\n        }\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param element The element to get the attributes of.\n * @returns The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param xml The XML document or element.\n * @param tagName The tag name.\n * @returns The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}\n\n/**\n * Convert XML to HTML.\n * @param {string} text The XML text.\n */\nexport function toHTML(text: string): string {\n    return text.replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(/  /g, \"&nbsp;&nbsp;\");\n}","/**\n * Remove a top level element.\n * @param id The id of the element to remove.\n */\nexport function remove(id: string) {\n    let e: HTMLElement | null = document.getElementById(id);\n    if (e != null) {\n        e.parentNode?.removeChild(e);\n        //} else {\n        //    console.warn(\"remove: id=\" + id + \" not found.\");\n    }\n}\n\n/**\n * Create a collapsible div.\n * @param options The options for creating the collapsible div.\n * @returns A collapsible div.\n */\nexport function getCollapsibleDiv({\n    content,\n    buttonLabel,\n    buttonFontSize = '',\n    level = { marginLeft: '', marginTop: '', marginBottom: '' },\n    contentDivId = '',\n    contentDivClassName = ''\n}: {\n    content: HTMLElement,\n    buttonLabel: string,\n    buttonFontSize?: string,\n    level: { marginLeft?: string, marginTop?: string, marginBottom?: string },\n    contentDivId?: string,\n    contentDivClassName?: string\n}): HTMLDivElement {\n    let contentDiv: HTMLDivElement = document.createElement('div');\n    contentDiv.id = contentDivId;\n    contentDiv.className = contentDivClassName;\n    let button: HTMLButtonElement = document.createElement('button');\n    button.id = contentDivId + 'Button';\n    button.className = 'collapsible';\n    button.innerText = `${buttonLabel} ▼`;\n    button.addEventListener('click', function () {\n        button.innerText = button.innerText.includes('▼')\n            ? `${buttonLabel} ▲`\n            : `${buttonLabel} ▼`;\n    });\n    button.style.fontSize = buttonFontSize;\n    Object.assign(button.style, level);\n    contentDiv.appendChild(button);\n    contentDiv.appendChild(content);\n    return contentDiv;\n}\n\n/**\n * For making elements with the class \"collapsible\" collapsible.\n */\nexport function makeCollapsible(): void {\n    var collapsibleElements = document.getElementsByClassName(\"collapsible\");\n    for (var i = 0; i < collapsibleElements.length; i++) {\n        // Remove existing event listener\n        collapsibleElements[i].removeEventListener(\"click\", toggleCollapsible);\n        // Add new event listener\n        collapsibleElements[i].addEventListener(\"click\", toggleCollapsible);\n    }\n}\n\n/**\n * For toggling the collapsible content.\n */\nfunction toggleCollapsible(this: HTMLElement): void {\n    this.classList.toggle(\"active\");\n    let contentDiv = this.nextElementSibling as HTMLElement;\n    if (contentDiv.style.display === \"block\") {\n        contentDiv.style.display = \"none\";\n    } else {\n        contentDiv.style.display = \"block\";\n    }\n}\n\n/**\n * Create and return HTMLDivElement that contains an HTMLLabelElement and a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param func The function called on a change to the input.\n * @param value The value of the input.\n * @param labelText The label text.\n * @returns A HTMLDivElement that contains a HTMLLabelElement and a HTMLInputElement.\n */\nexport function createLabelWithInput(type: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n},\n    func: (event: Event) => any, value: string, labelContent: string): HTMLDivElement {\n    let input: HTMLInputElement = createInputWithFunction(type, id, boundary, func, value);\n    let label: HTMLLabelElement = createLabel(labelContent, boundary);\n    label.htmlFor = id;\n    Object.assign(label.style, boundary);\n    let container: HTMLDivElement = document.createElement('div');\n    container.appendChild(label);\n    container.appendChild(input);\n    Object.assign(container, boundary);\n    return container;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param func The function called on a change to the input.\n * @returns A HTMLInputElement.\n */\nexport function createInputWithFunction(type: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n},\n    func: (event: Event) => any, value: string): HTMLInputElement {\n    let input: HTMLInputElement = createInput(type, id, boundary);\n    input.onchange = func;\n    return input;\n}\n\n/**\n * Create and return a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\", \"checkbox\").\n * @param id The id of the input.\n * @returns A HTMLInputElement.\n */\nexport function createInput(type: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLInputElement {\n    let input: HTMLInputElement = document.createElement('input');\n    input.type = type;\n    input.id = id;\n    Object.assign(input.style, boundary);\n    return input;\n}\n\n/**\n * Create a self closing tag.\n * @param attributes The attributes.\n * @param tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | undefined, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}\n\n/**\n * For resizing an HTMLInputElement to the width of what it contains.\n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeInputElement(input: HTMLInputElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 4;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}\n\n/**\n * For resizing an HTMLSelectElement to the width of what it contains.\n * \n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeSelectElement(input: HTMLSelectElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 6;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}\n\n/**\n * Create and return an HTMLSelectElement.\n * \n * @param options The options.\n * @param name The name.\n * @param id The id.\n * @returns An HTMLSelectElement.\n */\nexport function createSelectElement(options: string[] | Set<string>, name: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLSelectElement {\n    let selectElement: HTMLSelectElement = document.createElement('select');\n    options.forEach(option => {\n        selectElement.name = name;\n        selectElement.id = id;\n        let optionElement: HTMLOptionElement = document.createElement('option');\n        optionElement.value = option;\n        optionElement.text = option;\n        selectElement.appendChild(optionElement);\n    });\n    Object.assign(selectElement.style, boundary);\n    return selectElement;\n}\n\n/**\n * Create and return an HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n * \n * @param textContent The text content of the label.\n * @param options The options for the HTMLSelectElement.\n * @param name The name for the HTMLSelectElement.\n * @param id The id.\n * @param boundary The boundary to go around the HTMLLabelElement and HTMLSelectElement.\n * @returns A HTMLDivElement containing a HTMLLabelElement and HTMLSelectElement.\n */\nexport function createLabelWithSelectElement(textContent: string, options: string[] | Set<string>, name: string, id: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement('div');\n    let label: HTMLLabelElement = createLabel(textContent, boundary);\n    div.appendChild(label);\n    let selectElement: HTMLSelectElement = document.createElement('select');\n    div.appendChild(selectElement);\n    options.forEach(option => {\n        selectElement.name = name;\n        selectElement.id = id;\n        let optionElement: HTMLOptionElement = document.createElement('option');\n        optionElement.value = option;\n        optionElement.text = option;\n        selectElement.appendChild(optionElement);\n    });\n    Object.assign(selectElement.style, boundary);\n    return div;\n}\n\n/**\n * Create and return an HTMLButtonElement.\n * \n * @param textContent The text content of the button.\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin\n * @returns An HTMLButtonElement with the textContent and specified boundary.\n */\nexport function createButton(textContent: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLButtonElement {\n    let button: HTMLButtonElement = document.createElement('button');\n    button.textContent = textContent;\n    Object.assign(button.style, boundary);\n    return button;\n}\n\n/**\n * Create and return HTMLDivElement with a 'flex' display style.\n *\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin.\n * @returns An HTMLDivElement with a 'flex' display style and specified boundary.\n */\nexport function createFlexDiv(boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLDivElement {\n    let div: HTMLDivElement = document.createElement(\"div\");\n    div.style.display = 'flex';\n    Object.assign(div.style, boundary);\n    return div;\n}\n\n/**\n * Create and return HTMLLabelElement.\n *\n * @param textContent The text content of the label.\n * @param marginLeft The left margin.\n * @param marginTop The top margin.\n * @param marginBottom The bottom margin.\n * @param marginRight The right margin.\n * @returns An HTMLLabelElement with specified boundary.\n */\nexport function createLabel(textContent: string, boundary: {\n    marginLeft?: string, marginTop?: string, marginBottom?: string, marginRight?: string\n}): HTMLLabelElement {\n    let label: HTMLLabelElement = document.createElement(\"label\");\n    Object.assign(label.style, boundary);\n    label.textContent = textContent;\n    return label;\n}","import { get } from './util.js';\nimport {\n    TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode, StringNode\n} from './xml.js';\n\n\n/**\n * Atom data.\n * The examples can be used to compile this.\n * It is likely that only a small subset of atoms in the periodic table are of interest...\n */\n\n/**\n * Molecule data.\n * The examples can be used to compile this.\n * It would be good to use, have, provide ways of sharing and to be able to specify/edit molecules...\n * This would include data about atoms, bonds, molecule properties and other things...\n */\n\n/**\n * Atom instances must have an \"elementType\" attribute.\n * The attributes may include \"id\", \"x3\", \"y3\", \"z3\" - coordinates used to depict a molecule containing the atom.\n * In the XML, an \"atom\" node is typically a child of an \"atomArray\" parent node.\n * If there is only one atom, it may be a child of a \"molecule\" parent node.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * The id if specified, or the elementType.\n     */\n    id: string;\n\n    /**\n     * The element type.\n     */\n    elementType: string;\n\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     * If there is no \"id\" then \"this.id\" is set to the \"elementType\".\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Atom.tagName);\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            throw new Error('elementType is undefined');\n        }\n        this.elementType = elementType;\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            id = this.elementType;\n        }\n        this.id = id;\n    }\n}\n\n/**\n * A class for representing an atomArray.\n * There can be no attributes.\n * In the XML, a \"atomArray\" node is typically a child of a \"molecule\" parent node and has \"atom\" node children.\n */\nexport class AtomArray extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"atomArray\";\n\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */\n    constructor(attributes: Map<string, string> | undefined, atoms: Atom[]) {\n        super(attributes, AtomArray.tagName);\n        atoms.forEach(atom => {\n            this.nodes.set(this.nodes.size, atom);\n        });\n    }\n}\n\n/**\n * An atomic bond between two atoms in a molecule.\n * Instances must have a \"atomRefs2\" attribute - a space separated list of two atom ids.\n * The attributes may include \"order\" - presumed to be the order of the bond. Generally:\n *  order = (the number of bonding electrons) - ((the number of non-bonding electrons) / 2).\n * In the XML, a \"bond\" node is typically a child of a \"bondArray\" parent node.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * The atomRefs2 stored for convenience, this is also stored as an attribute.\n     */\n    atomRefs2: string;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Bond.tagName);\n        let atomRefs2: string | undefined = attributes.get(\"atomRefs2\");\n        if (atomRefs2 == undefined) {\n            throw new Error('atomRefs2 is undefined');\n        }\n        this.atomRefs2 = atomRefs2;\n    }\n\n    /**\n     * @param atomRefs2 The atomRefs2 to set.\n     */\n    setAtomRefs2(atomRefs2: string): void {\n        this.atomRefs2 = atomRefs2;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"atomRefs2\", atomRefs2);\n        }\n    }\n\n\n    /**\n     * @returns The attribute value referred to by \"id\" or undefined.\n     */\n    getId(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"id\");\n        }\n    }\n\n    /**\n     * @param id The id to set the attribute value referred to by \"id\".\n     */\n    setId(id: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"id\", id);\n        }\n    }\n\n    /**\n     * @returns The attribute value referred to by \"order\" as a number or undefined.\n     */\n    getOrder(): number | undefined {\n        if (this.attributes != undefined) {\n            let order: string | undefined = this.attributes.get(\"order\");\n            if (order != undefined) {\n                return parseFloat(order);\n            }\n        }\n    }\n\n    /**\n     * @param order The order to set the attribute value referred to by \"order\".\n     */\n    setOrder(order: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"order\", order.toString());\n        }\n    }\n\n}\n\n/**\n * There can be no attributes.\n * In the XML, a \"bondArray\" node is typically a child of a \"molecule\" parent node and has \"bond\" node children.\n */\nexport class BondArray extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bondArray\";\n\n\n    /**\n     * The bonds stored for convenience.\n     */\n    bonds: Bond[];\n\n    /**\n     * @param attributes The attributes.\n     * @param bonds A Map of bonds with keys as ids.\n     */\n    constructor(attributes: Map<string, string>, bonds: Bond[]) {\n        super(attributes, BondArray.tagName);\n        this.bonds = bonds;\n        bonds.forEach(bond => {\n            this.nodes.set(this.nodes.size, bond);\n        });\n    }\n\n    /**\n     * @param i The index of the bond.\n     * @returns The bond at the given index.\n     * @throws Error if this.bonds has no such index.\n     */\n    getBond(i: number): Bond | undefined {\n        return this.bonds[i];\n    }\n\n    /**\n     * @returns The bonds.\n     */\n    getBonds(): Bond[] {\n        return this.bonds;\n    }\n\n    /**\n     * Set the bond at the given index.\n     * @param i The index.\n     * @param bond The bond.\n     * @throws Error if this.bonds has no such index.\n     */\n    setBond(i: number, bond: Bond): void {\n        this.bonds[i] = bond;\n        this.nodes.set(i, bond);\n    }\n\n    /**\n     * Adds a bond to the array.\n     * @param bond The bond to add.\n     */\n    addBond(bond: Bond): void {\n        this.bonds.push(bond);\n        this.nodes.set(this.nodes.size, bond);\n    }\n\n    /**\n     * @param i The index of the bond to remove.\n     */\n    removeBond(i: number): void {\n        this.bonds.splice(i, 1);\n        this.nodes.delete(i);\n    }\n\n    /**\n     * Get a set of all the bond ids.\n     */\n    getBondIds(): Set<string> {\n        let bondIds: Set<string> = new Set();\n        this.bonds.forEach((bond) => {\n            bondIds.add(bond.getId() as string);\n        });\n        return bondIds;\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, a \"scalar\" node is a child of a \"property\" node.\n */\nexport class PropertyScalar extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PropertyScalar.tagName, value);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            if (this.attributes != undefined) {\n                let existingUnits: string | undefined = this.attributes.get(\"units\");\n                if (existingUnits != undefined) {\n                    if (existingUnits != units) {\n                        //console.log('Units are not the same, changing units...');\n                        this.attributes.set(\"units\", units);\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyArray extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"array\";\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            if (this.attributes != undefined) {\n                let existingUnits: string | undefined = this.attributes.get(\"units\");\n                if (existingUnits != undefined) {\n                    if (existingUnits != units) {\n                        //console.log('Units are not the same, changing units...');\n                        this.attributes.set(\"units\", units);\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes must contain \"dictRef\" which is a dictionary reference for a type of property.\n * In the XML, a \"property\" node has a \"propertyList\" parent and either a \"scalar\" or \"array\" or another type of child not yet implemented (there could be a \"matrix\" type).\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * The dictRef.\n     */\n    dictRef: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property?: PropertyScalar | PropertyArray) {\n        super(attributes, Property.tagName);\n        let dictRef: string | undefined = attributes.get(\"dictRef\");\n        if (dictRef == undefined) {\n            throw new Error('dictRef is undefined');\n        }\n        this.dictRef = dictRef;\n        if (property) {\n            this.nodes.set(0, property);\n        }\n    }\n\n    /**\n     * @returns The property.\n     */\n    getProperty(): PropertyScalar | PropertyArray {\n        return this.nodes.get(0) as PropertyScalar | PropertyArray;\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: PropertyScalar | PropertyArray): void {\n        this.nodes.set(0, property);\n    }\n\n}\n\n/**\n * The Zero Potential Energy.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[kJ/mol]).\n */\nexport class ZPE extends Property {\n\n    static readonly dictRef: string = \"me:ZPE\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n\n    /**\n     * @param units The units.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"wavenumber\", \"kcal/mol\", \"Hartree\", \"au\"].\n     */\n    setUnits(units: string): void {\n        this.getProperty().updateUnits(units);\n    }\n}\n\n/**\n * \"me:frequenciesScaleFactor\" property.\n */\nexport class FrequenciesScaleFactor extends Property {\n\n    static readonly dictRef: string = \"me:frequenciesScaleFactor\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The vibration frequencies.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class VibFreqs extends Property {\n\n    static readonly dictRef: string = \"me:vibFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The rotation constants.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class RotConsts extends Property {\n\n    static readonly dictRef: string = \"me:rotConsts\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Molecular Weight.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[amu]).\n */\nexport class MW extends Property {\n\n    static readonly dictRef: string = \"me:MW\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:imFreqs\"\n */\nexport class ImFreqs extends Property {\n\n    static readonly dictRef: string = \"me:imFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * In the XML, a \"propertyList\" node is a child node of a \"molecule\" node and has one or more \"property\" child node.\n * There can be no attributes.\n */\nexport class PropertyList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"propertyList\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */\n    constructor(attributes: Map<string, string>, properties?: Property[]) {\n        super(attributes, PropertyList.tagName);\n        this.index = new Map();\n        if (properties) {\n            properties.forEach(property => {\n                this.nodes.set(this.nodes.size, property);\n                this.index.set(property.dictRef, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let i: number | undefined = this.index.get(dictRef);\n        if (i != undefined) {\n            return this.nodes.get(i) as Property;\n        } else {\n            throw new Error('Property ' + dictRef + ' does not exist');\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let i: number | undefined = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log('Property ' + property.dictRef + ' already exists, updating...');\n            this.nodes.set(i, property);\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include \"bathGas\", \"units\", \"lower\", \"upper\", and \"stepsize\".\n */\nexport class DeltaEDown extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */\n    getBathGas(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"bathGas\");\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */\n    setBathGas(bathGas: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"bathGas\", bathGas);\n        }\n    }\n\n    /**\n     * @returns The units of the DeltaEDown.\n     */\n    getUnits(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"units\");\n        }\n    }\n\n    /**\n     * @returns The lower of the DeltaEDown.\n     */\n    getLower(): number | undefined {\n        if (this.attributes != undefined) {\n            return parseFloat(get(this.attributes, \"lower\"));\n        }\n    }\n\n    /**\n     * @param lower The lower of the DeltaEDown.\n     */\n    setLower(lower: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"lower\", lower.toString());\n        }\n    }\n\n    /**\n     * @returns The upper of the DeltaEDown.\n     */\n    getUpper(): number | undefined {\n        if (this.attributes != undefined) {\n            return parseFloat(get(this.attributes, \"upper\"));\n        }\n    }\n\n    /**\n     * @param upper The upper of the DeltaEDown.\n     */\n    setUpper(upper: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"upper\", upper.toString());\n        }\n    }\n\n    /**\n     * @returns The stepsize of the DeltaEDown.\n     */\n    getStepsize(): number | undefined {\n        if (this.attributes != undefined) {\n            return parseFloat(get(this.attributes, \"stepsize\"));\n        }\n    }\n\n    /**\n     * @param stepsize The stepsize of the DeltaEDown.\n     */\n    setStepsize(stepsize: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"stepsize\", stepsize.toString());\n        }\n    }\n\n    /**\n     * @param value The value of the DeltaEDown.\n     */\n    setValue(value: number): void {\n        this.value = value;\n    }\n}\n\n/**\n * In the XML, a \"me:energyTransferModel\" node is a child node of a \"molecule\" node.\n * It may have:\n * One or more \"me:deltaEDown\" child nodes.\n * Additional child nodes might include \"me:deltaEDownTExponent\".\n */\nexport class EnergyTransferModel extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns?: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        if (deltaEDowns != undefined) {\n            deltaEDowns.forEach(deltaEDown => {\n                this.nodes.set(this.nodes.size, deltaEDown);\n            });\n        }\n    }\n\n    /**\n     * @returns The DeltaEDowns.\n     */\n    getDeltaEDowns(): DeltaEDown[] {\n        let deltaEDowns: DeltaEDown[] = [];\n        this.nodes.forEach(node => {\n            if (node instanceof DeltaEDown) {\n                deltaEDowns.push(node);\n            }\n        });\n        return deltaEDowns;\n    }\n\n    /**\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    setDeltaEDowns(deltaEDowns: DeltaEDown[]): void {\n        this.nodes.clear();\n        deltaEDowns.forEach(deltaEDown => {\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */\n    getDeltaEDown(index: number): DeltaEDown {\n        if (index < 0 || index >= this.nodes.size) {\n            throw new Error('index out of range');\n        }\n        return this.nodes.get(index) as DeltaEDown;\n    }\n\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */\n    setDeltaEDown(index: number, deltaEDown: DeltaEDown): void {\n        this.nodes.set(index, deltaEDown);\n    }\n\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */\n    addDeltaEDown(deltaEDown: DeltaEDown): number {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\n\n/**\n * In the XML, a \"me:DOSCMethod\" node is a child node of a \"molecule\" node.\n * The attributes are expected to include either \"xsi:type\" or \"name\" - expected values are either \"ClassicalRotors\" or \"QMRotors\".\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n        if (attributes.get(\"xsi:type\") == undefined) {\n            let name: string | undefined = attributes.get(\"name\");\n            if (name == undefined) {\n                throw new Error('Neither xsi:type or name are defined.');\n            } else {\n                attributes.set(\"xsi:type\", name);\n                attributes.delete(\"name\");\n            }\n        }\n    }\n\n    /**\n     * @returns The xsi:type.\n     */\n    getXsiType(): string {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"xsi:type\") as string;\n        } else {\n            throw new Error('xsi:type is undefined');\n        }\n    }\n\n    /**\n     * @param xsiType The xsi:type.\n     */\n    setXsiType(xsiType: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"xsi:type\", xsiType);\n        } else {\n            throw new Error('xsi:type is undefined');\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:bondRef\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class BondRef extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bondRef\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.tagName, bondRef);\n    }\n}\n\n/**\n * In the XML, a \"me:PotentialPoint\" node is a child node of a \"me:HinderedRotorPotential\" node.\n * The attributes must include \"angle\" and \"potential\".\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PotentialPoint\";\n\n    /**\n     * The angle stored for convenience, this is also an attribute.\n     */\n    angle: number;\n\n    /**\n     * The potential stored for convenience, this is also an attribute.\n     */\n    potential: number;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.tagName);\n        let angle: string | undefined = attributes.get(\"angle\");\n        if (angle == undefined) {\n            throw new Error('angle is undefined');\n        }\n        this.angle = parseFloat(angle);\n        let potential: string | undefined = attributes.get(\"potential\");\n        if (potential == undefined) {\n            throw new Error('potential is undefined');\n        }\n        this.potential = parseFloat(potential);\n    }\n\n    /**\n     * @returns The angle.\n     */\n    getAngle(): number {\n        return this.angle;\n    }\n\n    /**\n     * @param angle The angle of the PotentialPoint.\n     */\n    setAngle(angle: number): void {\n        this.angle = angle;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"angle\", angle.toString());\n        }\n    }\n\n    /**\n     * @returns The potential.\n     */\n    getPotential(): number {\n        return this.potential;\n    }\n\n    /**\n     * @param potential The potential of the PotentialPoint.\n     */\n    setPotential(potential: number): void {\n        this.potential = potential;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"potential\", potential.toString());\n        }\n    }\n\n}\n\n/**\n * In the XML, a \"me:HinderedRotorPotential\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n * It may have one or more \"me:PotentialPoint\" child nodes.\n * The attributes must include \"format\" (with a value from [\"numerical\", \"analytical\"]) and \"units\" (with a value from [\"kJ/mol\", \"cm-1\", \"Hartree\"]).\n */\nexport class HinderedRotorPotential extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:HinderedRotorPotential\";\n\n    /**\n     * The permitted formats.\n     */\n    static readonly formats: string[] = [\"numerical\", \"analytical\"];\n\n    /**\n     * The permitted units.\n     */\n    static readonly units: string[] = [\"kJ/mol\", \"cm-1\", \"Hartree\"];\n\n    /**\n     * The format stored for convenience, this is also an attribute.\n     */\n    format: string;\n\n    /**\n     * The units stored for convenience, this is also an attribute.\n     */ \n    units: string;\n\n    /**\n     * The expansionSize stored for convenience, this is also an attribute.\n     */\n    expansionSize: number;\n\n    /**\n     * The useSineTerms stored for convenience, this is also an attribute.\n     */\n    useSineTerms: boolean;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PotentialPoint[]} potentialPoints The PotentialPoints.\n     */\n    constructor(attributes: Map<string, string>, potentialPoints?: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.tagName);\n        let format: string | undefined = attributes.get(\"format\");\n        if (format == undefined) {\n            throw new Error('format is undefined');\n        }\n        this.format = format;\n        let units: string | undefined = attributes.get(\"units\");\n        if (units == undefined) {\n            throw new Error('units is undefined');\n        }\n        this.units = units;\n        if (potentialPoints != undefined) {\n            potentialPoints.forEach(p => {\n                this.nodes.set(this.nodes.size, p);\n            });\n        }\n        let expansionSize: string | undefined = attributes.get(\"expansionSize\");\n        if (expansionSize == undefined) {\n            throw new Error('expansionSize is undefined');\n        }\n        this.expansionSize = parseFloat(expansionSize);\n        let useSineTerms: string | undefined = attributes.get(\"useSineTerms\");\n        if (useSineTerms == undefined) {\n            throw new Error('useSineTerms is undefined');\n        }\n        this.useSineTerms = (useSineTerms == \"yes\");\n    }\n\n    /**\n     * @returns The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    getFormat(): string {\n        return this.format;\n    }\n\n    /**\n     * @param format The format of the HinderedRotorPotential.\n     * Should be one of [\"numerical\", \"analytical\"].\n     */\n    setFormat(format: string): void {\n        this.format = format;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"format\", format);\n        }\n    }\n\n    /**\n     * @returns The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */\n    getUnits(): string {\n        return this.units;\n    }\n\n    /**\n     * @param units The units of the HinderedRotorPotential.\n     * Should be one of [\"kJ/mol\", \"cm-1\", \"Hartree\"].\n     */\n    setUnits(units: string): void {\n        this.units = units;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"units\", units);\n        }\n    }\n\n    /**\n     * @returns The expansionSize of the HinderedRotorPotential.\n     */\n    getExpansionSize(): number {\n        return this.expansionSize;\n    }\n\n    /**\n     * @param expansionSize The expansionSize of the HinderedRotorPotential.\n     */\n    setExpansionSize(expansionSize: number): void {\n        this.expansionSize = expansionSize;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"expansionSize\", expansionSize.toString());\n        }\n    }\n\n    /**\n     * @returns The useSineTerms of the HinderedRotorPotential.\n     */\n    getUseSineTerms(): boolean {\n        return this.useSineTerms;\n    }\n\n    /**\n     * @param useSineTerms The useSineTerms of the HinderedRotorPotential.\n     */\n    setUseSineTerms(useSineTerms: boolean): void {\n        this.useSineTerms = useSineTerms;\n        if (this.attributes != undefined) {\n            this.attributes.set(\"useSineTerms\", useSineTerms ? \"yes\" : \"no\");\n        }\n    }\n\n    /**\n     * @returns The potential point with the given index.\n     */\n    getPotentialPoint(i: number): PotentialPoint {\n        return this.nodes.get(i) as PotentialPoint;\n    }\n\n    /**\n     * Set the potential point at the given index.\n     * @param i The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */\n    setPotentialPoint(i: number, p: PotentialPoint): void {\n        this.nodes.set(i, p);\n    }\n\n    /**\n     * Sets the potential points.\n     * @param potentialPoints The potential points.\n     */\n    setPotentialPoints(potentialPoints: PotentialPoint[]): void {\n        this.nodes.clear();\n        potentialPoints.forEach(p => {\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */\n    addPotentialPoint(p: PotentialPoint): number {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @param i The index of the potential point to remove.\n     */\n    removePotentialPoint(i: number): void {\n        this.nodes.delete(i);\n    }\n}\n\n/**\n * In the XML, a \"me:periodicity\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class Periodicity extends NumberNode {\n\n    static readonly tagName: string = \"me:periodicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Periodicity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:ExtraDOSCMethod\" node is a child node of a \"molecule\" node.\n */\nexport class ExtraDOSCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */\n    constructor(attributes: Map<string, string>, bondRef?: BondRef,\n        hinderedRotorPotential?: HinderedRotorPotential,\n        periodicity?: Periodicity) {\n        super(attributes, ExtraDOSCMethod.tagName);\n        this.index = new Map();\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The bondRef.\n     */\n    getBondRef(): BondRef | undefined {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BondRef;\n        }\n    }\n\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */\n    setBondRef(bondRef: BondRef) {\n        let i = this.index.get(BondRef.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, bondRef);\n        } else {\n            this.nodes.set(this.nodes.size, bondRef);\n            this.index.set(BondRef.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */\n    getHinderedRotorPotential(): HinderedRotorPotential | undefined {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HinderedRotorPotential;\n        }\n    }\n\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */\n    setHinderedRotorPotential(hinderedRotorPotential: HinderedRotorPotential) {\n        let i = this.index.get(HinderedRotorPotential.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hinderedRotorPotential);\n        } else {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n            this.index.set(HinderedRotorPotential.tagName, this.nodes.size - 1);\n        }\n    }\n\n    /**\n     * @returns The periodicity of the molecule.\n     */\n    getPeriodicity(): Periodicity | undefined {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Periodicity;\n        }\n    }\n\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */\n    setPeriodicity(periodicity: Periodicity) {\n        let i = this.index.get(Periodicity.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, periodicity);\n        } else {\n            this.nodes.set(this.nodes.size, periodicity);\n            this.index.set(Periodicity.tagName, this.nodes.size - 1);\n        }\n    }\n\n}\n\n/**\n * The attributes may include \"units\".\n * In the XML, a \"me:reservoirSize\" node is a child node of a \"molecule\" node.\n */\nexport class ReservoirSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:reservoirSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ReservoirSize.tagName, value);\n    }\n}\n\n\n/**\n * The attributes may include \"description\" and \"active\" (and possibly others).\n * In the XML, a \"molecule\" node is a child node of a \"moleculeList\" node.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The index. The keys are the tag names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    // The molecule ID.\n    id: string;\n\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms?: Atom | AtomArray,\n        bonds?: Bond | BondArray,\n        properties?: PropertyList | Property,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod,\n        extraDOSCMethod?: ExtraDOSCMethod,\n        reservoirSize?: ReservoirSize) {\n        super(attributes, Molecule.tagName);\n        this.index = new Map();\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        this.id = id;\n        let i: number = 0;\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            if (atoms instanceof Atom) {\n                this.index.set(Atom.tagName, i);\n            } else {\n                this.index.set(AtomArray.tagName, i);\n            }\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set(BondArray.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set(PropertyList.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set(EnergyTransferModel.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set(DOSCMethod.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set(ExtraDOSCMethod.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set(ReservoirSize.tagName, i);\n        }\n    }\n\n    /**\n     * Get the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"description\");\n        }\n    }\n\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */\n    setDescription(description: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"description\", description);\n        }\n    }\n\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        if (this.attributes != undefined) {\n            let active = this.attributes.get(\"active\");\n            if (active != undefined) {\n                if (active == \"true\") {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */\n    setActive(active: boolean): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"active\", active.toString());\n        }\n    }\n\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */\n    getLabel(): string {\n        let label: string = this.id;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            label += \" (\" + description + \")\";\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active) {\n            label += \" (active)\";\n        }\n        return label;\n    }\n\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */\n    getAttributesAsString(): string {\n        if (this.attributes == undefined) {\n            return \"\";\n        }\n        return Array.from(this.attributes, ([key, value]) => `${key}=\\\"${value}\\\"`).join(', ');\n    }\n\n    /**\n     * @returns The properties of the molecule.\n     */\n    getProperties(): PropertyList | Property | undefined {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            i = this.index.get(Property.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as Property;\n            }\n        } else {\n            return this.nodes.get(i) as PropertyList;\n        }\n    }\n\n    /**\n     * @param properties The properties.\n     */\n    setProperties(properties: PropertyList | Property) {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            this.index.set(PropertyList.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else {\n            this.nodes.set(i, properties);\n        }\n    }\n\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                //console.log('PropertyList');\n                return properties.getProperty(dictRef);\n            } else {\n                //console.log('Property');\n                return properties;\n            }\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                properties.setProperty(property);\n            } else {\n                this.setProperties(properties);\n            }\n        } else {\n            this.setProperties(property);\n        }\n    }\n\n    /**\n     * @returns The atoms of the molecule.\n     */\n    getAtoms(): Atom | AtomArray | undefined {\n        let i: number | undefined = this.index.get(Atom.tagName);\n        if (i == undefined) {\n            i = this.index.get(AtomArray.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as AtomArray;\n            }\n        } else {\n            return this.nodes.get(i) as Atom;\n        }\n    }\n\n    /**\n     * @returns The bonds of the molecule.\n     */\n    getBonds(): BondArray | undefined {\n        let i: number | undefined = this.index.get(BondArray.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as BondArray;\n        }\n    }\n\n    /**\n     * @returns The energy transfer model of the molecule.\n     */\n    getEnergyTransferModel(): EnergyTransferModel | undefined {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as EnergyTransferModel;\n        }\n    }\n\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */\n    setEnergyTransferModel(energyTransferModel: EnergyTransferModel) {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            this.index.set(EnergyTransferModel.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else {\n            this.nodes.set(i, energyTransferModel);\n        }\n    }\n\n    /**\n     * @returns The DOSC method of the molecule.\n     */\n    getDOSCMethod(): DOSCMethod | undefined {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DOSCMethod;\n        }\n    }\n\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */\n    setDOSCMethod(dOSCMethod: DOSCMethod) {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(DOSCMethod.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else {\n            this.nodes.set(i, dOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */\n    getExtraDOSCMethod(): ExtraDOSCMethod | undefined {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ExtraDOSCMethod;\n        }\n    }\n\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */\n    setExtraDOSCMethod(extraDOSCMethod: ExtraDOSCMethod) {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(ExtraDOSCMethod.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else {\n            this.nodes.set(i, extraDOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The reservoir size of the molecule.\n     */\n    getReservoirSize(): ReservoirSize | undefined {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ReservoirSize;\n        }\n    }\n\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */\n    setReservoirSize(reservoirSize: ReservoirSize) {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            this.index.set(ReservoirSize.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else {\n            this.nodes.set(i, reservoirSize);\n        }\n    }\n\n    /**\n     * Get the ZPE value of the molecule.\n     */\n    getEnergy(): number {\n        let p: Property | undefined = this.getProperty(ZPE.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error('ZPE property not found');\n            //return 0;\n        }\n        return (p.getProperty() as PropertyScalar).value;\n    }\n}","import {\n    Molecule, ZPE\n} from './molecule.js';\n\nimport {\n    TagWithAttributes, NodeWithNodes, NumberNode, Tag, NumberArrayNode, StringNode\n} from './xml.js';\n\n/**\n * A reference to a molecule, not to be confused with a Molecule.\n * The attribute \"ref\" is the same as a Molecule ID for a molecule in the XML \"moleculeList\".\n * The attribute \"role\" is the role of the molecule in the reaction. Expected values are:\n * [\"deficientReactant\", \"excessReactant\", \"modelled\", \"transitionState\", \"sink\"], but this may depend on whether the molecule is a reactant, product or transition state.\n * In the XML, a \"molecule\" node is a child of a \"reactant\", \"product\" or \"me:transitionState\" node.\n */\nexport class ReactionMolecule extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The ref attribute.\n     */\n    ref: string;\n\n    /**\n     * The role attribute.\n     */\n    role: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, ReactionMolecule.tagName);\n        this.ref = attributes.get(\"ref\") as string;\n        this.role = attributes.get(\"role\") as string;\n    }\n\n    /**\n     * @param role The role of the molecule in the reaction.\n     */\n    setRole(role: string): void {\n        this.role = role;\n    }\n\n}\n\n/**\n * A molecule that reacts in a reaction.\n * In the XML, a \"reactant\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Reactant extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Reactant.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * A molecule produced in a reaction.\n * In the XML, a \"product\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Product extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Product.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n\n}\n\n/**\n * A molecule that is a transition state in a reaction.\n * In the XML, a \"me:transitionState\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class TransitionState extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, TransitionState.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * In the XML, a \"me:preExponential\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:activationEnergy\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:TInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:nInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * Extended classes indicate how microcanonical rate constant is to be treated.\n * In the XML, a \"me:MCRCMethod\" node is a child of a \"reaction\" node.\n * A simple MCRCMethod has an attribute name=\"RRKM\".\n * There are extended classed representing more complicated MCRCMethods:\n * \"me:MesmerILT\"\n * \"LandauZenerCrossing\"\n * \"ZhuNakamuraCrossing\"\n * \"me:CanonicalRateCoefficient\"\n * \"DefinedSumOfStates\"\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * The Inverse Laplace Transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The xsiType.\n     */\n    static readonly xsiType: string = \"me:MesmerILT\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsiType2: string = \"MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */\n    constructor(attributes: Map<string, string>, preExponential?: PreExponential,\n        activationEnergy?: ActivationEnergy, tInfinity?: TInfinity, nInfinity?: NInfinity) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(PreExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(ActivationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(TInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(NInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    /**\n     * @param preExponential The pre-exponential factor.\n     */\n    setPreExponential(preExponential: PreExponential): void {\n        let i = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            this.index.set(PreExponential.tagName, this.nodes.size);\n            this.addNode(preExponential);\n        } else {\n            this.nodes.set(i, preExponential);\n        }\n    }\n\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    /**\n     * @param activationEnergy The activation energy.\n     */\n    setActivationEnergy(activationEnergy: ActivationEnergy): void {\n        let i = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            this.index.set(ActivationEnergy.tagName, this.nodes.size);\n            this.addNode(activationEnergy);\n        } else {\n            this.nodes.set(i, activationEnergy);\n        }\n    }\n\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    /**\n     * @param tInfinity The TInfinity.\n     */\n    setTInfinity(tInfinity: TInfinity): void {\n        let i = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(TInfinity.tagName, this.nodes.size);\n            this.addNode(tInfinity);\n        } else {\n            this.nodes.set(i, tInfinity);\n        }\n    }\n\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n\n    /**\n     * @param nInfinity The NInfinity.\n     */\n    setNInfinity(nInfinity: NInfinity): void {\n        let i = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            this.index.set(NInfinity.tagName, this.nodes.size);\n            this.addNode(nInfinity);\n        } else {\n            this.nodes.set(i, nInfinity);\n        }\n    }\n}\n\n/**\n * In the XML, the \"me:tunneling\" node is a child of a \"reaction\" node.\n * The \"name\" attribute is one of: [Eckart, WKB].\n */\nexport class Tunneling extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n\n    /**\n     * @returns The name of the tunneling method.\n     */\n    getName(): string {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"name\") as string;\n        }\n        return \"\";\n    }\n\n    /**\n     * @param The name of the tunneling method.\n     */\n    setName(name: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"name\", name);\n        }\n    }\n}\n\n/**\n * In the XML, the \"me:excessReactantConc\" node is a child of a \"reaction\" node.\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n}\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The index for the nodes.\n     * The key is the type of node.\n     * The value is the index of the node in the nodes array or if there are multiple nodes of this type, \n     * the value is a Map where the key of the map is the dictRef of the Node and the value is the respective node index for that specific thing.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The reactants index.\n     * The key is the ref of the reactant.\n     * The value is the index of the reactant in the nodes array.\n     */\n    reactantsIndex: Map<string, number>;\n\n    /**\n     * The products index.\n     * The key is the ref of the product.\n     * The value is the index of the product in the nodes array.\n     */\n    productsIndex: Map<string, number>;\n\n    /**\n     * The transition states index.\n     * The key is the ref of the transition state.\n     * The value is the index of the transition state in the nodes array.\n     */\n    transitionStatesIndex: Map<string, number>;\n\n    /**\n     * The id of the reaction.\n     */\n    id: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */\n    constructor(attributes: Map<string, string>,\n        reactants?: Reactant[], products?: Product[], tunneling?: Tunneling,\n        transitionStates?: TransitionState[], mCRCMethod?: MCRCMethod,\n        excessReactantConc?: ExcessReactantConc) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map();\n        this.reactantsIndex = new Map();\n        this.productsIndex = new Map();\n        this.transitionStatesIndex = new Map();\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error(\"Reaction id is undefined\");\n        }\n        this.id = id;\n        if (reactants != undefined) {\n            reactants.forEach(reactant => {\n                this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n                this.addNode(reactant);\n            });\n            this.index.set(Reactant.tagName, this.reactantsIndex);\n        }\n        if (products != undefined) {\n            products.forEach(product => {\n                this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n                this.addNode(product);\n            });\n            this.index.set(Product.tagName, this.productsIndex);\n        }\n        if (tunneling != undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach(transitionState => {\n                this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n                this.addNode(transitionState);\n            });\n            this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n\n    /**\n     * Add a node to the index.\n     */\n    addToIndex(tagName: string, node: NodeWithNodes): void {\n        let v: Map<string, number> | number | undefined = this.index.get(tagName);\n        if (v == undefined) {\n            this.index.set(tagName, this.nodes.size);\n        } else if (v instanceof Map) {\n            (v as Map<string, number>).set(node.tagName, this.nodes.size);\n        } else {\n            let map: Map<string, number> = new Map<string, number>();\n            map.set((this.nodes.get(v) as ReactionMolecule).ref, v as number);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n\n    /**\n     * @returns The reactants.\n     */\n    getReactants(): Reactant[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Reactant.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Reactant);\n        } else {\n            return [this.nodes.get(i) as Reactant];\n        }\n    }\n\n    /**\n     * Set the reactants.\n     */\n    setReactants(reactants: Reactant[]): void {\n        reactants.forEach(reactant => {\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n            this.addNode(reactant);\n        });\n        this.index.set(Reactant.tagName, this.reactantsIndex);\n    }\n\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */\n    getReactant(ref: string): Reactant {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Reactant;\n    }\n\n    /**\n     * @param reactant The reactant to add.\n     */\n    addReactant(reactant: Reactant): void {\n        this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size);\n        this.addNode(reactant);\n    }\n\n    /**\n     * @param ref The ref of the reactant to remove.\n     */\n    removeReactant(ref: string): void {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.reactantsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The products.\n     */\n    getProducts(): Product[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Product.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Product);\n        } else {\n            return [this.nodes.get(i) as Product];\n        }\n    }\n\n    /**\n     * Set the products.\n     */\n    setProducts(products: Product[]): void {\n        products.forEach(product => {\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n            this.addNode(product);\n        });\n        this.index.set(Product.tagName, this.productsIndex);\n    }\n\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */\n    getProduct(ref: string): Product {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Product;\n    }\n\n    /**\n     * @param product The product to add.\n     */\n    addProduct(product: Product): void {\n        this.productsIndex.set(product.getMolecule().ref, this.nodes.size);\n        this.addNode(product);\n    }\n\n    /**\n     * @param ref The ref of the product to remove.\n     */\n    removeProduct(ref: string): void {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.productsIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */\n    getTunneling(): Tunneling | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as Tunneling;\n    }\n\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */\n    setTunneling(tunneling: Tunneling): void {\n        let i = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, tunneling);\n            }\n        }\n    }\n\n    /**\n     * @returns The transition states.\n     */\n    getTransitionStates(): TransitionState[] {\n        let i: Map<string, number> | number | undefined = this.index.get(TransitionState.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as TransitionState);\n        } else {\n            return [this.nodes.get(i) as TransitionState];\n        }\n    }\n\n    /**\n     * Set the transition states.\n     */\n    setTransitionStates(transitionStates: TransitionState[]): void {\n        transitionStates.forEach(transitionState => {\n            this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n            this.addNode(transitionState);\n        });\n        this.index.set(TransitionState.tagName, this.transitionStatesIndex);\n    }\n\n    /**\n     * @returns A particular TransitionState.\n     * @param ref The ref of the transition state to return.\n     * @returns The transition state at the given index.\n     */\n    getTransitionState(ref: string): TransitionState {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition state with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as TransitionState;\n    }\n\n    /**\n     * @param transitionState The transition state to add.\n     */\n    addTransitionState(transitionState: TransitionState): void {\n        this.transitionStatesIndex.set(transitionState.getMolecule().ref, this.nodes.size);\n        this.addNode(transitionState);\n    }\n\n    /**\n     * @param ref The ref of the transition state to remove.\n     */\n    removeTransitionState(ref: string): void {\n        let index: number | undefined = this.transitionStatesIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Transition State with ref ${ref} not found`);\n        } else {\n            this.nodes.delete(index);\n            this.transitionStatesIndex.delete(ref);\n        }\n    }\n\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as MCRCMethod;\n    }\n\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */\n    setMCRCMethod(mCRCMethod: MCRCMethod): void {\n        let i = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, mCRCMethod);\n            }\n        }\n    }\n\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */\n    getExcessReactantConc(): ExcessReactantConc | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as ExcessReactantConc;\n    }\n\n    /**\n     * Set the excess reactant concentration or create it if it is undefined.\n     */\n    setExcessReactantConc(excessReactantConc: ExcessReactantConc): void {\n        let i = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"ExcessReactantConc is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, excessReactantConc);\n            }\n        }\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return this.getReactants().map(reactant => reactant.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return this.getProducts().map(product => product.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */\n    getReactantsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map(reactant => {\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map(product => {\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */\n    get(tagName: string, dictRef: string): NodeWithNodes | TagWithAttributes | Tag | undefined {\n        if (this.index.has(tagName)) {\n            let i: number | Map<string, number> | undefined = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex: number | undefined = i.get(dictRef);\n                    if (nodeIndex != undefined) {\n                        return this.nodes.get(nodeIndex);\n                    }\n                } else {\n                    return this.nodes.get(i);\n                }\n            }\n        }\n    }\n\n}","/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    NodeWithNodes, NumberNode, StringNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:bathGas\".\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     */\n    constructor(attributes: Map<string, string> | undefined, moleculeID: string) {\n        super(attributes, BathGas.tagName, moleculeID);\n    }\n}\n\n/**\n * A class for \"me:experimentRate\".\n * The attributes may include ref1, ref2, refReaction, and error.\n */\nexport class ExperimentRate extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentRate\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExperimentRate.tagName, value);\n    }\n\n    /**\n     * @returns The ref1 attribute or undefined if there is no ref1 attribute.\n     */\n    getRef1(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"ref1\");\n        }\n    }\n\n    /**\n     * Set the ref1 attribute.\n     * @param ref1 The ref1.\n     */\n    setRef1(ref1: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"ref1\", ref1);\n        }\n    }\n\n    /**\n     * @returns The ref2 attribute or undefined if there is no ref2 attribute.\n     */\n    getRef2(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"ref2\");\n        }\n    }\n\n    /**\n     * Set the ref2 attribute.\n     * @param ref2 The ref2.\n     */\n    setRef2(ref2: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"ref2\", ref2);\n        }\n    }\n\n    /**\n     * @returns The refReaction attribute or undefined if there is no refReaction attribute.\n     */\n    getRefReaction(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"refReaction\");\n        }\n    }\n\n    /**\n     * Set the refReaction attribute.\n     * @param refReaction The refReaction.\n     */\n    setRefReaction(refReaction: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"refReaction\", refReaction);\n        }\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number | undefined {\n        if (this.attributes != undefined) {\n            let error: string | undefined = this.attributes.get(\"error\");\n            if (error) {\n                return parseFloat(error);\n            }\n        }\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"error\", error.toString());\n        }\n    }\n}\n\n/**\n * A class for \"me:experimentalYield\".\n * The attributes may include:\n * ref:string\n * error: number\n * yieldTime: number.\n */\nexport class ExperimentalYield extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentalYield\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExperimentalYield.tagName, value);\n    }\n\n    /**\n     * @returns The ref attribute or undefined if there is no ref attribute.\n     */\n    getRef(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"ref\");\n        }\n    }\n\n    /**\n     * Set the ref attribute.\n     * @param ref The ref.\n     */\n    setRef(ref: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"ref\", ref);\n        }\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number | undefined {\n        if (this.attributes != undefined) {\n            let error: string | undefined = this.attributes.get(\"error\");\n            if (error) {\n                return parseFloat(error);\n            }\n        }\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"error\", error.toString());\n        }\n    }\n\n    /**\n     * @returns The yieldTime attribute or undefined if there is no yieldTime attribute.\n     */\n    getYieldTime(): number | undefined {\n        if (this.attributes != undefined) {\n            let yieldTime: string | undefined = this.attributes.get(\"yieldTime\");\n            if (yieldTime) {\n                return parseFloat(yieldTime);\n            }\n        }\n    }\n\n    /**\n     * Set the yieldTime attribute.\n     * @param yieldTime The yieldTime.\n     */\n    setYieldTime(yieldTime: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"yieldTime\", yieldTime.toString());\n        }\n    }\n}\n\n/**\n * A class for \"me:experimentalEigenvalue\".\n * The attributes may include:\n * EigenvalueID:string\n * error: number\n */\nexport class ExperimentalEigenvalue extends NumberNode {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:experimentalEigenvalue\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExperimentalEigenvalue.tagName, value);\n    }\n\n    /**\n     * @returns The EigenvalueID attribute or undefined if there is no EigenvalueID attribute.\n     */\n    getEigenvalueID(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"EigenvalueID\");\n        }\n    }\n\n    /**\n     * Set the EigenvalueID attribute.\n     * @param EigenvalueID The EigenvalueID.\n     */\n    setEigenvalueID(EigenvalueID: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"EigenvalueID\", EigenvalueID);\n        }\n    }\n\n    /**\n     * @returns The error attribute or undefined if there is no error attribute.\n     */\n    getError(): number | undefined {\n        if (this.attributes != undefined) {\n            let error: string | undefined = this.attributes.get(\"error\");\n            if (error) {\n                return parseFloat(error);\n            }\n        }\n    }\n\n    /**\n     * Set the error attribute.\n     * @param error The error.\n     */\n    setError(error: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"error\", error.toString());\n        }\n    }\n\n}\n\n/**\n * A class for \"me:excessReactantConc\".\n * The attributes may include:\n * percent: string (\"true\" or \"false\")\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n\n    /**\n     * @returns The percent attribute or undefined if there is no percent attribute.\n     */\n    getPercent(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"percent\");\n        }\n    }\n\n    /**\n     * Set the percent attribute.\n     * @param percent The percent.\n     */\n    setPercent(percent: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"percent\", percent);\n        }\n    }\n}\n\n/**\n * A class for representing a Pressure and Temperature pair with optional additional things: BathGas and ExperimentRate.\n * Can there be multiple BathGases and ExperimentRates?\n * The attributes include:\n * units: string\n * P: number\n * T: number\n * And optionally:\n * percentExcessReactantConc: number\n * excessReactantConc: string\n * precision: number\n * bathGas: string\n * If excessReactantConc=\"true\" then the node contains a node of type \"me:excessReactantConc\".\n * \n */\nexport class PTpair extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTpair\";\n\n    /**\n     * The precision attribute potential values.\n     */\n    static readonly precisions: string[] = [\"d\", \"dd\", \"qd\", \"double\", \"double-double\", \"quad-double\"];\n\n    /**\n     * The index. Keys are types and values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */\n    constructor(attributes: Map<string, string>, bathGas?: BathGas, experimentRate?: ExperimentRate,\n        excessReactantConc?: ExperimentalYield, experimentalEigenvalue?: ExperimentalEigenvalue) {\n        super(attributes, PTpair.tagName);\n        this.index = new Map();\n        if (bathGas != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate != undefined) {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExperimentalYield.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n        if (experimentalEigenvalue != undefined) {\n            this.index.set(ExperimentalEigenvalue.tagName, this.nodes.size);\n            this.addNode(experimentalEigenvalue);\n        }\n    }\n\n    /**\n     * @returns The Pressure.\n     */\n    getP(): number {\n        if (this.attributes != undefined) {\n            let p: string | undefined = this.attributes.get(\"P\");\n            if (p != undefined) {\n                return parseFloat(p);\n            }\n        }\n        return NaN;\n    }\n\n    /**\n     * Set The Pressure\n     */\n    setP(p: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"P\", p.toString());\n        }\n    }\n\n    /**\n     * @returns The Temperature.\n     */\n    getT(): number {\n        if (this.attributes != undefined) {\n            let t: string | undefined = this.attributes.get(\"T\");\n            if (t != undefined) {\n                return parseFloat(t);\n            }\n        }\n        return NaN;\n    }\n\n    /**\n     * Set The Temperature.\n     */\n    setT(t: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"T\", t.toString());\n        }\n    }\n\n    /**\n     * @returns The precision attribute or undefined if there is no precision attribute.\n     */\n    getPrecision(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"precision\");\n        }\n    }\n\n    /**\n     * Set the precision attribute.\n     * @param precision The precision.\n     */\n    setPrecision(precision: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"precision\", precision);\n        }\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas | undefined {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i) {\n            return this.nodes.get(i) as BathGas;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas.\n     */\n    setBathGas(bathGas: BathGas) {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i) {\n            this.nodes.set(i, bathGas);\n        } else {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * Remove the bath gas.\n     */\n    removeBathGas() {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i) {\n            this.nodes.delete(i);\n            this.index.delete(BathGas.tagName);\n        }\n    }\n\n    /**\n     * @returns The experiment rate.\n     */\n    getExperimentRate(): ExperimentRate | undefined {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i) {\n            return this.nodes.get(i) as ExperimentRate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentRate The experiment rate.\n     */\n    setExperimentRate(experimentRate: ExperimentRate) {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i) {\n            this.nodes.set(i, experimentRate);\n        } else {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n\n    /**\n     * Remove the experiment rate.\n     */\n    removeExperimentRate() {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i) {\n            this.nodes.delete(i);\n            this.index.delete(ExperimentRate.tagName);\n        }\n    }\n\n    /**\n     * @returns this.attributes.get(\"excessReactantConc\").\n     */\n    getExcessReactantConc(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"excessReactantConc\");\n        }\n    }\n\n    /**\n     * this.attributes.set(\"excessReactantConc\", excessReactantConc).\n     */\n    setExcessReactantConc(excessReactantConc: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"excessReactantConc\", excessReactantConc);\n        }\n    }\n\n    /**\n     * @returns this.attributes.get(\"percentExcessReactantConc\").\n     */\n    getPercentExcessReactantConc(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"percentExcessReactantConc\");\n        }\n    }\n\n    /**\n     * this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc).\n     */\n    setPercentExcessReactantConc(percentExcessReactantConc: string) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"percentExcessReactantConc\", percentExcessReactantConc);\n        }\n    }\n\n\n\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * The Pressure and Temperature pairs.\n     */\n    pTpairs: PTpair[];\n\n    /**\n     * @param attributes The attributes.\n     * @param pTs The PTs.\n     */\n    constructor(attributes: Map<string, string>, pTpairs?: PTpair[]) {\n        super(attributes, PTs.tagName);\n        if (pTpairs != undefined) {\n            pTpairs.forEach((pTpair) => {\n                this.addNode(pTpair);\n            });\n            this.pTpairs = pTpairs;\n        } else {\n            this.pTpairs = [];\n        }\n    }\n\n    /**\n     * @param i The index of the PTpair to return. \n     * @returns The PTpair at the given index or undefined if the index is out of range.\n     */\n    getPTpair(i: number): PTpair {\n        return this.pTpairs[i];\n    }\n\n    /**\n     * Set the PT at the given index.\n     * @param i The index.\n     * @returns The PT pairs.\n     */\n    setPTpair(i: number, pTpair: PTpair): void {\n        this.nodes.set(i, pTpair);\n        this.pTpairs[i] = pTpair;\n    }\n\n    /**\n     * Add a PTpair.\n     * @param pTPair The PTpair to add.\n     * @returns The index of this.pTPairs where pTPair is added.\n     */\n    addPTpair(pTpair: PTpair): number {\n        this.addNode(pTpair);\n        this.pTpairs.push(pTpair);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     */\n    setPTpairs(pTpairs: PTpair[]): void {\n        this.nodes.clear();\n        pTpairs.forEach((pTpair) => {\n            this.addNode(pTpair);\n            this.pTpairs.push(pTpair);\n        });\n    }\n\n    /**\n     * Remove the PT at the given index.\n     * @param i The index.\n     */\n    removePTpair(i: number): void {\n        this.nodes.delete(i);\n        this.pTpairs.splice(i, 1);\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The bath gases index. The keys are the molecule IDs and the values are the node indexes.\n     */\n    bathGasesIndex: Map<string, number>;\n\n    /**\n     * The bath gases.\n     */\n    bathGases: Set<BathGas>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGases The bath gases.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */\n    constructor(attributes: Map<string, string> | undefined, bathGases?: Set<BathGas>, pTs?: PTs) {\n        super(attributes, Conditions.tagName);\n        this.index = new Map();\n        this.bathGasesIndex = new Map();\n        this.bathGases = new Set();\n        if (bathGases != undefined) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            bathGases.forEach((bathGas) => {\n                this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n                this.addNode(bathGas);\n                this.bathGases.add(bathGas);\n            });\n        }\n        if (pTs != undefined) {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n\n    /**\n     * @returns The bath gases.\n     */\n    getBathGases(): Set<BathGas> {\n        return this.bathGases;\n    }\n\n    /**\n     * @param bathGas The bath gas to add.\n     */\n    addBathGas(bathGas: BathGas) {\n        if (!this.bathGases.has(bathGas)) {\n            this.bathGases.add(bathGas);\n            this.bathGasesIndex.set(bathGas.value, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas to remove.\n     */\n    removeBathGas(bathGas: BathGas) {\n        if (this.bathGases.has(bathGas)) {\n            this.bathGases.delete(bathGas);\n            this.nodes.delete(this.bathGasesIndex.get(bathGas.value) as number);\n        } else {\n            console.warn(\"Conditions.removeBathGas: bathGas not found to remove.\");\n        }\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs | undefined {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            return this.nodes.get(i) as PTs;\n        }\n    }\n\n    /**\n     * @param pTs The PTs.\n     */\n    setPTs(pTs: PTs) {\n        let i: number | undefined = this.index.get(PTs.tagName) as number;\n        if (i != undefined) {\n            this.nodes.set(i, pTs);\n        } else {\n            this.index.set(PTs.tagName, this.nodes.size);\n            this.addNode(pTs);\n        }\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for \"me:grainSize\".\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, GrainSize.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:energyAboveTheTopHill\".\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:maxTemperature\".\n */\nexport class MaxTemperature extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:maxTemperature\";\n\n    /**\n     * @para attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MaxTemperature.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    constructor(attributes: Map<string, string> | undefined, grainSize?: GrainSize, \n        automaticallySetMaxEne?: AutomaticallySetMaxEne, energyAboveTheTopHill?: EnergyAboveTheTopHill,\n        maxTemperature?: MaxTemperature) {\n        super(attributes, ModelParameters.tagName);\n        this.index = new Map<string, number>();\n        if (grainSize != undefined) {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n        if (automaticallySetMaxEne != undefined) {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n        if (energyAboveTheTopHill != undefined) {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n        if (maxTemperature != undefined) {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n\n    /**\n     * @returns The grain size or undefined.\n     */\n    getGrainSize(): GrainSize | undefined {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i) {\n            return this.nodes.get(i) as GrainSize;\n        }\n    }\n\n    /**\n     * @param grainSize The grain size.\n     */\n    setGrainSize(grainSize: GrainSize) {\n        let i: number | undefined = this.index.get(GrainSize.tagName);\n        if (i) {\n            this.nodes.set(i, grainSize);\n        } else {\n            this.index.set(GrainSize.tagName, this.nodes.size);\n            this.addNode(grainSize);\n        }\n    }\n\n    /**\n     * @returns The automatically set max energy or undefined.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automatically set max energy.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i: number | undefined = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * @returns The energy above the top hill or undefined.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill | undefined {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            return this.nodes.get(i) as EnergyAboveTheTopHill;\n        }\n    }\n\n    /**\n     * @param energyAboveTheTopHill The energy above the top hill.\n     */\n    setEnergyAboveTheTopHill(energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        let i: number | undefined = this.index.get(EnergyAboveTheTopHill.tagName);\n        if (i) {\n            this.nodes.set(i, energyAboveTheTopHill);\n        } else {\n            this.index.set(EnergyAboveTheTopHill.tagName, this.nodes.size);\n            this.addNode(energyAboveTheTopHill);\n        }\n    }\n\n    /**\n     * @returns The max temperature or undefined.\n     */\n    getMaxTemperature(): MaxTemperature | undefined {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            return this.nodes.get(i) as MaxTemperature;\n        }\n    }\n\n    /**\n     * @param maxTemperature The max temperature.\n     */\n    setMaxTemperature(maxTemperature: MaxTemperature) {\n        let i: number | undefined = this.index.get(MaxTemperature.tagName);\n        if (i) {\n            this.nodes.set(i, maxTemperature);\n        } else {\n            this.index.set(MaxTemperature.tagName, this.nodes.size);\n            this.addNode(maxTemperature);\n        }\n    }\n}","import {\n    Tag, NodeWithNodes, NumberNode, TagWithAttributes, StringNode\n} from \"./xml\";\n\n/**\n * A class for \"me:calculateRateCoefficientsOnly\".\n */\nexport class CalculateRateCoefficientsOnly extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calculateRateCoefficientsOnly\";\n\n    constructor() {\n        super(CalculateRateCoefficientsOnly.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellDOS\".\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCellTransitionStateFlux\".\n */\nexport class PrintCellTransitionStateFlux extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printCellTransitionStateFlux\";\n\n    constructor() {\n        super(PrintCellTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorColumnSums\".\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainBoltzmann\".\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainDOS\".\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkbE\".\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainkfE\".\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTSsos\".\n */\nexport class PrintTSsos extends Tag {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"me:printTSsos\";\n\n    constructor() {\n        super(PrintTSsos.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainedSpeciesProfile\".\n */\nexport class PrintGrainedSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainedSpeciesProfile\";\n\n    constructor() {\n        super(PrintGrainedSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printGrainTransitionStateFlux\".\n */\nexport class PrintGrainTransitionStateFlux extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainTransitionStateFlux\";\n\n    constructor() {\n        super(PrintGrainTransitionStateFlux.tagName);\n    }\n}\n\n/**\n * A class for \"me:printReactionOperatorSize\".\n */\nexport class PrintReactionOperatorSize extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorSize\";\n\n    constructor() {\n        super(PrintReactionOperatorSize.tagName);\n    }\n}\n\n/**\n * A class for \"me:printSpeciesProfile\".\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for \"me:printPhenomenologicalEvolution\".\n */\nexport class PrintPhenomenologicalEvolution extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printPhenomenologicalEvolution\";\n\n    constructor() {\n        super(PrintPhenomenologicalEvolution.tagName);\n    }\n}\n\n/**\n * A class for \"me:printTunnelingCoefficients\".\n */\nexport class PrintTunnelingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnelingCoefficients\";\n\n    constructor() {\n        super(PrintTunnelingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:printCrossingCoefficients\".\n */\nexport class PrintCrossingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCrossingCoefficients\";\n\n    constructor() {\n        super(PrintCrossingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for \"me:testDOS\".\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for \"me:testRateConstant\".\n */\nexport class TestRateConstants extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstants\";\n\n    constructor() {\n        super(TestRateConstants.tagName);\n    }\n}\n\n/**\n * A class for \"me:useTheSameCellNumberForAllConditions.\n */\nexport class UseTheSameCellNumberForAllConditions extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:useTheSameCellNumberForAllConditions\";\n\n    constructor() {\n        super(UseTheSameCellNumberForAllConditions.tagName);\n    }\n}\n\n/**\n * A class for \"me:ForceMacroDetailedBalance\".\n */\nexport class ForceMacroDetailedBalance extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ForceMacroDetailedBalance\";\n\n    constructor() {\n        super(ForceMacroDetailedBalance.tagName);\n    }\n}\n\n/**\n * A class for \"me:hideInactive\".\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for \"me:calcMethod\".\n */\nexport class CalcMethod extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:calcMethod\";\n\n    /**\n     * The possible values.\n     */\n    static readonly options: string[] = [\"simpleCalc\", \"gridSearch\", \"fitting\", \"marquardt\", \"analyticalRepresentation\",\n        \"ThermodynamicTable\", \"sensitivityAnalysis\"];\n\n    /**\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, CalcMethod.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:eigenvalues\".\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:shortestTimeOfInterest\".\n */\nexport class ShortestTimeOfInterest extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:shortestTimeOfInterest\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ShortestTimeOfInterest.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:MaximumEvolutionTime\".\n */\nexport class MaximumEvolutionTime extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MaximumEvolutionTime\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, MaximumEvolutionTime.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:automaticallySetMaxEne\".\n */\nexport class AutomaticallySetMaxEne extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:automaticallySetMaxEne\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, AutomaticallySetMaxEne.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:diagramEnergyOffset\".\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    /**\n      * @param attributes The attributes.\n      * @param value The value.\n      */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for \"me:testMicroRates\".\n * Expected numerical attributes: Tmin, Tmax, Tstep.\n */\nexport class TestMicroRates extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    /**\n     * The minimum temperature.\n     */\n    tMin: number;\n\n    /**\n     * The maximum temperature.\n     */\n    tMax: number;\n\n    /**\n     * The temperature step.\n     */\n    tStep: number;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, TestMicroRates.tagName);\n        this.tMin = parseFloat(attributes.get(\"Tmin\") as string);\n        this.tMax = parseFloat(attributes.get(\"Tmax\") as string);\n        this.tStep = parseFloat(attributes.get(\"Tstep\") as string);\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmin(): number {\n        return this.tMin;\n    }\n\n    /**\n     * @param tMin The minimum temperature.\n     */\n    setTmin(tMin: number) {\n        this.tMin = tMin;\n        this.attributes?.set(\"Tmin\", tMin.toString());\n    }\n\n    /**\n     * @returns The maximum temperature.\n     */\n    getTmax(): number {\n        return this.tMax;\n    }\n\n    /**\n     * @param tMax The maximum temperature.\n     */\n    setTmax(tMax: number) {\n        this.tMax = tMax;\n        this.attributes?.set(\"Tmax\", tMax.toString());\n    }\n\n    /**\n     * @returns The temperature step.\n     */\n    getTstep(): number {\n        return this.tStep;\n    }\n\n    /**\n     * @param tStep The temperature step.\n     */\n    setTstep(tStep: number) {\n        this.tStep = tStep;\n        this.attributes?.set(\"Tstep\", tStep.toString());\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Control.tagName);\n        this.index = new Map<string, number>();\n    }\n\n    /**\n     * @returns The calculateRateCoefficientsOnly or undefined.\n     */\n    getCalculateRateCoefficientsOnly(): CalculateRateCoefficientsOnly | undefined {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalculateRateCoefficientsOnly;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calculateRateCoefficientsOnly The calculateRateCoefficientsOnly.\n     */\n    setCalculateRateCoefficientsOnly(calculateRateCoefficientsOnly: CalculateRateCoefficientsOnly) {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calculateRateCoefficientsOnly);\n        } else {\n            this.index.set(CalculateRateCoefficientsOnly.tagName, this.nodes.size);\n            this.addNode(calculateRateCoefficientsOnly);\n        }\n    }\n\n    /**\n     * Remove the calculateRateCoefficientsOnly.\n     */\n    removeCalculateRateCoefficientsOnly() {\n        let i = this.index.get(CalculateRateCoefficientsOnly.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalculateRateCoefficientsOnly.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellDOS or undefined.\n     */\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellDOS The printCellDOS.\n     */\n    setPrintCellDOS(printCellDOS: PrintCellDOS) {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellDOS);\n        } else {\n            this.index.set(PrintCellDOS.tagName, this.nodes.size);\n            this.addNode(printCellDOS);\n        }\n    }\n\n    /**\n     * Remove the printCellDOS.\n     */\n    removePrintCellDOS() {\n        let i = this.index.get(PrintCellDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCellTransitionStateFlux or undefined.\n     */\n    getPrintCellTransitionStateFlux(): PrintCellTransitionStateFlux | undefined {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCellTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCellTransitionStateFlux The printCellTransitionStateFlux.\n     */\n    setPrintCellTransitionStateFlux(printCellTransitionStateFlux: PrintCellTransitionStateFlux) {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCellTransitionStateFlux);\n        } else {\n            this.index.set(PrintCellTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printCellTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printCellTransitionStateFlux.\n     */\n    removePrintCellTransitionStateFlux() {\n        let i = this.index.get(PrintCellTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCellTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorColumnSums or undefined.\n     */\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     */\n    setPrintReactionOperatorColumnSums(printReactionOperatorColumnSums: PrintReactionOperatorColumnSums) {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorColumnSums);\n        } else {\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorColumnSums);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorColumnSums.\n     */\n    removePrintReactionOperatorColumnSums() {\n        let i = this.index.get(PrintReactionOperatorColumnSums.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorColumnSums.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainBoltzmann or undefined.\n     */\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     */\n    setPrintGrainBoltzmann(printGrainBoltzmann: PrintGrainBoltzmann) {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainBoltzmann);\n        } else {\n            this.index.set(PrintGrainBoltzmann.tagName, this.nodes.size);\n            this.addNode(printGrainBoltzmann);\n        }\n    }\n\n    /**\n     * Remove the printGrainBoltzmann.\n     */\n    removePrintGrainBoltzmann() {\n        let i = this.index.get(PrintGrainBoltzmann.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainBoltzmann.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainDOS or undefined.\n     */\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainDOS The printGrainDOS.\n     */\n    setPrintGrainDOS(printGrainDOS: PrintGrainDOS) {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainDOS);\n        } else {\n            this.index.set(PrintGrainDOS.tagName, this.nodes.size);\n            this.addNode(printGrainDOS);\n        }\n    }\n\n    /**\n     * Remove the printGrainDOS.\n     */\n    removePrintGrainDOS() {\n        let i = this.index.get(PrintGrainDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkbE or undefined.\n     */\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkbE The printGrainkbE.\n     */\n    setPrintGrainkbE(printGrainkbE: PrintGrainkbE) {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkbE);\n        } else {\n            this.index.set(PrintGrainkbE.tagName, this.nodes.size);\n            this.addNode(printGrainkbE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkbE.\n     */\n    removePrintGrainkbE() {\n        let i = this.index.get(PrintGrainkbE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkbE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainkfE or undefined.\n     */\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainkfE The printGrainkfE.\n     */\n    setPrintGrainkfE(printGrainkfE: PrintGrainkfE) {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainkfE);\n        } else {\n            this.index.set(PrintGrainkfE.tagName, this.nodes.size);\n            this.addNode(printGrainkfE);\n        }\n    }\n\n    /**\n     * Remove the printGrainkfE.\n     */\n    removePrintGrainkfE() {\n        let i = this.index.get(PrintGrainkfE.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainkfE.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTSsos or undefined.\n     */\n    getPrintTSsos(): PrintTSsos | undefined {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTSsos;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTSsos The printTSsos.\n     */\n    setPrintTSsos(printTSsos: PrintTSsos) {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTSsos);\n        } else {\n            this.index.set(PrintTSsos.tagName, this.nodes.size);\n            this.addNode(printTSsos);\n        }\n    }\n\n    /**\n     * Remove the printTSsos.\n     */\n    removePrintTSsos() {\n        let i = this.index.get(PrintTSsos.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTSsos.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainedSpeciesProfile or undefined.\n     */\n    getPrintGrainedSpeciesProfile(): PrintGrainedSpeciesProfile | undefined {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainedSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainedSpeciesProfile The printGrainedSpeciesProfile.\n     */\n    setPrintGrainedSpeciesProfile(printGrainedSpeciesProfile: PrintGrainedSpeciesProfile) {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainedSpeciesProfile);\n        } else {\n            this.index.set(PrintGrainedSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printGrainedSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printGrainedSpeciesProfile.\n     */\n    removePrintGrainedSpeciesProfile() {\n        let i = this.index.get(PrintGrainedSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainedSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printGrainTransitionStateFlux or undefined.\n     */\n    getPrintGrainTransitionStateFlux(): PrintGrainTransitionStateFlux | undefined {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintGrainTransitionStateFlux;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printGrainTransitionStateFlux The printGrainTransitionStateFlux.\n     */\n    setPrintGrainTransitionStateFlux(printGrainTransitionStateFlux: PrintGrainTransitionStateFlux) {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printGrainTransitionStateFlux);\n        } else {\n            this.index.set(PrintGrainTransitionStateFlux.tagName, this.nodes.size);\n            this.addNode(printGrainTransitionStateFlux);\n        }\n    }\n\n    /**\n     * Remove the printGrainTransitionStateFlux.\n     */\n    removePrintGrainTransitionStateFlux() {\n        let i = this.index.get(PrintGrainTransitionStateFlux.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintGrainTransitionStateFlux.tagName);\n        }\n    }\n\n    /**\n     * @returns The printReactionOperatorSize or undefined.\n     */\n    getPrintReactionOperatorSize(): PrintReactionOperatorSize | undefined {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintReactionOperatorSize;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printReactionOperatorSize The printReactionOperatorSize.\n     */\n    setPrintReactionOperatorSize(printReactionOperatorSize: PrintReactionOperatorSize) {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printReactionOperatorSize);\n        } else {\n            this.index.set(PrintReactionOperatorSize.tagName, this.nodes.size);\n            this.addNode(printReactionOperatorSize);\n        }\n    }\n\n    /**\n     * Remove the printReactionOperatorSize.\n     */\n    removePrintReactionOperatorSize() {\n        let i = this.index.get(PrintReactionOperatorSize.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintReactionOperatorSize.tagName);\n        }\n    }\n\n    /**\n     * @returns The printSpeciesProfile or undefined.\n     */\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printSpeciesProfile The printSpeciesProfile.\n     */\n    setPrintSpeciesProfile(printSpeciesProfile: PrintSpeciesProfile) {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printSpeciesProfile);\n        } else {\n            this.index.set(PrintSpeciesProfile.tagName, this.nodes.size);\n            this.addNode(printSpeciesProfile);\n        }\n    }\n\n    /**\n     * Remove the printSpeciesProfile.\n     */\n    removePrintSpeciesProfile() {\n        let i = this.index.get(PrintSpeciesProfile.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintSpeciesProfile.tagName);\n        }\n    }\n\n    /**\n     * @returns The printPhenomenologicalEvolution or undefined.\n     */\n    getPrintPhenomenologicalEvolution(): PrintPhenomenologicalEvolution | undefined {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintPhenomenologicalEvolution;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printPhenomenologicalEvolution The printPhenomenologicalEvolution.\n     */\n    setPrintPhenomenologicalEvolution(printPhenomenologicalEvolution: PrintPhenomenologicalEvolution) {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printPhenomenologicalEvolution);\n        } else {\n            this.index.set(PrintPhenomenologicalEvolution.tagName, this.nodes.size);\n            this.addNode(printPhenomenologicalEvolution);\n        }\n    }\n\n    /**\n     * Remove the printPhenomenologicalEvolution.\n     */\n    removePrintPhenomenologicalEvolution() {\n        let i = this.index.get(PrintPhenomenologicalEvolution.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintPhenomenologicalEvolution.tagName);\n        }\n    }\n\n    /**\n     * @returns The printTunnelingCoefficients or undefined.\n     */\n    getPrintTunnelingCoefficients(): PrintTunnelingCoefficients | undefined {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintTunnelingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printTunnelingCoefficients The printTunnelingCoefficients.\n     */\n    setPrintTunnelingCoefficients(printTunnelingCoefficients: PrintTunnelingCoefficients) {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printTunnelingCoefficients);\n        } else {\n            this.index.set(PrintTunnelingCoefficients.tagName, this.nodes.size);\n            this.addNode(printTunnelingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printTunnelingCoefficients.\n     */\n    removePrintTunnelingCoefficients() {\n        let i = this.index.get(PrintTunnelingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintTunnelingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The printCrossingCoefficients or undefined.\n     */\n    getPrintCrossingCoefficients(): PrintCrossingCoefficients | undefined {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as PrintCrossingCoefficients;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param printCrossingCoefficients The printCrossingCoefficients.\n     */\n    setPrintCrossingCoefficients(printCrossingCoefficients: PrintCrossingCoefficients) {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, printCrossingCoefficients);\n        } else {\n            this.index.set(PrintCrossingCoefficients.tagName, this.nodes.size);\n            this.addNode(printCrossingCoefficients);\n        }\n    }\n\n    /**\n     * Remove the printCrossingCoefficients.\n     */\n    removePrintCrossingCoefficients() {\n        let i = this.index.get(PrintCrossingCoefficients.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(PrintCrossingCoefficients.tagName);\n        }\n    }\n\n    /**\n     * @returns The testDOS or undefined.\n     */\n    getTestDOS(): TestDOS | undefined {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestDOS;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testDOS The testDOS.\n     */\n    setTestDOS(testDOS: TestDOS) {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testDOS);\n        } else {\n            this.index.set(TestDOS.tagName, this.nodes.size);\n            this.addNode(testDOS);\n        }\n    }\n\n    /**\n     * Remove the testDOS.\n     */\n    removeTestDOS() {\n        let i = this.index.get(TestDOS.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestDOS.tagName);\n        }\n    }\n\n    /**\n     * @returns The testRateConstant or undefined.\n     */\n    getTestRateConstants(): TestRateConstants | undefined {\n        let i = this.index.get(TestRateConstants.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestRateConstants;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testRateConstant The testRateConstant.\n     */\n    setTestRateConstants(testRateConstant: TestRateConstants) {\n        let i = this.index.get(TestRateConstants.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testRateConstant);\n        } else {\n            this.index.set(TestRateConstants.tagName, this.nodes.size);\n            this.addNode(testRateConstant);\n        }\n    }\n\n    /**\n     * Remove the testRateConstant.\n     */\n    removeTestRateConstants() {\n        let i = this.index.get(TestRateConstants.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestRateConstants.tagName);\n        }\n    }\n\n    /**\n     * @returns The useTheSameCellNumberForAllConditions or undefined.\n     */\n    getUseTheSameCellNumberForAllConditions(): UseTheSameCellNumberForAllConditions | undefined {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as UseTheSameCellNumberForAllConditions;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param useTheSameCellNumberForAllConditions The useTheSameCellNumberForAllConditions.\n     */\n    setUseTheSameCellNumberForAllConditions(useTheSameCellNumberForAllConditions: UseTheSameCellNumberForAllConditions) {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, useTheSameCellNumberForAllConditions);\n        } else {\n            this.index.set(UseTheSameCellNumberForAllConditions.tagName, this.nodes.size);\n            this.addNode(useTheSameCellNumberForAllConditions);\n        }\n    }\n\n    /**\n     * Remove the useTheSameCellNumberForAllConditions.\n     */\n    removeUseTheSameCellNumberForAllConditions() {\n        let i = this.index.get(UseTheSameCellNumberForAllConditions.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(UseTheSameCellNumberForAllConditions.tagName);\n        }\n    }\n\n    /**\n     * @returns The hideInactive or undefined.\n     */\n    getHideInactive(): HideInactive | undefined {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as HideInactive;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param hideInactive The hideInactive.\n     */\n    setHideInactive(hideInactive: HideInactive) {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, hideInactive);\n        } else {\n            this.index.set(HideInactive.tagName, this.nodes.size);\n            this.addNode(hideInactive);\n        }\n    }\n\n    /**\n     * Remove the hideInactive.\n     */\n    removeHideInactive() {\n        let i = this.index.get(HideInactive.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(HideInactive.tagName);\n        }\n    }\n\n    /**\n     * @returns The ForceMacroDetailedBalance or undefined.\n     */\n    getForceMacroDetailedBalance(): ForceMacroDetailedBalance | undefined {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ForceMacroDetailedBalance;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param forceMacroDetailedBalance The forceMacroDetailedBalance.\n     */\n    setForceMacroDetailedBalance(forceMacroDetailedBalance: ForceMacroDetailedBalance) {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, forceMacroDetailedBalance);\n        } else {\n            this.index.set(ForceMacroDetailedBalance.tagName, this.nodes.size);\n            this.addNode(forceMacroDetailedBalance);\n        }\n    }\n\n    /**\n     * Remove the forceMacroDetailedBalance.\n     */\n    removeForceMacroDetailedBalance() {\n        let i = this.index.get(ForceMacroDetailedBalance.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ForceMacroDetailedBalance.tagName);\n        }\n    }\n\n    /**\n     * @returns The calcMethod or undefined.\n     */\n    getCalcMethod(): CalcMethod | undefined {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as CalcMethod;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param calcMethod The calcMethod.\n     */\n    setCalcMethod(calcMethod: CalcMethod) {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, calcMethod);\n        } else {\n            this.index.set(CalcMethod.tagName, this.nodes.size);\n            this.addNode(calcMethod);\n        }\n    }\n\n    /**\n     * Remove the calcMethod.\n     */\n    removeCalcMethod() {\n        let i = this.index.get(CalcMethod.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(CalcMethod.tagName);\n        }\n    }\n\n    /**\n     * @returns The eigenvalues or undefined.\n     */\n    getEigenvalues(): Eigenvalues | undefined {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param eigenvalues The eigenvalues.\n     */\n    setEigenvalues(eigenvalues: Eigenvalues) {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, eigenvalues);\n        } else {\n            this.index.set(Eigenvalues.tagName, this.nodes.size);\n            this.addNode(eigenvalues);\n        }\n    }\n\n    /**\n     * Remove the eigenvalues.\n     */\n    removeEigenvalues() {\n        let i = this.index.get(Eigenvalues.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(Eigenvalues.tagName);\n        }\n    }\n\n    /**\n     * @returns The shortestTimeOfInterest.\n     */\n    getShortestTimeOfInterest(): ShortestTimeOfInterest | undefined {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as ShortestTimeOfInterest;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param shortestTimeOfInterest The shortestTimeOfInterest.\n     */\n    setShortestTimeOfInterest(shortestTimeOfInterest: ShortestTimeOfInterest) {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, shortestTimeOfInterest);\n        } else {\n            this.index.set(ShortestTimeOfInterest.tagName, this.nodes.size);\n            this.addNode(shortestTimeOfInterest);\n        }\n    }\n\n    /**\n     * Remove the shortestTimeOfInterest.\n     */\n    removeShortestTimeOfInterest() {\n        let i = this.index.get(ShortestTimeOfInterest.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(ShortestTimeOfInterest.tagName);\n        }\n    }\n\n    /**\n     * @returns The MaximumEvolutionTime.\n     */\n    getMaximumEvolutionTime(): MaximumEvolutionTime | undefined {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as MaximumEvolutionTime;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param MaximumEvolutionTime The MaximumEvolutionTime.\n     */\n    setMaximumEvolutionTime(MaximumEvolutionTime: MaximumEvolutionTime) {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, MaximumEvolutionTime);\n        } else {\n            this.index.set(MaximumEvolutionTime.tagName, this.nodes.size);\n            this.addNode(MaximumEvolutionTime);\n        }\n    }\n\n    /**\n     * Remove the MaximumEvolutionTime.\n     */\n    removeMaximumEvolutionTime() {\n        let i = this.index.get(MaximumEvolutionTime.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(MaximumEvolutionTime.tagName);\n        }\n    }\n\n    /**\n     * @returns The automaticallySetMaxEne.\n     */\n    getAutomaticallySetMaxEne(): AutomaticallySetMaxEne | undefined {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as AutomaticallySetMaxEne;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param automaticallySetMaxEne The automaticallySetMaxEne.\n     */\n    setAutomaticallySetMaxEne(automaticallySetMaxEne: AutomaticallySetMaxEne) {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, automaticallySetMaxEne);\n        } else {\n            this.index.set(AutomaticallySetMaxEne.tagName, this.nodes.size);\n            this.addNode(automaticallySetMaxEne);\n        }\n    }\n\n    /**\n     * Remove the automaticallySetMaxEne.\n     */\n    removeAutomaticallySetMaxEne() {\n        let i = this.index.get(AutomaticallySetMaxEne.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(AutomaticallySetMaxEne.tagName);\n        }\n    }\n\n    /**\n     * @returns The diagramEnergyOffset.\n     */\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    setDiagramEnergyOffset(diagramEnergyOffset: DiagramEnergyOffset) {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, diagramEnergyOffset);\n        } else {\n            this.index.set(DiagramEnergyOffset.tagName, this.nodes.size);\n            this.addNode(diagramEnergyOffset);\n        }\n    }\n\n    /**\n     * Remove the diagramEnergyOffset.\n     */\n    removeDiagramEnergyOffset() {\n        let i = this.index.get(DiagramEnergyOffset.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(DiagramEnergyOffset.tagName);\n        }\n    }\n\n    /**\n     * @returns The testMicroRates or undefined.\n     */\n    getTestMicroRates(): TestMicroRates | undefined {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            return this.nodes.get(i) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    /**\n     * @param testMicroRates The testMicroRates.\n     */\n    setTestMicroRates(testMicroRates: TestMicroRates) {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, testMicroRates);\n        } else {\n            this.index.set(TestMicroRates.tagName, this.nodes.size);\n            this.addNode(testMicroRates);\n        }\n    }\n\n    /**\n     * Remove the testMicroRates.\n     */\n    removeTestMicroRates() {\n        let i = this.index.get(TestMicroRates.tagName);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(TestMicroRates.tagName);\n        }\n    }\n\n}","import { Conditions } from \"./conditions.js\";\nimport { Control } from \"./control.js\";\nimport { ModelParameters } from \"./modelParameters.js\";\nimport { Molecule } from \"./molecule.js\";\nimport { Reaction } from \"./reaction.js\";\nimport { NodeWithNodes, StringNode } from \"./xml.js\";\n\n/**\n * The title.\n */\nexport class Title extends StringNode {\n\n    static readonly tagName: string = \"me:title\";\n\n    /**\n     * @param value \n     */\n    constructor(attributes: Map<string, string>, value: string) {\n        super(attributes, Title.tagName, value);\n    }\n\n}\n\n\n/**\n * A class for representing a \"moleculeList\".\n * In the XML, a \"moleculeList\" node is a child node of the \"me:mesmer\" node and has \"molecule\" node children.\n */\nexport class MoleculeList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"moleculeList\";\n\n    /**\n     * The index. The keys are the molecule ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecules?: Molecule[]) {\n        super(attributes, MoleculeList.tagName);\n        this.index = new Map();\n        if (molecules != undefined) {\n            molecules.forEach(molecule => {\n                this.nodes.set(this.nodes.size, molecule);\n                this.index.set(molecule.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */\n    getMolecule(id: string): Molecule | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Molecule;\n    }\n\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */\n    removeMolecule(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */\n    addMolecule(molecule: Molecule): void {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log('Replaced molecule with id ' + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"reactionList\".\n * In the XML, a \"reactionList\" node is a child node of a \"me:mesmer\" node and has \"reaction\" node children.\n */\nexport class ReactionList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactionList\";\n\n    /**\n     * The index. The keys are the reaction ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */\n    constructor(attributes: Map<string, string>, reactions?: Reaction[]) {\n        super(attributes, ReactionList.tagName);\n        this.index = new Map();\n        if (reactions != undefined) {\n            reactions.forEach(reaction => {\n                this.nodes.set(this.nodes.size, reaction);\n                this.index.set(reaction.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */\n    getReaction(id: string): Reaction | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Reaction;\n    }\n\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */\n    removeReaction(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */\n    addReaction(reaction: Reaction): void {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log('Replaced reaction with id ' + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * The \"me:mesmer\" node contains a \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \n * \"me:modelParameters\" and \"me:control\".\n */\nexport class Mesmer extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:mesmer\";\n\n    /**\n     * The header of the XML file.\n     */\n    static header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeList The molecule list.\n     * @param reactionList The reaction list.\n     * @param conditions The conditions.\n     * @param modelParameters The model parameters.\n     * @param control The control.\n     */\n    constructor(attributes: Map<string, string>, title?: Title, moleculeList?: MoleculeList, reactionList?: ReactionList,\n        conditions?: Conditions, modelParameters?: ModelParameters, control?: Control) {\n        super(attributes, Mesmer.tagName);\n        this.index = new Map();\n        if (title != undefined) {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n        if (moleculeList != undefined) {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        if (conditions != undefined) {\n            this.index.set(Conditions.tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n        if (modelParameters != undefined) {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        if (control != undefined) {\n            this.index.set(Control.tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n\n    /**\n     * @returns The title.\n     */\n    getTitle() {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Title;\n    }\n\n    /**\n     * Set the title.\n     * @param title The title.\n     */\n    setTitle(title: Title) {\n        let i: number | undefined = this.index.get(Title.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, title);\n        } else {\n            this.index.set(Title.tagName, this.nodes.size);\n            this.addNode(title);\n        }\n    }\n\n    /**\n     * @returns The molecule list.\n     */\n    getMoleculeList() {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as MoleculeList;\n    }\n\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */\n    setMoleculeList(moleculeList: MoleculeList) {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, moleculeList);\n        } else {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n\n    /**\n     * @returns The reaction list.\n     */\n    getReactionList() {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ReactionList;\n    }\n\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */\n    setReactionList(reactionList: ReactionList) {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, reactionList);\n        } else {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n\n    /**\n     * @returns The conditions.\n     */\n    getConditions() {\n        let i: number | undefined = this.index.get(Conditions.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Conditions;\n    }\n\n    /**\n     * Set the conditions.\n     * @param conditions The conditions.\n     */\n    setConditions(conditions: Conditions) {\n        let i: number | undefined = this.index.get(Conditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, conditions);\n        } else {\n            this.index.set(Conditions.tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n\n    /**\n     * @returns The model parameters.\n     */\n    getModelParameters() {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ModelParameters;\n    }\n\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */\n    setModelParameters(modelParameters: ModelParameters) {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, modelParameters);\n        } else {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n\n    /**\n     * @returns The control.\n     */\n    getControl() {\n        let i: number | undefined = this.index.get(Control.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Control;\n    }\n\n    /**\n     * Set the control.\n     * @param control The control.\n     */\n    setControl(control: Control) {\n        let i: number | undefined = this.index.get(Control.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, control);\n        } else {\n            this.index.set(Control.tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n}"],"names":[],"version":3,"file":"index.50584fd7.js.map","sourceRoot":"/__parcel_source_root/"}