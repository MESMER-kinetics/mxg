{"mappings":"ACAA;;;;;;CAMC,GACM,SAAS,0CAAI,GAAkB,EAAE,GAAQ;IAC5C,IAAI,CAAC,IAAI,GAAG,CAAC,MACT,MAAM,IAAI,MAAM,CAAC,IAAI,EAAE,IAAI,iBAAiB,CAAC;IAEjD,OAAO,IAAI,GAAG,CAAC;AACnB;AAWO,SAAS,0CAAQ,GAAW,EAAE,KAAa,EAAE,MAAc,EAAE,QAAgB,EAAE,KAAa;IAC/F,sEAAsE;IACtE,iEAAiE;IACjE,OAAO,AAAE,CAAA,QAAQ,GAAE,IAAM,WAAa,CAAA,QAAQ,GAAE,IAAO;AAC3D;AAOO,SAAS,yCAAY,GAAkB;IAC1C,IAAI,OAAO,MACP,OAAO;IAEX,OAAO,MAAM,IAAI,CAAC,IAAI,OAAO,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,MAAM,GAC9C,CAAC,EAAE,OAAO,OAAO,SAAS,IAAI,QAAQ,GAAG,CAAC,EAAE,SAAS,OAAO,SAAS,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC;AACvG;AAOO,SAAS,yCAAc,KAAY,EAAE,SAAiB;IACzD,IAAI,SAAS,MACT,OAAO;IAEX,IAAI,aAAa,MACb,YAAY;IAEhB,OAAO,MAAM,GAAG,CAAC,CAAC,QAAU,SAAS,OAAO,SAAS,MAAM,QAAQ,IAAI,IAAI,CAAC;AAChF;AAOO,SAAS,0CAAc,CAAW;IACrC,IAAI,IAAc,EAAE;IACpB,IAAK,IAAI,IAAI,GAAG,IAAI,EAAE,MAAM,EAAE,IAC1B,EAAE,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;IAE1B,OAAO;AACX;AAOO,SAAS,0CAAU,CAAS;IAC/B,OAAO,CAAC,MAAM,WAAW;AAC7B;;;AE7EA;;;;CAIC,GACM,SAAS,0CAAM,QAAkB;IACpC,IAAI,KAAK;IACT,IAAK,IAAI,IAAI,GAAG,IAAI,SAAS,MAAM,EAAE,IACjC,MAAM,SAAS,QAAQ,CAAC,EAAE,GAAG;IAEjC,OAAO,yCAAM;AACjB;AAQO,SAAS,0CAAM,CAAS,EAAE,kBAA2B,KAAK;IAC7D,IAAI,IAAY;IAChB,IAAI,iBACA,KAAK;IAET,KAAK,MAAM,IAAI;IACf,OAAO;AACX;AAOO,SAAS,yCAAM,CAAS;IAC3B,OAAO,SAAS,IAAI;AACxB;AAOO,SAAS,0CAAS,CAAS;IAC9B,OAAO,YAAY,IAAI;AAC3B;AASO,SAAS,0CAAO,CAAS,EAAE,EAAiB,EAAE,UAAyB;IAC1E,IAAI,IAAY;IAChB,IAAI,OAAO,MACP,KAAK,UAAW,KAAK;IAEzB,IAAI,eAAe,MACf,KAAK,aAAc,aAAa;IAEpC,OAAO,IAAI,MAAM,IAAI;AACzB;AAUO,SAAS,0CAAS,IAAY,EAAE,EAAiB,EAAE,IAAmB,EACzE,KAAqB;IACrB,IAAI,IAAY,kBAAmB,OAAO;IAC1C,IAAI,OAAO,MACP,KAAK,UAAW,KAAK;IAEzB,IAAI,SAAS,MACT,KAAK,gBAAiB,OAAO;IAEjC,IAAI,UAAU,MACV,KAAK,aAAc,QAAQ;IAE/B,OAAO,IAAI;AACf;AAOO,SAAS,0CAAkB,UAAsC,EAAE,OAAe;IACrF,IAAI,IAAY,MAAM;IACtB,IAAI,YACA,KAAK,IAAI,CAAC,KAAK,MAAM,IAAI,WACrB,KAAK,MAAM,MAAM,OAAQ,QAAQ;IAGzC,OAAO,IAAI;AACf;;;ADxFO,SAAS,0CAAa,GAAY,EAAE,IAAY;IACnD,IAAI,IAAmB,IAAI,YAAY,CAAC;IACxC,IAAI,CAAC,GACD,MAAM,IAAI,MAAM,OAAO;IAE3B,OAAO;AACX;AASO,SAAS,0CAAgB,OAAgB,EAAE,OAAe;IAC7D,IAAI,KAAqB,QAAQ,oBAAoB,CAAC,QAAQ,CAAC,EAAE;IACjE,IAAI,MAAM,MACN,MAAM,IAAI,MAAM,UAAU;IAE9B,OAAO;AACX;AAQO,SAAS,0CAAkB,OAAgB;IAC9C,IAAI,KAA4B,QAAQ,UAAU;IAClD,IAAI,MAAM,MACN,MAAM,IAAI,MAAM;IAEpB,OAAO,EAAE,CAAC,EAAE;AAChB;AAQO,SAAS,0CAAa,IAAe;IACxC,IAAI,YAA2B,KAAK,SAAS;IAC7C,IAAI,aAAa,MACb,MAAM,IAAI,MAAM;IAEpB,OAAO;AACX;AAKO,MAAM;IAOT;;KAEC,GACD,YAAY,OAAe,CAAE;QACzB,IAAI,CAAC,OAAO,GAAG;IACnB;IAEA;;;;;KAKC,GACD,MAAM,OAA4B,EAAU;QACxC,IAAI,IAAI,CAAA,GAAA,yCAAgB,EAAE,MAAM,IAAI,CAAC,OAAO;QAC5C,IAAI,SACA,OAAO,OAAO,UAAU;QAE5B,OAAO;IACX;AACJ;AAMO,MAAM,kDAA0B;IAOnC;;KAEC,GACD,YAAY,UAA+B,EAAE,OAAe,CAAE;QAC1D,KAAK,CAAC;QACN,IAAI,CAAC,UAAU,GAAG;IACtB;IAEA;;KAEC,GACD,WAAmB;QACf,IAAI,IAAI,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,OAAO;YAC5B,KAAK,CAAC,EAAE,IAAI,CAAC,EAAE,MAAM,GAAG,CAAC;QAC7B;QACA,OAAO;IACX;IAEA;;;;;KAKC,GACD,MAAM,OAAgB,EAAU;QAC5B,IAAI,IAAY;QAChB,IAAI,WAAW,WACX,KAAK,OAAO;QAEhB,KAAK,MAAM,IAAI,CAAC,OAAO;QACvB,IAAI,IAAI,CAAC,UAAU,EACf,KAAK,IAAI,CAAC,GAAG,EAAE,IAAI,IAAI,CAAC,UAAU,CAC9B,KAAK,MAAM,IAAI,OAAO,EAAE,QAAQ,KAAK;QAG7C,OAAO,IAAI;IACf;AACJ;AAKO,MAAM,kDAAmB;IAO5B;;;KAGC,GACD,YAAY,UAA+B,EAAE,OAAe,EAAE,KAAa,CAAE;QACzE,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,KAAK,GAAG;IACjB;IAEA;;KAEC,GACD,WAAmB;QACf,OAAO,KAAK,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC3D;IAEA;;;;KAIC,GACD,AAAS,MAAM,OAAgB,EAAU;QACrC,OAAO,0CAAO,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS;IAC7E;AACJ;AAKO,MAAM,kDAAmB;IAO5B;;;KAGC,GACD,YAAY,UAA+B,EAAE,OAAe,EAAE,KAAa,CAAE;QACzE,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,KAAK,GAAG;IACjB;IAEA;;KAEC,GACD,WAAmB;QACf,OAAO,KAAK,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC3D;IAEA;;;;KAIC,GACD,AAAS,MAAM,OAAgB,EAAU;QACrC,OAAO,0CAAO,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,IAAI,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS;IACxF;AACJ;AAKO,MAAM,kDAAwB;IAYjC;;;;;KAKC,GACD,YAAY,UAA+B,EAAE,OAAe,EAAE,MAAgB,EAAE,SAAkB,CAAE;QAChG,KAAK,CAAC,YAAY;QAZtB;;KAEC,QACD,YAAoB;QAUhB,IAAI,CAAC,MAAM,GAAG;QACd,IAAI,WACA,IAAI,CAAC,SAAS,GAAG;IAEzB;IAEA;;KAEC,GACD,WAAmB;QACf,OAAO,KAAK,CAAC,aAAa,CAAC,EAAE,EAAE,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,CAAC,CAAC;IAC5D;IAEA;;;KAGC,GACD,aAAa,SAAiB,EAAE;QAC5B,IAAI,CAAC,SAAS,GAAG;IACrB;IAEA;;;;KAIC,GACD,MAAM,OAAgB,EAAU;QAC5B,OAAO,0CAAO,IAAI,CAAC,MAAM,CAAC,QAAQ,GAAG,UAAU,CAAC,KAAK,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS;IAClH;AACJ;AAKO,MAAM,kDAAsB;IAO/B;;;KAGC,GACD,YAAY,UAA+B,EAAE,OAAe,CAAE;QAC1D,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,KAAK,GAAG,IAAI;IACrB;IAEA;;;KAGC,GACD,QAAQ,IAA6C,EAAQ;QACzD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;IACpC;IAEA;;KAEC,GACD,AAAS,WAAmB;QACxB,IAAI,IAAI,KAAK,CAAC;QACd,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,GAAG;YACnB,KAAK,CAAC,EAAE,EAAE,EAAE,QAAQ,GAAG,CAAC;QAC5B;QACA,OAAO,IAAI;IACf;IAEA;;;;;KAKC,GACD,MAAM,GAAY,EAAE,OAAgB,EAAU;QAC1C,IAAI;QACJ,IAAI,OAAO,aAAa,WAAW,WAC/B,WAAW,UAAU;QAEzB,IAAI,IAAY;QAChB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,GAAG,GAAG;YACrB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;gBAChB,IAAI,aAAa,2CACb,KAAK,AAAC,EAAoB,KAAK,CAAC,KAAK;qBAClC,IAAI,aAAa,2CACpB,KAAK,AAAC,EAAwB,KAAK,CAAC;qBAEpC,KAAK,AAAC,EAAU,KAAK,CAAC;YAE9B;YACA,OAAO,0CAAO,GAAG,IAAI,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,EAAE,SAAS;QAC7D,OAAO;YACH,IAAI,IAAY,CAAA,GAAA,yCAAgB,EAAE,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,OAAO;YAC/D,IAAI,WAAW,WACX,OAAO,OAAO,UAAU;YAE5B,OAAO;QACX;IACJ;AACJ;AAUO,SAAS,0CAAY,OAAe,EAAE,UAA6B,EAAE,OAAgB;IACxF,IAAI,IAAY;IAChB,IAAI,WAAW,WACX,KAAK,OAAO;IAEhB,KAAK,MAAM;IACX,IAAI,YACA,KAAK,IAAI,CAAC,GAAG,EAAE,IAAI,WACf,KAAK,MAAM,IAAI,OAAO,EAAE,QAAQ,KAAK;IAG7C,OAAO,IAAI;AACf;AASO,SAAS,0CAAU,OAAe,EAAE,OAAgB,EAAE,QAAkB;IAC3E,IAAI,IAAY;IAChB,IAAI,UACA;QAAA,IAAI,WAAW,WACX,KAAK,OAAO;IAChB;IAEJ,OAAO,IAAI,OAAO,UAAU;AAChC;AAYO,SAAS,0CAAO,OAAe,EAAE,OAAe,EAAE,UAA6B,EAAE,OAAgB,EAAE,QAAkB;IACxH,IAAI,WAAmB,0CAAY,SAAS,YAAY;IACxD,IAAI,SAAiB,0CAAU,SAAS,SAAS;IACjD,OAAO,WAAW,UAAU;AAChC;AAOO,SAAS,0CAAc,OAAgB;IAC1C,IAAI,iBAA2B,QAAQ,iBAAiB;IACxD,IAAI,aAAkC,IAAI;IAC1C,eAAe,OAAO,CAAC,SAAU,aAAa;QAC1C,IAAI,iBAAgC,QAAQ,YAAY,CAAC;QACzD,IAAI,kBAAkB,MAClB,WAAW,GAAG,CAAC,eAAe;IAGtC;IACA,OAAO;AACX;AASO,SAAS,0CAAmB,GAA0B,EAAE,OAAe;IAE1E,IAAI,IAA+B,IAAI,oBAAoB,CAAC;IAC5D,IAAI,EAAE,MAAM,IAAI,GACZ,MAAM,IAAI,MAAM,iBAAiB,UAAU,kBAAkB,EAAE,MAAM;IAEzE,OAAO,CAAC,CAAC,EAAE;AACf;AAMO,SAAS,0CAAO,IAAY;IAC/B,OAAO,KAAK,OAAO,CAAC,MAAM,QACrB,OAAO,CAAC,MAAM,QACd,OAAO,CAAC,OAAO,QACf,OAAO,CAAC,OAAO,4BACf,OAAO,CAAC,OAAO;AACxB;;;;AEjbO,MAAM,kDAAa,CAAA,GAAA,yCAAgB;;QAEtC;;KAEC,QACe,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,CAAE;QACzC,KAAK,CAAC,YAAY,0CAAK,OAAO;QAC9B,IAAI,KAAyB,WAAW,GAAG,CAAC;QAC5C,IAAI,MAAM,WACN,QAAQ,IAAI,CAAC,0CAAK,OAAO,GAAG;QAEhC,IAAI,cAAkC,WAAW,GAAG,CAAC;QACrD,IAAI,eAAe,WACf,QAAQ,IAAI,CAAC,0CAAK,OAAO,GAAG;IAEpC;IAEA;;KAEC,GACD,IAAI,KAAa;QACb,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B;IAEA;;KAEC,GACD,IAAI,cAAsB;QACtB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B;AACJ;AAKO,MAAM,kDAAkB,CAAA,GAAA,yCAAY;;QAEvC;;IAEA,QACgB,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAU,OAAO;QACnC,MAAM,OAAO,CAAC,CAAA;YACV,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QACpC;IACJ;AACJ;AASO,MAAM,kDAAa,CAAA,GAAA,yCAAgB;;QAEtC;;KAEC,QACe,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,CAAE;QACzC,KAAK,CAAC,YAAY,0CAAK,OAAO;IAClC;AACJ;AAKO,MAAM,kDAAkB,CAAA,GAAA,yCAAY;;QAEvC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAU,OAAO;QACnC,MAAM,OAAO,CAAC,CAAA;YACV,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QACpC;IACJ;AACJ;AAKO,MAAM,kDAAuB,CAAA,GAAA,yCAAS;;QAEzC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAe,OAAO,EAAE;IAC9C;AACJ;AAKO,MAAM,kDAAsB,CAAA,GAAA,yCAAc;;QAE7C;;KAEC,QACe,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,MAAgB,EAAE,SAAkB,CAAE;QAC/E,KAAK,CAAC,YAAY,0CAAc,OAAO,EAAE,QAAQ;IACrD;AACJ;AAKO,MAAM,kDAAiB,CAAA,GAAA,yCAAY;;QAEtC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,QAAwC,CAAE;QACnF,KAAK,CAAC,YAAY,0CAAS,OAAO;QAClC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;IACtB;IAEA;;KAEC,GACD,cAA8C;QAC1C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;AACJ;AAKO,MAAM,kDAAqB,CAAA,GAAA,yCAAY;;QAE1C;;KAEC,QACe,UAAkB;;IAOlC;;;KAGC,GACD,YAAY,UAA+B,EAAE,UAAiC,CAAE;QAC5E,KAAK,CAAC,YAAY,0CAAa,OAAO;QACtC,IAAI,CAAC,UAAU,GAAG;QAClB,WAAW,OAAO,CAAC,CAAA;YACf,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QACpC;IACJ;AACJ;AAKO,MAAM,kDAAmB,CAAA,GAAA,yCAAS;;QAErC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAW,OAAO,EAAE;IAC1C;AACJ;AAKO,MAAM,kDAA4B,CAAA,GAAA,yCAAY;;QAEjD;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,WAAyB,CAAE;QACpE,KAAK,CAAC,YAAY,0CAAoB,OAAO;QAC7C,YAAY,OAAO,CAAC,CAAA;YAChB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QACpC;IACJ;AACJ;AAKO,MAAM,kDAAmB,CAAA,GAAA,yCAAgB;;QAE5C;;KAEC,QACe,UAAkB;;IAElC,YAAY,UAA+B,CAAE;QACzC,KAAK,CAAC,YAAY,0CAAW,OAAO;IACxC;AACJ;AAKO,MAAM,kDAAgB,CAAA,GAAA,yCAAS;;QAElC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,OAAe,CAAE;QAC1D,KAAK,CAAC,YAAY,0CAAQ,OAAO,EAAE;IACvC;AACJ;AAKO,MAAM,kDAAuB,CAAA,GAAA,yCAAgB;;aAEhC,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,CAAE;QACzC,KAAK,CAAC,YAAY,0CAAe,OAAO;IAC5C;AACJ;AAKO,MAAM,iDAA+B,CAAA,GAAA,yCAAY;;aAEpC,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,eAAiC,CAAE;QAC5E,KAAK,CAAC,YAAY,yCAAuB,OAAO;QAChD,gBAAgB,OAAO,CAAC,CAAA;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QACpC;IACJ;AAEJ;AAKO,MAAM,kDAAoB,CAAA,GAAA,yCAAS;;aAEtB,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAY,OAAO,EAAE;IAC3C;AACJ;AAKO,MAAM,kDAAwB,CAAA,GAAA,yCAAY;;QAE7C;;KAEC,QACe,UAAkB;;IAElC;;;;;KAKC,GACD,YAAY,UAA+B,EAAE,OAA4B,EACrE,sBAA0D,EAC1D,WAAoC,CAAE;QACtC,KAAK,CAAC,YAAY,0CAAgB,OAAO;QACzC,IAAI,SACA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QAEpC,IAAI,wBACA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;QAEpC,IAAI,aACA,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;IAExC;AACJ;AAKO,MAAM,kDAAsB,CAAA,GAAA,yCAAS;;QAExC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAc,OAAO,EAAE;IAC7C;AACJ;AAMO,MAAM,kDAAiB,CAAA,GAAA,yCAAY;;QAEtC;;KAEC,QACe,UAAkB;;;QAElC;;KAEC,QACe,gBAAwB;;;QAExC;;KAEC,QACe,mBAA2B;;;QAE3C;;KAEC,QACe,kBAA0B;;IAU1C;;;;;;;;;;;KAWC,GACD,YACI,UAA+B,EAC/B,KAAmC,EACnC,KAAuB,EACvB,UAA+C,EAC/C,mBAAyC,EACzC,UAAuB,EACvB,eAAiC,EACjC,aAA6B,CAAE;QAC/B,KAAK,CAAC,YAAY,0CAAS,OAAO;QA7BtC;;KAEC,QACD,QAA6B,IAAI;QA2B7B,IAAI,KAAyB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QACjD,IAAI,MAAM,WACN,MAAM,IAAI,MAAM;QAEpB,IAAI,CAAC,EAAE,GAAG;QACV,IAAI,IAAY;QAChB,QAAQ;QACR,IAAI,OAAO;YACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;YAClB,IAAI,iBAAiB,2CACjB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAK,OAAO,EAAE;iBAE7B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO,EAAE;YAEtC;QACJ;QACA,QAAQ;QACR,IAAI,OAAO;YACP,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;YAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO,EAAE;YAClC;QACJ;QACA,aAAa;QACb,IAAI,cAAc,WACd,MAAM,IAAI,MAAM;QAEpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;QAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAa,OAAO,EAAE;QACrC;QACA,sBAAsB;QACtB,IAAI,qBAAqB;YACrB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;YAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,EAAE;YAC5C;QACJ;QACA,aAAa;QACb,IAAI,YAAY;YACZ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;YAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAW,OAAO,EAAE;QACvC;QACA,kBAAkB;QAClB,IAAI,iBAAiB;YACjB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;YAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAgB,OAAO,EAAE;QAC5C;QACA,gBAAgB;QAChB,IAAI,eAAe;YACf,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;YAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,EAAE;QAC1C;IAEJ;IAEA;;KAEC,GACD,QAAgB;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B;IAEA;;;KAGC,GACD,iBAAqC;QACjC,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B;IAEA;;;KAGC,GACD,YAAiC;QAC7B,IAAI,SAAS,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QACjC,IAAI,UAAU,WACV,OAAO;QAEX,OAAO;IACX;IAEA;;KAEC,GACD,gBAAqD;QACjD,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAa,OAAO;QAC/D,IAAI,KAAK,WAAW;YAChB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAS,OAAO;YACnC,IAAI,KAAK,WACL,OAAO;iBAEP,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE9B,OACI,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAE9B;IAEA;;;;KAIC,GACD,kBAAkB,OAAe,EAAsB;QACnD,IAAI,aAAkD,IAAI,CAAC,aAAa;QACxE,IAAI,cAAc,WACd,OAAO;aACJ,IAAI,sBAAsB,2CAAc;YAC3C,IAAI,WAAiC,WAAW,UAAU,CAAC,GAAG,CAAC;YAC/D,IAAI,YAAY,WACZ,OAAO;YAEX,OAAO,AAAC,SAAS,WAAW,GAAsB,KAAK;QAC3D,OAAO;YACH,IAAI,SAAqC,AAAC,WAAwB,WAAW;YAC7E,IAAI,UAAU,WACV,OAAO;YAEX,OAAO,OAAO,KAAK;QACvB;IACJ;IAEA;;KAEC,GACD,YAAoB;QAChB,IAAI,SAA6B,IAAI,CAAC,iBAAiB,CAAC,0CAAS,aAAa;QAC9E,IAAI,UAAU,WACV,OAAO;QAEX,OAAO;IACX;IAEA;;;;;KAKC,GACD,kBAAkB,OAAe,EAAE,KAAa,EAAE,KAAc,EAAE;QAC9D,IAAI,aAAkD,IAAI,CAAC,aAAa;QACxE,IAAI,cAAc,WAAW;YACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,oBAAoB,CAAC,SAAS,OAAO;YAC1E,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAS,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACpD,OAAO,IAAI,sBAAsB;YAC7B,IAAI,WAAW,WAAW,GAAG,UAAU,CAAC,GAAG,CAAC,UACxC,AAAC,WAAW,WAAW,GAAsB,KAAK,GAAG;iBAClD;gBACH,IAAI,QAA+B,IAAI;gBACvC,MAAM,GAAG,CAAC,SAAS;gBACnB,MAAM,GAAG,CAAC,SAAS,IAAI,CAAC,oBAAoB,CAAC,SAAS,OAAO;gBAC7D,aAAa,IAAI,0CAAa,IAAI,OAAO;YAC7C;eACG;YACH,IAAI,iBAAuC,WAAW,UAAU,CAAC,GAAG,CAAC;YACrE,IAAI,kBAAkB,WAClB,WAAW,UAAU,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,oBAAoB,CAAC,SAAS,OAAO;iBAE7E,AAAC,eAAe,WAAW,GAAsB,KAAK,GAAG;QAEjE;IACJ;IAEA;;;;;KAKC,GACD,qBAAqB,OAAe,EAAE,KAAa,EAAE,KAAc,EAAY;QAC3E,IAAI,qBAA0C,IAAI;QAClD,mBAAmB,GAAG,CAAC,WAAW,0CAAS,aAAa;QACxD,IAAI,mBAAwC,IAAI;QAChD,IAAI,OACA,iBAAiB,GAAG,CAAC,SAAS;QAElC,OAAO,IAAI,0CAAS,oBAAoB,IAAI,0CAAe,kBAAkB;IACjF;IAEA;;;KAGC,GACD,UAAU,MAAc,EAAE;QACtB,IAAI,CAAC,iBAAiB,CAAC,0CAAS,aAAa,EAAE;IACnD;IAEA;;;;KAIC,GACD,iBAAiB,OAAe,EAAwB;QACpD,IAAI,aAAkD,IAAI,CAAC,aAAa;QACxE,IAAI,cAAc,WACd,OAAO;aACJ,IAAI,sBAAsB,2CAAc;YAC3C,IAAI,WAAiC,WAAW,UAAU,CAAC,GAAG,CAAC;YAC/D,IAAI,YAAY,WACZ,OAAO;YAEX,OAAO,AAAC,SAAS,WAAW,GAAqB,MAAM;QAC3D,OAAO;YACH,IAAI,AAAC,WAAwB,WAAW,GAAG,OAAO,IAAI,SAAS;gBAC3D,IAAI,YAAuC,AAAC,WAAwB,WAAW;gBAC/E,IAAI,aAAa,WACb,OAAO;gBAEX,OAAO,UAAU,MAAM;YAC3B,OACI,OAAO;QAEf;IACJ;IAEA;;;KAGC,GACD,eAAqC;QACjC,OAAO,IAAI,CAAC,gBAAgB,CAAC,0CAAS,gBAAgB;IAC1D;IAEA;;;KAGC,GACD,cAAoC;QAChC,OAAO,IAAI,CAAC,gBAAgB,CAAC,0CAAS,eAAe;IACzD;AACJ;AAKO,MAAM,gDAAoB,CAAA,GAAA,yCAAY;IAOzC;;;;;KAKC,GACD,YAAY,UAA+B,EAAE,OAAe,EAAE,QAA2B,EACrF,SAAgC,CAAE;QAClC,KAAK,CAAC,YAAY;QAClB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG;QAClB,IAAI,CAAC,SAAS,GAAG;IACrB;IAEA;;;KAGC,GACD,iBAAoC;QAChC,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;;KAGC,GACD,SAAiB;QACb,IAAI,IAAwB,IAAI,CAAC,cAAc,GAAG,UAAU,CAAC,GAAG,CAAC;QACjE,IAAI,KAAK,MAAM;YACX,QAAQ,GAAG,CAAC,IAAI,CAAC,cAAc,GAAG,QAAQ;YAC1C,MAAM,IAAI,MAAM;QACpB;QACA,OAAO;IACX;IAEA;;;;KAIC,GACD,cAAwB;QACpB,IAAI,MAAc,IAAI,CAAC,MAAM;QAC7B,IAAI,WAAiC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC;QACxD,IAAI,YAAY,MACZ,MAAM,IAAI,MAAM,CAAC,kBAAkB,EAAE,IAAI,uBAAuB,CAAC;QAErE,OAAO;IACX;AACJ;;;;;AC7sBO,MAAM,kDAAiB,CAAA,GAAA,uCAAU;;QAEpC;;KAEC,QACe,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,QAA2B,EACpE,SAAgC,CAAE;QAClC,KAAK,CAAC,YAAY,0CAAS,OAAO,EAAE,UAAU;IAClD;AACJ;AAKO,MAAM,kDAAgB,CAAA,GAAA,uCAAU;;QAEnC;;KAEC,QACe,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,QAA2B,EACpE,SAAgC,CAAE;QAClC,KAAK,CAAC,YAAY,0CAAQ,OAAO,EAAE,UAAU;IACjD;AAEJ;AAKO,MAAM,kDAAwB,CAAA,GAAA,uCAAU;;QAE3C;;KAEC,QACe,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,QAA2B,EACpE,SAAgC,CAAE;QAClC,KAAK,CAAC,YAAY,0CAAgB,OAAO,EAAE,UAAU;IACzD;AACJ;AAKO,MAAM,kDAAuB,CAAA,GAAA,yCAAS;;QAEzC;;KAEC,QACe,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAe,OAAO,EAAE;IAC9C;AACJ;AAKO,MAAM,kDAAyB,CAAA,GAAA,yCAAS;;QAE3C;;KAEC,QACe,UAAkB;;IAElC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAiB,OAAO,EAAE;IAChD;AACJ;AAKO,MAAM,kDAAkB,CAAA,GAAA,yCAAS;;QAEpC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAU,OAAO,EAAE;IACzC;AACJ;AAKO,MAAM,kDAAkB,CAAA,GAAA,yCAAS;;QAEpC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAU,OAAO,EAAE;IACzC;AACJ;AAKO,MAAM,kDAAkB,CAAA,GAAA,yCAAgB;;QAE3C;;KAEC,QACe,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,CAAE;QACzC,KAAK,CAAC,YAAY,0CAAU,OAAO;IACvC;AACJ;AAMO,MAAM,iDAAmB,CAAA,GAAA,yCAAY;;QAExC;;KAEC,QACe,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,CAAE;QACzC,KAAK,CAAC,YAAY,yCAAW,OAAO;IACxC;AACJ;AAKO,MAAM,iDAAkB;;QAE3B;;KAEC,QACe,UAAkB;;;QAElC;;KAEC,QACe,WAAmB;;IAOnC;;;;;;KAMC,GACD,YAAY,UAA+B,EAAE,cAA0C,EACnF,gBAA8C,EAAE,SAAgC,EAChF,SAAgC,CAAE;QAClC,KAAK,CAAC;QACN,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,kBAAkB,WAAW;YAC7B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAe,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACtD,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,oBAAoB,WAAW;YAC/B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAiB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACxD,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,aAAa,WAAW;YACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACjD,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,aAAa,WAAW;YACxB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACjD,IAAI,CAAC,OAAO,CAAC;QACjB;IACJ;IAEA;;KAEC,GACD,oBAAgD;QAC5C,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAe,OAAO;QACjE,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,sBAAoD;QAChD,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAiB,OAAO;QACnE,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,eAAsC;QAClC,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO;QAC5D,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,eAAsC;QAClC,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO;QAC5D,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;AACJ;AAKO,MAAM,iDAA4B;IAQrC;;;;;;;;KAQC,GACD,YAAY,UAA+B,EACvC,yBAAiC,EACjC,yBAAiC,EACjC,wBAAgC,EAChC,0BAAkC,EAClC,0BAAkC,EAClC,2BAAmC,CAAE;QACrC,KAAK,CAAC;QACN,IAAI,CAAC,yBAAyB,GAAG;QACjC,IAAI,CAAC,yBAAyB,GAAG;QACjC,IAAI,CAAC,wBAAwB,GAAG;QAChC,IAAI,CAAC,0BAA0B,GAAG;QAClC,IAAI,CAAC,0BAA0B,GAAG;QAClC,IAAI,CAAC,2BAA2B,GAAG;IACvC;AACJ;AA4EO,MAAM,kDAA2B,CAAA,GAAA,yCAAS;;QAE7C;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAmB,OAAO,EAAE;IAClD;AACJ;AAKO,MAAM,kDAAiB,CAAA,GAAA,yCAAY;;QAEtC;;KAEC,QACe,UAAkB;;IAsBlC;;;;;;;;;KASC,GACD,YAAY,UAA+B,EAAE,EAAU,EACnD,SAAuD,EACvD,QAAoD,EACpD,SAAiC,EACjC,gBAA6E,EAC7E,UAAmC,EACnC,kBAAmD,CAAE;QACrD,KAAK,CAAC,YAAY,0CAAS,OAAO;QAClC,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,CAAC,SAAS,GAAG;QACjB,qCAAqC;QACrC,IAAI,qBAAqB,KACrB,kCAAkC;QAClC,UAAU,OAAO,CAAC,CAAA;YACd,IAAI,CAAC,UAAU,CAAC,0CAAS,OAAO,EAAE;YAClC,IAAI,CAAC,OAAO,CAAC;QACb,4CAA4C;QAC5C,gDAAgD;QAChD,gDAAgD;QACpD;aAEA,qCAAqC;QACrC,IAAI,aAAa,WAAW;YACxB,+CAA+C;YAC/C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAS,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAChD,IAAI,CAAC,OAAO,CAAC;QACb,6CAA6C;QAC7C,gDAAgD;QAChD,gDAAgD;QACpD;QAEJ,IAAI,CAAC,QAAQ,GAAG;QAChB,IAAI,oBAAoB,KACpB,iCAAiC;QACjC,SAAS,OAAO,CAAC,CAAA;YACb,IAAI,CAAC,UAAU,CAAC,0CAAQ,OAAO,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC;QACb,0CAA0C;QAC1C,gDAAgD;QAChD,gDAAgD;QACpD;aAEA,IAAI,YAAY,WAAW;YACvB,oCAAoC;YACpC,6CAA6C;YAC7C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAQ,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC/C,IAAI,CAAC,OAAO,CAAC;QACb,2CAA2C;QAC3C,gDAAgD;QAChD,gDAAgD;QACpD;QAEJ,IAAI,WAAW;YACX,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACjD,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,CAAC,gBAAgB,GAAG;QACxB,IAAI,4BAA4B,KAC5B,0CAA0C;QAC1C,iBAAiB,OAAO,CAAC,CAAA;YACrB,IAAI,CAAC,UAAU,CAAC,0CAAgB,OAAO,EAAE;YACzC,IAAI,CAAC,OAAO,CAAC;QACb,2DAA2D;QAC3D,gDAAgD;QAChD,gDAAgD;QACpD;aAEA,IAAI,oBAAoB,WAAW;YAC/B,6CAA6C;YAC7C,6DAA6D;YAC7D,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAgB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACvD,IAAI,CAAC,OAAO,CAAC;QACb,4DAA4D;QAC5D,gDAAgD;QAChD,gDAAgD;QACpD;QAEJ,IAAI,cAAc,WAAW;YACzB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,yCAAW,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAClD,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,oBAAoB;YACpB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAmB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC1D,IAAI,CAAC,OAAO,CAAC;QACjB;IACJ;IAEA;;;KAGC,GACD,WAAW,OAAe,EAAE,WAAwB,EAAE;QAClD,IAAI,SAAmD,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QACtE,IAAI,UAAU,WACV,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS,IAAI,CAAC,KAAK,CAAC,IAAI;aACpC,IAAI,kBAAkB,KACzB,AAAC,OAA+B,GAAG,CAAC,YAAY,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;aACtE;YACH,IAAI,MAA2B,IAAI;YACnC,IAAI,GAAG,CAAC,AAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,QAAwB,MAAM,IAAI;YAC1D,IAAI,GAAG,CAAC,YAAY,MAAM,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI;YAC7C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,SAAS;QAC5B;IACJ;IAEA;;KAEC,GACD,QAAgB;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IAC/B;IAEA;;KAEC,GACD,gBAAwC;QACpC,IAAI,IAA8C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,yCAAW,OAAO;QACnF,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,eAAsC;QAClC,IAAI,IAA8C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAU,OAAO;QAClF,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,wBAAwD;QACpD,IAAI,IAA8C,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAmB,OAAO;QAC3F,IAAI,KAAK,WACL,OAAO;QAEX,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;;KAGC,GACD,oBAAwC;QACpC,IAAI,IAAI,CAAC,SAAS,IAAI,WAClB,OAAO;aACJ,IAAI,IAAI,CAAC,SAAS,YAAY,KACjC,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,IAAI,CAAC;aAE9C,OAAO,IAAI,CAAC,SAAS,CAAC,MAAM;IAEpC;IAEA;;;KAGC,GACD,qBAA6B;QACzB,IAAI,IAAI,CAAC,SAAS,YAAY,KAC1B,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,IAAI,GAAG,CAAC,CAAA,WAAY,SAAS,WAAW,GAAG,SAAS,IAAI,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG;QAE3H,OAAO;IACX;IAEA;;;KAGC,GACD,mBAAuC;QACnC,IAAI,IAAI,CAAC,QAAQ,IAAI,WACjB,OAAO;aACJ,IAAI,IAAI,CAAC,QAAQ,YAAY,KAChC,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,IAAI,IAAI,CAAC;aAE7C,OAAO,IAAI,CAAC,QAAQ,CAAC,MAAM;IAEnC;IAEA;;;KAGC,GACD,oBAA4B;QACxB,IAAI,IAAI,CAAC,QAAQ,YAAY,KACzB,OAAO,MAAM,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,IAAI,GAAG,CAAC,CAAA,UAAW,QAAQ,WAAW,GAAG,SAAS,IAAI,MAAM,CAAC,CAAC,GAAG,IAAM,IAAI,GAAG;QAExH,OAAO;IACX;IAEA;;;KAGC,GACD,WAAmB;QACf,IAAI,QAAgB,IAAI,CAAC,iBAAiB,KAAK,SAAS,IAAI,CAAC,gBAAgB;QAC7E,OAAO;IACX;AACJ;;;;AC5oBA;;;;;;;;;;;;;CAaC,GACM,SAAS,0CAAU,GAA6B,EAAE,WAAmB,EAAE,WAAmB,EAC7F,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,IAAY,EAAE,EAAU,EAAE,KAAa,EACvF,YAAoB;IACpB,IAAI,WAAmB,KAAM,AAAC,CAAA,KAAK,EAAC,IAAK;IACzC,0CAAU,KAAK,cAAc,MAAM,aAAa,oCAAc,KAAK,cAAc,MAAM,WAAW,KAAK;IACvG,0CAAU,KAAK,OAAO,MAAM,aAAa,oCAAc,KAAK,OAAO,MAAM,WAAW,KAAK,IAAI;IAC7F,0CAAS,KAAK,aAAa,aAAa,IAAI,IAAI,IAAI;AACxD;AAEA;;;;;;CAMC,GACD,SAAS,oCAAc,GAA6B,EAAE,IAAY,EAAE,IAAY,EAAE,QAAgB;IAC9F,IAAI,KAAa,0CAAa,KAAK,MAAM;IACzC,OAAO,WAAY,KAAK;AAC5B;AAWO,SAAS,0CAAS,GAA6B,EAAE,WAAmB,EAAE,WAAmB,EAC5F,EAAU,EAAE,EAAU,EAAE,EAAU,EAAE,EAAU;IAC9C,IAAI,SAAS;IACb,IAAI,WAAW,GAAG;IAClB,IAAI,SAAS,GAAG;IAChB,IAAI,MAAM,CAAC,IAAI;IACf,IAAI,MAAM,CAAC,IAAI;IACf,IAAI,MAAM;AACd;AAWO,SAAS,0CAAU,GAA6B,EAAE,IAAY,EAAE,IAAY,EAC/E,MAAc,EAAE,CAAS,EAAE,CAAS;IACpC,uCAAuC;IACvC,IAAI,IAAI;IACR,oDAAoD;IACpD,IAAI,SAAS,CAAC,GAAG;IACjB,iBAAiB;IACjB,IAAI,KAAK,CAAC,GAAG;IACb,qBAAqB;IACrB,IAAI,IAAI,GAAG;IACX,uBAAuB;IACvB,IAAI,SAAS,GAAG;IAChB,kBAAkB;IAClB,IAAI,QAAQ,CAAC,MAAM,GAAG;IACtB,uBAAuB;IACvB,IAAI,OAAO;AACf;AAQO,SAAS,0CAAc,GAA6B,EAAE,IAAY,EAAE,IAAY;IACnF,IAAI,IAAI,GAAG;IACX,IAAI,aAAa,IAAI,WAAW,CAAC;IACjC,OAAO,WAAW,uBAAuB,GAAG,WAAW,wBAAwB;AACnF;AAQO,SAAS,0CAAa,GAA6B,EAAE,IAAY,EAAE,IAAY;IAClF,IAAI,IAAI,GAAG;IACX,OAAO,IAAI,WAAW,CAAC,MAAM,KAAK;AACtC;;;;AC3FO,MAAM,kDAAgB,CAAA,GAAA,yCAAS;;QAElC;;KAEC,QACe,UAAkB;;IAOlC;;;;KAIC,GACD,YAAY,UAA+B,EAAE,UAAkB,EAC3D,SAAgC,CAAE;QAClC,KAAK,CAAC,YAAY,0CAAQ,OAAO,EAAE;QACnC,IAAI,CAAC,SAAS,GAAG;IACrB;IAEA,cAAwB;QACpB,OAAO,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,IAAI,CAAC,KAAK;IACxC;AACJ;AAKO,MAAM,kDAAuB,CAAA,GAAA,yCAAS;;QAEzC;;KAEC,QACe,UAAkB;;IAElC;;;KAGC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAe,OAAO,EAAE;IAC9C;AACJ;AAKO,MAAM,kDAAe,CAAA,GAAA,yCAAY;;QAEpC;;KAEC,QACM,UAAkB;;IAOzB;;;;KAIC,GACD,YAAY,UAA+B,EAAE,OAAiB,EAAE,cAA+B,CAAE;QAC7F,KAAK,CAAC,YAAY,0CAAO,OAAO;QAChC,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,SAAS;YACT,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAQ,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YAC/C,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,gBAAgB;YAChB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAe,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;YACtD,IAAI,CAAC,OAAO,CAAC;QACjB;IACJ;IAEA;;KAEC,GACD,OAAe;QACX,IAAI,IAAwB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QAChD,IAAI,GACA,OAAO,WAAW;aAElB,MAAM,IAAI,MAAM;IAExB;IAEA;;KAEC,GACD,KAAK,CAAS,EAAE;QACZ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ;IACvC;IAEA;;KAEC,GACD,OAAe;QACX,IAAI,IAAwB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;QAChD,IAAI,GACA,OAAO,WAAW;aAElB,MAAM,IAAI,MAAM;IAExB;IAEA;;KAEC,GACD,KAAK,CAAS,EAAE;QACZ,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,KAAK,EAAE,QAAQ;IACvC;IAEA;;KAEC,GACD,aAAkC;QAC9B,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAQ,OAAO;QAC1D,IAAI,GACA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;aAEtB,OAAO;IAEf;IAEA;;KAEC,GACD,oBAAgD;QAC5C,IAAI,IAAwB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAe,OAAO;QACjE,IAAI,GACA,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;aAEtB,OAAO;IAEf;AACJ;AAKO,MAAM,kDAAY,CAAA,GAAA,yCAAY;;QAEjC;;KAEC,QACe,UAAkB;;IAOlC;;;KAGC,GACD,YAAY,UAA+B,EAAE,OAAiB,CAAE;QAC5D,KAAK,CAAC,YAAY,0CAAI,OAAO;QAC7B,QAAQ,OAAO,CAAC,CAAC;YACb,IAAI,CAAC,OAAO,CAAC;QACjB;QACA,IAAI,CAAC,OAAO,GAAG;IACnB;AACJ;AAKO,MAAM,kDAAmB,CAAA,GAAA,yCAAY;;QAExC;;KAEC,QACM,UAAkB;;IAEzB;;;KAGC,GACD,YAAY,UAA+B,EAAE,OAAgB,EAAE,GAAQ,CAAE;QACrE,KAAK,CAAC,YAAY,0CAAW,OAAO;QACpC,IAAI,CAAC,OAAO,CAAC;QACb,IAAI,CAAC,OAAO,CAAC;IACjB;IAEA;;KAEC,GACD,aAAsB;QAClB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,SAAc;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;AACJ;;;;AChNO,MAAM,kDAAkB,CAAA,GAAA,yCAAS;;QAEpC;;KAEC,QACe,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAU,OAAO,EAAE;IACzC;IACA,WAAW;QACP,OAAO,CAAC,UAAU,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;IAC3C;AACJ;AAKO,MAAM,kDAA8B,CAAA,GAAA,yCAAS;;QAEhD;;KAEC,QACe,UAAkB;;IAElC;;KAEC,GACD,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAsB,OAAO,EAAE;IACrD;AACJ;AAKO,MAAM,kDAAwB,CAAA,GAAA,yCAAY;;QAE7C;;KAEC,QACe,UAAkB;;IAElC,YAAY,SAAoB,EAAE,qBAA4C,CAAE;QAC5E,KAAK,CAAC,IAAI,OAAuB,0CAAgB,OAAO;QACxD,IAAI,CAAC,OAAO,CAAC;QACb,IAAI,CAAC,OAAO,CAAC;IACjB;IAEA;;KAEC,GACD,eAA0B;QACtB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;IAEA;;KAEC,GACD,2BAAkD;QAC9C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;IAC1B;AACJ;;;;ACjEO,MAAM,kDAAgB,CAAA,GAAA,yCAAE;;QAE3B;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAQ,OAAO;IACzB;AACJ;AAKO,MAAM,kDAA4B,CAAA,GAAA,yCAAE;;QAEvC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAoB,OAAO;IACrC;AACJ;AAKO,MAAM,kDAAuB,CAAA,GAAA,yCAAE;;QAElC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAe,OAAO;IAChC;AACJ;AAKO,MAAM,kDAAyB,CAAA,GAAA,yCAAE;;QAEpC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAiB,OAAO;IAClC;AACJ;AAKO,MAAM,kDAAsB,CAAA,GAAA,yCAAE;;QAEjC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAc,OAAO;IAC/B;AACJ;AAKO,MAAM,kDAAqB,CAAA,GAAA,yCAAE;;QAEhC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAa,OAAO;IAC9B;AACJ;AAKO,MAAM,kDAAwC,CAAA,GAAA,yCAAE;;QAEnD;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAgC,OAAO;IACjD;AACJ;AAKO,MAAM,kDAAoC,CAAA,GAAA,yCAAE;;QAE/C;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAA4B,OAAO;IAC7C;AACJ;AAKO,MAAM,kDAAsB,CAAA,GAAA,yCAAE;;QAEjC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAc,OAAO;IAC/B;AACJ;AAKO,MAAM,kDAA4B,CAAA,GAAA,yCAAE;;QAEvC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAoB,OAAO;IACrC;AACJ;AAKO,MAAM,kDAAsB,CAAA,GAAA,yCAAE;;QAEjC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAc,OAAO;IAC/B;AACJ;AAKO,MAAM,kDAAoB,CAAA,GAAA,yCAAS;;QAEtC;;KAEC,QACe,UAAkB;;IAElC,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAY,OAAO,EAAE;IAC3C;AACJ;AAKO,MAAM,kDAAqB,CAAA,GAAA,yCAAE;;QAEhC;;KAEC,QACe,UAAkB;;IAElC,aAAc;QACV,KAAK,CAAC,0CAAa,OAAO;IAC9B;AACJ;AAKO,MAAM,kDAA4B,CAAA,GAAA,yCAAS;;QAE9C;;KAEC,QACe,UAAkB;;IAElC,YAAY,UAA+B,EAAE,KAAa,CAAE;QACxD,KAAK,CAAC,YAAY,0CAAoB,OAAO,EAAE;IACnD;AACJ;AAKO,MAAM,kDAAgB,CAAA,GAAA,yCAAY;;QAErC;;KAEC,QACe,UAAkB;;IAOlC;;;;;;;;;;;;;;;;KAgBC,GACD,YAAY,UAA8B,EAAE,OAAiB,EAAE,mBAAyC,EACpG,cAA+B,EAAE,gBAAmC,EAAE,aAA6B,EACnG,YAA2B,EAAE,+BAAiE,EAC9F,2BAAyD,EAAE,aAA6B,EACxF,mBAAyC,EAAE,aAA6B,EAAE,WAAyB,EACnG,YAA2B,EAAE,mBAAyC,CAAE;QACxE,KAAK,CAAC,YAAY,0CAAQ,OAAO;QACjC,IAAI,CAAC,KAAK,GAAG,IAAI;QACjB,IAAI,WAAW,WAAW;YACtB,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAQ,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACnD;QACA,IAAI,uBAAuB,WAAW;YAClC,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QAC/D;QACA,IAAI,kBAAkB,WAAW;YAC7B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAe,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QAC1D;QACA,IAAI,oBAAoB,WAAW;YAC/B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAiB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QAC5D;QACA,IAAI,iBAAiB,WAAW;YAC5B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACzD;QACA,IAAI,gBAAgB,WAAW;YAC3B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAa,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACxD;QACA,IAAI,mCAAmC,WAAW;YAC9C,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAgC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QAC3E;QACA,IAAI,+BAA+B,WAAW;YAC1C,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAA4B,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACvE;QACA,IAAI,iBAAiB,WAAW;YAC5B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACzD;QACA,IAAI,uBAAuB,WAAW;YAClC,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QAC/D;QACA,IAAI,iBAAiB,WAAW;YAC5B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACzD;QACA,IAAI,eAAe,WAAW;YAC1B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAY,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACvD;QACA,IAAI,gBAAgB,WAAW;YAC3B,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAa,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QACxD;QACA,IAAI,uBAAuB,WAAW;YAClC,IAAI,CAAC,OAAO,CAAC;YACb,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI;QAC/D;IACJ;IAEA,aAAkC;QAC9B,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAQ,OAAO,KAAK;QACjD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,yBAA0D;QACtD,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,KAAK;QAC7D,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,oBAAgD;QAC5C,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAe,OAAO,KAAK;QACxD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,sBAAoD;QAChD,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAiB,OAAO,KAAK;QAC1D,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,mBAA8C;QAC1C,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,KAAK;QACvD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,kBAA4C;QACxC,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAa,OAAO,KAAK;QACtD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,qCAAkF;QAC9E,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAgC,OAAO,KAAK;QACzE,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,iCAA0E;QACtE,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAA4B,OAAO,KAAK;QACrE,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,mBAA8C;QAC1C,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,KAAK;QACvD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,yBAA0D;QACtD,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,KAAK;QAC7D,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,mBAA8C;QAC1C,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAc,OAAO,KAAK;QACvD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,iBAA0C;QACtC,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAY,OAAO,KAAK;QACrD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,kBAA4C;QACxC,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAa,OAAO,KAAK;QACtD,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;IAEA,yBAA0D;QACtD,MAAM,QAAQ,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,0CAAoB,OAAO,KAAK;QAC7D,IAAI,UAAU,IACV,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAE1B,OAAO;IACX;AAEJ;;;ATxVA,6BAA6B;AAC7B,IAAI,mCAAqB;AAEzB;;CAEC,GACD,IAAI;AAEJ;;CAEC,GACD,IAAI;AAEJ;;CAEC,GACD,IAAI;AAEJ;;CAEC,GACD,IAAI,kCAAmC,IAAI;AAE3C;;CAEC,GACD,IAAI,0CAA4B,CAAC;AAEjC;;CAEC,GACD,IAAI,0CAA4B;AAEhC;;CAEC,GACD,IAAI,kCAAmC,IAAI;AAE3C;;CAEC,GACD,MAAM,+BAAiB,CAAC;;0EAEkD,CAAC;AAE3E;;CAEC,GACD,IAAI;AAEJ;;CAEC,GACD,IAAI;AAEJ;;CAEC,GACD,IAAI;AAEJ;;CAEC,GACD,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AACJ,IAAI;AAEJ;;;CAGC,GACD,SAAS,iCAAW,GAAW;IAC3B,4BAA4B;IAC5B,IAAI,mCAAa,MACb,gCAAU,SAAS,GAAG;IAE1B,IAAI,kCAAY,MACZ,+BAAS,SAAS,GAAG,CAAA,GAAA,yCAAK,EAAE;AAEpC;AAEA;;;CAGC,GACD,SAAS,oCAAc,GAAgB;IACnC,IAAI,iBAAyB;IAC7B,QAAQ,GAAG,CAAC,oBAAoB;IAChC,IAAI,mBAA4B,CAAA,GAAA,yCAAiB,EAAE,KAAK;IACxD,uBAAuB;IACvB,wCAAkB,SAAS,cAAc,CAAC;IAC1C,IAAI,yCAAmB,MACnB,sCAAgB,SAAS,GAAG;IAEhC,oFAAoF;IACpF,IAAI,uBAAoC,IAAI;IAC5C,iBAAiB,UAAU,CAAC,OAAO,CAAC,SAAU,IAAI;QAC9C,qBAAqB,GAAG,CAAC,KAAK,QAAQ;IAC1C;IACA,IAAI,qBAAqB,IAAI,IAAI,GAC7B;QAAA,IAAI,CAAE,CAAA,qBAAqB,IAAI,IAAI,KAAK,qBAAqB,GAAG,CAAC,QAAO,GAAI;YACxE,QAAQ,KAAK,CAAC;YACd,qBAAqB,OAAO,CAAC,CAAA,IAAK,QAAQ,KAAK,CAAC;YAChD,MAAM,IAAI,MAAM;QACpB;IAAA;IAEJ,IAAI,CAAC,qBAAqB,GAAG,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO,GAC1C,MAAM,IAAI,MAAM,0BAA2B,CAAA,GAAA,yCAAO,EAAE,OAAO,GAAG;IAElE,IAAI,gBAA2C,iBAAiB,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO;IACrG,IAAI,uBAAuB,cAAc,MAAM;IAC/C,QAAQ,GAAG,CAAC,yBAAyB;IACrC,yBAAyB;IACzB,oGAAoG;IACpG,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,MAAM,EAAE,IAAK;QAC3C,kBAAkB;QAClB,IAAI,aAAkC,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE;QACpE,IAAI,mBAAgC,IAAI;QACxC,IAAI,MAA6B,aAAa,CAAC,EAAE,CAAC,UAAU;QAC5D,0CAA0C;QAC1C,6BAA6B;QAC7B,IAAK,IAAI,IAAI,GAAG,IAAI,IAAI,MAAM,EAAE,IAAK;YACjC,IAAI,KAAgB,GAAG,CAAC,EAAE;YAC1B,iDAAiD;YACjD,IAAI,CAAC,iBAAiB,GAAG,CAAC,GAAG,QAAQ,GACjC,iBAAiB,GAAG,CAAC,GAAG,QAAQ;iBAEhC,sFAAsF;YACtF,IAAI,GAAG,QAAQ,IAAI,SACf,QAAQ,IAAI,CAAC,qCAAqC,GAAG,QAAQ;QAIrE,2BAA2B;QAC/B;QACA,KAAK;QACL,mCAAmC;QACnC,gDAAgD;QAEhD,kBAAkB;QAClB,IAAI;QACJ,2EAA2E;QAC3E,IAAI,iBAAiB,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;QAC5E,IAAI,eAAe,MAAM,GAAG,GACxB,MAAM,IAAI,MAAM,sBAAsB,CAAA,GAAA,yCAAQ,EAAE,OAAO,GAAG,kBAAkB,eAAe,MAAM,GAAG;QAExG,IAAI,eAAe,MAAM,IAAI,GAAG;YAC5B,IAAI,gBAAgB,cAAc,CAAC,EAAE;YACrC,IAAI,YAAuC,cAAc,oBAAoB,CAAC,CAAA,GAAA,yCAAG,EAAE,OAAO;YAC1F,IAAI,UAAU,MAAM,GAAG,GACnB,MAAM,IAAI,MAAM,kCAAkC,CAAA,GAAA,yCAAQ,EAAE,OAAO,GAAG,mBAAmB,UAAU,MAAM,GAAG;YAEhH,IAAI,QAAgB,EAAE;YACtB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAClC,MAAM,IAAI,CAAC,IAAI,CAAA,GAAA,yCAAG,EAAE,CAAA,GAAA,yCAAY,EAAE,SAAS,CAAC,EAAE;YAElD,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAA,GAAA,yCAAY,EAAE,gBAAgB;YACxD,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;QAC7C,OAAO;YACH,IAAI,YAAuC,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAG,EAAE,OAAO;YAC7F,IAAI,UAAU,MAAM,IAAI,GACpB,YAAY,IAAI,CAAA,GAAA,yCAAG,EAAE,CAAA,GAAA,yCAAY,EAAE,SAAS,CAAC,EAAE;iBAC5C,IAAI,UAAU,MAAM,GAAG,GAC1B,MAAM,IAAI,MAAM,iBAAiB,CAAA,GAAA,yCAAG,EAAE,OAAO,GAAG,kBAAkB,UAAU,MAAM,GAAG,6BAA6B,CAAA,GAAA,yCAAQ,EAAE,OAAO,GAAG;QAE9I;QACA,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAG,EAAE,OAAO;QAEpC,kBAAkB;QAClB,IAAI;QAEJ,wEAAwE;QACxE,IAAI,iBAAiB,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;QAC5E,IAAI,eAAe,MAAM,GAAG,GACxB,MAAM,IAAI,MAAM,sBAAsB,CAAA,GAAA,yCAAQ,EAAE,OAAO,GAAG,kBAAkB,eAAe,MAAM,GAAG;QAExG,IAAI,eAAe,MAAM,IAAI,GAAG;YAC5B,IAAI,gBAAgB,cAAc,CAAC,EAAE;YACrC,IAAI,YAAuC,cAAc,oBAAoB,CAAC,CAAA,GAAA,yCAAG,EAAE,OAAO;YAC1F,2CAA2C;YAC3C,IAAI,QAAgB,EAAE;YACtB,IAAK,IAAI,IAAI,GAAG,IAAI,UAAU,MAAM,EAAE,IAClC,MAAM,IAAI,CAAC,IAAI,CAAA,GAAA,yCAAG,EAAE,CAAA,GAAA,yCAAY,EAAE,SAAS,CAAC,EAAE;YAElD,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAA,GAAA,yCAAY,EAAE,gBAAgB;YACxD,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;QAC7C,OAAO;YACH,IAAI,YAAuC,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAG,EAAE,OAAO;YAC7F,IAAI,UAAU,MAAM,IAAI,GACpB,YAAY,IAAI,CAAA,GAAA,yCAAG,EAAE,CAAA,GAAA,yCAAY,EAAE,SAAS,CAAC,EAAE;iBAC5C,IAAI,UAAU,MAAM,GAAG,GAC1B,MAAM,IAAI,MAAM,iBAAiB,CAAA,GAAA,yCAAG,EAAE,OAAO,GAAG,kBAAkB,UAAU,MAAM,GAAG,4BAA4B,CAAA,GAAA,yCAAQ,EAAE,OAAO,GAAG;QAE7I;QACA,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAG,EAAE,OAAO;QAEpC,uBAAuB;QACvB,IAAI;QAEJ,6DAA6D;QAC7D,IAAI,UAAU,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAW,EAAE,OAAO;QACxE,IAAI,QAAQ,MAAM,GAAG,GACjB,MAAM,IAAI,MAAM,sBAAsB,CAAA,GAAA,yCAAW,EAAE,OAAO,GAAG,kBAAkB,QAAQ,MAAM,GAAG;QAEpG,IAAI,QAAQ,MAAM,IAAI,GAAG;YACrB,IAAI,SAAS,OAAO,CAAC,EAAE;YACvB,IAAI,SAAoC,OAAO,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO;YACpF,IAAI,OAAO,MAAM,GAAG,GAChB,MAAM,IAAI,MAAM,yBAAyB,CAAA,GAAA,yCAAO,EAAE,OAAO,GAAG,SAAS,CAAA,GAAA,yCAAW,EAAE,OAAO,GAAG,mBAAmB,OAAO,MAAM,GAAG;YAEnI,IAAI,aAAoC,IAAI;YAC5C,IAAK,IAAI,IAAI,GAAG,IAAI,OAAO,MAAM,EAAE,IAAK;gBACpC,IAAI,WAAqB,kCAAY,MAAM,CAAC,EAAE;gBAC9C,IAAI,UAAkB,SAAS,UAAU,CAAC,GAAG,CAAC;gBAC9C,WAAW,GAAG,CAAC,SAAS;YAC5B;YACA,iBAAiB,IAAI,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAY,EAAE,SAAS;YACzD,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAW,EAAE,OAAO;QAChD,OAAO;YACH,IAAI,SAAoC,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO;YAC9F,IAAI,OAAO,MAAM,GAAG,GAChB,MAAM,IAAI,MAAM,iBAAiB,CAAA,GAAA,yCAAO,EAAE,OAAO,GAAG,kBAAkB,OAAO,MAAM,GAAG,4BAA4B,CAAA,GAAA,yCAAW,EAAE,OAAO,GAAG;YAE7I,iBAAiB,kCAAY,MAAM,CAAC,EAAE;QAC1C;QACA,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO;QAExC,IAAI;QAEJ,2BAA2B;QAC3B,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAkB,EAAE,OAAO;QACnD,IAAI,sBAAuD;QAC3D,MAAM,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAkB,EAAE,OAAO;QACvE,IAAI,OAAO,MACP;YAAA,IAAI,IAAI,MAAM,GAAG,GAAG;gBAChB,IAAI,IAAI,MAAM,IAAI,GACd,MAAM,IAAI,MAAM,gCAAgC,IAAI,MAAM;gBAE9D,IAAI,iBAA4C,GAAG,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAS,EAAE,OAAO;gBAC9F,IAAI,kBAAkB,MAAM;oBACxB,IAAI,cAA4B,EAAE;oBAClC,IAAK,IAAI,IAAI,GAAG,IAAI,eAAe,MAAM,EAAE,IAAK;wBAC5C,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,cAAc,CAAC,EAAE;wBAC/E,IAAI,aAAyB,IAAI,CAAA,GAAA,yCAAS,EAAE,CAAA,GAAA,yCAAY,EAAE,cAAc,CAAC,EAAE,GAAG;wBAC9E,YAAY,IAAI,CAAC;oBACrB;oBACA,sBAAsB,IAAI,CAAA,GAAA,yCAAkB,EAAE,CAAA,GAAA,yCAAY,EAAE,GAAG,CAAC,EAAE,GAAG;gBACzE;YACJ;QAAA;QAGJ,kBAAkB;QAClB,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAS,EAAE,OAAO;QAC1C,IAAI,aAAqC;QACzC,MAAM,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAS,EAAE,OAAO;QAC9D,IAAI,OAAO,MAAM;YACb,IAAI,KAAqB,GAAG,CAAC,EAAE;YAC/B,IAAI,MAAM,MACN,aAAa,IAAI,CAAA,GAAA,yCAAS,EAAE,CAAA,GAAA,yCAAY,EAAE;QAElD;QAEA,wBAAwB;QACxB,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAc,EAAE,OAAO;QAC/C,IAAI,kBAA+C;QACnD,MAAM,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAc,EAAE,OAAO;QACnE,IAAI,IAAI,MAAM,GAAG,GAAG;YAChB,IAAI,IAAI,MAAM,IAAI,GACd,MAAM,IAAI,MAAM,sDAAsD,IAAI,MAAM;YAEpF,gBAAgB;YAChB,IAAI,WAAsC,GAAG,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAM,EAAE,OAAO;YACrF,IAAI;YACJ,IAAI,SAAS,MAAM,GAAG,GAAG;gBACrB,IAAI,SAAS,MAAM,IAAI,GACnB,MAAM,IAAI,MAAM,6CAA6C,SAAS,MAAM;gBAEhF,UAAU,IAAI,CAAA,GAAA,yCAAM,EAAE,CAAA,GAAA,yCAAY,EAAE,QAAQ,CAAC,EAAE,GAAG,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,QAAQ,CAAC,EAAE;YAChG;YACA,+BAA+B;YAC/B,IAAI,0BAAqD,GAAG,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,wCAAqB,EAAE,OAAO;YACnH,IAAI;YACJ,IAAI,wBAAwB,MAAM,GAAG,GAAG;gBACpC,IAAI,wBAAwB,MAAM,IAAI,GAClC,MAAM,IAAI,MAAM,4DAA4D,wBAAwB,MAAM;gBAE9G,wBAAwB;gBACxB,IAAI,kBAAoC,EAAE;gBAC1C,IAAI,sBAAiD,uBAAuB,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAa,EAAE,OAAO;gBAC3H,IAAK,IAAI,IAAI,GAAG,IAAI,oBAAoB,MAAM,EAAE,IAC5C,gBAAgB,IAAI,CAAC,IAAI,CAAA,GAAA,yCAAa,EAAE,CAAA,GAAA,yCAAY,EAAE,mBAAmB,CAAC,EAAE;gBAEhF,yBAAyB,IAAI,CAAA,GAAA,wCAAqB,EAAE,CAAA,GAAA,yCAAY,EAAE,uBAAuB,CAAC,EAAE,GAAG;YACnG;YACA,sBAAsB;YACtB,IAAI,oBAA+C,GAAG,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAU,EAAE,OAAO;YAClG,IAAI;YACJ,IAAI,kBAAkB,MAAM,GAAG,GAAG;gBAC9B,IAAI,kBAAkB,MAAM,IAAI,GAC5B,MAAM,IAAI,MAAM,iDAAiD,kBAAkB,MAAM;gBAE7F,cAAc,IAAI,CAAA,GAAA,yCAAU,EAAE,CAAA,GAAA,yCAAY,EAAE,iBAAiB,CAAC,EAAE,GAC5D,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,iBAAiB,CAAC,EAAE;YACtE;YACA,kBAAkB,IAAI,CAAA,GAAA,yCAAc,EAAE,CAAA,GAAA,yCAAY,EAAE,GAAG,CAAC,EAAE,GAAG,SAAS,wBAAwB;QAClG;QAEA,sBAAsB;QACtB,iBAAiB,MAAM,CAAC,CAAA,GAAA,yCAAY,EAAE,OAAO;QAC7C,IAAI;QACJ,MAAM,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAY,EAAE,OAAO;QACjE,IAAI,IAAI,MAAM,GAAG,GAAG;YAChB,IAAI,IAAI,MAAM,IAAI,GACd,MAAM,IAAI,MAAM,mDAAmD,IAAI,MAAM;YAEjF,gBAAgB,IAAI,CAAA,GAAA,yCAAY,EAAE,CAAA,GAAA,yCAAY,EAAE,GAAG,CAAC,EAAE,GAAG,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,GAAG,CAAC,EAAE;QAC7G;QAEA,6BAA6B;QAC7B,iBAAiB,MAAM,CAAC;QACxB,IAAI,iBAAiB,IAAI,GAAG,GAAG;YAC3B,QAAQ,IAAI,CAAC;YACb,iBAAiB,OAAO,CAAC,CAAA,IAAK,QAAQ,IAAI,CAAC;QAC3C,kDAAkD;QACtD;QAEA,IAAI,WAAW,IAAI,CAAA,GAAA,yCAAO,EAAE,YAAY,WAAW,WAAW,gBAAgB,qBAAqB,YAC/F,iBAAiB;QACrB,mCAAmC;QACnC,gCAAU,GAAG,CAAC,SAAS,EAAE,EAAE;IAC/B;AACJ;AAEA,SAAS;IACL,0CAA0C;IAC1C,gCAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,IAAI,YAAY,KAAK;QACrB,IAAI,eAAe,SAAS,cAAc,CAAC;QAC3C,IAAI,cACA,aAAa,gBAAgB,CAAC,UAAU,CAAC;YACrC,wEAAwE;YACxE,uEAAuE;YACvE,0EAA0E;YAC1E,wDAAwD;YACxD,wEAAwE;YACxE,IAAI,cAAc,MAAM,MAAM;YAC9B,IAAI,aAAa,YAAY,KAAK;YAClC,IAAI,CAAA,GAAA,yCAAQ,EAAE,aAAa;gBACvB,SAAS,SAAS,CAAC,WAAW;gBAC9B,QAAQ,GAAG,CAAC,mBAAmB,KAAK,SAAS,aAAa;YAC9D,OAAO;gBACH,MAAM,sBAAsB,KAAK;gBACjC,IAAI,eAAe,SAAS,cAAc,CAAC;gBAC3C,aAAa,KAAK,GAAG,SAAS,SAAS,GAAG,QAAQ;gBAClD,QAAQ,GAAG,CAAC,gBAAgB;gBAC5B,QAAQ,GAAG,CAAC,yBAAyB,OAAO;YAChD;QACJ;IAER;AACJ;AAGA,SAAS,kCAAY,YAAqB;IACtC,IAAI,UAA+B,CAAA,GAAA,yCAAY,EAAE;IACjD,IAAI,WAAsC,aAAa,QAAQ;IAC/D,IAAI,SAAS,MAAM,IAAI,GACnB,MAAM,IAAI,MAAM,mCAAmC,SAAS,MAAM;IAEtE,IAAI,iBAAsC,CAAA,GAAA,yCAAY,EAAE,QAAQ,CAAC,EAAE;IACnE,IAAI,WAAmB,QAAQ,CAAC,EAAE,CAAC,QAAQ,EAAE,4BAA4B;IACzE,IAAI,cAA6B,QAAQ,CAAC,EAAE,CAAC,WAAW;IACxD,IAAI,eAAe,MAAM;QACrB,QAAQ,KAAK,CAAC;QACd,MAAM,IAAI,MAAM;IACpB;IACA,cAAc,YAAY,IAAI;IAC9B,IAAI,UAA8B,QAAQ,GAAG,CAAC;IAC9C,oCAAoC;IACpC,IAAI,WAAW,MACX,MAAM,IAAI,MAAM;IAEpB,8BAA8B;IAC9B,IAAI,YAAY,CAAA,GAAA,yCAAa,EAAE,OAAO,EAAE;QACpC,IAAI,QAAgB,WAAW;QAC/B,OAAO,IAAI,CAAA,GAAA,yCAAO,EAAE,SAAS,IAAI,CAAA,GAAA,yCAAa,EAAE,gBAAgB;IACpE,OAAO,IAAI,YAAY,CAAA,GAAA,yCAAY,EAAE,OAAO,EACxC,OAAO,IAAI,CAAA,GAAA,yCAAO,EAAE,SAAS,IAAI,CAAA,GAAA,yCAAY,EAAE,gBAAgB,CAAA,GAAA,yCAAY,EAAE,YAAY,KAAK,CAAC,SAAS;SACrG,IAAI,YAAY,UACnB,MAAM,IAAI,MAAM,0BAA0B;SAE1C,MAAM,IAAI,MAAM,0BAA0B;AAElD;AAEA,IAAI;AAEJ,qBAAqB;AACrB,SAAS;IACL,qCAAe,SAAS,aAAa,CAAC;IACtC,mCAAa,IAAI,GAAG;IACpB,mCAAa,QAAQ,GAAG;QACpB,IAAI,mCAAa,KAAK,EAAE;YACpB,IAAK,IAAI,IAAI,GAAG,IAAI,mCAAa,KAAK,CAAC,MAAM,EAAE,IAC3C,QAAQ,GAAG,CAAC,wBAAwB,IAAI,OAAO,mCAAa,KAAK,CAAC,EAAE;YAExE,IAAI,OAAoB,mCAAa,KAAK,CAAC,EAAE;YAC7C,8BAA8B;YAC9B,QAAQ,GAAG,CAAC,KAAK,IAAI;YACrB,2CAAqB,KAAK,IAAI;YAC9B,IAAI,kCAAY,MAAM;gBAClB,IAAI,SAAS,IAAI;gBACjB,IAAI,YAAY,SAAa,MAAM;gBACnC,IAAI,QAAQ;gBACZ,IAAI,WAAW;gBACf,OAAO,MAAM,GAAG,SAAU,CAAC;oBACvB,IAAI,CAAC,EAAE,MAAM,EACT,MAAM,IAAI,MAAM;oBAEpB,YAAY,AAAC,EAAE,MAAM,CAAgB,MAAM;oBAC3C,IAAI,QAAQ;wBACR,IAAI,QAAQ,KAAK,IAAI,EAAE;4BACnB,sBAAsB;4BACtB,IAAI,OAAO,KAAK,KAAK,CAAC,OAAO,QAAQ;4BACrC,OAAO,UAAU,CAAC;4BAClB,SAAS;wBACb,OAAO;4BACH,4BAA4B;4BAC5B,WAAW,SAAS,IAAI;4BACxB,iCAAW;4BACX,IAAI,SAAS,IAAI;4BACjB,IAAI,MAAM,OAAO,eAAe,CAAC,UAAU;4BAC3C,4BAAM;wBACN;;;;;;;;;;;;;;;;;;;;;;4BAsBA,GACJ;;gBAER;gBACA,uBAAuB;gBACvB,IAAI,OAAO,KAAK,KAAK,CAAC,OAAO,QAAQ;gBACrC,OAAO,UAAU,CAAC;gBAClB,SAAS;YACb;QACJ;IACJ;IACA,mCAAa,KAAK;IAClB,qCAAqC;IACrC,mCAAa,SAAS,cAAc,CAAC;IACrC,IAAI,oCAAc,MACd,+CAA+C;IAC/C,iCAAW,gBAAgB,CAAC,SAAS;IAGzC,mCAAmC;IACnC,mCAAa,SAAS,cAAc,CAAC;IACrC,IAAI,oCAAc,MACd,iCAAW,KAAK,CAAC,OAAO,GAAG;AAEnC;AAEA;;CAEC,GACD,SAAS,gBAAgB,CAAC,oBAAoB,CAAC;IAE3C,sBAAsB;IACtB,kCAAY,SAAS,cAAc,CAAC;IACpC,iCAAW,SAAS,cAAc,CAAC;IAGnC,OAAO,OAAO,GAAG;QACb;IACA,WAAW;IACf;AACJ;AAEA;;;CAGC,GACD,SAAS,+BAAS,GAAgB;IAC9B,iCAAW,IAAI,oBAAoB,CAAC;IACpC,IAAI,kCAAY,MACZ,MAAM,IAAI,MAAM,mCAAa;SAC1B;QACH,IAAI,+BAAS,MAAM,IAAI,GACnB,MAAM,IAAI,MAAM,cAAc,mCAAa;aACxC;YACH,8BAAQ,8BAAQ,CAAC,EAAE,CAAC,UAAU,CAAC,EAAE,CAAC,SAAS;YAC3C,8BAAQ,4BAAM,IAAI;YAClB,QAAQ,GAAG,CAAC,WAAW;YACvB,IAAI,IAAwB,SAAS,cAAc,CAAC;YACpD,IAAI,KAAK,MACL,EAAE,SAAS,GAAG;QAEtB;IACJ;AACJ;AAEA;;;CAGC,GACD,SAAS,4BAAM,GAAgB;IAE3B;;KAEC,GACD,uCAAiB;IACjB,IAAI,kBAA+B,IAAI,eAAe;IACtD,IAAI,mBAAmB,MACnB,MAAM,IAAI,MAAM;SACb;QACH,IAAI,UAAkB,gBAAgB,OAAO;QAC7C,wCAAkB,MAAM;QACxB,QAAQ,GAAG,CAAC;QACZ,qCAAe,CAAA,GAAA,yCAAQ,EAAE,SAAS,IAAI;QACtC,IAAI,QAAiB;QACrB,IAAI,MAAM,IAAI,MAAM,CAAC,QAAQ,MAAM,GAAG;QACtC,IAAI,QAAkB,gBAAgB,iBAAiB;QACvD,MAAM,OAAO,CAAC,SAAU,IAAI;YACxB,IAAI,YAAY,gBAAgB,YAAY,CAAC;YAC7C,IAAI,KAAK,CAAC,EAAE,KAAK,EAAE,EAAE,UAAU,CAAC,CAAC;YACjC,IAAI,OAAO;gBACP,QAAQ;gBACR,wCAAkB,MAAM;YAC5B,OACI,wCAAkB,OAAO,MAAM;QAEvC;QACA,wCAAkB;IAClB,8BAA8B;IAClC;IAEA;;KAEC,GACD,+BAAS;IAET;;KAEC,GACD,oCAAc;IACd;IACA;IAEA;;KAEC,GACD,oCAAc;IACd;IACA;IAEA;;KAEC,GACD,qCAAe;IACf;IAEA;;KAEC,GACD,0CAAoB;IACpB;IAEA;;KAEC,GACD,kCAAY;IACZ;AACJ;AAEA,IAAI;AAEJ;;;CAGC,GACD,SAAS,qCAAe,GAAgB;IACpC,QAAQ,GAAG,CAAC,CAAA,GAAA,yCAAS,EAAE,OAAO;IAC9B,IAAI,iBAA0B,CAAA,GAAA,yCAAiB,EAAE,KAAK,CAAA,GAAA,yCAAS,EAAE,OAAO;IACxE,wBAAwB;IACxB,yCAAmB,SAAS,cAAc,CAAC;IAC3C,IAAI,0CAAoB,MACpB,uCAAiB,SAAS,GAAG;IAEjC,UAAU;IACV,IAAI,cAAuB,CAAA,GAAA,yCAAc,EAAE,gBAAgB,CAAA,GAAA,yCAAM,EAAE,OAAO;IAC1E,IAAI,aAAkC,CAAA,GAAA,yCAAY,EAAE;IACpD,IAAI,aAAqB,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE;IACxD,IAAI,UAAmB,IAAI,CAAA,GAAA,yCAAM,EAAE,YAAY,YAAY;IAC3D,MAAM;IACN,IAAI,UAAmB,CAAA,GAAA,yCAAiB,EAAE,gBAAgB;IAC1D,IAAI,cAAyC,QAAQ,oBAAoB,CAAC,CAAA,GAAA,yCAAK,EAAE,OAAO;IACxF,uBAAuB;IACvB,IAAI,MAAgB,EAAE;IACtB,IAAK,IAAI,IAAI,GAAG,IAAI,YAAY,MAAM,EAAE,IAAK;QACzC,uBAAuB;QACvB,IAAI,eAA0C,WAAW,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAM,EAAE,OAAO;QACjG,IAAI;QACJ,IAAI,aAAa,MAAM,GAAG,GAAG;YACzB,IAAI,aAAa,MAAM,GAAG,GACtB,QAAQ,IAAI,CAAC,yBAAyB,aAAa,MAAM;YAE7D,YAAY,IAAI,CAAA,GAAA,yCAAM,EAAE,CAAA,GAAA,yCAAY,EAAE,YAAY,CAAC,EAAE,GAAG,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,YAAY,CAAC,EAAE,IAAI;YAC1G,QAAQ,GAAG,CAAC,cAAc,UAAU,QAAQ;QAChD;QACA,8BAA8B;QAC9B,IAAI,sBAAiD,WAAW,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAa,EAAE,OAAO;QAC/G,IAAI;QACJ,IAAI,oBAAoB,MAAM,GAAG,GAAG;YAChC,IAAI,oBAAoB,MAAM,GAAG,GAC7B,QAAQ,IAAI,CAAC,gCAAgC,oBAAoB,MAAM;YAE3E,iBAAiB,IAAI,CAAA,GAAA,yCAAa,EAAE,CAAA,GAAA,yCAAY,EAAE,mBAAmB,CAAC,EAAE,GAAG,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,mBAAmB,CAAC,EAAE;YAC3I,QAAQ,GAAG,CAAC,mBAAmB,eAAe,QAAQ;QAC1D;QACA,IAAI,IAAI,CAAC,IAAI,CAAA,GAAA,yCAAK,EAAE,CAAA,GAAA,yCAAY,EAAE,WAAW,CAAC,EAAE,GAAG,WAAW;IAC9D,mDAAmD;IACvD;IACA,mCAAa,IAAI,CAAA,GAAA,yCAAS,EAAE,CAAA,GAAA,yCAAY,EAAE,iBAAiB,SAAS,IAAI,CAAA,GAAA,yCAAE,EAAE,CAAA,GAAA,yCAAY,EAAE,UAAU;AACxG;AAEA,IAAI;AAEJ;;;CAGC,GACD,SAAS,0CAAoB,GAAgB;IACzC,QAAQ,GAAG,CAAC,CAAA,GAAA,yCAAc,EAAE,OAAO;IACnC,IAAI,sBAA+B,CAAA,GAAA,yCAAiB,EAAE,KAAK,CAAA,GAAA,yCAAc,EAAE,OAAO;IAClF,6BAA6B;IAC7B,8CAAwB,SAAS,cAAc,CAAC;IAChD,IAAI,+CAAyB,MACzB,4CAAsB,SAAS,GAAG;IAEtC,YAAY;IACZ,IAAI,gBAAyB,CAAA,GAAA,yCAAiB,EAAE,qBAAqB,CAAA,GAAA,yCAAQ,EAAE,OAAO;IACtF,IAAI,aAAkC,CAAA,GAAA,yCAAY,EAAE;IACpD,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE;IAC9D,IAAI,YAAuB,IAAI,CAAA,GAAA,yCAAQ,EAAE,YAAY;IACrD,wBAAwB;IACxB,IAAI,4BAAqC,CAAA,GAAA,yCAAiB,EAAE,qBAAqB,CAAA,GAAA,yCAAoB,EAAE,OAAO;IAC9G,IAAI,wBAA+C,IAAI,CAAA,GAAA,yCAAoB,EAAE,CAAA,GAAA,yCAAY,EAAE,4BACvF,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE;IAE9C,wCAAkB,IAAI,CAAA,GAAA,yCAAc,EAAE,WAAW;AACrD;AAEA,IAAI;AAEJ;;;CAGC,GACD,SAAS,kCAAY,GAAgB;IACjC,QAAQ,GAAG,CAAC,CAAA,GAAA,yCAAM,EAAE,OAAO;IAC3B,IAAI,cAAuB,CAAA,GAAA,yCAAiB,EAAE,KAAK,CAAA,GAAA,yCAAM,EAAE,OAAO;IAClE,qBAAqB;IACrB,IAAI,gBAAgB,SAAS,cAAc,CAAC;IAC5C,IAAI,iBAAiB,MACjB,cAAc,SAAS,GAAG;IAE9B,aAAa;IACb,IAAI,cAAyC,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAM,EAAE,OAAO;IAC7F,IAAI;IACJ,IAAI,YAAY,MAAM,IAAI,GACtB,UAAU,IAAI,CAAA,GAAA,yCAAM;SAEpB,IAAI,YAAY,MAAM,GAAG,GACrB,QAAQ,IAAI,CAAC,oBAAoB,YAAY,MAAM;IAG3D,yBAAyB;IACzB,IAAI,0BAAqD,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAkB,EAAE,OAAO;IACrH,IAAI;IACJ,IAAI,wBAAwB,MAAM,IAAI,GAClC,sBAAsB,IAAI,CAAA,GAAA,yCAAkB;SAE5C,IAAI,wBAAwB,MAAM,GAAG,GACjC,QAAQ,IAAI,CAAC,gCAAgC,wBAAwB,MAAM;IAGnF,oBAAoB;IACpB,IAAI,qBAAgD,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAa,EAAE,OAAO;IAC3G,IAAI;IACJ,IAAI,mBAAmB,MAAM,IAAI,GAC7B,iBAAiB,IAAI,CAAA,GAAA,yCAAa;SAElC,IAAI,mBAAmB,MAAM,GAAG,GAC5B,QAAQ,IAAI,CAAC,2BAA2B,mBAAmB,MAAM;IAGzE,sBAAsB;IACtB,IAAI,uBAAkD,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAe,EAAE,OAAO;IAC/G,IAAI;IACJ,IAAI,qBAAqB,MAAM,IAAI,GAC/B,mBAAmB,IAAI,CAAA,GAAA,yCAAe;SAEtC,IAAI,qBAAqB,MAAM,GAAG,GAC9B,QAAQ,IAAI,CAAC,6BAA6B,qBAAqB,MAAM;IAG7E,mBAAmB;IACnB,IAAI,oBAA+C,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAY,EAAE,OAAO;IACzG,IAAI;IACJ,IAAI,kBAAkB,MAAM,IAAI,GAC5B,gBAAgB,IAAI,CAAA,GAAA,yCAAY;SAEhC,IAAI,kBAAkB,MAAM,GAAG,GAC3B,QAAQ,IAAI,CAAC,0BAA0B,kBAAkB,MAAM;IAGvE,kBAAkB;IAClB,IAAI,mBAA8C,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAW,EAAE,OAAO;IACvG,IAAI;IACJ,IAAI,iBAAiB,MAAM,IAAI,GAC3B,eAAe,IAAI,CAAA,GAAA,yCAAW;SAE9B,IAAI,iBAAiB,MAAM,GAAG,GAC1B,QAAQ,IAAI,CAAC,yBAAyB,iBAAiB,MAAM;IAGrE,qCAAqC;IACrC,IAAI,sCAAiE,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAA8B,EAAE,OAAO;IAC7I,IAAI;IACJ,IAAI,oCAAoC,MAAM,IAAI,GAC9C,kCAAkC,IAAI,CAAA,GAAA,yCAA8B;SAEpE,IAAI,oCAAoC,MAAM,GAAG,GAC7C,QAAQ,IAAI,CAAC,4CAA4C,oCAAoC,MAAM;IAG3G,iCAAiC;IACjC,IAAI,kCAA6D,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAA0B,EAAE,OAAO;IACrI,IAAI;IACJ,IAAI,gCAAgC,MAAM,IAAI,GAC1C,8BAA8B,IAAI,CAAA,GAAA,yCAA0B;SAE5D,IAAI,gCAAgC,MAAM,GAAG,GACzC,QAAQ,IAAI,CAAC,wCAAwC,gCAAgC,MAAM;IAGnG,mBAAmB;IACnB,IAAI,oBAA+C,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAY,EAAE,OAAO;IACzG,IAAI;IACJ,IAAI,kBAAkB,MAAM,IAAI,GAC5B,gBAAgB,IAAI,CAAA,GAAA,yCAAY;SAEhC,IAAI,kBAAkB,MAAM,GAAG,GAC3B,QAAQ,IAAI,CAAC,0BAA0B,kBAAkB,MAAM;IAGvE,yBAAyB;IACzB,IAAI,0BAAqD,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAkB,EAAE,OAAO;IACrH,IAAI;IACJ,IAAI,wBAAwB,MAAM,IAAI,GAClC,sBAAsB,IAAI,CAAA,GAAA,yCAAkB;SAE5C,IAAI,wBAAwB,MAAM,GAAG,GACjC,QAAQ,IAAI,CAAC,gCAAgC,wBAAwB,MAAM;IAGnF,mBAAmB;IACnB,IAAI,oBAA+C,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAY,EAAE,OAAO;IACzG,IAAI;IACJ,IAAI,kBAAkB,MAAM,IAAI,GAC5B,gBAAgB,IAAI,CAAA,GAAA,yCAAY;SAEhC,IAAI,kBAAkB,MAAM,GAAG,GAC3B,QAAQ,IAAI,CAAC,0BAA0B,kBAAkB,MAAM;IAGvE,iBAAiB;IACjB,IAAI,kBAA6C,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAU,EAAE,OAAO;IACrG,IAAI;IACJ,IAAI,gBAAgB,MAAM,IAAI,GAC1B,cAAc,IAAI,CAAA,GAAA,yCAAU,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAC,EAAE,GAAG,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,eAAe,CAAC,EAAE;SAE7H,QAAQ,IAAI,CAAC,wBAAwB,gBAAgB,MAAM;IAE/D,kBAAkB;IAClB,IAAI,mBAA8C,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAW,EAAE,OAAO;IACvG,IAAI;IACJ,IAAI,iBAAiB,MAAM,IAAI,GAC3B,eAAe,IAAI,CAAA,GAAA,yCAAW;SAE9B,QAAQ,IAAI,CAAC,yBAAyB,iBAAiB,MAAM;IAEjE,yBAAyB;IACzB,IAAI,0BAAqD,YAAY,oBAAoB,CAAC,CAAA,GAAA,yCAAkB,EAAE,OAAO;IACrH,IAAI;IACJ,IAAI,wBAAwB,MAAM,IAAI,GAAG;QACrC,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,uBAAuB,CAAC,EAAE;QACxF,sBAAsB,IAAI,CAAA,GAAA,yCAAkB,EAAE,CAAA,GAAA,yCAAY,EAAE,uBAAuB,CAAC,EAAE,GAAG;IAC7F,OACI,QAAQ,IAAI,CAAC,gCAAgC,wBAAwB,MAAM;IAE/E,gCAAU,IAAI,CAAA,GAAA,yCAAM,EAAE,CAAA,GAAA,yCAAY,EAAE,cAAc,SAAS,qBAAqB,gBAAgB,kBAC5F,eAAe,cAAc,iCAAiC,6BAA6B,eAC3F,qBAAqB,eAAe,aAAa,cAAc;AACvE;AAEA;;;CAGC,GACD,SAAS,oCAAc,GAAgB;IACnC,IAAI,iBAAyB;IAC7B,QAAQ,GAAG,CAAC;IACZ,IAAI,mBAA4B,CAAA,GAAA,yCAAiB,EAAE,KAAK;IACxD,IAAI,gBAA2C,iBAAiB,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO;IACrG,IAAI,uBAAuB,cAAc,MAAM;IAC/C,QAAQ,GAAG,CAAC,yBAAyB;IACrC,yBAAyB;IACzB,IAAI,wBAAwB,GACxB,SAAS;IACT,MAAM,IAAI,MAAM;IAEpB,uBAAuB;IACvB,wCAAkB,SAAS,cAAc,CAAC;IAC1C,IAAI,yCAAmB,MACnB,sCAAgB,SAAS,GAAG;IAEhC,IAAK,IAAI,IAAI,GAAG,IAAI,sBAAsB,IAAK;QAC3C,IAAI,aAAkC,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE;QACpE,IAAI,aAAa,WAAW,GAAG,CAAC;QAChC,IAAI,cAAc,MACd,MAAM,IAAI,MAAM;QAEpB,IAAI,cAAc,MAAM;YACpB,QAAQ,GAAG,CAAC,QAAQ;YAEpB,kBAAkB;YAClB,IAAI;YACJ,IAAI,gBAA2C,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO;YACrG,8DAA8D;YAC9D,IAAI,cAAc,MAAM,GAAG;gBACvB,IAAI,cAAc,MAAM,GAAG,GAAG;oBAC1B,IAAI,eAAwB,CAAA,GAAA,yCAAc,EAAE,aAAa,CAAC,EAAE,EAAE,CAAA,GAAA,yCAAO,EAAE,OAAO;oBAC9E,IAAI,MAAM,IAAI,CAAA,GAAA,yCAAgB,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAA,GAAA,yCAAO,EAAE,OAAO;oBAC7E,YAAY,IAAI,CAAA,GAAA,yCAAO,EAAE,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE,GAAG,KAAK;gBACnE,OAAO;oBACH,YAAY,IAAI;oBAChB,IAAK,IAAI,IAAI,GAAG,IAAI,cAAc,MAAM,EAAE,IAAK;wBAC3C,IAAI,eAAwB,CAAA,GAAA,yCAAc,EAAE,aAAa,CAAC,EAAE,EAAE,CAAA,GAAA,yCAAO,EAAE,OAAO;wBAC9E,IAAI,MAAM,IAAI,CAAA,GAAA,yCAAgB,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAA,GAAA,yCAAO,EAAE,OAAO;wBAC7E,IAAI,WAAW,IAAI,CAAA,GAAA,yCAAO,EAAE,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE,GAAG,KAAK;wBAClE,UAAU,GAAG,CAAC,SAAS,MAAM,IAAI;oBACrC;gBACJ;;YAGJ,iBAAiB;YACjB,IAAI;YACJ,IAAI,eAA0C,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAM,EAAE,OAAO;YACnG,4DAA4D;YAC5D,IAAI,aAAa,MAAM,GAAG;gBACtB,IAAI,aAAa,MAAM,GAAG,GAAG;oBACzB,IAAI,eAAwB,CAAA,GAAA,yCAAc,EAAE,YAAY,CAAC,EAAE,EAAE,CAAA,GAAA,yCAAO,EAAE,OAAO;oBAC7E,IAAI,MAAM,IAAI,CAAA,GAAA,yCAAgB,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAA,GAAA,yCAAO,EAAE,OAAO;oBAC7E,WAAW,IAAI,CAAA,GAAA,yCAAM,EAAE,CAAA,GAAA,yCAAY,EAAE,YAAY,CAAC,EAAE,GAAG,KAAK;gBAChE,OAAO;oBACH,WAAW,IAAI;oBACf,IAAK,IAAI,IAAI,GAAG,IAAI,aAAa,MAAM,EAAE,IAAK;wBAC1C,IAAI,eAAwB,CAAA,GAAA,yCAAc,EAAE,YAAY,CAAC,EAAE,EAAE,CAAA,GAAA,yCAAO,EAAE,OAAO;wBAC7E,IAAI,MAAM,IAAI,CAAA,GAAA,yCAAgB,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAA,GAAA,yCAAO,EAAE,OAAO;wBAC7E,IAAI,UAAU,IAAI,CAAA,GAAA,yCAAM,EAAE,CAAA,GAAA,yCAAY,EAAE,YAAY,CAAC,EAAE,GAAG,KAAK;wBAC/D,SAAS,GAAG,CAAC,QAAQ,MAAM,IAAI;oBACnC;gBACJ;;YAGJ,0BAA0B;YAC1B,4CAA4C;YAC5C,IAAI,sBAAiD,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAc,EAAE,OAAO;YAClH,IAAI;YACJ,IAAI,oBAAoB,MAAM,GAAG;gBAC7B,IAAI,oBAAoB,MAAM,GAAG,GAAG;oBAChC,IAAI,eAAwB,mBAAmB,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO,CAAC,CAAC,EAAE;oBAC5F,IAAI,MAAM,IAAI,CAAA,GAAA,yCAAgB,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAA,GAAA,yCAAO,EAAE,OAAO;oBAC7E,mBAAmB,IAAI,CAAA,GAAA,yCAAc,EAAE,CAAA,GAAA,yCAAY,EAAE,mBAAmB,CAAC,EAAE,GAAG,KAAK;gBACvF,OAAO;oBACH,mBAAmB,IAAI;oBACvB,IAAK,IAAI,IAAI,GAAG,IAAI,oBAAoB,MAAM,EAAE,IAAK;wBACjD,IAAI,eAAwB,mBAAmB,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAO,EAAE,OAAO,CAAC,CAAC,EAAE;wBAC5F,IAAI,MAAM,IAAI,CAAA,GAAA,yCAAgB,EAAE,CAAA,GAAA,yCAAY,EAAE,eAAe,CAAA,GAAA,yCAAO,EAAE,OAAO;wBAC7E,IAAI,kBAAkB,IAAI,CAAA,GAAA,yCAAc,EAAE,CAAA,GAAA,yCAAY,EAAE,mBAAmB,CAAC,EAAE,GAAG,KAAK;wBACtF,iBAAiB,GAAG,CAAC,gBAAgB,MAAM,IAAI;oBACnD;gBACJ;;YAEJ,sDAAsD;YAEtD,kBAAkB;YAClB,IAAI,gBAAgB,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;YAC3E,IAAI;YACJ,IAAI,cAAc,MAAM,GAAG,GAAG;gBAC1B,IAAI,cAAc,MAAM,GAAG,GACvB,MAAM,IAAI,MAAM,iBAAiB,CAAA,GAAA,yCAAQ,EAAE,OAAO,GAAG,kBAAkB,cAAc,MAAM,GAAG;gBAElG,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE;YAC5D;YAEA,mBAAmB;YACnB,oCAAoC;YACpC,IAAI;YACJ,IAAI,iBAA4C,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,wCAAS,EAAE,OAAO;YACxG,kDAAkD;YAClD,gEAAgE;YAChE,IAAI,eAAe,MAAM,GAAG,GAAG;gBAC3B,IAAI,eAAe,MAAM,GAAG,GACxB,MAAM,IAAI,MAAM,iBAAiB,CAAA,GAAA,wCAAS,EAAE,OAAO,GAAG,kBAAkB,eAAe,MAAM,GAAG;qBAC7F;oBACH,IAAI,uBAA4C,CAAA,GAAA,yCAAY,EAAE,cAAc,CAAC,EAAE;oBAC/E,IAAI,OAA2B,qBAAqB,GAAG,CAAC;oBACxD,oDAAoD;oBACpD,IAAI,QAAQ,aAAa,QAAQ,CAAA,GAAA,wCAAQ,EAAE,QAAQ,EAAE;wBACjD,IAAI,OAA2B,qBAAqB,GAAG,CAAC;wBACxD,uDAAuD;wBACvD,IAAI,QAAQ,WACR;4BAAA,IAAI,QAAQ,CAAA,GAAA,wCAAQ,EAAE,OAAO,IAAI,QAAQ,CAAA,GAAA,wCAAQ,EAAE,QAAQ,EAAE;gCACzD,IAAI;gCACJ,IAAI,qBAAgD,cAAc,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAa,EAAE,OAAO;gCACjH,IAAI,sBAAsB,MACtB;oCAAA,IAAI,kBAAkB,CAAC,EAAE,IAAI,MAAM;wCAC/B,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,kBAAkB,CAAC,EAAE;wCACnF,iBAAiB,IAAI,CAAA,GAAA,yCAAa,EAAE,CAAA,GAAA,yCAAY,EAAE,kBAAkB,CAAC,EAAE,GAAG;oCAC9E;gCAAA;gCAEJ,kDAAkD;gCAClD,IAAI;gCACJ,IAAI,uBAAkD,cAAc,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAe,EAAE,OAAO;gCACrH,IAAI,wBAAwB,MACxB;oCAAA,IAAI,oBAAoB,CAAC,EAAE,IAAI,MAAM;wCACjC,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,oBAAoB,CAAC,EAAE;wCACrF,mBAAmB,IAAI,CAAA,GAAA,yCAAe,EAAE,CAAA,GAAA,yCAAY,EAAE,oBAAoB,CAAC,EAAE,GAAG;oCACpF;gCAAA;gCAEJ,sDAAsD;gCACtD,IAAI;gCACJ,IAAI,gBAA2C,cAAc,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;gCACvG,IAAI,iBAAiB,MACjB;oCAAA,IAAI,aAAa,CAAC,EAAE,IAAI,MAAM;wCAC1B,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,aAAa,CAAC,EAAE;wCAC9E,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE,GAAG;oCAC/D;gCAAA;gCAEJ,wCAAwC;gCACxC,IAAI;gCACJ,IAAI,gBAA2C,cAAc,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAQ,EAAE,OAAO;gCACvG,IAAI,iBAAiB,MACjB;oCAAA,IAAI,aAAa,CAAC,EAAE,IAAI,MAAM;wCAC1B,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,aAAa,CAAC,EAAE;wCAC9E,YAAY,IAAI,CAAA,GAAA,yCAAQ,EAAE,CAAA,GAAA,yCAAY,EAAE,aAAa,CAAC,EAAE,GAAG;oCAC/D;gCAAA;gCAEJ,wCAAwC;gCACxC,aAAa,IAAI,CAAA,GAAA,wCAAQ,EAAE,sBAAsB,gBAAgB,kBAAkB,WAAW;4BAClG;wBAAA;oBAER,OACI,aAAa,IAAI,CAAA,GAAA,wCAAS,EAAE;gBAEpC;YACJ;YAEA,0BAA0B;YAC1B,IAAI,yBAAyB,aAAa,CAAC,EAAE,CAAC,oBAAoB,CAAC,CAAA,GAAA,yCAAiB,EAAE,OAAO;YAC7F,IAAI;YACJ,IAAI,uBAAuB,MAAM,GAAG,GAAG;gBACnC,IAAI,uBAAuB,MAAM,GAAG,GAChC,MAAM,IAAI,MAAM,iBAAiB,CAAA,GAAA,yCAAiB,EAAE,OAAO,GAAG,kBAAkB,uBAAuB,MAAM,GAAG;gBAEpH,IAAI,QAAgB,WAAW,CAAA,GAAA,yCAAW,EAAE,CAAA,GAAA,yCAAgB,EAAE,sBAAsB,CAAC,EAAE;gBACvF,qBAAqB,IAAI,CAAA,GAAA,yCAAiB,EAAE,CAAA,GAAA,yCAAY,EAAE,sBAAsB,CAAC,EAAE,GAAG;YAC1F;YAEA,mBAAmB;YACnB,IAAI,WAAW,IAAI,CAAA,GAAA,yCAAO,EAAE,YAAY,YAAY,WAAW,UAAU,WAAW,kBAChF,YAAY;YAChB,gCAAU,GAAG,CAAC,YAAY;QAC1B,sCAAsC;QAC1C;IACJ;AACJ;AAEA;;;;;;;;;CASC,GACD,SAAS,0CAAoB,MAAyB,EAAE,SAAgC,EACpF,SAAgC,EAAE,IAAa,EAAE,IAAY,EAAE,EAAU,EAAE,GAAW;IACtF,QAAQ,GAAG,CAAC;IACZ,6FAA6F;IAC7F,sBAAsB;IACtB,IAAI,QAAQ;IACZ,IAAI,QAAQ;IACZ,IAAI,MAAM;IACV,IAAI,OAAO;IACX,wBAAwB;IACxB,IAAI,SAAS;IACb,IAAI,aAAa;IACjB,IAAI,aAAa;IACjB,MAAM,MAAgC,OAAO,UAAU,CAAC;IACxD,6BAA6B;IAE7B,iCAAiC;IACjC,IAAI,KAAK,CAAA,GAAA,yCAAY,EAAE,KAAK,MAAM;IAClC,0BAA0B;IAE1B,wBAAwB;IACxB,0FAA0F;IAC1F,yCAAyC;IACzC,+BAA+B;IAC/B,IAAI,YAAyB,IAAI;IACjC,IAAI,WAAwB,IAAI;IAChC,IAAI,cAA2B,IAAI;IACnC,IAAI,mBAAgC,IAAI;IACxC,IAAI,SAA8B,IAAI;IACtC,IAAI,WAAgC,IAAI;IACxC,IAAI,IAAY;IAChB,IAAI,YAAoB,OAAO,SAAS;IACxC,IAAI,YAAoB,OAAO,SAAS;IACxC,UAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,wBAAwB;QACxB,IAAI,2BAAuF,SAAS,gBAAgB;QACpH,sCAAsC;QACtC,IAAI,iBAAqC,SAAS,iBAAiB;QACnE,IAAI,kBAAkB,WAAW;YAC7B,UAAU,GAAG,CAAC;YACd,IAAI,SAAS,GAAG,CAAC,iBACb,YAAY,GAAG,CAAC;YAEpB,IAAI,SAAiB,SAAS,kBAAkB;YAChD,YAAY,KAAK,GAAG,CAAC,WAAW;YAChC,YAAY,KAAK,GAAG,CAAC,WAAW;YAChC,SAAS,GAAG,CAAC,gBAAgB;YAC7B,IAAI,CAAC,OAAO,GAAG,CAAC,iBAAiB;gBAC7B,OAAO,GAAG,CAAC,gBAAgB;gBAC3B;YACJ;QACJ;QACA,IAAI,gBAAoC,SAAS,gBAAgB;QACjE,IAAI,iBAAiB,WAAW;YAC5B,SAAS,GAAG,CAAC;YACb,IAAI,SAAS,SAAS,iBAAiB;YACvC,YAAY,KAAK,GAAG,CAAC,WAAW;YAChC,YAAY,KAAK,GAAG,CAAC,WAAW;YAChC,SAAS,GAAG,CAAC,eAAe;YAC5B,IAAI,OAAO,GAAG,CAAC,gBAAgB;gBAC3B;gBACA,IAAI,IAAY,CAAA,GAAA,yCAAE,EAAE,QAAQ;gBAC5B,iDAAiD;gBACjD,OAAO,OAAO,CAAC,SAAU,KAAK,EAAE,GAAG;oBAC/B,IAAI,QAAQ,GACR,OAAO,GAAG,CAAC,KAAK,QAAQ;gBAEhC;gBACA,4BAA4B;gBAC5B,IAAI,4BAA4B,WAAW;oBACvC,IAAI,oCAAoC,KACpC,yBAAyB,OAAO,CAAC,SAAU,EAAE,EAAE,EAAE;wBAC7C,IAAI,MAAc,GAAG,MAAM;wBAC3B,iBAAiB,GAAG,CAAC;wBACrB,OAAO,GAAG,CAAC,KAAK;wBAChB,SAAS,GAAG,WAAW,GAAG,SAAS;wBACnC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,SAAS,GAAG,CAAC,KAAK;wBAClB;oBACJ;yBACG;wBACH,IAAI,KAAsB;wBAC1B,IAAI,MAAc,GAAG,MAAM;wBAC3B,iBAAiB,GAAG,CAAC;wBACrB,OAAO,GAAG,CAAC,KAAK;wBAChB,SAAS,GAAG,WAAW,GAAG,SAAS;wBACnC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,SAAS,GAAG,CAAC,KAAK;wBAClB;oBACJ;oBACA,OAAO,GAAG,CAAC,eAAe;oBAC1B;gBACJ;YACJ,OAAO;gBACH,IAAI,4BAA4B;oBAC5B,IAAI,oCAAoC,KACpC,yBAAyB,OAAO,CAAC,SAAU,EAAE,EAAE,EAAE;wBAC7C,IAAI,MAAc,GAAG,MAAM;wBAC3B,iBAAiB,GAAG,CAAC;wBACrB,OAAO,GAAG,CAAC,KAAK;wBAChB,SAAS,GAAG,WAAW,GAAG,SAAS;wBACnC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,SAAS,GAAG,CAAC,KAAK;wBAClB;oBACJ;yBACG;wBACH,IAAI,KAAsB;wBAC1B,IAAI,MAAc,GAAG,MAAM;wBAC3B,iBAAiB,GAAG,CAAC;wBACrB,OAAO,GAAG,CAAC,KAAK;wBAChB,SAAS,GAAG,WAAW,GAAG,SAAS;wBACnC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,YAAY,KAAK,GAAG,CAAC,WAAW;wBAChC,SAAS,GAAG,CAAC,KAAK;wBAClB;oBACJ;;gBAEJ,OAAO,GAAG,CAAC,eAAe;gBAC1B;YACJ;QACJ;IACJ;IACA,+CAA+C;IAC/C,mDAAmD;IACnD,wCAAwC;IACxC,wCAAwC;IACxC,IAAI,cAAsB,YAAY;IACtC,4CAA4C;IAC5C,wCAAwC;IACxC,sCAAsC;IACtC,sDAAsD;IAEtD,uCAAuC;IACvC,IAAI,WAAqB,EAAE;IAC3B,OAAO,OAAO,CAAC,SAAU,KAAK,EAAE,GAAG;QAC/B,QAAQ,CAAC,MAAM,GAAG;IACtB;IACA,qDAAqD;IAErD,gCAAgC;IAChC,+CAA+C;IAC/C,sBAAsB;IACtB,IAAI,KAAa;IACjB,IAAI;IACJ,IAAI;IACJ,IAAI;IACJ,IAAI,OAAe;IACnB,IAAI;IACJ,IAAI,cAAsB,GAAG,iDAAiD;IAC9E,IAAI,cAAsB,IAAI,yBAAyB;IACvD,IAAI,gBAAuC,IAAI;IAC/C,IAAI,iBAAwC,IAAI;IAChD,IAAI,eAAsC,IAAI;IAC9C,IAAI,gBAAuC,IAAI;IAC/C,IAAI,uBAA8C,IAAI;IACtD,IAAI,wBAA+C,IAAI;IACvD,SAAS,OAAO,CAAC,SAAU,KAAK;QAC5B,sCAAsC;QACtC,mDAAmD;QACnD,IAAI,SAAiB,CAAA,GAAA,yCAAE,EAAE,UAAU;QACnC,IAAI,iBAAyB,CAAA,GAAA,yCAAM,EAAE,WAAW,aAAa,GAAG,OAAO,MAAM,EAAE;QAC/E,kBAAkB;QAClB,KAAK,KAAK,GAAG,CAAC,CAAA,GAAA,yCAAW,EAAE,KAAK,OAAO,QAAQ,IAAI,OAAO,CAAA,GAAA,yCAAW,EAAE,KAAK,OAAO;QACnF,KAAK,KAAK,KAAK;QACf,KAAK,iBAAiB;QACtB,KAAK;QACL,sCAAsC;QACtC,mFAAmF;QACnF,qDAAqD;QACrD,sDAAsD;QACtD,cAAc,GAAG,CAAC,OAAO;YAAC;YAAI;SAAG;QACjC,eAAe,GAAG,CAAC,OAAO;YAAC;YAAI;SAAG;QAClC,IAAI,SAAS,GAAG,CAAC,QAAQ;YACrB,aAAa,GAAG,CAAC,OAAO;gBAAC;gBAAI;aAAG;YAChC,cAAc,GAAG,CAAC,OAAO;gBAAC;gBAAI;aAAG;QACrC;QACA,IAAI,iBAAiB,GAAG,CAAC,QAAQ;YAC7B,qBAAqB,GAAG,CAAC,OAAO;gBAAC;gBAAI;aAAG;YACxC,sBAAsB,GAAG,CAAC,OAAO;gBAAC;gBAAI;aAAG;QAC7C;QACA,KAAK,KAAK;QACV,OAAO;IACX;IAEA,iCAAiC;IACjC,OAAO,KAAK,GAAG;IACf,8CAA8C;IAE9C,sDAAsD;IACtD,IAAI,yBAAyB,OAAO,MAAM,GAAI,IAAI,KAAO,IAAI;IAC7D,kEAAkE;IAElE,IAAI,uBAAuB,OAAO,MAAM;IAExC,4BAA4B;IAC5B,OAAO,MAAM,GAAG;IAEhB,iCAAiC;IACjC,uDAAuD;IACvD,IAAI,SAAS,CAAC,GAAG,GAAG,GAAG,IAAI,GAAG;IAG9B,kDAAkD;IAClD,UAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,0BAA0B;QAC1B,sCAAsC;QACtC,uCAAuC;QACvC,IAAI,2BAAuF,SAAS,gBAAgB;QACpH,sCAAsC;QACtC,IAAI,iBAAqC,SAAS,iBAAiB;QACnE,IAAI,gBAAoC,SAAS,gBAAgB;QACjE,IAAI,gBAA0B,CAAA,GAAA,yCAAE,EAAE,gBAAgB;QAClD,IAAI,cAAwB,CAAA,GAAA,yCAAE,EAAE,cAAc;QAC9C,IAAI,4BAA4B;YAC5B,IAAI,oCAAoC,KACpC,yBAAyB,OAAO,CAAC,SAAU,EAAE,EAAE,EAAE;gBAC7C,IAAI,kBAAmC;gBACvC,IAAI,uBAA+B,gBAAgB,MAAM;gBACzD,IAAI,sBAAgC,CAAA,GAAA,yCAAE,EAAE,sBAAsB;gBAC9D,CAAA,GAAA,yCAAO,EAAE,KAAK,OAAO,KAAK,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE,mBAAmB,CAAC,EAAE,EAChF,mBAAmB,CAAC,EAAE;gBAC1B,IAAI,uBAAiC,CAAA,GAAA,yCAAE,EAAE,uBAAuB;gBAChE,CAAA,GAAA,yCAAO,EAAE,KAAK,OAAO,KAAK,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EACtE,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,EAAE;YACtC;iBACG;gBACH,IAAI,kBAAmC;gBACvC,IAAI,uBAA+B,gBAAgB,MAAM;gBACzD,IAAI,sBAAgC,CAAA,GAAA,yCAAE,EAAE,sBAAsB;gBAC9D,CAAA,GAAA,yCAAO,EAAE,KAAK,OAAO,KAAK,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,EAAE,mBAAmB,CAAC,EAAE,EAChF,mBAAmB,CAAC,EAAE;gBAC1B,IAAI,uBAAiC,CAAA,GAAA,yCAAE,EAAE,uBAAuB;gBAChE,CAAA,GAAA,yCAAO,EAAE,KAAK,OAAO,KAAK,oBAAoB,CAAC,EAAE,EAAE,oBAAoB,CAAC,EAAE,EACtE,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,EAAE;YACtC;eAEA,CAAA,GAAA,yCAAO,EAAE,KAAK,OAAO,KAAK,aAAa,CAAC,EAAE,EAAE,aAAa,CAAC,EAAE,EACxD,WAAW,CAAC,EAAE,EAAE,WAAW,CAAC,EAAE;IAE1C;IAEA,oCAAoC;IACpC,2EAA2E;IAC3E,UAAU,OAAO,CAAC,SAAU,KAAK;QAC7B,IAAI,SAAiB,CAAA,GAAA,yCAAE,EAAE,UAAU;QACnC,IAAI,iBAAyB,CAAA,GAAA,yCAAM,EAAE,WAAW,aAAa,GAAG,sBAAsB;QACtF,IAAI,KAAa,CAAA,GAAA,yCAAE,EAAE,eAAe,MAAM,CAAC,EAAE;QAC7C,IAAI,IAAY,iBAAiB;QACjC,IAAI,KAAa,CAAA,GAAA,yCAAE,EAAE,gBAAgB,MAAM,CAAC,EAAE;QAC9C,IAAI,eAAuB,OAAO,QAAQ;QAC1C,CAAA,GAAA,yCAAQ,EAAE,KAAK,MAAM,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,IAAI,OAAO;IAC5D;IACA,SAAS,OAAO,CAAC,SAAU,KAAK;QAC5B,IAAI,SAAiB,CAAA,GAAA,yCAAE,EAAE,UAAU;QACnC,IAAI,iBAAyB,CAAA,GAAA,yCAAM,EAAE,WAAW,aAAa,GAAG,sBAAsB;QACtF,IAAI,KAAa,CAAA,GAAA,yCAAE,EAAE,cAAc,MAAM,CAAC,EAAE;QAC5C,IAAI,IAAY,iBAAiB;QACjC,IAAI,KAAa,CAAA,GAAA,yCAAE,EAAE,eAAe,MAAM,CAAC,EAAE;QAC7C,IAAI,eAAuB,OAAO,QAAQ;QAC1C,IAAI,YAAY,GAAG,CAAC,QAChB,CAAA,GAAA,yCAAQ,EAAE,KAAK,QAAQ,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,IAAI,OAAO;aAE1D,CAAA,GAAA,yCAAQ,EAAE,KAAK,OAAO,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,IAAI,OAAO;IAEjE;IACA,iBAAiB,OAAO,CAAC,SAAU,KAAK;QACpC,IAAI;QACJ,IAAI,SAAiB,CAAA,GAAA,yCAAE,EAAE,UAAU;QACnC,IAAI,iBAAyB,CAAA,GAAA,yCAAM,EAAE,WAAW,aAAa,GAAG,sBAAsB;QACtF,IAAI,KAAa,CAAA,GAAA,yCAAE,EAAE,sBAAsB,MAAM,CAAC,EAAE;QACpD,IAAI,IAAY,iBAAiB;QACjC,IAAI,KAAa,CAAA,GAAA,yCAAE,EAAE,uBAAuB,MAAM,CAAC,EAAE;QACrD,IAAI,eAAuB,OAAO,QAAQ;QAC1C,CAAA,GAAA,yCAAQ,EAAE,KAAK,KAAK,IAAI,IAAI,GAAG,IAAI,GAAG,MAAM,IAAI,OAAO;IAC3D;AACJ;AAEA;;CAEC,GACD,SAAS;IACL,IAAI,gCAAU,IAAI,IAAI,GAClB;IAEJ,0BAA0B;IAC1B,IAAI,KAAa;IACjB,IAAI,gBAA6B,IAAI;IACrC,gCAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,SAAS,UAAU,CAAC,OAAO,CAAC,SAAU,KAAK,EAAE,GAAG;YAC5C,cAAc,GAAG,CAAC;QACtB;IACJ;IAEA,QAAQ,GAAG,CAAC,mBAAmB;IAG/B,IAAI,iBAAiB,CAAA,GAAA,yCAAI,EAAE;QACvB;QACA;QACA;QACA;KAA2C;IAC/C,gCAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,0BAA0B;QAC1B,sCAAsC;QACtC,IAAI,eAAuB,SAAS,SAAS;QAC7C,IAAI;QACJ,IAAI,gBAAgB,MAChB,SAAS;aAET,SAAS,aAAa,QAAQ;QAElC,kCAAkC;QAClC,IAAI,oBAA4B;QAChC,IAAI,YAAkC,SAAS,YAAY;QAC3D,IAAI,aAAa,WACb,oBAAoB,CAAA,GAAA,wCAAY,EAAE,WAAW;QAEjD,IAAI,uBAA+B;QACnC,IAAI,WAAiC,SAAS,WAAW;QACzD,IAAI,YAAY,WACZ,uBAAuB,CAAA,GAAA,wCAAY,EAAE,UAAU;QAEnD,kBAAkB,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,MACxB,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAO,EAAE,UAAU,KAAK,WAAW,mBAAmB,WAC5D,CAAA,GAAA,yCAAI,EAAE,mBAAmB,QACzB,CAAA,GAAA,yCAAI,EAAE,sBAAsB;IACtC;IACA,wCAAkB,SAAS,cAAc,CAAC;IAC1C,IAAI,0CAAoB,MACpB,sCAAgB,SAAS,GAAG;AAEpC;AAEA;;CAEC,GACD,SAAS;IACL,IAAI,gCAAU,IAAI,IAAI,GAClB;IAEJ,0BAA0B;IAC1B,IAAI,iBAAiB,CAAA,GAAA,yCAAI,EAAE;QAAC;QAAM;QAAa;QAAY;QACvD;QAAkB;QAAqB;QAAa;KAAY;IACpE,gCAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,0BAA0B;QAC1B,sCAAsC;QACtC,IAAI,YAAoB,SAAS,iBAAiB,MAAM;QACxD,IAAI,WAAmB,SAAS,gBAAgB,MAAM;QACtD,IAAI,kBAA0B;QAC9B,IAAI,iBAAyB;QAC7B,IAAI,mBAA2B;QAC/B,IAAI,YAAoB;QACxB,IAAI,YAAoB;QACxB,IAAI,MAAkE,SAAS,gBAAgB;QAC/F,4BAA4B;QAC5B,IAAI,OAAO;YACP,IAAI,eAAe,KACf,2BAA2B;YAC3B,IAAI,OAAO,CAAC,SAAU,EAAE;gBACpB,IAAI,OAA2B,GAAG,MAAM;gBACxC,IAAI,QAAQ,MACR,kBAAkB,OAAO;YAEjC;iBACG;gBACH,IAAI,KAAsB;gBAC1B,IAAI,OAA2B,GAAG,MAAM;gBACxC,IAAI,QAAQ,MACR,kBAAkB;YAE1B;;QAEJ,IAAI,aAAqC,SAAS,aAAa;QAC/D,0CAA0C;QAC1C,wDAAwD;QACxD,IAAI,cAAc;YACd,IAAI,sBAAsB,CAAA,GAAA,wCAAQ,GAAG;gBACjC,IAAI,KAAiC,WAAW,iBAAiB;gBACjE,IAAI,MAAM,WACN,iBAAiB,GAAG,KAAK,CAAC,QAAQ,KAAK,MACjC,GAAG,UAAU,CAAC,GAAG,CAAC;gBAE5B,IAAI,KAAmC,WAAW,mBAAmB;gBACrE,IAAI,MAAM,WACN,mBAAmB,GAAG,KAAK,CAAC,QAAQ,KAAK,MACnC,GAAG,UAAU,CAAC,GAAG,CAAC;gBAE5B,IAAI,KAA4B,WAAW,YAAY;gBACvD,IAAI,MAAM,WACN,YAAY,GAAG,KAAK,CAAC,QAAQ;gBAEjC,IAAI,KAA4B,WAAW,YAAY;gBACvD,IAAI,MAAM,WACN,YAAY,GAAG,KAAK,CAAC,QAAQ;YAErC,OAAO;gBACH,IAAI,WAAW,UAAU,CAAC,GAAG,CAAC,WAAW;qBAClC;oBACH,QAAQ,GAAG,CAAC,4BAA4B;oBACxC,MAAM,IAAI,MAAM,4BAA4B;gBAChD;YACJ;;QAGJ,kBAAkB,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,MAAM,CAAA,GAAA,yCAAI,EAAE,aAAa,CAAA,GAAA,yCAAI,EAAE,YAAY,CAAA,GAAA,yCAAI,EAAE,mBACzE,CAAA,GAAA,yCAAI,EAAE,gBAAgB,QAAQ,CAAA,GAAA,yCAAI,EAAE,kBAAkB,QAAQ,CAAA,GAAA,yCAAI,EAAE,WAAW,QAC/E,CAAA,GAAA,yCAAI,EAAE,WAAW;QACvB,wCAAkB,SAAS,cAAc,CAAC;QAC1C,IAAI,0CAAoB,MACpB,sCAAgB,SAAS,GAAG;IAEpC;AACJ;AAEA;;CAEC,GACD,SAAS;IACL,IAAI,gCAAU,IAAI,GAAG,GAAG;QACpB,+BAA+B;QAC/B,gDAA0B,SAAS,cAAc,CAAC;QAClD,IAAI,iDAA2B,MAC3B,8CAAwB,SAAS,GAAG;QAExC,uBAAuB;QACvB,IAAI,SAAmC,SAAS,cAAc,CAAC;QAC/D,IAAI,OAAe;QACnB,IAAI,OAAgB;QACpB,IAAI,KAAa;QACjB,IAAI,MAAc;QAClB,IAAI,UAAU,MAAM;YAChB,OAAO,KAAK,CAAC,OAAO,GAAG;YACvB,0CAAoB,QAAQ,iCAAW,iCAAW,MAAM,MAAM,IAAI;QACtE;IACJ;AACJ;AAEA;;CAEC,GACD,SAAS;IACL,IAAI,kBAAsC,SAAS,cAAc,CAAC;IAClE,IAAI,mBAAmB,MACnB,gBAAgB,SAAS,GAAG,cAAc,iCAAW,UAAU,GAAG,KAAK;IAE3E,IAAI,cAAkC,SAAS,cAAc,CAAC;IAC9D,IAAI,KAAe;QAAC;QAAK;KAAI;IAC7B,yBAAyB;IACzB,IAAI,aAAsB,iCAAW,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;QACvD,OAAO,KAAK,UAAU,MAAM;IAChC;IACA,IAAI,YACA,GAAG,IAAI,CAAC;IAEZ,sCAAsC;IACtC,IAAI,oBAA6B,iCAAW,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,CAAA;QAC9D,OAAO,KAAK,iBAAiB,MAAM;IACvC;IACA,IAAI,mBACA,GAAG,IAAI,CAAC;IAEZ,IAAI,QAAgB,CAAA,GAAA,yCAAI,EAAE;IAC1B,IAAI,eAAe,MAAM;QACrB,iCAAW,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,SAAU,MAAM;YAChD,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,OAAO,IAAI,GAAG,QAAQ,MAAM,CAAA,GAAA,yCAAI,EAAE,OAAO,IAAI,GAAG,QAAQ;YAC7E,IAAI,YACA,SAAS,CAAA,GAAA,yCAAI,EAAE,OAAO,UAAU,IAAI,cAAc;YAEtD,IAAI,mBACA,SAAS,CAAA,GAAA,yCAAI,EAAE,OAAO,iBAAiB,IAAI,cAAc;QAEjE;QACA,YAAY,SAAS,GAAG;IAC5B;AACJ;AAEA;;CAEC,GACD,SAAS;IACL,IAAI,0BAA8C,SAAS,cAAc,CAAC;IAC1E,IAAI,QAAgB,CAAA,GAAA,yCAAI,EAAE;QAAC;QAAa;KAAQ;IAChD,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,gBAAgB,CAAA,GAAA,yCAAI,EAAE,sCAAgB,YAAY,GAAG,KAAK,CAAC,QAAQ;IACxF,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,+BAA+B,CAAA,GAAA,yCAAI,EAAE,sCAAgB,wBAAwB,GAAG,KAAK,CAAC,QAAQ;IAEnH,IAAI,2BAA2B,MAC3B,wBAAwB,SAAS,GAAG;AAE5C;AAEA;;CAEC,GACD,SAAS;IACL,IAAI,wBAA4C,SAAS,cAAc,CAAC;IACxE,IAAI,QAAgB,CAAA,GAAA,yCAAI,EAAE;QAAC;QAAW;KAAQ;IAC9C,UAAU;IACV,IAAI,UAA+B,8BAAQ,UAAU;IACrD,IAAI,WAAW,WACX,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAM,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAElD,sBAAsB;IACtB,IAAI,sBAAuD,8BAAQ,sBAAsB;IACzF,IAAI,uBAAuB,WACvB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAkB,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAE9D,iBAAiB;IACjB,IAAI,iBAA6C,8BAAQ,iBAAiB;IAC1E,IAAI,kBAAkB,WAClB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAa,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAEzD,mBAAmB;IACnB,IAAI,mBAAiD,8BAAQ,mBAAmB;IAChF,IAAI,oBAAoB,WACpB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAe,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAE3D,gBAAgB;IAChB,IAAI,gBAA2C,8BAAQ,gBAAgB;IACvE,IAAI,iBAAiB,WACjB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAY,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAExD,eAAe;IACf,IAAI,eAAyC,8BAAQ,eAAe;IACpE,IAAI,gBAAgB,WAChB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAW,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAEvD,kCAAkC;IAClC,IAAI,kCAA+E,8BAAQ,kCAAkC;IAC7H,IAAI,mCAAmC,WACnC,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAA8B,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAE1E,8BAA8B;IAC9B,IAAI,8BAAuE,8BAAQ,8BAA8B;IACjH,IAAI,+BAA+B,WAC/B,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAA0B,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAEtE,gBAAgB;IAChB,IAAI,gBAA2C,8BAAQ,gBAAgB;IACvE,IAAI,iBAAiB,WACjB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAY,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAExD,sBAAsB;IACtB,IAAI,sBAAuD,8BAAQ,sBAAsB;IACzF,IAAI,uBAAuB,WACvB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAkB,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAE9D,gBAAgB;IAChB,IAAI,gBAA2C,8BAAQ,gBAAgB;IACvE,IAAI,iBAAiB,WACjB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAY,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAExD,cAAc;IACd,IAAI,cAAuC,8BAAQ,cAAc;IACjE,IAAI,eAAe,WACf,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAU,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE,YAAY,KAAK,CAAC,QAAQ;IAEhF,eAAe;IACf,IAAI,eAAyC,8BAAQ,eAAe;IACpE,IAAI,gBAAgB,WAChB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAW,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE;IAEvD,sBAAsB;IACtB,IAAI,sBAAuD,8BAAQ,sBAAsB;IACzF,IAAI,uBAAuB,WACvB,SAAS,CAAA,GAAA,wCAAI,EAAE,CAAA,GAAA,yCAAI,EAAE,CAAA,GAAA,yCAAkB,EAAE,OAAO,IAAI,CAAA,GAAA,yCAAI,EAAE,oBAAoB,KAAK,CAAC,QAAQ;IAEhG,iBAAiB;IACjB,IAAI,yBAAyB,MACzB,sBAAsB,SAAS,GAAG;AAE1C;AAMO,SAAS,0CAAU,KAAuB;IAC7C,IAAI,YAAoB,MAAM,EAAE;IAChC,IAAI,aAAqB,UAAU,KAAK,CAAC,IAAI,CAAC,EAAE;IAChD,IAAI,WAAiC,gCAAU,GAAG,CAAC;IACnD,IAAI,YAAY,WAAW;QACvB,IAAI,aAAqB,WAAW,MAAM,KAAK;QAC/C,IAAI,CAAC,MAAM,aAAa;YACpB,SAAS,SAAS,CAAC;YACnB,QAAQ,GAAG,CAAC,eAAe,aAAa,aAAa;QACzD,OAAO;YACH,MAAM,sBAAsB,aAAa;YACzC,IAAI,eAAe,SAAS,cAAc,CAAC;YAC3C,aAAa,KAAK,GAAG,SAAS,SAAS,GAAG,QAAQ;QACtD;IACA,sCAAsC;IAC1C;AACJ;AAEC,OAAe,SAAS,GAAG;AAE5B;;CAEC,GACD,OAAO,OAAO,GAAG;IACb,QAAQ,GAAG,CAAC;IAEZ,MAAM,MAAc;IACpB,IAAI;IACJ,MAAM,WAAmB,IAAI,MAAM,CAAC;IAEpC,mBAAmB;IACnB,IAAI,YAAY,OAAO,MAAM,CAAA,GAAA,yCAAK,EAAE,6BAAO;IAE3C,uBAAuB;IACvB,QAAQ;IACR,IAAI,eAAuB;IAC3B,gCAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,gBAAgB,SAAS,KAAK,CAAC,KAAK;IACpC,yDAAyD;IAC7D;IACA,eAAe,CAAA,GAAA,yCAAK,EAAE,cAAc,gBAAgB,WAAW,KAAK;IAEpE,uBAAuB;IACvB,QAAQ;IACR,IAAI,eAAuB;IAC3B,gCAAU,OAAO,CAAC,SAAU,QAAQ,EAAE,EAAE;QACpC,gBAAgB,SAAS,KAAK,CAAC,KAAK;IACpC,yDAAyD;IAC7D;IACA,eAAe,CAAA,GAAA,yCAAK,EAAE,cAAc,gBAAgB,WAAW,KAAK;IAEpE,uBAAuB;IACvB,IAAI,iBAAyB,iCAAW,KAAK,CAAC,KAAK;IAEnD,yBAAyB;IACzB,IAAI,sBAA8B,sCAAgB,KAAK,CAAC,KAAK;IAE7D,oBAAoB;IACpB,IAAI,cAAsB,8BAAQ,KAAK,CAAC,KAAK;IAE7C,yCAAyC;IACzC,IAAI,OAAO,IAAI,KAAK;QAAC;QAAQ;QAAgB;QAAW;QAAc;QAClE;QAAgB;QAAqB;QAAa;KAAa,EAC/D;QAAE,MAAM;IAAa;IAEzB,uCAAuC;IACvC,IAAI,MAAM,IAAI,eAAe,CAAC;IAE9B,2BAA2B;IAC3B,IAAI,IAAI,SAAS,aAAa,CAAC;IAE/B,2DAA2D;IAC3D,EAAE,IAAI,GAAG;IACT,EAAE,QAAQ,GAAG,0CAAoB,qCAAqC;IAEtE,wEAAwE;IACxE,SAAS,IAAI,CAAC,WAAW,CAAC;IAC1B,EAAE,KAAK;IAEP,mDAAmD;IACnD,SAAS,IAAI,CAAC,WAAW,CAAC;AAE9B","sources":["src/ts/app.ts","src/ts/util.ts","src/ts/xml.ts","src/ts/html.ts","src/ts/molecule.ts","src/ts/reaction.ts","src/ts/canvas.ts","src/ts/conditions.ts","src/ts/modelParameters.ts","src/ts/control.ts"],"sourcesContent":["import {\n    get, rescale\n} from './util.js';\n\nimport {\n    getAttribute, getFirstElement, getFirstChildNode, getNodeValue, getTag, getEndTag,\n    getAttributes, toHTML, getSingularElement, TagWithAttributes\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property, MoleculeRef, AtomArray, BondArray, PropertyList, PropertyScalar, PropertyArray, ExtraDOSCMethod, BondRef, HinderedRotorPotential, PotentialPoint, Periodicity, ReservoirSize\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, ZhuNakamuraCrossing, Tunneling, TInfinity, ExcessReactantConc\n} from './reaction.js';\n\nimport {\n    arrayToString, toNumberArray, isNumeric\n} from './util.js';\n\nimport {\n    getTD, getTH, getTR, getInput\n} from './html.js';\n\nimport {\n    drawLevel, drawLine, getTextHeight, getTextWidth\n} from './canvas.js';\n\nimport {\n    BathGas, Conditions, ExperimentRate, PTpair, PTs\n} from './conditions.js';\n\nimport {\n    EnergyAboveTheTopHill, GrainSize, ModelParameters\n} from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset, Eigenvalues, HideInactive, TestDOS, PrintSpeciesProfile,\n    TestMicroRates, TestRateConstant, PrintGrainDOS, PrintCellDOS, PrintReactionOperatorColumnSums,\n    PrintTunnellingCoefficients, PrintGrainkfE, PrintGrainBoltzmann, PrintGrainkbE\n} from './control.js';\n\n/*\n// Code for service worker for Progressive Web App (PWA).\nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n        //const swUrl = new URL('../../../sw.js', import.meta.url);\n        const swUrl = new URL('../../../sw.js', document.baseURI);\n        navigator.serviceWorker.register(swUrl);\n    });\n}\n*/\n/*  \nif ('serviceWorker' in navigator) {\n    window.addEventListener('load', function () {\n        navigator.serviceWorker.register('../../../sw.js').then(function (registration) {\n            console.log('ServiceWorker registration successful with scope: ', registration.scope);\n        }, function (err) {\n            console.log('ServiceWorker registration failed: ', err);\n        });\n    });\n}\n*/\n\n//declare var global: any;\n//const globalScope = (typeof global !== 'undefined') ? global : window;\n\n//if (typeof global === 'undefined') {\n//    (window as any).global = window;\n//}\n\ndeclare global {\n    interface Window {\n        loadXML(): void;\n        saveXML(): void;\n    }\n}\n\n// Expected XML tags strings.\nlet me_title_s: string = 'me:title';\n\n/**\n * For storing me.title.\n */\nlet title: string;\n\n/**\n * For storing the XML root start tag.\n */\nlet mesmerStartTag: string;\n\n/**\n * For storing the XML root end tag.\n */\nlet mesmerEndTag: string;\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map();\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map();\n\n/**\n * The header of the XML file.\n */\nconst header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n/**\n * The filename of the mesmer input file loaded.\n */\nlet input_xml_filename: string;\n\n/**\n * The load button.\n */\nlet loadButton: HTMLElement | null;\n\n/**\n * The save button.\n */\nlet saveButton: HTMLElement | null;\n\n/**\n * The XML text element.\n */\nlet me_title: HTMLCollectionOf<Element> | null;\nlet molecules_title: HTMLElement | null;\nlet molecules_table: HTMLElement | null;\nlet reactions_title: HTMLElement | null;\nlet reactions_table: HTMLElement | null;\nlet reactions_diagram_title: HTMLElement | null;\nlet conditions_title: HTMLElement | null;\nlet conditions_table: HTMLElement | null;\nlet modelParameters_title: HTMLElement | null;\nlet modelParameters_table: HTMLElement | null;\nlet xml_title: HTMLElement | null;\nlet xml_text: HTMLElement | null;\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xml: string) {\n    //console.log(\"xml=\" + xml);\n    if (xml_title != null) {\n        xml_title.innerHTML = input_xml_filename;\n    }\n    if (xml_text != null) {\n        xml_text.innerHTML = toHTML(xml);\n    }\n}\n\n/**\n * Parses xml to initilise molecules.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initMolecules(xml: XMLDocument): void {\n    let moleculeList_s: string = 'moleculeList';\n    console.log(\"Read and store \" + moleculeList_s);\n    let xml_moleculeList: Element = getSingularElement(xml, moleculeList_s);\n    // Set molecules_title.\n    molecules_title = document.getElementById(\"molecules_title\");\n    if (molecules_title != null) {\n        molecules_title.innerHTML = \"Molecules\";\n    }\n    // xml_moleculeList should have one or more molecule elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(Molecule.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n    }\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName(Molecule.tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    // Process each molecule.\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n\n        // Init atomsNode.\n        let atomsNode: AtomArray | Atom | undefined;\n        // There can be an individual atom not in an atom array, or an attom array.\n        let xml_atomArrays = xml_molecules[i].getElementsByTagName(AtomArray.tagName);\n        if (xml_atomArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + AtomArray.tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        }\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms: HTMLCollectionOf<Element> = xml_atomArray.getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length < 2) {\n                throw new Error(\"Expecting 2 or more atoms in \" + AtomArray.tagName + \", but finding \" + xml_atoms.length + \"!\");\n            }\n            let atoms: Atom[] = [];\n            for (let j = 0; j < xml_atoms.length; j++) {\n                atoms.push(new Atom(getAttributes(xml_atoms[j])));\n            }\n            atomsNode = new AtomArray(getAttributes(xml_atomArray), atoms);\n            moleculeTagNames.delete(AtomArray.tagName);\n        } else {\n            let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length == 1) {\n                atomsNode = new Atom(getAttributes(xml_atoms[0]));\n            } else if (xml_atoms.length > 1) {\n                throw new Error(\"Expecting 1 \" + Atom.tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + AtomArray.tagName + \"?\");\n            }\n        }\n        moleculeTagNames.delete(Atom.tagName);\n\n        // Init bondsNode.\n        let bondsNode: BondArray | Bond | undefined;\n\n        // There can be an individual bond not in a bond array, or a bond array.\n        let xml_bondArrays = xml_molecules[i].getElementsByTagName(BondArray.tagName);\n        if (xml_bondArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + BondArray.tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n        }\n        if (xml_bondArrays.length == 1) {\n            let xml_bondArray = xml_bondArrays[0];\n            let xml_bonds: HTMLCollectionOf<Element> = xml_bondArray.getElementsByTagName(Bond.tagName);\n            // There may be only 1 bond in a BondArray.\n            let bonds: Bond[] = [];\n            for (let j = 0; j < xml_bonds.length; j++) {\n                bonds.push(new Bond(getAttributes(xml_bonds[j])));\n            }\n            bondsNode = new BondArray(getAttributes(xml_bondArray), bonds);\n            moleculeTagNames.delete(BondArray.tagName);\n        } else {\n            let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Bond.tagName);\n            if (xml_bonds.length == 1) {\n                bondsNode = new Bond(getAttributes(xml_bonds[0]));\n            } else if (xml_bonds.length > 1) {\n                throw new Error(\"Expecting 1 \" + Bond.tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + BondArray.tagName + \"?\");\n            }\n        }\n        moleculeTagNames.delete(Bond.tagName);\n\n        // Init propertiesNode.\n        let propertiesNode: PropertyList | Property | undefined;\n\n        // There can be an individual property not in a propertyList.\n        let xml_PLs = xml_molecules[i].getElementsByTagName(PropertyList.tagName);\n        if (xml_PLs.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_PLs.length + \"!\");\n        }\n        if (xml_PLs.length == 1) {\n            let xml_PL = xml_PLs[0];\n            let xml_Ps: HTMLCollectionOf<Element> = xml_PL.getElementsByTagName(Property.tagName);\n            if (xml_Ps.length < 2) {\n                throw new Error(\"Expecting 2 or more \" + Property.tagName + \" in \" + PropertyList.tagName + \", but finding \" + xml_Ps.length + \"!\");\n            }\n            let properties: Map<string, Property> = new Map();\n            for (let j = 0; j < xml_Ps.length; j++) {\n                let property: Property = getProperty(xml_Ps[j]);\n                let dictRef: string = property.attributes.get(\"dictRef\") as string;\n                properties.set(dictRef, property);\n            }\n            propertiesNode = new PropertyList(getAttributes(xml_PL), properties);\n            moleculeTagNames.delete(PropertyList.tagName);\n        } else {\n            let xml_Ps: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Property.tagName);\n            if (xml_Ps.length > 1) {\n                throw new Error(\"Expecting 1 \" + Property.tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + PropertyList.tagName + \"?\");\n            }\n            propertiesNode = getProperty(xml_Ps[0]);\n        }\n        moleculeTagNames.delete(Property.tagName);\n\n        let els: HTMLCollectionOf<Element> | null;\n\n        // Read energyTransferModel\n        moleculeTagNames.delete(EnergyTransferModel.tagName);\n        let energyTransferModel: EnergyTransferModel | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (els != null) {\n            if (els.length > 0) {\n                if (els.length != 1) {\n                    throw new Error(\"energyTransferModel length=\" + els.length);\n                }\n                let xml_deltaEDown: HTMLCollectionOf<Element> = els[0].getElementsByTagName(DeltaEDown.tagName);\n                if (xml_deltaEDown != null) {\n                    let deltaEDowns: DeltaEDown[] = [];\n                    for (let k = 0; k < xml_deltaEDown.length; k++) {\n                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_deltaEDown[k])));\n                        let deltaEDown: DeltaEDown = new DeltaEDown(getAttributes(xml_deltaEDown[k]), value);\n                        deltaEDowns.push(deltaEDown);\n                    }\n                    energyTransferModel = new EnergyTransferModel(getAttributes(els[0]), deltaEDowns);\n                }\n            }\n        }\n\n        // Read DOSCMethod\n        moleculeTagNames.delete(DOSCMethod.tagName);\n        let dOSCMethod: DOSCMethod | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(DOSCMethod.tagName);\n        if (els != null) {\n            let el: Element | null = els[0];\n            if (el != null) {\n                dOSCMethod = new DOSCMethod(getAttributes(el));\n            }\n        }\n\n        // Read ExtraDOSCMethod.\n        moleculeTagNames.delete(ExtraDOSCMethod.tagName);\n        let extraDOSCMethod: ExtraDOSCMethod | undefined = undefined;\n        els = xml_molecules[i].getElementsByTagName(ExtraDOSCMethod.tagName);\n        if (els.length > 0) {\n            if (els.length != 1) {\n                throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + els.length);\n            }\n            // Read bondRef.\n            let bondRefs: HTMLCollectionOf<Element> = els[0].getElementsByTagName(BondRef.tagName);\n            let bondRef: BondRef | undefined;\n            if (bondRefs.length > 0) {\n                if (bondRefs.length != 1) {\n                    throw new Error(\"Expecting only 1 bondRef, but there are \" + bondRefs.length);\n                }\n                bondRef = new BondRef(getAttributes(bondRefs[0]), getNodeValue(getFirstChildNode(bondRefs[0])));\n            }\n            // Read hunderedRotorPotential.\n            let hinderedRotorPotentials: HTMLCollectionOf<Element> = els[0].getElementsByTagName(HinderedRotorPotential.tagName);\n            let hinderedRotorPotential: HinderedRotorPotential | undefined;\n            if (hinderedRotorPotentials.length > 0) {\n                if (hinderedRotorPotentials.length != 1) {\n                    throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + hinderedRotorPotentials.length);\n                }\n                // Load PotentialPoints.\n                let potentialPoints: PotentialPoint[] = [];\n                let xml_potentialPoints: HTMLCollectionOf<Element> = hinderedRotorPotentials[0].getElementsByTagName(PotentialPoint.tagName);\n                for (let k = 0; k < xml_potentialPoints.length; k++) {\n                    potentialPoints.push(new PotentialPoint(getAttributes(xml_potentialPoints[k])));\n                }\n                hinderedRotorPotential = new HinderedRotorPotential(getAttributes(hinderedRotorPotentials[0]), potentialPoints);\n            }\n            // Read periodicities.\n            let xml_periodicities: HTMLCollectionOf<Element> = els[0].getElementsByTagName(Periodicity.tagName);\n            let periodicity: Periodicity | undefined;\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) {\n                    throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                }\n                periodicity = new Periodicity(getAttributes(xml_periodicities[0]),\n                    parseFloat(getNodeValue(getFirstChildNode(xml_periodicities[0]))));\n            }\n            extraDOSCMethod = new ExtraDOSCMethod(getAttributes(els[0]), bondRef, hinderedRotorPotential, periodicity);\n        }\n\n        // Read reservoirSize.\n        moleculeTagNames.delete(ReservoirSize.tagName);\n        let reservoirSize: ReservoirSize | undefined;\n        els = xml_molecules[i].getElementsByTagName(ReservoirSize.tagName);\n        if (els.length > 0) {\n            if (els.length != 1) {\n                throw new Error(\"Expecting only 1 reservoirSize, but there are \" + els.length);\n            }\n            reservoirSize = new ReservoirSize(getAttributes(els[0]), parseFloat(getNodeValue(getFirstChildNode(els[0]))));\n        }\n\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.warn(x));\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n\n        let molecule = new Molecule(attributes, atomsNode, bondsNode, propertiesNode, energyTransferModel, dOSCMethod, \n            extraDOSCMethod, reservoirSize);\n        //console.log(molecule.toString());\n        molecules.set(molecule.id, molecule);\n    }\n}\n\nfunction addEventListenersToMoleculesTable(): void {\n    // Add event listeners to molecules table.\n    molecules.forEach(function (molecule, id) {\n        let energyKey = id + \"_energy\";\n        let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n        if (inputElement) {\n            inputElement.addEventListener('change', (event) => {\n                // The input is set up to call the function setEnergy(HTMLInputElement),\n                // so the following commented code is not used. As the input was setup \n                // as a number type. The any non numbers were It seems that there are two \n                // ways to get and store the value of the input element.\n                // Both ways have been kept for now as I don't know which way is better!\n                let eventTarget = event.target as HTMLInputElement;\n                let inputValue = eventTarget.value;\n                if (isNumeric(inputValue)) {\n                    molecule.setEnergy(parseFloat(inputValue));\n                    console.log(\"Set energy of \" + id + \" to \" + inputValue + \" kJ/mol\");\n                } else {\n                    alert(\"Energy input for \" + id + \" is not a number\");\n                    let inputElement = document.getElementById(energyKey) as HTMLInputElement;\n                    inputElement.value = molecule.getEnergy().toString();\n                    console.log(\"inputValue=\" + inputValue);\n                    console.log(\"Type of inputValue: \" + typeof inputValue);\n                }\n            });\n        }\n    });\n}\n\n\nfunction getProperty(xml_property: Element): Property {\n    let attribs: Map<string, string> = getAttributes(xml_property);\n    let children: HTMLCollectionOf<Element> = xml_property.children;\n    if (children.length != 1) {\n        throw new Error(\"Expecting 1 child but finding \" + children.length);\n    }\n    let nodeAttributes: Map<string, string> = getAttributes(children[0]);\n    let nodeName: string = children[0].nodeName; // Expecting scalar or array\n    let textContent: string | null = children[0].textContent;\n    if (textContent == null) {\n        console.error(\"nodeName\");\n        throw new Error('textContent is null');\n    }\n    textContent = textContent.trim();\n    let dictRef: string | undefined = attribs.get(\"dictRef\");\n    //console.log(\"dictRef=\" + dictRef);\n    if (dictRef == null) {\n        throw new Error('dictRef is null');\n    }\n    //console.log(\"fcnn=\" + fcnn);\n    if (nodeName == PropertyScalar.tagName) {\n        let value: number = parseFloat(textContent);\n        return new Property(attribs, new PropertyScalar(nodeAttributes, value));\n    } else if (nodeName == PropertyArray.tagName) {\n        return new Property(attribs, new PropertyArray(nodeAttributes, toNumberArray(textContent.split(/\\s+/)), \" \"));\n    } else if (nodeName == \"matrix\") {\n        throw new Error(\"Unexpected nodeName: \" + nodeName);\n    } else {\n        throw new Error(\"Unexpected nodeName: \" + nodeName);\n    }\n}\n\nlet inputElement: HTMLInputElement;\n\n//function reload() {\nfunction loadXML() {\n    inputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            input_xml_filename = file.name;\n            if (xml_text != null) {\n                let reader = new FileReader();\n                let chunkSize = 1024 * 1024; // 1MB\n                let start = 0;\n                let contents = '';\n                reader.onload = function (e) {\n                    if (!e.target) {\n                        throw new Error('Event target is null');\n                    }\n                    contents += (e.target as FileReader).result as string;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            displayXML(contents);\n                            let parser = new DOMParser();\n                            let xml = parser.parseFromString(contents, \"text/xml\");\n                            parse(xml);\n                            /*\n                            // Sending to the server for validation is no longer implemented as there is currently no server.\n                            // Send XML to the server\n                            fetch('http://localhost:1234/', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'text/xml',\n                                },\n                                body: contents,\n                            })\n                                .then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(`HTTP error! status: ${response.status}`);\n                                    }\n                                    return response.text();\n                                })\n                                .then(data => {\n                                    console.log('Server response:', data);\n                                })\n                                .catch(error => {\n                                    console.error('There was a problem with the fetch operation:', error);\n                                });\n                            */\n                        }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        }\n    };\n    inputElement.click();\n    // Add event listener to load button.\n    loadButton = document.getElementById('load_button');\n    if (loadButton != null) {\n        //loadButton.addEventListener('click', reload);\n        loadButton.addEventListener('click', loadXML);\n    }\n\n    // Ensure save button is displayed.\n    saveButton = document.getElementById('saveButton');\n    if (saveButton != null) {\n        saveButton.style.display = 'inline';\n    }\n}\n\n/**\n * Once the DOM is loaded, set up the elements.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n\n    // Initialise elements\n    xml_title = document.getElementById(\"xml_title\");\n    xml_text = document.getElementById(\"xml_text\");\n\n\n    window.loadXML = function () {\n        loadXML();\n        //reload();\n    }\n});\n\n/**\n * Set the title.\n * @param {XMLDocument} xml The XML document.\n */\nfunction setTitle(xml: XMLDocument) {\n    me_title = xml.getElementsByTagName(me_title_s);\n    if (me_title == null) {\n        throw new Error(me_title_s + ' not found');\n    } else {\n        if (me_title.length != 1) {\n            throw new Error('Multiple ' + me_title_s + ' elements found');\n        } else {\n            title = me_title[0].childNodes[0].nodeValue as string;\n            title = title.trim();\n            console.log(\"Title=\" + title);\n            let e: HTMLElement | null = document.getElementById(\"title\");\n            if (e != null) {\n                e.innerHTML = title;\n            }\n        }\n    }\n}\n\n/**\n * Parse the XML.\n * @param {XMLDocument} xml \n */\nfunction parse(xml: XMLDocument) {\n\n    /**\n     * Set mesmer_xml start tag.\n     */\n    mesmerStartTag = \"\\n\";\n    let documentElement: HTMLElement = xml.documentElement;\n    if (documentElement == null) {\n        throw new Error(\"Document element not found\");\n    } else {\n        let tagName: string = documentElement.tagName;\n        mesmerStartTag += \"<\" + tagName;\n        console.log(tagName);\n        mesmerEndTag = getEndTag(tagName, \"\", true);\n        let first: boolean = true;\n        let pad = \" \".repeat(tagName.length + 2);\n        let names: string[] = documentElement.getAttributeNames();\n        names.forEach(function (name) {\n            let attribute = documentElement.getAttribute(name);\n            let na = `${name}=\"${attribute}\"`;\n            if (first) {\n                first = false;\n                mesmerStartTag += \" \" + na;\n            } else {\n                mesmerStartTag += \"\\n\" + pad + na;\n            }\n        });\n        mesmerStartTag += \">\";\n        //console.log(mesmerStartTag);\n    }\n\n    /**\n     *  Set title.\n     */\n    setTitle(xml);\n\n    /**\n     * Generate molecules table.\n     */\n    initMolecules(xml);\n    addEventListenersToMoleculesTable();\n    displayMoleculesTable();\n\n    /**\n     * Generate reactions table.\n     */\n    initReactions(xml);\n    displayReactionsTable();\n    displayReactionsDiagram();\n\n    /**\n     * Generate conditions table.\n     */\n    initConditions(xml);\n    displayConditions();\n\n    /**\n     * Generate parameters table.\n     */\n    initModelParameters(xml);\n    displayModelParameters();\n\n    /**\n     * Generate control table.\n     */\n    initControl(xml);\n    displayControl();\n}\n\nlet conditions: Conditions;\n\n/**\n * Parse xml to initialise conditions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initConditions(xml: XMLDocument): void {\n    console.log(Conditions.tagName);\n    let xml_conditions: Element = getSingularElement(xml, Conditions.tagName);\n    // Set conditions_title.\n    conditions_title = document.getElementById(\"conditions_title\");\n    if (conditions_title != null) {\n        conditions_title.innerHTML = \"Conditions\";\n    }\n    // BathGas\n    let xml_bathGas: Element = getFirstElement(xml_conditions, BathGas.tagName);\n    let attributes: Map<string, string> = getAttributes(xml_bathGas);\n    let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGas));\n    let bathGas: BathGas = new BathGas(attributes, moleculeID, molecules);\n    // PTs\n    let xml_PTs: Element = getSingularElement(xml_conditions, 'me:PTs');\n    let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTs.getElementsByTagName(PTpair.tagName);\n    // Process each PTpair.\n    let pTs: PTpair[] = [];\n    for (let i = 0; i < xml_PTPairs.length; i++) {\n        // Add optional BathGas\n        let xml_bathGass: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(BathGas.tagName);\n        let pTBathGas: BathGas | undefined; \n        if (xml_bathGass.length > 0) {\n            if (xml_bathGass.length > 1) {\n                console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n            }\n            pTBathGas = new BathGas(getAttributes(xml_bathGass[0]), getNodeValue(getFirstChildNode(xml_bathGass[0])), molecules);\n            console.log(\"pTBathGas\" + pTBathGas.toString());\n        }\n        // Add optional ExperimentRate\n        let xml_experimentRates: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(ExperimentRate.tagName);\n        let experimentRate: ExperimentRate | undefined;\n        if (xml_experimentRates.length > 0) {\n            if (xml_experimentRates.length > 1) {\n                console.warn(\"xml_experimentRates.length=\" + xml_experimentRates.length);\n            }\n            experimentRate = new ExperimentRate(getAttributes(xml_experimentRates[0]), parseFloat(getNodeValue(getFirstChildNode(xml_experimentRates[0]))));\n            console.log(\"experimentRate\" + experimentRate.toString());\n        }\n        pTs.push(new PTpair(getAttributes(xml_PTPairs[i]), pTBathGas, experimentRate));\n        //console.log(pTs[i].toString()); // For debugging.\n    }\n    conditions = new Conditions(getAttributes(xml_conditions), bathGas, new PTs(getAttributes(xml_PTs), pTs));\n}\n\nlet modelParameters: ModelParameters;\n\n/**\n * Parses xml to initialise modelParameters.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initModelParameters(xml: XMLDocument): void {\n    console.log(ModelParameters.tagName);\n    let xml_modelParameters: Element = getSingularElement(xml, ModelParameters.tagName);\n    // Set modelParameters_title.\n    modelParameters_title = document.getElementById(\"modelParameters_title\");\n    if (modelParameters_title != null) {\n        modelParameters_title.innerHTML = \"Model Parameters\";\n    }\n    // GrainSize\n    let xml_grainSize: Element = getSingularElement(xml_modelParameters, GrainSize.tagName);\n    let attributes: Map<string, string> = getAttributes(xml_grainSize);\n    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSize)));\n    let grainSize: GrainSize = new GrainSize(attributes, value);\n    // EnergyAboveTheTopHill\n    let xml_energyAboveTheTopHill: Element = getSingularElement(xml_modelParameters, EnergyAboveTheTopHill.tagName);\n    let energyAboveTheTopHill: EnergyAboveTheTopHill = new EnergyAboveTheTopHill(getAttributes(xml_energyAboveTheTopHill),\n        parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHill))));\n\n    modelParameters = new ModelParameters(grainSize, energyAboveTheTopHill);\n}\n\nlet control: Control;\n\n/**\n * Parses xml to initialise control.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initControl(xml: XMLDocument): void {\n    console.log(Control.tagName);\n    let xml_control: Element = getSingularElement(xml, Control.tagName);\n    // Set control_title.\n    let control_title = document.getElementById(\"control_title\");\n    if (control_title != null) {\n        control_title.innerHTML = \"Control\";\n    }\n    // me:testDOS\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestDOS.tagName);\n    let testDOS: TestDOS | undefined;\n    if (xml_testDOS.length == 1) {\n        testDOS = new TestDOS();\n    } else {\n        if (xml_testDOS.length > 1) {\n            console.warn(\"testDOS.length=\" + xml_testDOS.length);\n        }\n    }\n    // me:printSpeciesProfile\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintSpeciesProfile.tagName);\n    let printSpeciesProfile: PrintSpeciesProfile | undefined;\n    if (xml_printSpeciesProfile.length == 1) {\n        printSpeciesProfile = new PrintSpeciesProfile();\n    } else {\n        if (xml_printSpeciesProfile.length > 1) {\n            console.warn(\"printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n        }\n    }\n    // me:testMicroRates\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestMicroRates.tagName);\n    let testMicroRates: TestMicroRates | undefined;\n    if (xml_testMicroRates.length == 1) {\n        testMicroRates = new TestMicroRates();\n    } else {\n        if (xml_testMicroRates.length > 1) {\n            console.warn(\"testMicroRates.length=\" + xml_testMicroRates.length);\n        }\n    }\n    // me:testRateConstant\n    let xml_testRateConstant: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestRateConstant.tagName);\n    let testRateConstant: TestRateConstant | undefined;\n    if (xml_testRateConstant.length == 1) {\n        testRateConstant = new TestRateConstant();\n    } else {\n        if (xml_testRateConstant.length > 1) {\n            console.warn(\"testRateConstant.length=\" + xml_testRateConstant.length);\n        }\n    }\n    // me:printGrainDOS\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainDOS.tagName);\n    let printGrainDOS: PrintGrainDOS | undefined;\n    if (xml_printGrainDOS.length == 1) {\n        printGrainDOS = new PrintGrainDOS();\n    } else {\n        if (xml_printGrainDOS.length > 1) {\n            console.warn(\"printGrainDOS.length=\" + xml_printGrainDOS.length);\n        }\n    }\n    // me:printCellDOS\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellDOS.tagName);\n    let printCellDOS: PrintCellDOS | undefined;\n    if (xml_printCellDOS.length == 1) {\n        printCellDOS = new PrintCellDOS();\n    } else {\n        if (xml_printCellDOS.length > 1) {\n            console.warn(\"printCellDOS.length=\" + xml_printCellDOS.length);\n        }\n    }\n    // me:printReactionOperatorColumnSums\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorColumnSums.tagName);\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined;\n    if (xml_printReactionOperatorColumnSums.length == 1) {\n        printReactionOperatorColumnSums = new PrintReactionOperatorColumnSums();\n    } else {\n        if (xml_printReactionOperatorColumnSums.length > 1) {\n            console.warn(\"printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n        }\n    }\n    // me:printTunnellingCoefficients\n    let xml_printTunnellingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTunnellingCoefficients.tagName);\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined;\n    if (xml_printTunnellingCoefficients.length == 1) {\n        printTunnellingCoefficients = new PrintTunnellingCoefficients();\n    } else {\n        if (xml_printTunnellingCoefficients.length > 1) {\n            console.warn(\"printTunnellingCoefficients.length=\" + xml_printTunnellingCoefficients.length);\n        }\n    }\n    // me:printGrainkfE\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkfE.tagName);\n    let printGrainkfE: PrintGrainkfE | undefined;\n    if (xml_printGrainkfE.length == 1) {\n        printGrainkfE = new PrintGrainkfE();\n    } else {\n        if (xml_printGrainkfE.length > 1) {\n            console.warn(\"printGrainkfE.length=\" + xml_printGrainkfE.length);\n        }\n    }\n    // me:printGrainBoltzmann\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainBoltzmann.tagName);\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined;\n    if (xml_printGrainBoltzmann.length == 1) {\n        printGrainBoltzmann = new PrintGrainBoltzmann();\n    } else {\n        if (xml_printGrainBoltzmann.length > 1) {\n            console.warn(\"printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n        }\n    }\n    // me:printGrainkbE\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkbE.tagName);\n    let printGrainkbE: PrintGrainkbE | undefined;\n    if (xml_printGrainkbE.length == 1) {\n        printGrainkbE = new PrintGrainkbE();\n    } else {\n        if (xml_printGrainkbE.length > 1) {\n            console.warn(\"printGrainkbE.length=\" + xml_printGrainkbE.length);\n        }\n    }\n    // me:eigenvalues\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(Eigenvalues.tagName);\n    let eigenvalues: Eigenvalues | undefined;\n    if (xml_eigenvalues.length == 1) {\n        eigenvalues = new Eigenvalues(getAttributes(xml_eigenvalues[0]), parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0]))));\n    } else {\n        console.warn(\"eigenvalues.length=\" + xml_eigenvalues.length);\n    }\n    // me:hideInactive\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(HideInactive.tagName);\n    let hideInactive: HideInactive | undefined;\n    if (xml_hideInactive.length == 1) {\n        hideInactive = new HideInactive();\n    } else {\n        console.warn(\"hideInactive.length=\" + xml_hideInactive.length);\n    }\n    // me:diagramEnergyOffset\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(DiagramEnergyOffset.tagName);\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    if (xml_diagramEnergyOffset.length == 1) {\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffset = new DiagramEnergyOffset(getAttributes(xml_diagramEnergyOffset[0]), value);\n    } else {\n        console.warn(\"diagramEnergyOffset.length=\" + xml_diagramEnergyOffset.length);\n    }\n    control = new Control(getAttributes(xml_control), testDOS, printSpeciesProfile, testMicroRates, testRateConstant,\n        printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE,\n        printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset);\n}\n\n/**\n * Parses xml to initialise reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initReactions(xml: XMLDocument): void {\n    let reactionList_s: string = 'reactionList';\n    console.log(reactionList_s);\n    let xml_reactionList: Element = getSingularElement(xml, reactionList_s);\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    // Process each reaction.\n    if (xml_reactions_length == 0) {\n        //return;\n        throw new Error(\"No reactions: There should be at least 1!\");\n    }\n    // Set reactions_title.\n    reactions_title = document.getElementById(\"reactions_title\");\n    if (reactions_title != null) {\n        reactions_title.innerHTML = \"Reactions\";\n    }\n    for (let i = 0; i < xml_reactions_length; i++) {\n        let attributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionID = attributes.get(\"id\");\n        if (reactionID == null) {\n            throw new Error(\"reactionID is null\");\n        }\n        if (reactionID != null) {\n            console.log(\"id=\" + reactionID);\n\n            // Load reactants.\n            let reactants: Map<string, Reactant> | Reactant | undefined;\n            let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            if (xml_reactants.length > 0) {\n                if (xml_reactants.length < 2) {\n                    let xml_molecule: Element = getFirstElement(xml_reactants[0], Molecule.tagName);\n                    let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                    reactants = new Reactant(getAttributes(xml_reactants[0]), twa, molecules);\n                } else {\n                    reactants = new Map();\n                    for (let j = 0; j < xml_reactants.length; j++) {\n                        let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);\n                        let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                        let reactant = new Reactant(getAttributes(xml_reactants[j]), twa, molecules);\n                        reactants.set(reactant.getRef(), reactant);\n                    }\n                }\n            }\n\n            // Load products.\n            let products: Map<string, Product> | Product | undefined;\n            let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            if (xml_products.length > 0) {\n                if (xml_products.length < 2) {\n                    let xml_molecule: Element = getFirstElement(xml_products[0], Molecule.tagName);\n                    let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                    products = new Product(getAttributes(xml_products[0]), twa, molecules);\n                } else {\n                    products = new Map();\n                    for (let j = 0; j < xml_products.length; j++) {\n                        let xml_molecule: Element = getFirstElement(xml_products[j], Molecule.tagName);\n                        let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                        let product = new Product(getAttributes(xml_products[j]), twa, molecules);\n                        products.set(product.getRef(), product);\n                    }\n                }\n            }\n\n            // Load transition states.\n            //console.log(\"Load  transition states...\");\n            let xml_transitionState: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(TransitionState.tagName);\n            let transitionStates: Map<string, TransitionState> | TransitionState | undefined;\n            if (xml_transitionState.length > 0) {\n                if (xml_transitionState.length < 2) {\n                    let xml_molecule: Element = xml_transitionState[0].getElementsByTagName(Molecule.tagName)[0];\n                    let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                    transitionStates = new TransitionState(getAttributes(xml_transitionState[0]), twa, molecules);\n                } else {\n                    transitionStates = new Map();\n                    for (let j = 0; j < xml_transitionState.length; j++) {\n                        let xml_molecule: Element = xml_transitionState[j].getElementsByTagName(Molecule.tagName)[0];\n                        let twa = new TagWithAttributes(getAttributes(xml_molecule), Molecule.tagName);\n                        let transitionState = new TransitionState(getAttributes(xml_transitionState[j]), twa, molecules);\n                        transitionStates.set(transitionState.getRef(), transitionState);\n                    }\n                }\n            }\n            //console.log(\"transitionStates=\" + transitionStates);\n\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName(Tunneling.tagName);\n            let tunneling: Tunneling | undefined;\n            if (xml_tunneling.length > 0) {\n                if (xml_tunneling.length > 1) {\n                    throw new Error(\"Expecting 1 \" + Tunneling.tagName + \" but finding \" + xml_tunneling.length + \"!\");\n                }\n                tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            }\n\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let mCRCMethod: MCRCMethod | undefined;\n            let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                if (xml_MCRCMethod.length > 1) {\n                    throw new Error(\"Expecting 1 \" + MCRCMethod.tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n                } else {\n                    let mCRCMethodAttributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                    let name: string | undefined = mCRCMethodAttributes.get(\"name\");\n                    //console.log(MCRCMethod.tagName + \" name=\" + name);\n                    if (name == undefined || name == MesmerILT.xsiType2) {\n                        let type: string | undefined = mCRCMethodAttributes.get(\"xsi:type\");\n                        //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                        if (type != undefined) {\n                            if (type == MesmerILT.xsiType || type == MesmerILT.xsiType2) {\n                                let preExponential: PreExponential | undefined;\n                                let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                                if (xml_preExponential != null) {\n                                    if (xml_preExponential[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_preExponential[0])));\n                                        preExponential = new PreExponential(getAttributes(xml_preExponential[0]), value);\n                                    }\n                                }\n                                //console.log(\"preExponential \" + preExponential);\n                                let activationEnergy: ActivationEnergy | undefined;\n                                let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                                if (xml_activationEnergy != null) {\n                                    if (xml_activationEnergy[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_activationEnergy[0])));\n                                        activationEnergy = new ActivationEnergy(getAttributes(xml_activationEnergy[0]), value);\n                                    }\n                                }\n                                //console.log(\"activationEnergy \" + activationEnergy);\n                                let tInfinity: TInfinity | undefined;\n                                let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(TInfinity.tagName);\n                                if (xml_tInfinity != null) {\n                                    if (xml_tInfinity[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_tInfinity[0])));\n                                        tInfinity = new NInfinity(getAttributes(xml_tInfinity[0]), value);\n                                    }\n                                }\n                                //console.log(\"tInfinity \" + tInfinity);\n                                let nInfinity: NInfinity | undefined;\n                                let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(NInfinity.tagName);\n                                if (xml_nInfinity != null) {\n                                    if (xml_nInfinity[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_nInfinity[0])));\n                                        nInfinity = new NInfinity(getAttributes(xml_nInfinity[0]), value);\n                                    }\n                                }\n                                //console.log(\"nInfinity \" + nInfinity);\n                                mCRCMethod = new MesmerILT(mCRCMethodAttributes, preExponential, activationEnergy, tInfinity, nInfinity);\n                            }\n                        }\n                    } else {\n                        mCRCMethod = new MCRCMethod(mCRCMethodAttributes);\n                    }\n                }\n            }\n\n            // Load excessReactantConc\n            let xml_excessReactantConc = xml_reactions[i].getElementsByTagName(ExcessReactantConc.tagName);\n            let excessReactantConc: ExcessReactantConc | undefined;\n            if (xml_excessReactantConc.length > 0) {\n                if (xml_excessReactantConc.length > 1) {\n                    throw new Error(\"Expecting 1 \" + ExcessReactantConc.tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n                }\n                let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_excessReactantConc[0])));\n                excessReactantConc = new ExcessReactantConc(getAttributes(xml_excessReactantConc[0]), value);\n            }\n\n            // Create reaction.\n            let reaction = new Reaction(attributes, reactionID, reactants, products, tunneling, transitionStates,\n                mCRCMethod, excessReactantConc);\n            reactions.set(reactionID, reaction);\n            //console.log(\"reaction=\" + reaction);\n        }\n    }\n}\n\n/**\n * Create a diagram.\n * @param {Map<string, Molecule>} molecules The molecules.\n * @param {Map<string, Reaction>} reactions The reactions.\n * @param {boolean} dark True for dark mode.\n * @returns {HTMLCanvasElement} The diagram.\n * @param {string} font The font to use.\n * @param {number} lw The line width of reactants, transition states and products.\n * @param {string} lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, molecules: Map<string, Molecule>,\n    reactions: Map<string, Reaction>, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: Set<string> = new Set();\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionStates.\n        let reactionTransitionStates: Map<string, TransitionState> | TransitionState | undefined = reaction.transitionStates;\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        if (reactantsLabel != undefined) {\n            reactants.add(reactantsLabel);\n            if (products.has(reactantsLabel)) {\n                intProducts.add(reactantsLabel);\n            }\n            let energy: number = reaction.getReactantsEnergy();\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(reactantsLabel, energy);\n            if (!orders.has(reactantsLabel)) {\n                orders.set(reactantsLabel, i);\n                i++;\n            }\n        }\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        if (productsLabel != undefined) {\n            products.add(productsLabel);\n            let energy = reaction.getProductsEnergy();\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(productsLabel, energy);\n            if (orders.has(productsLabel)) {\n                i--;\n                let j: number = get(orders, productsLabel);\n                // Move product to end and shift everything back.\n                orders.forEach(function (value, key) {\n                    if (value > j) {\n                        orders.set(key, value - 1);\n                    }\n                });\n                // Insert transition states.\n                if (reactionTransitionStates != undefined) {\n                    if (reactionTransitionStates instanceof Map) {\n                        reactionTransitionStates.forEach(function (ts, id) {\n                            let tsn: string = ts.getRef();\n                            transitionStates.add(tsn);\n                            orders.set(tsn, i);\n                            energy = ts.getMolecule().getEnergy();\n                            energyMin = Math.min(energyMin, energy);\n                            energyMax = Math.max(energyMax, energy);\n                            energies.set(tsn, energy);\n                            i++;\n                        });\n                    } else {\n                        let ts: TransitionState = reactionTransitionStates as TransitionState;\n                        let tsn: string = ts.getRef();\n                        transitionStates.add(tsn);\n                        orders.set(tsn, i);\n                        energy = ts.getMolecule().getEnergy();\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(tsn, energy);\n                        i++;\n                    }\n                    orders.set(productsLabel, i);\n                    i++\n                }\n            } else {\n                if (reactionTransitionStates != undefined) {\n                    if (reactionTransitionStates instanceof Map) {\n                        reactionTransitionStates.forEach(function (ts, id) {\n                            let tsn: string = ts.getRef();\n                            transitionStates.add(tsn);\n                            orders.set(tsn, i);\n                            energy = ts.getMolecule().getEnergy();\n                            energyMin = Math.min(energyMin, energy);\n                            energyMax = Math.max(energyMax, energy);\n                            energies.set(tsn, energy);\n                            i++;\n                        });\n                    } else {\n                        let ts: TransitionState = reactionTransitionStates as TransitionState;\n                        let tsn: string = ts.getRef();\n                        transitionStates.add(tsn);\n                        orders.set(tsn, i);\n                        energy = ts.getMolecule().getEnergy();\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(tsn, energy);\n                        i++;\n                    }\n                }\n                orders.set(productsLabel, i);\n                i++;\n            }\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines.)\n        // The code is left here commented out for reference.\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n\n    let originalCanvasHeight = canvas.height;\n\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n\n\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let reactionTransitionStates: Map<string, TransitionState> | TransitionState | undefined = reaction.transitionStates;\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (reactionTransitionStates != undefined) {\n            if (reactionTransitionStates instanceof Map) {\n                reactionTransitionStates.forEach(function (ts, id) {\n                    let transitionState: TransitionState = ts;\n                    let transitionStateLabel: string = transitionState.getRef();\n                    let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n                    drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                        transitionStateInXY[1]);\n                    let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n                    drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                        productInXY[0], productInXY[1]);\n                });\n            } else {\n                let transitionState: TransitionState = reactionTransitionStates as TransitionState;\n                let transitionStateLabel: string = transitionState.getRef();\n                let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                    transitionStateInXY[1]);\n                let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                    productInXY[0], productInXY[1]);\n            }\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let v: any;\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n/**\n * Display molecules table.\n */\nfunction displayMoleculesTable(): void {\n    if (molecules.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let th: string = \"\";\n    let attributeKeys: Set<string> = new Set();\n    molecules.forEach(function (molecule, id) {\n        molecule.attributes.forEach(function (value, key) {\n            attributeKeys.add(key);\n        });\n    });\n\n    console.log(\"attributeKeys=\" + attributeKeys);\n\n\n    let moleculesTable = getTH([\n        \"Name\",\n        \"Energy<br>kJ/mol\",\n        \"Rotation constants<br>cm<sup>-1</sup>\",\n        \"Vibration frequencies<br>cm<sup>-1</sup>\"]);\n    molecules.forEach(function (molecule, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"molecule=\" + molecule);\n        let energyNumber: number = molecule.getEnergy();\n        let energy: string;\n        if (energyNumber == null) {\n            energy = \"\";\n        } else {\n            energy = energyNumber.toString();\n        }\n        //console.log(\"energy=\" + energy);\n        let rotationConstants: string = \"\";\n        let rotConsts: number[] | undefined = molecule.getRotConsts();\n        if (rotConsts != undefined) {\n            rotationConstants = arrayToString(rotConsts, \" \");\n        }\n        let vibrationFrequencies: string = \"\";\n        let vibFreqs: number[] | undefined = molecule.getVibFreqs();\n        if (vibFreqs != undefined) {\n            vibrationFrequencies = arrayToString(vibFreqs, \" \");\n        }\n        moleculesTable += getTR(getTD(id)\n            + getTD(getInput(\"number\", id + \"_energy\", \"setEnergy(this)\", energy))\n            + getTD(rotationConstants, true)\n            + getTD(vibrationFrequencies, true));\n    });\n    molecules_table = document.getElementById(\"molecules_table\");\n    if (molecules_table !== null) {\n        molecules_table.innerHTML = moleculesTable;\n    }\n}\n\n/**\n * Display reactions table.\n */\nfunction displayReactionsTable(): void {\n    if (reactions.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let reactionsTable = getTH([\"ID\", \"Reactants\", \"Products\", \"Transition State\",\n        \"PreExponential\", \"Activation Energy\", \"TInfinity\", \"NInfinity\"]);\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        let reactants: string = reaction.getReactantsLabel() || \"\";\n        let products: string = reaction.getProductsLabel() || \"\";\n        let transitionState: string = \"\";\n        let preExponential: string = \"\";\n        let activationEnergy: string = \"\";\n        let tInfinity: string = \"\";\n        let nInfinity: string = \"\";\n        let tSs: Map<string, TransitionState> | TransitionState | undefined = reaction.transitionStates;\n        //console.log(\"tSs=\" + tSs);\n        if (tSs != undefined) {\n            if (tSs instanceof Map) {\n                // Join all names together.\n                tSs.forEach(function (ts) {\n                    let name: string | undefined = ts.getRef();\n                    if (name != null) {\n                        transitionState = name + \" \";\n                    }\n                });\n            } else {\n                let ts: TransitionState = tSs as TransitionState;\n                let name: string | undefined = ts.getRef();\n                if (name != null) {\n                    transitionState = name;\n                }\n            }\n        }\n        let mCRCMethod: MCRCMethod | undefined = reaction.getMCRCMethod();\n        //console.log(\"mCRCMethod=\" + mCRCMethod);\n        //console.log(\"typeof mCRCMethod=\" + typeof mCRCMethod);\n        if (mCRCMethod != undefined) {\n            if (mCRCMethod instanceof MesmerILT) {\n                let mp: PreExponential | undefined = mCRCMethod.getPreExponential();\n                if (mp != undefined) {\n                    preExponential = mp.value.toString() + \" \"\n                        + mp.attributes.get(\"units\");\n                }\n                let ae: ActivationEnergy | undefined = mCRCMethod.getActivationEnergy();\n                if (ae != undefined) {\n                    activationEnergy = ae.value.toString() + \" \"\n                        + ae.attributes.get(\"units\");\n                }\n                let ti: TInfinity | undefined = mCRCMethod.getTInfinity();\n                if (ti != undefined) {\n                    tInfinity = ti.value.toString();\n                }\n                let ni: NInfinity | undefined = mCRCMethod.getNInfinity();\n                if (ni != undefined) {\n                    nInfinity = ni.value.toString();\n                }\n            } else {\n                if (mCRCMethod.attributes.get(\"name\") == \"RRKM\") {\n                } else {\n                    console.log(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                    throw new Error(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                }\n            }\n        }\n\n        reactionsTable += getTR(getTD(id) + getTD(reactants) + getTD(products) + getTD(transitionState)\n            + getTD(preExponential, true) + getTD(activationEnergy, true) + getTD(tInfinity, true)\n            + getTD(nInfinity, true));\n        reactions_table = document.getElementById(\"reactions_table\");\n        if (reactions_table !== null) {\n            reactions_table.innerHTML = reactionsTable;\n        }\n    });\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 1) {\n        // Set reactions_diagram_title.\n        reactions_diagram_title = document.getElementById(\"reactions_diagram_title\");\n        if (reactions_diagram_title != null) {\n            reactions_diagram_title.innerHTML = \"Diagram\";\n        }\n        // Display the diagram.\n        let canvas: HTMLCanvasElement | null = document.getElementById(\"reactions_diagram\") as HTMLCanvasElement;\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, molecules, reactions, dark, font, lw, lwc);\n        }\n    }\n}\n\n/**\n * Display conditions.\n */\nfunction displayConditions(): void {\n    let bathGas_element: HTMLElement | null = document.getElementById(\"bathGas\");\n    if (bathGas_element != null) {\n        bathGas_element.innerHTML = \"Bath Gas \" + conditions.getBathGas().value;\n    }\n    let pTs_element: HTMLElement | null = document.getElementById(\"PT_table\");\n    let th: string[] = [\"P\", \"T\"];\n    // If PTs contain BathGas\n    let hasBathGas: boolean = conditions.getPTs().pTpairs.some(pair => {\n        return pair.getBathGas() != undefined;\n    });\n    if (hasBathGas) {\n        th.push(\"BathGas\");\n    }    \n    // Check if PTs contain ExperimentRate\n    let hasExperimentRate: boolean = conditions.getPTs().pTpairs.some(pair => {\n        return pair.getExperimentRate() != undefined;\n    });\n    if (hasExperimentRate) {\n        th.push(\"ExperimentRate\");\n    }\n    let table: string = getTH(th);\n    if (pTs_element != null) {\n        conditions.getPTs().pTpairs.forEach(function (pTpair) {\n            table += getTR(getTD(pTpair.getP().toString()) + getTD(pTpair.getT().toString()));\n            if (hasBathGas) {\n                table += getTD(pTpair.getBathGas()?.toString() ?? '');\n            }\n            if (hasExperimentRate) {\n                table += getTD(pTpair.getExperimentRate()?.toString() ?? '');\n            }\n        });\n        pTs_element.innerHTML = table;\n    }\n}\n\n/**\n * Display modelParameters.\n */\nfunction displayModelParameters(): void {\n    let modelParameters_element: HTMLElement | null = document.getElementById(\"modelParameters_table\");\n    let table: string = getTH([\"Parameter\", \"Value\"]);\n    table += getTR(getTD(\"Grain Size\") + getTD(modelParameters.getGrainSize().value.toString()));\n    table += getTR(getTD(\"Energy Above The Top Hill\") + getTD(modelParameters.getEnergyAboveTheTopHill().value.toString()));\n\n    if (modelParameters_element != null) {\n        modelParameters_element.innerHTML = table;\n    }\n}\n\n/**\n * Display control.\n */\nfunction displayControl(): void {\n    let control_table_element: HTMLElement | null = document.getElementById(\"control_table\");\n    let table: string = getTH([\"Control\", \"Value\"]);\n    // TestDOS\n    let testDOS: TestDOS | undefined = control.getTestDOS();\n    if (testDOS != undefined) {\n        table += getTR(getTD(TestDOS.tagName) + getTD(\"\"));\n    }\n    // PrintSpeciesProfile\n    let printSpeciesProfile: PrintSpeciesProfile | undefined = control.getPrintSpeciesProfile();\n    if (printSpeciesProfile != undefined) {\n        table += getTR(getTD(PrintSpeciesProfile.tagName) + getTD(\"\"));\n    }\n    // TestMicroRates\n    let testMicroRates: TestMicroRates | undefined = control.getTestMicroRates();\n    if (testMicroRates != undefined) {\n        table += getTR(getTD(TestMicroRates.tagName) + getTD(\"\"));\n    }\n    // TestRateConstant\n    let testRateConstant: TestRateConstant | undefined = control.getTestRateConstant();\n    if (testRateConstant != undefined) {\n        table += getTR(getTD(TestRateConstant.tagName) + getTD(\"\"));\n    }\n    // PrintGrainDOS\n    let printGrainDOS: PrintGrainDOS | undefined = control.getPrintGrainDOS();\n    if (printGrainDOS != undefined) {\n        table += getTR(getTD(PrintGrainDOS.tagName) + getTD(\"\"));\n    }\n    // PrintCellDOS\n    let printCellDOS: PrintCellDOS | undefined = control.getPrintCellDOS();\n    if (printCellDOS != undefined) {\n        table += getTR(getTD(PrintCellDOS.tagName) + getTD(\"\"));\n    }\n    // PrintReactionOperatorColumnSums\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined = control.getPrintReactionOperatorColumnSums();\n    if (printReactionOperatorColumnSums != undefined) {\n        table += getTR(getTD(PrintReactionOperatorColumnSums.tagName) + getTD(\"\"));\n    }\n    // PrintTunnellingCoefficients\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined = control.getPrintTunnellingCoefficients();\n    if (printTunnellingCoefficients != undefined) {\n        table += getTR(getTD(PrintTunnellingCoefficients.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkfE\n    let printGrainkfE: PrintGrainkfE | undefined = control.getPrintGrainkfE();\n    if (printGrainkfE != undefined) {\n        table += getTR(getTD(PrintGrainkfE.tagName) + getTD(\"\"));\n    }\n    // PrintGrainBoltzmann\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined = control.getPrintGrainBoltzmann();\n    if (printGrainBoltzmann != undefined) {\n        table += getTR(getTD(PrintGrainBoltzmann.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkbE\n    let printGrainkbE: PrintGrainkbE | undefined = control.getPrintGrainkbE();\n    if (printGrainkbE != undefined) {\n        table += getTR(getTD(PrintGrainkbE.tagName) + getTD(\"\"));\n    }\n    // Eigenvalues\n    let eigenvalues: Eigenvalues | undefined = control.getEigenvalues();\n    if (eigenvalues != undefined) {\n        table += getTR(getTD(Eigenvalues.tagName) + getTD(eigenvalues.value.toString()));\n    }\n    // HideInactive\n    let hideInactive: HideInactive | undefined = control.getHideInactive();\n    if (hideInactive != undefined) {\n        table += getTR(getTD(HideInactive.tagName) + getTD(\"\"));\n    }\n    // DiagramEnergyOffset\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined = control.getDiagramEnergyOffset();\n    if (diagramEnergyOffset != undefined) {\n        table += getTR(getTD(DiagramEnergyOffset.tagName) + getTD(diagramEnergyOffset.value.toString()));\n    }\n    // Set the table.\n    if (control_table_element != null) {\n        control_table_element.innerHTML = table;\n    }\n}\n\n/**\n * Set the energy of a molecule when the energy input value is changed.\n * @param input The input element. \n */\nexport function setEnergy(input: HTMLInputElement): void {\n    let id_energy: string = input.id;\n    let moleculeID: string = id_energy.split(\"_\")[0];\n    let molecule: Molecule | undefined = molecules.get(moleculeID);\n    if (molecule != undefined) {\n        let inputValue: number = parseFloat(input.value);\n        if (!isNaN(inputValue)) {\n            molecule.setEnergy(inputValue);\n            console.log(\"Energy of \" + moleculeID + \" set to \" + inputValue);\n        } else {\n            alert(\"Energy input for \" + moleculeID + \" is not a number\");\n            let inputElement = document.getElementById(id_energy) as HTMLInputElement;\n            inputElement.value = molecule.getEnergy().toString();\n        }\n        //console.log(\"molecule=\" + molecule);\n    }\n}\n\n(window as any).setEnergy = setEnergy;\n\n/**\n * Save to XML file.\n */\nwindow.saveXML = function () {\n    console.log(\"saveXML\");\n\n    const pad: string = \"  \";\n    let level: number;\n    const padding2: string = pad.repeat(2);\n\n    // Create me.title.\n    let title_xml = \"\\n\" + pad + getTag(title, \"me:title\");\n\n    // Create moleculeList.\n    level = 2;\n    let moleculeList: string = \"\";\n    molecules.forEach(function (molecule, id) {\n        moleculeList += molecule.toXML(pad, padding2);\n        //moleculeList += molecule.toXML(\"molecule\", pad, level);\n    });\n    moleculeList = getTag(moleculeList, \"moleculeList\", undefined, pad, true);\n\n    // Create reactionList.\n    level = 2;\n    let reactionList: string = \"\";\n    reactions.forEach(function (reaction, id) {\n        reactionList += reaction.toXML(pad, padding2);\n        //reactionList += reaction.toXML(\"reaction\", pad, level);\n    });\n    reactionList = getTag(reactionList, \"reactionList\", undefined, pad, true);\n\n    // Create me.Conditions\n    let xml_conditions: string = conditions.toXML(pad, pad);\n\n    // Create modelParameters\n    let xml_modelParameters: string = modelParameters.toXML(pad, pad);\n\n    // create me.control\n    let xml_control: string = control.toXML(pad, pad);\n\n    // Create a new Blob object from the data\n    let blob = new Blob([header, mesmerStartTag, title_xml, moleculeList, reactionList,\n        xml_conditions, xml_modelParameters, xml_control, mesmerEndTag],\n        { type: \"text/plain\" });\n\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    a.download = input_xml_filename; // Replace with your desired filename\n\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n\n}","/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>): string {\n    if (map == null) {\n        return \"\";\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(', ');\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter: string): string {\n    if (array == null) {\n        return \"\";\n    }\n    if (delimiter == null) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        r.push(parseFloat(s[i]));\n    }\n    return r;\n}\n\n/**\n * Is the string numeric in that it can be parsed as a float that is not a NaN?\n * @param {string} s The string.\n * @returns True if the string can be parsed as a float that is not a NaN and false otherwise.\n */\nexport function isNumeric(s: string): boolean {\n    return !isNaN(parseFloat(s));\n}","import {\n    getSelfClosingTag\n}\n    from \"./html\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param {Element} element The xml element to search in.\n * @returns {ChildNode} The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a ChildNode.\n * @param {ChildNode} node The node to get the nodeValue of.\n * @returns {string} The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: ChildNode): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param {string} tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param {string | undefined} padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(null, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }\n}\n\n/**\n * A class for representing A Tag with attributes.\n * @param {Map<string, string>} attributes The attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     */\n    attributes: Map<string, string>;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        this.attributes.forEach((value, key) => {\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n        if (this.attributes) {\n            for (let [k, v] of this.attributes) {\n                s += ' ' + k + '=\"' + v.toString() + '\"';\n            }\n        }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} value The value.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, value: number) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} tagName The tag name.\n     * @param {number[]} values The values.\n     * @param {string} delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, tagName: string, values: number[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param {string} delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} tagName The tag name.\n     */\n    constructor(attributes: Map<string, string>, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): void {\n        this.nodes.set(this.nodes.size, node);\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    override toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param {string} pad The pad (Optional).\n     * @param {string} padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        if (this.nodes.size > 0) {\n            this.nodes.forEach((v) => {\n                if (v instanceof NodeWithNodes) {\n                    s += (v as NodeWithNodes).toXML(pad, padding1);\n                } else if (v instanceof TagWithAttributes) {\n                    s += (v as TagWithAttributes).toXML(padding1);\n                } else {\n                    s += (v as Tag).toXML(padding1);\n                }\n            });\n            return getTag(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s: string = getSelfClosingTag(this.attributes, this.tagName);\n            if (padding != undefined) {\n                return \"\\n\" + padding + s;\n            }\n            return s;\n        }\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param {Map<string, any>} attributes The attributes (optional).\n * @param {string} padding The padding (optional).\n * @param {boolean} padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>, padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param {Element} element The element to get the attributes of.\n * @returns {Map<string, string>} The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param {XMLDocument | Element} xml The XML document or element.\n * @param {string} tagName The tag name.\n * @returns {Element} The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {\n    ;\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}\n\n/**\n * Convert XML to HTML.\n * @param {string} text The XML text.\n */\nexport function toHTML(text: string): string {\n    return text.replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(/  /g, \"&nbsp;&nbsp;\");\n}","/**\n * Create a table header row.\n * @param {string[]} headings The headings.\n * @returns {string} Table row with headings.\n */\nexport function getTH(headings: string[]): string {\n    var th = \"\";\n    for (let i = 0; i < headings.length; i++) {\n        th += \"<th>\" + headings[i] + \"</th>\";\n    }\n    return getTR(th);\n}\n\n/**\n * Create a table cell.\n * @param {string} x A cell for a table row.\n * @param {boolean} contentEditable If true then the cell is set to be editable.  \n * @returns {string} x wrapped in td tags.\n */\nexport function getTD(x: string, contentEditable: boolean = false): string {\n    let r: string = \"<td\";\n    if (contentEditable) {\n        r += \" contenteditable=\\\"true\\\"\";\n    }\n    r += \">\" + x + \"</td>\";\n    return r;\n}\n\n/**\n * Create a table row.\n * @param {string} x A row for a table.\n * @returns {string} x wrapped in tr tags.\n */\nexport function getTR(x: string): string {\n    return \"<tr>\" + x + \"</tr>\\n\";\n}\n\n/**\n * Create a table.\n * @param {string} x Table rows for a table.\n * @returns {string} x wrapped in table tags.\n */\nexport function getTable(x: string): string {\n    return \"<table>\" + x + \"</table>\";\n}\n\n/**\n * Create a div.\n * @param {string} x The content of the div.\n * @param {string | null} id The id of the div.\n * @param {string | null} html_class The class of the div.\n * @returns {string} x wrapped in div tags.\n */\nexport function getDiv(x: string, id: string | null, html_class: string | null): string {\n    let r: string = \"<div\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (html_class !== null) {\n        r += \" class=\\\"\" + html_class + \"\\\"\";\n    }\n    return r + \">\" + x + \"</div>\";\n}\n\n/**\n * Create a input.\n * @param {string} type The input type (e.g. text, number).\n * @param {string | null} id The id of the button.\n * @param {string | null} func The function called on a change.\n * @param {string | null} value The value of the input.\n * @returns {string} An input HTML element.\n */\nexport function getInput(type: string, id: string | null, func: string | null,\n    value : string | null): string {\n    let r: string = \"<input type=\\\"\" + type + \"\\\"\";\n    if (id !== null) {\n        r += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (func !== null) {\n        r += \" onchange=\\\"\" + func + \"\\\"\";\n    }\n    if (value !== null) {\n        r += \" value=\\\"\" + value + \"\\\"\";\n    }\n    return r + \">\";\n}\n\n/**\n * Create a self closing tag.\n * @param {Map<string, string> | null} attributes The attributes.\n * @param {string} tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | null, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}","import {\n    getEndTag, getStartTag, getTag, TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode, StringNode\n} from './xml.js';\n\n/**\n * A class for representing an atom.\n * @param {Map<string, string>} attributes The attributes.\n * If there is no \"id\" or \"elementType\" key an error will be thrown.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * @param attributes The attributes. If there is no \"id\" or \"elementType\" key an error will be thrown.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Atom.tagName);\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            console.warn(Atom.tagName + ' id attribute is undefined');\n        }\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            console.warn(Atom.tagName + ' elementType attribute is undefined');\n        }\n    }\n\n    /**\n     * @returns The id of the atom.\n     */\n    get id(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * @returns The element type of the atom.\n     */\n    get elementType(): string {\n        return this.attributes.get(\"elementType\") as string;\n    }\n}\n\n/**\n * A class for representing an atomArray.\n */\nexport class AtomArray extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"atomArray\";\n\n    /**\n     * \n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Atom[]} atoms The atoms.\n     */\n    constructor(attributes: Map<string, string>, atoms: Atom[]) {\n        super(attributes, AtomArray.tagName);\n        atoms.forEach(atom => {\n            this.nodes.set(this.nodes.size, atom);\n        });\n    }\n}\n\n/**\n * A class for representing an atomic bond - a bond beteen two atoms.\n * @param {Map<string, string>} attributes The attributes.\n * @param {Atom} atomA One atom.\n * @param {Atom} atomB Another atom.\n * @param {string} order The order of the bond.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Bond.tagName);\n    }\n}\n\n/**\n * A class for representing a bondArray.\n */\nexport class BondArray extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bondArray\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Map<string, Bond>} bonds A Map of bonds with keys as ids.\n     */\n    constructor(attributes: Map<string, string>, bonds: Bond[]) {\n        super(attributes, BondArray.tagName);\n        bonds.forEach(bond => {\n            this.nodes.set(this.nodes.size, bond);\n        });\n    }\n}\n\n/**\n * A class for representing a property scalar.\n */\nexport class PropertyScalar extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PropertyScalar.tagName, value);\n    }\n}\n\n/**\n * A class for representing an property array.\n */\nexport class PropertyArray extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"array\";\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param {string} delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n}\n\n/**\n * A class for representing a property.\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PropertyScalar | PropertyArray} property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar | PropertyArray) {\n        super(attributes, Property.tagName);\n        this.nodes.set(0, property);\n    }\n\n    /**\n     * @returns The property.\n     */\n    getProperty(): PropertyScalar | PropertyArray {\n        return this.nodes.get(0) as PropertyScalar | PropertyArray;\n    }\n}\n\n/**\n * A class for representing a propertyArray.\n */\nexport class PropertyList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"propertyList\";\n\n    /**\n     * The properties.\n     */\n    properties: Map<string, Property>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {Map<string, Property>} properties A Map of properties with keys as dictRefs.\n     */\n    constructor(attributes: Map<string, string>, properties: Map<string, Property>) {\n        super(attributes, PropertyList.tagName);\n        this.properties = properties;\n        properties.forEach(property => {\n            this.nodes.set(this.nodes.size, property);\n        });\n    }\n}\n\n/**\n * Represents the deltaEDown class.\n */\nexport class DeltaEDown extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n}\n\n/**\n * A class for representing an energy transfer model.\n */\nexport class EnergyTransferModel extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {DeltaEDown[]} deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        deltaEDowns.forEach(deltaEDown => {\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n}\n\n/**\n * A class for representing a method for calculating the density of states.\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n    }\n}\n\n/**\n * A class for representing a bondRef.\n */\nexport class BondRef extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bondRef\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.tagName, bondRef);\n    }\n}\n\n/**\n * A class for representing a PotentialPoint.\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    static readonly tagName: string = \"me:PotentialPoint\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.tagName);\n    }\n}\n\n/**\n * A class for representing a HinderedRotorPotential.\n */\nexport class HinderedRotorPotential extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:HinderedRotorPotential\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PotentialPoint[]} potentialPoints The PotentialPoints.\n     */\n    constructor(attributes: Map<string, string>, potentialPoints: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.tagName);\n        potentialPoints.forEach(p => {\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n\n}\n\n/**\n * A class for representing a Periodicity.\n */\nexport class Periodicity extends NumberNode {\n\n    static readonly tagName: string = \"me:periodicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Periodicity.tagName, value);\n    }\n}\n\n/**\n * A class for representing the extra DOSC method.\n */\nexport class ExtraDOSCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * @param attributes The attributes.\n     * @param {BondRef | undefined} bondRef The bondRef.\n     * @param {HinderedRotorPotential | undefined} hinderedRotorPotential The HinderedRotorPotential.\n     * @param {Periodicity | undefined} periodicity The Periodicity.\n     */\n    constructor(attributes: Map<string, string>, bondRef: BondRef | undefined, \n        hinderedRotorPotential: HinderedRotorPotential | undefined, \n        periodicity: Periodicity | undefined) {\n        super(attributes, ExtraDOSCMethod.tagName);\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n        }\n    }\n}\n\n/**\n * A class for representing a reservoir size.\n */\nexport class ReservoirSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:reservoirSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ReservoirSize.tagName, value);\n    }\n}\n\n\n/**\n * A class for representing a molecule.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The energy dictRef.\n     */\n    static readonly energyDictRef: string = \"me:ZPE\";\n\n    /**\n     * The rotation constants dictRef.\n     */\n    static readonly rotConstsDictRef: string = 'me:rotConsts';\n\n    /**\n     * The vibration frequencies dictRef.\n     */\n    static readonly vibFreqsDictRef: string = 'me:vibFreqs';\n\n    /**\n     * The index.\n     */\n    index: Map<string, number> = new Map();\n\n    // The molecule ID.\n    id: string;\n\n    /**\n     * Create a molecule.\n     * @param {Map<string, string>} attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param {Atom | AtomArray | undefined} atoms The atoms.\n     * @param {Bond | undefined} bonds The bonds.\n     * @param {PropertyList | Property | undefined} properties The properties.\n     * @param {EnergyTransferModel | undefined} energyTransferModel The energy transfer model.\n     * @param {DOSCMethod | undefined} dOSCMethod The method for calculating density of states.\n     * @param {ExtraDOSCMethod | undefined} extraDOSCMethod The extra method for calculating density of states.\n     * @param {ReservoirSize | undefined} reservoirSize The reservoir size.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms: Atom | AtomArray | undefined,\n        bonds: Bond | undefined,\n        properties: PropertyList | Property | undefined,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod,\n        extraDOSCMethod?: ExtraDOSCMethod,\n        reservoirSize?: ReservoirSize) {\n        super(attributes, Molecule.tagName);\n        let id: string | undefined = this.attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        this.id = id;\n        let i: number = 0;\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            if (atoms instanceof Atom) {\n                this.index.set(Atom.tagName, i);\n            } else {\n                this.index.set(AtomArray.tagName, i);\n            }\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set(BondArray.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties == undefined) {\n            throw new Error('properties is undefined');\n        }\n        this.nodes.set(i, properties);\n        this.index.set(PropertyList.tagName, i);\n        i++;\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set(EnergyTransferModel.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set(DOSCMethod.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set(ExtraDOSCMethod.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set(ReservoirSize.tagName, i);\n        }\n\n    }\n\n    /**\n     * @return The id of the molecule.\n     */\n    getID(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * Gets the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        return this.attributes.get(\"description\");\n    }\n\n    /**\n     * Gets the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        let active = this.attributes.get(\"active\");\n        if (active != undefined) {\n            return true;\n        }\n        return active;\n    }\n\n    /**\n     * @returns The properties of the molecule.\n     */\n    getProperties(): PropertyList | Property | undefined {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            i = this.index.get(Property.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as Property;\n            }\n        } else {\n            return this.nodes.get(i) as PropertyList;\n        }\n    }\n\n    /**\n     * Get a property scalar.\n     * @param {string} dictRef The dictRef of the property.\n     * @returns {number | undefined} The scalar property.\n     */\n    getPropertyScalar(dictRef: string): number | undefined {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties == undefined) {\n            return undefined;\n        } else if (properties instanceof PropertyList) {\n            let property: Property | undefined = properties.properties.get(dictRef);\n            if (property == undefined) {\n                return undefined;\n            }\n            return (property.getProperty() as PropertyScalar).value;\n        } else {\n            let scalar: PropertyScalar | undefined = (properties as Property).getProperty() as PropertyScalar;\n            if (scalar == undefined) {\n                return undefined;\n            }\n            return scalar.value;\n        }\n    }\n\n    /**\n     * @returns {number} The energy of the molecule or zero if the energy is not set or defined.\n     */\n    getEnergy(): number {\n        let energy: number | undefined = this.getPropertyScalar(Molecule.energyDictRef);\n        if (energy == undefined) {\n            return 0;\n        }\n        return energy;\n    }\n\n    /**\n     * Set the scalar property.\n     * @param {string} dictRef The dictRef of the property.\n     * @param {number} value The value of the property.\n     * @param {string} units The units of the property.\n     */\n    setPropertyScalar(dictRef: string, value: number, units?: string) {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties == undefined) {\n            this.nodes.set(this.nodes.size, this.createPropertyScalar(dictRef, value, units));\n            this.index.set(Property.tagName, this.nodes.size);\n        } else if (properties instanceof Property) {\n            if (properties.getProperty().attributes.get(dictRef)) {\n                (properties.getProperty() as PropertyScalar).value = value;\n            } else {\n                let plmap: Map<string, Property> = new Map();\n                plmap.set(dictRef, properties);\n                plmap.set(dictRef, this.createPropertyScalar(dictRef, value, units));\n                properties = new PropertyList(new Map(), plmap);\n            }\n        } else {\n            let scalarProperty: Property | undefined = properties.properties.get(dictRef)\n            if (scalarProperty == undefined) {\n                properties.properties.set(dictRef, this.createPropertyScalar(dictRef, value, units));\n            } else {\n                (scalarProperty.getProperty() as PropertyScalar).value = value;\n            }\n        }\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     * @param value The value of the property.\n     * @param units The units of the property.\n     * @returns A scalar property.\n     */\n    createPropertyScalar(dictRef: string, value: number, units?: string): Property {\n        let propertyAttributes: Map<string, string> = new Map();\n        propertyAttributes.set(\"dictRef\", Molecule.energyDictRef);\n        let scalarAttributes: Map<string, string> = new Map();\n        if (units) {\n            scalarAttributes.set(\"units\", units);\n        }\n        return new Property(propertyAttributes, new PropertyScalar(scalarAttributes, value));\n    }\n\n    /**\n     * Set the Energy of the molecule.\n     * @param {number} energy The energy of the molecule in kcal/mol.\n     */\n    setEnergy(energy: number) {\n        this.setPropertyScalar(Molecule.energyDictRef, energy);\n    }\n\n    /**\n     * Get a property array.\n     * @param {string} dictRef The dictRef of the property.\n     * @returns {number[] | undefined} The array property.\n     */\n    getPropertyArray(dictRef: string): number[] | undefined {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties == undefined) {\n            return undefined;\n        } else if (properties instanceof PropertyList) {\n            let property: Property | undefined = properties.properties.get(dictRef);\n            if (property == undefined) {\n                return undefined;\n            }\n            return (property.getProperty() as PropertyArray).values;\n        } else {\n            if ((properties as Property).getProperty().tagName == dictRef) {\n                let rotConsts: PropertyArray | undefined = (properties as Property).getProperty() as PropertyArray;\n                if (rotConsts == undefined) {\n                    return undefined;\n                }\n                return rotConsts.values;\n            } else {\n                return undefined;\n            }\n        }\n    }\n\n    /**\n     * Get the RotationConstants of the molecule.\n     * @returns The RotationConstants of the molecule.\n     */\n    getRotConsts(): number[] | undefined {\n        return this.getPropertyArray(Molecule.rotConstsDictRef);\n    }\n\n    /**\n     * Get the vibration frequencies of the molecule.\n     * @returns The vibration frequencies of the molecule.\n     */\n    getVibFreqs(): number[] | undefined {\n        return this.getPropertyArray(Molecule.vibFreqsDictRef);\n    }\n}\n\n/**\n * A class for representing a MoleculeRef.\n */\nexport class MoleculeRef extends NodeWithNodes {\n\n    /**\n     * A reference to the molecules.\n     */\n    molecules: Map<string, Molecule>\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} tagName The tag name.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, tagName: string, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, tagName);\n        this.nodes.set(0, molecule);\n        this.molecules = molecules;\n    }\n\n    /**\n     * A convenience method to get the molecule abbreviation.\n     * @returns The molecule abbreviation.\n     */\n    getMoleculeAbb(): TagWithAttributes {\n        return this.nodes.get(0) as TagWithAttributes;\n    }\n\n    /**\n     * A convenience method to get the ref (the molecule ID) of the molecule.\n     * @returns The ref of the molecule.\n     */\n    getRef(): string {\n        let s: string | undefined = this.getMoleculeAbb().attributes.get(\"ref\");\n        if (s == null) {\n            console.log(this.getMoleculeAbb().toString());\n            throw new Error('Attribute \"ref\" is undefined.');\n        }\n        return s;\n    }\n\n    /**\n     * A convenience method to get the molecule.\n     * @returns {Molecule} The molecule.\n     * @throws An error if the molecule is not found.\n     */\n    getMolecule(): Molecule {\n        let ref: string = this.getRef();\n        let molecule: Molecule | undefined = this.molecules.get(ref);\n        if (molecule == null) {\n            throw new Error(`Molecule with ref ${ref} not found in molecules`);\n        }\n        return molecule;\n    }\n}","import {\n    Molecule, MoleculeRef\n} from './molecule.js';\n\nimport {\n    TagWithAttributes, NodeWithNodes, NumberNode, getTag\n} from './xml.js';\n\n/**\n * A class for representing a reactant - a molecule that reacts in a reaction.\n */\nexport class Reactant extends MoleculeRef {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, Reactant.tagName, molecule, molecules);\n    }\n}\n\n/**\n * A class for representing a product - a molecule produced in a reaction.\n */\nexport class Product extends MoleculeRef {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, Product.tagName, molecule, molecules);\n    }\n\n}\n\n/**\n * A class for representing a transition state - a molecule that is a transition state in a reaction.\n */\nexport class TransitionState extends MoleculeRef {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {TagWithAttributes} molecule The molecule (an abbreviated molecule).\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecule: TagWithAttributes,\n        molecules: Map<string, Molecule>) {\n        super(attributes, TransitionState.tagName, molecule, molecules);\n    }\n}\n\n/**\n * A class for representing the Arrhenius pre-exponential factor.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * A class for representing the Arrhenius activation energy factor.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * A class for representing the Arrhenius pre-exponential factor.\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * A class for representing the reference temperature.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * A class for representing the modified Arrhenius parameter factor.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * A class for representing tunneling.\n */\nexport class Tunneling extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n}\n\n/**\n * A class for representing the MCRCMethod specifications.\n * Extended classes indicate how microcanonical rate constant is to be treated.\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * A class for representing the inverse Laplace transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The xsiType.\n     */\n    static readonly xsiType: string = \"me:MesmerILT\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsiType2: string = \"MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PreExponential | undefined} preExponential The pre-exponential factor.\n     * @param {ActivationEnergy | undefined} activationEnergy The activation energy.\n     * @param {TInfinity | undefined} tInfinity The TInfinity.\n     * @param {NInfinity | undefined} nInfinity The nInfinity.\n     */\n    constructor(attributes: Map<string, string>, preExponential: PreExponential | undefined,\n        activationEnergy: ActivationEnergy | undefined, tInfinity: TInfinity | undefined,\n        nInfinity: NInfinity | undefined) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(PreExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(ActivationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(TInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(NInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n}\n\n/**\n * A class for representing the Zhu-Nakamura crossing MCRCMethod.\n */\nexport class ZhuNakamuraCrossing extends MCRCMethod {\n    harmonicReactantDiabat_FC: number;\n    harmonicReactantDiabat_XO: number;\n    harmonicProductDiabat_DE: number;\n    exponentialProductDiabat_A: number;\n    exponentialProductDiabat_B: number;\n    exponentialProductDiabat_DE: number;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {number} harmonicReactantDiabat_FC The harmonic reactant diabatic FC.\n     * @param {number} harmonicReactantDiabat_XO The harmonic reactant diabatic XO.\n     * @param {number} harmonicProductDiabat_DE The harmonic product diabatic DE.\n     * @param {number} exponentialProductDiabat_A The exponential product diabatic A.\n     * @param {number} exponentialProductDiabat_B The exponential product diabatic B.\n     * @param {number} exponentialProductDiabat_DE The exponential product diabatic DE.\n     */\n    constructor(attributes: Map<string, string>,\n        harmonicReactantDiabat_FC: number,\n        harmonicReactantDiabat_XO: number,\n        harmonicProductDiabat_DE: number,\n        exponentialProductDiabat_A: number,\n        exponentialProductDiabat_B: number,\n        exponentialProductDiabat_DE: number) {\n        super(attributes);\n        this.harmonicReactantDiabat_FC = harmonicReactantDiabat_FC;\n        this.harmonicReactantDiabat_XO = harmonicReactantDiabat_XO;\n        this.harmonicProductDiabat_DE = harmonicProductDiabat_DE;\n        this.exponentialProductDiabat_A = exponentialProductDiabat_A;\n        this.exponentialProductDiabat_B = exponentialProductDiabat_B;\n        this.exponentialProductDiabat_DE = exponentialProductDiabat_DE;\n    }\n}\n\n/**\n * A class for representing the sum of states.\n * @param {string} units The units of energy.\n * @param {boolean} angularMomentum The angular momentum attribute.\n * @param {boolean} noLogSpline The no log spline attribute.\n * @param {SumOfStatesPoint[]} sumOfStatesPoints The sum of states points.\n */\n/*\nexport class SumOfStates extends NumberWithAttributes {\n    units: string;\n    angularMomentum: boolean;\n    noLogSpline: boolean;\n    sumOfStatesPoints: SumOfStatesPoint[];\n    constructor(units: string, angularMomentum: boolean, noLogSpline: boolean, sumOfStatesPoints: SumOfStatesPoint[]) {\n        this.units = units;\n        this.angularMomentum = angularMomentum;\n        this.noLogSpline = noLogSpline;\n        this.sumOfStatesPoints = sumOfStatesPoints;\n    }\n    toString() {\n        return `SumOfStates(` +\n            `units(${this.units}), ` +\n            `angularMomentum(${this.angularMomentum.toString()}), ` +\n            `noLogSpline(${this.noLogSpline.toString()}), ` +\n            `sumOfStatesPoints(${arrayToString(this.sumOfStatesPoints, \" \")}))`;\n    }\n}\n*/\n\n/**\n * A class for representing a sum of states point.\n * @param {number} value The value of the point.\n * @param {number} energy The energy of the point.\n * @param {number} angMomMag The angular momentum magnitude of the point.\n */\n/*\nexport class SumOfStatesPoint {\n    value: number;\n    energy: number;\n    angMomMag: number;\n    constructor(value: number, energy: number, angMomMag: number) {\n        this.value = value;\n        this.energy = energy;\n        this.angMomMag = angMomMag;\n    }\n    toString() {\n        return `SumOfStatesPoint(` +\n            `value(${this.value}), ` +\n            `energy(${this.energy.toString()}), ` +\n            `angMomMag(${this.angMomMag.toString()}))`;\n    }\n}\n*/\n\n/**\n * A class for representing the DefinedSumOfStates MCRCMethod.\n * @param {string} name The name or xsi:type of the method.\n * @param {SumOfStates} sumOfStates The sum of states.\n */\n/*\nexport class DefinedSumOfStates extends MCRCMethod {\n    sumOfStates: SumOfStates;\n\n    constructor(name: string, sumOfStates: SumOfStates) {\n        super(name);\n        this.sumOfStates = sumOfStates;\n    }\n    toString() {\n        return `DefinedSumOfStates(${super.toString()}, ` +\n            `sumOfStates(${this.sumOfStates.toString()}))`;\n    }\n}\n*/\n\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value of the factor.\n     */ \n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n}\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The index for the nodes. The key is the type of node, the value is the index of the node in the nodes array.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The reactants.\n     */\n    reactants: Map<string, Reactant> | Reactant | undefined;\n\n    /**\n     * The products.\n     */\n    products: Map<string, Product> | Product | undefined;\n\n    /**\n     * The transition states.\n     */\n    transitionStates: Map<string, TransitionState> | TransitionState | undefined;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} id The id of the reaction.\n     * @param {Map<string, Reactant> | Reactant | undefined} reactants The reactants in the reaction.\n     * @param {Map<string, Product> | Product | undefined} products The products of the reaction.\n     * @param {Tunneling | undefined} tunneling The tunneling (optional).\n     * @param {Map<string, TransitionState> | TransitionState | undefined} transitionStates The transition states (optional).\n     * @param {MCRCMethod | undefined} mCRCMethod The MCRCMethod (optional).\n     * @param {ExcessReactantConc | undefined} excessReactantConc The excess reactant concentration (optional).\n     */\n    constructor(attributes: Map<string, string>, id: string,\n        reactants: Map<string, Reactant> | Reactant | undefined,\n        products: Map<string, Product> | Product | undefined,\n        tunneling?: Tunneling | undefined,\n        transitionStates?: Map<string, TransitionState> | TransitionState | undefined,\n        mCRCMethod?: MCRCMethod | undefined,\n        excessReactantConc?: ExcessReactantConc | undefined) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map();\n        this.reactants = reactants;\n        //console.log(\"Construct reaction:\");\n        if (reactants instanceof Map) {\n            //console.log(\"Map of reactants\");\n            reactants.forEach(reactant => {\n                this.addToIndex(Reactant.tagName, reactant);\n                this.addNode(reactant);\n                //console.log(\"Added reactant \" + reactant);\n                //console.log(\"index.size: \" + this.index.size);\n                //console.log(\"nodes.size: \" + this.nodes.size);\n            });\n        } else {\n            //console.log(\"Individual reactant\");\n            if (reactants != undefined) {\n                //this.addToIndex(Reactant.tagName, reactants);\n                this.index.set(Reactant.tagName, this.nodes.size);\n                this.addNode(reactants);\n                //console.log(\"Added reactant \" + reactants);\n                //console.log(\"index.size: \" + this.index.size);\n                //console.log(\"nodes.size: \" + this.nodes.size);\n            }\n        }\n        this.products = products;\n        if (products instanceof Map) {\n            //console.log(\"Map of products\");\n            products.forEach(product => {\n                this.addToIndex(Product.tagName, product);\n                this.addNode(product);\n                //console.log(\"Added product \" + product);\n                //console.log(\"index.size: \" + this.index.size);\n                //console.log(\"nodes.size: \" + this.nodes.size);\n            });\n        } else {\n            if (products != undefined) {\n                //console.log(\"Individual product\");\n                //this.addToIndex(Product.tagName, products);\n                this.index.set(Product.tagName, this.nodes.size);\n                this.addNode(products);\n                //console.log(\"Added product \" + products);\n                //console.log(\"index.size: \" + this.index.size);\n                //console.log(\"nodes.size: \" + this.nodes.size);\n            }\n        }\n        if (tunneling) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        this.transitionStates = transitionStates;\n        if (transitionStates instanceof Map) {\n            //console.log(\"Map of transition states\");\n            transitionStates.forEach(transitionState => {\n                this.addToIndex(TransitionState.tagName, transitionState);\n                this.addNode(transitionState);\n                //console.log(\"Added transition state \" + transitionState);\n                //console.log(\"index.size: \" + this.index.size);\n                //console.log(\"nodes.size: \" + this.nodes.size);\n            });\n        } else {\n            if (transitionStates != undefined) {\n                //console.log(\"Individual transition state\");\n                //this.addToIndex(TransitionState.tagName, transitionStates);\n                this.index.set(TransitionState.tagName, this.nodes.size);\n                this.addNode(transitionStates);\n                //console.log(\"Added transition state \" + transitionStates);\n                //console.log(\"index.size: \" + this.index.size);\n                //console.log(\"nodes.size: \" + this.nodes.size);\n            }\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n\n    /**\n     * Add a node to the index.\n     * @returns 0 or 1 depeding on if the index has a new entry.\n     */\n    addToIndex(tagName: string, moleculeRef: MoleculeRef) {\n        let value0: Map<string, number> | number | undefined = this.index.get(tagName);\n        if (value0 == undefined) {\n            this.index.set(tagName, this.nodes.size);\n        } else if (value0 instanceof Map) {\n            (value0 as Map<string, number>).set(moleculeRef.getRef(), this.nodes.size);\n        } else {\n            let map: Map<string, number> = new Map<string, number>();\n            map.set((this.nodes.get(value0) as MoleculeRef).getRef(), value0 as number);\n            map.set(moleculeRef.getRef(), this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n\n    /**\n     * @returns The id of the reaction.\n     */\n    getID(): string {\n        return this.attributes.get(\"id\") as string;\n    }\n\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as MCRCMethod;\n    }\n\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */\n    getTunneling(): Tunneling | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as Tunneling;\n    }\n\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */\n    getExcessReactantConc(): ExcessReactantConc | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as ExcessReactantConc;\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string | undefined {\n        if (this.reactants == undefined) {\n            return undefined;\n        } else if (this.reactants instanceof Map) {\n            return Array.from(this.reactants.keys()).join(' + ');\n        } else {\n            return this.reactants.getRef();\n        }\n    }\n\n    /**\n     * Get the combined energy of the reactants.\n     * @returns The combined energy of the reactants.\n     */\n    getReactantsEnergy(): number {\n        if (this.reactants instanceof Map) {\n            return Array.from(this.reactants.values()).map(reactant => reactant.getMolecule().getEnergy()).reduce((a, b) => a + b, 0);\n        }\n        return 0;\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string | undefined {\n        if (this.products == undefined) {\n            return undefined;\n        } else if (this.products instanceof Map) {\n            return Array.from(this.products.keys()).join(' + ');\n        } else {\n            return this.products.getRef();\n        }\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(): number {\n        if (this.products instanceof Map) {\n            return Array.from(this.products.values()).map(product => product.getMolecule().getEnergy()).reduce((a, b) => a + b, 0);\n        }\n        return 0;\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n}","/**\n * Draw a horizontal line and add labels.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {number} strokewidth The width of the line.\n * @param {number} x0 The start x-coordinate of the line.\n * @param {number} y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    TagWithAttributes, NodeWithNodes, NumberNode, StringNode\n} from \"./xml.js\";\n\nimport {\n    Molecule, MoleculeRef\n} from \"./molecule.js\";\n\n/**\n * A class for representing a bath gas reaction molecule.\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * The molecules.\n     */\n    molecules: Map<string, Molecule>\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {string} moleculeID The moleculeID.\n     * @param {Map<string, Molecule>} molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, moleculeID: string,\n        molecules: Map<string, Molecule>) {\n        super(attributes, BathGas.tagName, moleculeID);\n        this.molecules = molecules;\n    }\n\n    getMolecule(): Molecule {\n        return this.molecules.get(this.value) as Molecule;\n    }\n}\n\n/**\n * A class for representing an experiment rate.\n */\nexport class ExperimentRate extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentRate\";\n    \n    /**\n     * @param {Map<string, string>} attributes The attributes. \n     * @param {number} value The value. \n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ExperimentRate.tagName, value);\n    }\n}\n\n/**\n * A class for representing a Pressure and Temperature pair.\n */\nexport class PTpair extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:PTpair\";\n\n    /**\n     * The index. Keys are types and values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {BathGas | undefined} bathGas The bath gas.\n     * @param {ExperimentRate | undefined} experimentRate The experiment rate.\n     */\n    constructor(attributes: Map<string, string>, bathGas?: BathGas, experimentRate?: ExperimentRate) {\n        super(attributes, PTpair.tagName);\n        this.index = new Map();\n        if (bathGas) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate) {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n\n    /**\n     * @returns The Pressure.\n     */\n    getP(): number {\n        let p: string | undefined = this.attributes.get(\"P\");\n        if (p) {\n            return parseFloat(p);\n        } else {\n            throw new Error(\"P is undefined\");\n        }\n    }\n\n    /**\n     * Set The Pressure\n     */\n    setP(p: number) {\n        this.attributes.set(\"P\", p.toString());\n    }\n\n    /**\n     * @returns The Temperature.\n     */\n    getT(): number {\n        let t: string | undefined = this.attributes.get(\"T\");\n        if (t) {\n            return parseFloat(t);\n        } else {\n            throw new Error(\"T is undefined\");\n        }\n    }\n    \n    /**\n     * Set The Temperature.\n     */\n    setT(t: number) {\n        this.attributes.set(\"T\", t.toString());\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas | undefined {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i) {\n            return this.nodes.get(i) as BathGas;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @returns The experiment rate.\n     */\n    getExperimentRate(): ExperimentRate | undefined {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i) {\n            return this.nodes.get(i) as ExperimentRate;\n        } else {\n            return undefined;\n        }\n    }\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * The PT pairs.\n     */\n    pTpairs: PTpair[]\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PTpair[]} pTpairs The PT pairs.\n     */\n    constructor(attributes: Map<string, string>, pTpairs: PTpair[]) {\n        super(attributes, PTs.tagName);\n        pTpairs.forEach((pTpair) => {\n            this.addNode(pTpair);\n        });\n        this.pTpairs = pTpairs;\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * @param {BathGas} bathGas The bath gas.\n     * @param {PTpair} pTs The Pressure and Temperature pairs.\n     */\n    constructor(attributes: Map<string, string>, bathGas: BathGas, pTs: PTs) {\n        super(attributes, Conditions.tagName);\n        this.addNode(bathGas);\n        this.addNode(pTs);\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas {\n        return this.nodes.get(0) as BathGas;\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs {\n        return this.nodes.get(1) as PTs;\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for measures of grain size.\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, GrainSize.tagName, value);\n    }\n    toString() {\n        return `GrainSize(${super.toString()})`;\n    }\n}\n\n/**\n * A class for measures of grain size.\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    constructor(grainSize: GrainSize, energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        super(new Map<string, string>(), ModelParameters.tagName);\n        this.addNode(grainSize);\n        this.addNode(energyAboveTheTopHill);\n    }\n\n    /**\n     * @returns The grain size.\n     */\n    getGrainSize(): GrainSize {\n        return this.nodes.get(0) as GrainSize;\n    }\n\n    /**\n     * @returns The energy above the top hill.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill {\n        return this.nodes.get(1) as EnergyAboveTheTopHill;\n    }\n}","import {\n    Tag, NodeWithNodes, NumberNode\n} from \"./xml\";\n\n/**\n * A class for me:testDOS.\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printSpeciesProfile.\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for me:testMicroRates.\n */\nexport class TestMicroRates extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    constructor() {\n        super(TestMicroRates.tagName);\n    }\n}\n\n/**\n * A class for me:testRateConstant.\n */\nexport class TestRateConstant extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstant\";\n\n    constructor() {\n        super(TestRateConstant.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainDOS.\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printCellDOS.\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printReactionOperatorColumnSums.\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for me:printTunnellingCoefficients.\n */\nexport class PrintTunnellingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnellingCoefficients\";\n\n    constructor() {\n        super(PrintTunnellingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainkfE.\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainBoltzmann.\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainkbE.\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for me:eigenvalues.\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for me:hideInactive.\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for me:diagramEnergyOffset.\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n    \n    /**\n     * @param attributes The attributes.\n     * @param testDOS The testDOS.\n     * @param printSpeciesProfile The printSpeciesProfile.\n     * @param testMicroRates The testMicroRates.\n     * @param testRateConstant T\n     * @param printGrainDOS The printGrainDOS.\n     * @param printCellDOS The printCellDOS.\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     * @param printTunnellingCoefficients The printTunnellingCoefficients.\n     * @param printGrainkfE The printGrainkfE.\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     * @param printGrainkbE The printGrainkbE.\n     * @param eigenvalues The eigenvalues.\n     * @param hideInactive The hideInactive.\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    constructor(attributes: Map<string,string>, testDOS?: TestDOS, printSpeciesProfile?: PrintSpeciesProfile, \n        testMicroRates?: TestMicroRates, testRateConstant?: TestRateConstant, printGrainDOS?: PrintGrainDOS, \n        printCellDOS?: PrintCellDOS, printReactionOperatorColumnSums?: PrintReactionOperatorColumnSums, \n        printTunnellingCoefficients?: PrintTunnellingCoefficients, printGrainkfE?: PrintGrainkfE, \n        printGrainBoltzmann?: PrintGrainBoltzmann, printGrainkbE?: PrintGrainkbE, eigenvalues?: Eigenvalues, \n        hideInactive?: HideInactive, diagramEnergyOffset?: DiagramEnergyOffset) {\n        super(attributes, Control.tagName);\n        this.index = new Map<string, number>();\n        if (testDOS != undefined) {\n            this.addNode(testDOS);\n            this.index.set(TestDOS.tagName, this.index.size);\n        }\n        if (printSpeciesProfile != undefined) {\n            this.addNode(printSpeciesProfile);\n            this.index.set(PrintSpeciesProfile.tagName, this.index.size);\n        }\n        if (testMicroRates != undefined) {\n            this.addNode(testMicroRates);\n            this.index.set(TestMicroRates.tagName, this.index.size);\n        }\n        if (testRateConstant != undefined) {\n            this.addNode(testRateConstant);\n            this.index.set(TestRateConstant.tagName, this.index.size);\n        }\n        if (printGrainDOS != undefined) {\n            this.addNode(printGrainDOS);\n            this.index.set(PrintGrainDOS.tagName, this.index.size);\n        }\n        if (printCellDOS != undefined) {\n            this.addNode(printCellDOS);\n            this.index.set(PrintCellDOS.tagName, this.index.size);\n        }\n        if (printReactionOperatorColumnSums != undefined) {\n            this.addNode(printReactionOperatorColumnSums);\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.index.size);\n        }\n        if (printTunnellingCoefficients != undefined) {\n            this.addNode(printTunnellingCoefficients);\n            this.index.set(PrintTunnellingCoefficients.tagName, this.index.size);\n        }\n        if (printGrainkfE != undefined) {\n            this.addNode(printGrainkfE);\n            this.index.set(PrintGrainkfE.tagName, this.index.size);\n        }\n        if (printGrainBoltzmann != undefined) {\n            this.addNode(printGrainBoltzmann);\n            this.index.set(PrintGrainBoltzmann.tagName, this.index.size);\n        }\n        if (printGrainkbE != undefined) {\n            this.addNode(printGrainkbE);\n            this.index.set(PrintGrainkbE.tagName, this.index.size);\n        }\n        if (eigenvalues != undefined) {\n            this.addNode(eigenvalues);\n            this.index.set(Eigenvalues.tagName, this.index.size);\n        }\n        if (hideInactive != undefined) {\n            this.addNode(hideInactive);\n            this.index.set(HideInactive.tagName, this.index.size);\n        }\n        if (diagramEnergyOffset != undefined) {\n            this.addNode(diagramEnergyOffset);\n            this.index.set(DiagramEnergyOffset.tagName, this.index.size);\n        }\n    }\n\n    getTestDOS(): TestDOS | undefined {\n        const index = this.index.get(TestDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestDOS;\n        }\n        return undefined;\n    }\n\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        const index = this.index.get(PrintSpeciesProfile.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    getTestMicroRates(): TestMicroRates | undefined {\n        const index = this.index.get(TestMicroRates.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    getTestRateConstant(): TestRateConstant | undefined {\n        const index = this.index.get(TestRateConstant.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestRateConstant;\n        }\n        return undefined;\n    }\n\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        const index = this.index.get(PrintGrainDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        const index = this.index.get(PrintCellDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        const index = this.index.get(PrintReactionOperatorColumnSums.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    getPrintTunnellingCoefficients(): PrintTunnellingCoefficients | undefined {\n        const index = this.index.get(PrintTunnellingCoefficients.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintTunnellingCoefficients;\n        }\n        return undefined;\n    }\n\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        const index = this.index.get(PrintGrainkfE.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        const index = this.index.get(PrintGrainBoltzmann.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        const index = this.index.get(PrintGrainkbE.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    getEigenvalues(): Eigenvalues | undefined {\n        const index = this.index.get(Eigenvalues.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    getHideInactive(): HideInactive | undefined {\n        const index = this.index.get(HideInactive.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as HideInactive;\n        }\n        return undefined;\n    }\n\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        const index = this.index.get(DiagramEnergyOffset.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n}"],"names":[],"version":3,"file":"index.8f1fc100.js.map"}