{"mappings":"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","sources":["<anon>","src/ts/app.ts","src/ts/util.ts","src/ts/xml.ts","src/ts/html.ts","src/ts/molecule.ts","src/ts/reaction.ts","src/ts/canvas.ts","src/ts/conditions.ts","src/ts/modelParameters.ts","src/ts/control.ts","src/ts/mesmer.ts"],"sourcesContent":["/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */ function $dcf293d9ee452407$export$3988ae62b71be9a3(map, key) {\n    if (!map.has(key)) throw new Error(`Key ${key} not found in map`);\n    return map.get(key);\n}\nfunction $dcf293d9ee452407$export$bd2782c820638828(min, range, newMin, newRange, value) {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return (value - min) * newRange / (range + 0.0) + newMin;\n}\nfunction $dcf293d9ee452407$export$dc22ec7f8e0b9ac(map, delimiter) {\n    if (map == null) return \"\";\n    if (delimiter == undefined) delimiter = \", \";\n    return Array.from(map.entries()).map(([key, value])=>`${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$4323cc4280d5be7(array, delimiter) {\n    if (delimiter == undefined) delimiter = \", \";\n    return array.map((value)=>value == null ? \"null\" : value.toString()).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$736cc24a423eb64d(set, delimiter) {\n    if (delimiter == undefined) delimiter = \", \";\n    return Array.from(set).map((value)=>value == null ? \"null\" : value.toString()).join(delimiter);\n}\nfunction $dcf293d9ee452407$export$8cfbaad830aa9e0a(s) {\n    let r = [];\n    for(let i = 0; i < s.length; i++)if ($dcf293d9ee452407$export$e90fb89750dba83f(s[i])) r.push(parseFloat(s[i]));\n    return r;\n}\nfunction $dcf293d9ee452407$export$e90fb89750dba83f(s) {\n    if (s === \"\") return false;\n    return !isNaN(Number(s));\n}\n\n\n/**\n * Get a heading.\n * @param text The text.\n * @param type The heading type (i.e. 'h1', 'h2', 'h3', 'h4', 'h5', or 'h6').\n * @param id The id of the div.\n * @param className The class of the div.\n */ /*\nexport function getH3(text: string, type: string, id?: string, className?: string): HTMLHeadingElement {\n    //let heading: HTMLHeadingElement = document.createElement(type);\n    let heading: HTMLHeadingElement = document.createElement(\"h3\");\n    heading.innerHTML = text;\n    if (id != undefined) {\n        heading.id = id;\n    }\n    if (className != undefined) {\n        heading.className = className;\n    }\n\n    return heading + \">\" + text + \"</h\" + level + \">\";\n}\n*/ /**\n * @deprecated There is no need for this method - simply use HTMLButtonElement.\n * Create a button.\n * @param text The text.\n * @param id The id of the button.\n * @param  _class The class of the button.\n * @param  func The function called on a click.\n * @returns The button.\n */ /*\nexport function getButton(text: string, id?: string, _class?: string, func?: string): HTMLButtonElement {\n    let button: HTMLButtonElement = new HTMLButtonElement();\n    button.innerHTML = text;\n    button.type = \"button\";\n    button.onclick = function () {\n\n    if (id) {\n        button += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (_class) {\n        button += \" class=\\\"\" + _class + \"\\\"\";\n    }\n    if (func) {\n        button += \" onclick=\\\"\" + func + \"\\\"\";\n    }\n    return button + \">\" + text + \"</button>\";\n}\n*/ /**\n * Create a table cell.\n * @param x A cell for a table row.\n * @param contentEditable If true then the cell is set to be editable.  \n * @returns x wrapped in td tags.\n */ /*\nexport function getTD(x: string, contentEditable: boolean = false): HTMLTableCellElement {\n    let td: HTMLTableCellElement = document.createElement('td');\n    if (contentEditable) {\n        td.contentEditable = \"true\";\n    }\n    td.innerHTML = x;\n    return td;\n}\n*/ /**\n * @deprecated There is no need for this method - simply use HTMLTableRowElement.\n * Create a table row.\n * @param x A row for a table.\n * @returns x wrapped in tr tags.\n */ /*\nexport function getTR(x: string): HTMLTableRowElement {\n    let tr: HTMLTableRowElement = document.createElement('tr');\n    tr.innerHTML = x;\n    return tr;\n}\n*/ /**\n * @deprecated There is no need for this method - simply use HTMLTableElement.\n * Create a table.\n * @param {string} x Table rows for a table.\n * @returns {string} x wrapped in table tags.\n */ /*\nexport function getTable(x: string): HTMLTableElement {\n    let table: HTMLTableElement = document.createElement('table');\n    table.innerHTML = x;\n    return table;\n}\n*/ /**\n * Create a collapsible div.\n * @param buttonId The id of the button.\n * @param buttonLabel The label of the button.\n * @param content The content that will be collapsible.\n * @param contentDivId The id of the content div.\n * @param contentDivClassName The class of the content div.\n * @returns A collapsible div.\n */ function $2cda23d1e44619db$export$8b2cd46c11844202(buttonId, buttonLabel, content, contentDivId, contentDivClassName) {\n    let contentDiv = document.createElement(\"div\");\n    contentDiv.id = contentDivId;\n    if (contentDivClassName != undefined) contentDiv.className = contentDivClassName;\n    let button = document.createElement(\"button\");\n    button.id = buttonId;\n    button.className = \"collapsible\";\n    button.innerText = buttonLabel;\n    contentDiv.appendChild(button);\n    contentDiv.appendChild(content);\n    return contentDiv;\n}\nfunction $2cda23d1e44619db$export$2883f21c1f82e07d() {\n    var collapsibleElements = document.getElementsByClassName(\"collapsible\");\n    for(var i = 0; i < collapsibleElements.length; i++){\n        // Remove existing event listener\n        collapsibleElements[i].removeEventListener(\"click\", $2cda23d1e44619db$var$toggleCollapsible);\n        // Add new event listener\n        collapsibleElements[i].addEventListener(\"click\", $2cda23d1e44619db$var$toggleCollapsible);\n    }\n}\n/**\n * For toggling the collapsible content.\n */ function $2cda23d1e44619db$var$toggleCollapsible() {\n    this.classList.toggle(\"active\");\n    let contentDiv = this.nextElementSibling;\n    if (contentDiv.style.display === \"block\") contentDiv.style.display = \"none\";\n    else contentDiv.style.display = \"block\";\n}\nfunction $2cda23d1e44619db$export$7c112ceec8941e67(type, id, func, value, labelText) {\n    let input = document.createElement(\"input\");\n    input.type = type;\n    input.id = id;\n    input.onchange = func;\n    input.value = value;\n    let label = document.createElement(\"label\");\n    label.htmlFor = id;\n    if (labelText) label.textContent = labelText + \": \";\n    else label.textContent = \"\";\n    let container = document.createElement(\"div\");\n    container.appendChild(label);\n    container.appendChild(input);\n    return container;\n}\nfunction $2cda23d1e44619db$export$ff083c49da8fe0f9(attributes, tagName) {\n    let s = \"<\" + tagName;\n    if (attributes) for (let [key, value] of attributes)s += \" \" + key + '=\"' + value + '\"';\n    return s + \" />\";\n}\nfunction $2cda23d1e44619db$export$4b454580398e92d5(input, minSize) {\n    if (minSize == undefined) minSize = 4;\n    input.style.width = input.value.length + minSize + \"ch\";\n}\n\n\nfunction $6648a11f147a5c05$export$735ee1799fd02602(xml, name) {\n    let v = xml.getAttribute(name);\n    if (!v) throw new Error(name + \" attribute not found\");\n    return v;\n}\nfunction $6648a11f147a5c05$export$91e73a91db22e6a2(element, tagName) {\n    let el = element.getElementsByTagName(tagName)[0];\n    if (el == null) throw new Error(tagName + \" element not found\");\n    return el;\n}\nfunction $6648a11f147a5c05$export$4e07613bf412feb7(element) {\n    let cn = element.childNodes;\n    if (cn == null) throw new Error(\"Element has no childNodes\");\n    return cn[0];\n}\nfunction $6648a11f147a5c05$export$13cb40e9b656ab9e(node) {\n    let nodeValue = node.nodeValue;\n    if (nodeValue == null) throw new Error(\"nodeValue is null\");\n    return nodeValue;\n}\nclass $6648a11f147a5c05$export$3288d34c523a1192 {\n    /**\n     * @param tagName The tag name.\n     */ constructor(tagName){\n        this.tagName = tagName;\n    }\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */ toXML(padding) {\n        let s = (0, $2cda23d1e44619db$export$ff083c49da8fe0f9)(undefined, this.tagName);\n        if (padding) return \"\\n\" + padding + s;\n        return s;\n    }\n}\nclass $6648a11f147a5c05$export$ca4ceee82ec565dc extends $6648a11f147a5c05$export$3288d34c523a1192 {\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes, tagName){\n        super(tagName);\n        this.attributes = attributes;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        let r = this.tagName + `(`;\n        if (this.attributes) this.attributes.forEach((value, key)=>{\n            r += `${key}(${value}), `;\n        });\n        return r;\n    }\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */ toXML(padding) {\n        let s = \"\";\n        if (padding != undefined) s += \"\\n\" + padding;\n        s += \"<\" + this.tagName;\n        if (this.attributes) for (let [k, v] of this.attributes)s += \" \" + k + '=\"' + v.toString() + '\"';\n        return s + \" />\";\n    }\n}\nclass $6648a11f147a5c05$export$8f67221c6fb2ad09 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName);\n        this.value = value;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$82583fad49645fc9 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, tagName, value){\n        super(attributes, tagName);\n        this.value = value;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$38d8ebe2767f8865 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, tagName, values, delimiter){\n        super(attributes, tagName);\n        /**\n     * The delimiter of the values.\n     */ this.delimiter = \",\";\n        this.values = values;\n        if (delimiter != undefined) this.delimiter = delimiter;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */ setDelimiter(delimiter) {\n        this.delimiter = delimiter;\n    }\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(padding) {\n        return $6648a11f147a5c05$export$dad497fe1f6e27c0(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\nclass $6648a11f147a5c05$export$bd431b64ad3b0433 extends $6648a11f147a5c05$export$ca4ceee82ec565dc {\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */ constructor(attributes, tagName){\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */ addNode(node) {\n        this.nodes.set(this.nodes.size, node);\n        return this.nodes.size - 1;\n    }\n    /**\n     * @returns A string representation.\n     */ toString() {\n        let s = super.toString();\n        this.nodes.forEach((v, k)=>{\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */ toXML(pad, padding) {\n        let padding1;\n        if (pad != undefined && padding != undefined) padding1 = padding + pad;\n        let s = \"\";\n        if (this.nodes.size > 0) {\n            this.nodes.forEach((v)=>{\n                if (v instanceof $6648a11f147a5c05$export$bd431b64ad3b0433) s += v.toXML(pad, padding1);\n                else if (v instanceof $6648a11f147a5c05$export$ca4ceee82ec565dc) s += v.toXML(padding1);\n                else s += v.toXML(padding1);\n            });\n            return $6648a11f147a5c05$export$dad497fe1f6e27c0(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s = (0, $2cda23d1e44619db$export$ff083c49da8fe0f9)(this.attributes, this.tagName);\n            if (padding != undefined) return \"\\n\" + padding + s;\n            return s;\n        }\n    }\n}\nfunction $6648a11f147a5c05$export$2cd488e9ab180ce2(tagName, attributes, padding) {\n    let s = \"\";\n    if (padding != undefined) s += \"\\n\" + padding;\n    s += \"<\" + tagName;\n    if (attributes) for (let [k, v] of attributes)s += \" \" + k + '=\"' + v.toString() + '\"';\n    return s + \">\";\n}\nfunction $6648a11f147a5c05$export$34b7e1ae786b72b0(tagName, padding, padValue) {\n    let s = \"\";\n    if (padValue) {\n        if (padding != undefined) s += \"\\n\" + padding;\n    }\n    return s + \"</\" + tagName + \">\";\n}\nfunction $6648a11f147a5c05$export$dad497fe1f6e27c0(content, tagName, attributes, padding, padValue) {\n    let startTag = $6648a11f147a5c05$export$2cd488e9ab180ce2(tagName, attributes, padding);\n    let endTag = $6648a11f147a5c05$export$34b7e1ae786b72b0(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\nfunction $6648a11f147a5c05$export$fe94072fee8a6976(element) {\n    let attributeNames = element.getAttributeNames();\n    let attributes = new Map();\n    attributeNames.forEach(function(attributeName) {\n        let attributeValue = element.getAttribute(attributeName);\n        if (attributeValue != null) attributes.set(attributeName, attributeValue);\n    });\n    return attributes;\n}\nfunction $6648a11f147a5c05$export$b7531b8ff18dc588(xml, tagName) {\n    let e = xml.getElementsByTagName(tagName);\n    if (e.length != 1) throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    return e[0];\n}\nfunction $6648a11f147a5c05$export$438fa7935f716bdf(text) {\n    return text.replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/\\n/g, \"<br>\").replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\").replace(/  /g, \"&nbsp;&nbsp;\");\n}\n\n\n\n\nclass $7cb8c0739b32549c$export$80986e6afdd7e0cb extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"atom\";\n    }\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     * If there is no \"id\" then \"this.id\" is set to the \"elementType\".\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName);\n        let elementType = attributes.get(\"elementType\");\n        if (elementType == undefined) throw new Error(\"elementType is undefined\");\n        this.elementType = elementType;\n        let id = attributes.get(\"id\");\n        if (id == undefined) id = this.elementType;\n        this.id = id;\n    }\n}\nclass $7cb8c0739b32549c$export$9cea715eceba39a0 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n    * The tag name.\n    */ this.tagName = \"atomArray\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */ constructor(attributes, atoms){\n        super(attributes, $7cb8c0739b32549c$export$9cea715eceba39a0.tagName);\n        atoms.forEach((atom)=>{\n            this.nodes.set(this.nodes.size, atom);\n        });\n    }\n}\nclass $7cb8c0739b32549c$export$153327fc99ac0c53 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"bond\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$153327fc99ac0c53.tagName);\n        let atomRefs2 = attributes.get(\"atomRefs2\");\n        if (atomRefs2 == undefined) throw new Error(\"atomRefs2 is undefined\");\n        this.atomRefs2 = atomRefs2;\n    }\n}\nclass $7cb8c0739b32549c$export$746fba2e30d93fe6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"bondArray\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bonds A Map of bonds with keys as ids.\n     */ constructor(attributes, bonds){\n        super(attributes, $7cb8c0739b32549c$export$746fba2e30d93fe6.tagName);\n        bonds.forEach((bond)=>{\n            this.nodes.set(this.nodes.size, bond);\n        });\n    }\n}\nclass $7cb8c0739b32549c$export$d29b345ea2be5072 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"scalar\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$d29b345ea2be5072.tagName, value);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            if (this.attributes != undefined) {\n                let existingUnits = this.attributes.get(\"units\");\n                if (existingUnits != undefined) {\n                    if (existingUnits != units) //console.log('Units are not the same, changing units...');\n                    this.attributes.set(\"units\", units);\n                }\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$9f93a3fdf2490572 extends (0, $6648a11f147a5c05$export$38d8ebe2767f8865) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"array\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */ constructor(attributes, values, delimiter){\n        super(attributes, $7cb8c0739b32549c$export$9f93a3fdf2490572.tagName, values, delimiter);\n    }\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */ updateUnits(units) {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            if (this.attributes != undefined) {\n                let existingUnits = this.attributes.get(\"units\");\n                if (existingUnits != undefined) {\n                    if (existingUnits != units) //console.log('Units are not the same, changing units...');\n                    this.attributes.set(\"units\", units);\n                }\n            }\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$41b04b3a73e7216d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"property\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, $7cb8c0739b32549c$export$41b04b3a73e7216d.tagName);\n        let dictRef = attributes.get(\"dictRef\");\n        if (dictRef == undefined) throw new Error(\"dictRef is undefined\");\n        this.dictRef = dictRef;\n        if (property) this.nodes.set(0, property);\n    }\n    /**\n     * @returns The property.\n     */ getProperty() {\n        return this.nodes.get(0);\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        this.nodes.set(0, property);\n    }\n}\nclass $7cb8c0739b32549c$export$95174cf0748f45cd extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:ZPE\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$1288989e9be37590 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:frequenciesScaleFactor\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$2762c8fbc03043ca extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:vibFreqs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$984abe26ded13ee0 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:rotConsts\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$a3772f6eb527275b extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:MW\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$22995ecd2bdeb2 extends $7cb8c0739b32549c$export$41b04b3a73e7216d {\n    static{\n        this.dictRef = \"me:imFreqs\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */ constructor(attributes, property){\n        super(attributes, property);\n    }\n}\nclass $7cb8c0739b32549c$export$4e0d1ad7ad6a0802 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"propertyList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */ constructor(attributes, properties){\n        super(attributes, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        this.index = new Map();\n        if (properties) properties.forEach((property)=>{\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */ getProperty(dictRef) {\n        let i = this.index.get(dictRef);\n        if (i != undefined) return this.nodes.get(i);\n        else throw new Error(\"Property \" + dictRef + \" does not exist\");\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        let i = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log(\"Property \" + property.dictRef + \" already exists, updating...\");\n            this.nodes.set(i, property);\n        }\n    }\n}\nclass $7cb8c0739b32549c$export$16fc56ab40b12b45 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:deltaEDown\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$16fc56ab40b12b45.tagName, value);\n    }\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */ getBathGas() {\n        if (this.attributes != undefined) return this.attributes.get(\"bathGas\");\n    }\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */ setBathGas(bathGas) {\n        if (this.attributes != undefined) this.attributes.set(\"bathGas\", bathGas);\n    }\n    /**\n     * @returns The units of the DeltaEDown.\n     */ getUnits() {\n        if (this.attributes != undefined) return this.attributes.get(\"units\");\n    }\n    /**\n     * @returns The lower of the DeltaEDown.\n     */ getLower() {\n        if (this.attributes != undefined) return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, \"lower\"));\n    }\n    /**\n     * @param lower The lower of the DeltaEDown.\n     */ setLower(lower) {\n        if (this.attributes != undefined) this.attributes.set(\"lower\", lower.toString());\n    }\n    /**\n     * @returns The upper of the DeltaEDown.\n     */ getUpper() {\n        if (this.attributes != undefined) return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, \"upper\"));\n    }\n    /**\n     * @param upper The upper of the DeltaEDown.\n     */ setUpper(upper) {\n        if (this.attributes != undefined) this.attributes.set(\"upper\", upper.toString());\n    }\n    /**\n     * @returns The stepsize of the DeltaEDown.\n     */ getStepsize() {\n        if (this.attributes != undefined) return parseFloat((0, $dcf293d9ee452407$export$3988ae62b71be9a3)(this.attributes, \"stepsize\"));\n    }\n    /**\n     * @param stepsize The stepsize of the DeltaEDown.\n     */ setStepsize(stepsize) {\n        if (this.attributes != undefined) this.attributes.set(\"stepsize\", stepsize.toString());\n    }\n    /**\n     * @param value The value of the DeltaEDown.\n     */ setValue(value) {\n        this.value = value;\n    }\n}\nclass $7cb8c0739b32549c$export$499950da20810ac9 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:energyTransferModel\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */ constructor(attributes, deltaEDowns){\n        super(attributes, $7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        deltaEDowns.forEach((deltaEDown)=>{\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */ getDeltaEDown(index) {\n        if (index < 0 || index >= this.nodes.size) throw new Error(\"index out of range\");\n        return this.nodes.get(index);\n    }\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */ setDeltaEDown(index, deltaEDown) {\n        this.nodes.set(index, deltaEDown);\n    }\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */ addDeltaEDown(deltaEDown) {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\nclass $7cb8c0739b32549c$export$bbdce6c921702068 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:DOSCMethod\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n    }\n}\nclass $7cb8c0739b32549c$export$aef8e5ad5552fd72 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:bondRef\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */ constructor(attributes, bondRef){\n        super(attributes, $7cb8c0739b32549c$export$aef8e5ad5552fd72.tagName, bondRef);\n    }\n}\nclass $7cb8c0739b32549c$export$86ca5149fcde8feb extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        this.tagName = \"me:PotentialPoint\";\n    }\n    /**\n     * @param attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $7cb8c0739b32549c$export$86ca5149fcde8feb.tagName);\n    }\n}\nclass $7cb8c0739b32549c$export$9b8e857b9a081d2 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        this.tagName = \"me:HinderedRotorPotential\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PotentialPoint[]} potentialPoints The PotentialPoints.\n     */ constructor(attributes, potentialPoints){\n        super(attributes, $7cb8c0739b32549c$export$9b8e857b9a081d2.tagName);\n        potentialPoints.forEach((p)=>{\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n    /**\n     * @returns The potential point with the given index.\n     */ getPotentialPoint(index) {\n        return this.nodes.get(index);\n    }\n    /**\n     * Set the potential point at the given index.\n     * @param index The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */ setPotentialPoints(index, p) {\n        this.nodes.set(index, p);\n    }\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */ addPotentialPoint(p) {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n}\nclass $7cb8c0739b32549c$export$9513c16afdf7d852 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        this.tagName = \"me:periodicity\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$9513c16afdf7d852.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$ae98b7db6376163d extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:ExtraDOSCMethod\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */ constructor(attributes, bondRef, hinderedRotorPotential, periodicity){\n        super(attributes, $7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (bondRef) this.nodes.set(this.nodes.size, bondRef);\n        if (hinderedRotorPotential) this.nodes.set(this.nodes.size, hinderedRotorPotential);\n        if (periodicity) this.nodes.set(this.nodes.size, periodicity);\n    }\n    /**\n     * @returns The bondRef.\n     */ getBondRef() {\n        return this.nodes.get(0);\n    }\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */ setBondRef(bondRef) {\n        this.nodes.set(0, bondRef);\n    }\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */ getHinderedRotorPotential() {\n        return this.nodes.get(1);\n    }\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */ setHinderedRotorPotential(hinderedRotorPotential) {\n        this.nodes.set(1, hinderedRotorPotential);\n    }\n    /**\n     * @returns The periodicity of the molecule.\n     */ getPeriodicity() {\n        return this.nodes.get(2);\n    }\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */ setPeriodicity(periodicity) {\n        this.nodes.set(2, periodicity);\n    }\n}\nclass $7cb8c0739b32549c$export$97850fe2f2906f00 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:reservoirSize\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */ constructor(attributes, value){\n        super(attributes, $7cb8c0739b32549c$export$97850fe2f2906f00.tagName, value);\n    }\n}\nclass $7cb8c0739b32549c$export$3da9759ad07746a3 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"molecule\";\n    }\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */ constructor(attributes, atoms, bonds, properties, energyTransferModel, dOSCMethod, extraDOSCMethod, reservoirSize){\n        super(attributes, $7cb8c0739b32549c$export$3da9759ad07746a3.tagName);\n        this.index = new Map();\n        let id = attributes.get(\"id\");\n        if (id == undefined) throw new Error(\"id is undefined\");\n        this.id = id;\n        let i = 0;\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            if (atoms instanceof $7cb8c0739b32549c$export$80986e6afdd7e0cb) this.index.set($7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName, i);\n            else this.index.set($7cb8c0739b32549c$export$9cea715eceba39a0.tagName, i);\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set($7cb8c0739b32549c$export$499950da20810ac9.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set($7cb8c0739b32549c$export$bbdce6c921702068.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set($7cb8c0739b32549c$export$ae98b7db6376163d.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set($7cb8c0739b32549c$export$97850fe2f2906f00.tagName, i);\n        }\n    }\n    /**\n     * Get the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */ getDescription() {\n        if (this.attributes != undefined) return this.attributes.get(\"description\");\n    }\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */ setDescription(description) {\n        if (this.attributes != undefined) this.attributes.set(\"description\", description);\n    }\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */ getActive() {\n        if (this.attributes != undefined) {\n            let active = this.attributes.get(\"active\");\n            if (active != undefined) {\n                if (active == \"true\") return true;\n                else return false;\n            }\n        }\n    }\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */ setActive(active) {\n        if (this.attributes != undefined) this.attributes.set(\"active\", active.toString());\n    }\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */ getLabel() {\n        let label = this.id;\n        let description = this.getDescription();\n        if (description != undefined) label += \" (\" + description + \")\";\n        let active = this.getActive();\n        if (active) label += \" (active)\";\n        return label;\n    }\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */ getAttributesAsString() {\n        if (this.attributes == undefined) return \"\";\n        return Array.from(this.attributes, ([key, value])=>`${key}=\\\"${value}\\\"`).join(\", \");\n    }\n    /**\n     * @returns The properties of the molecule.\n     */ getProperties() {\n        let i = this.index.get($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        if (i == undefined) {\n            i = this.index.get($7cb8c0739b32549c$export$41b04b3a73e7216d.tagName);\n            if (i == undefined) return undefined;\n            else return this.nodes.get(i);\n        } else return this.nodes.get(i);\n    }\n    /**\n     * @param properties The properties.\n     */ setProperties(properties) {\n        let i = this.index.get($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$4e0d1ad7ad6a0802.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else this.nodes.set(i, properties);\n    }\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */ getProperty(dictRef) {\n        let properties = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof $7cb8c0739b32549c$export$4e0d1ad7ad6a0802) //console.log('PropertyList');\n            return properties.getProperty(dictRef);\n            else //console.log('Property');\n            return properties;\n        }\n    }\n    /**\n     * Set the property.\n     * @param property The property.\n     */ setProperty(property) {\n        let properties = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof $7cb8c0739b32549c$export$4e0d1ad7ad6a0802) properties.setProperty(property);\n            else this.setProperties(properties);\n        } else this.setProperties(property);\n    }\n    /**\n     * @returns The atoms of the molecule.\n     */ getAtoms() {\n        let i = this.index.get($7cb8c0739b32549c$export$80986e6afdd7e0cb.tagName);\n        if (i == undefined) {\n            i = this.index.get($7cb8c0739b32549c$export$9cea715eceba39a0.tagName);\n            if (i == undefined) return undefined;\n            else return this.nodes.get(i);\n        } else return this.nodes.get(i);\n    }\n    /**\n     * @returns The bonds of the molecule.\n     */ getBonds() {\n        let i = this.index.get($7cb8c0739b32549c$export$746fba2e30d93fe6.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * @returns The energy transfer model of the molecule.\n     */ getEnergyTransferModel() {\n        let i = this.index.get($7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */ setEnergyTransferModel(energyTransferModel) {\n        let i = this.index.get($7cb8c0739b32549c$export$499950da20810ac9.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$499950da20810ac9.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else this.nodes.set(i, energyTransferModel);\n    }\n    /**\n     * @returns The DOSC method of the molecule.\n     */ getDOSCMethod() {\n        let i = this.index.get($7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */ setDOSCMethod(dOSCMethod) {\n        let i = this.index.get($7cb8c0739b32549c$export$bbdce6c921702068.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$bbdce6c921702068.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else this.nodes.set(i, dOSCMethod);\n    }\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */ getExtraDOSCMethod() {\n        let i = this.index.get($7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */ setExtraDOSCMethod(extraDOSCMethod) {\n        let i = this.index.get($7cb8c0739b32549c$export$ae98b7db6376163d.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$ae98b7db6376163d.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else this.nodes.set(i, extraDOSCMethod);\n    }\n    /**\n     * @returns The reservoir size of the molecule.\n     */ getReservoirSize() {\n        let i = this.index.get($7cb8c0739b32549c$export$97850fe2f2906f00.tagName);\n        if (i == undefined) return undefined;\n        else return this.nodes.get(i);\n    }\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */ setReservoirSize(reservoirSize) {\n        let i = this.index.get($7cb8c0739b32549c$export$97850fe2f2906f00.tagName);\n        if (i == undefined) {\n            this.index.set($7cb8c0739b32549c$export$97850fe2f2906f00.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else this.nodes.set(i, reservoirSize);\n    }\n    /**\n     * Get the ZPE value of the molecule.\n     */ getEnergy() {\n        let p = this.getProperty($7cb8c0739b32549c$export$95174cf0748f45cd.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error(\"ZPE property not found\");\n        //return 0;\n        }\n        return p.getProperty().value;\n    }\n}\n\n\n\nclass $381c11e38cac5410$export$e8a062bb2fc9e2ba extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"molecule\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$e8a062bb2fc9e2ba.tagName);\n        this.ref = attributes.get(\"ref\");\n    }\n}\nclass $381c11e38cac5410$export$dcfd4302d04b7fb6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reactant\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$dcfd4302d04b7fb6.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$264ad599d7cef668 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"product\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$264ad599d7cef668.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$145c1ed87b1a2216 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:transitionState\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */ constructor(attributes, molecule){\n        super(attributes, $381c11e38cac5410$export$145c1ed87b1a2216.tagName);\n        this.addNode(molecule);\n    }\n    /**\n     * @returns The molecule.\n     */ getMolecule() {\n        return this.nodes.get(0);\n    }\n}\nclass $381c11e38cac5410$export$38ce90ac8b004d85 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:preExponential\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$38ce90ac8b004d85.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$1bdc69d2439d749d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:activationEnergy\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$1bdc69d2439d749d.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$8d95dd32819bc86c extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:TInfinity\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$8d95dd32819bc86c.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$d08982dd841d496f extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:nInfinity\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$d08982dd841d496f.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$6fa70ee10f356b6 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:MCRCMethod\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n    }\n}\nclass $381c11e38cac5410$export$191e95ebb11cc88 extends $381c11e38cac5410$export$6fa70ee10f356b6 {\n    static{\n        /**\n     * The xsiType.\n     */ this.xsiType = \"me:MesmerILT\";\n    }\n    static{\n        /**\n     * The tag name.\n     */ this.xsiType2 = \"MesmerILT\";\n    }\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */ constructor(attributes, preExponential, activationEnergy, tInfinity, nInfinity){\n        super(attributes);\n        this.index = new Map();\n        if (preExponential != undefined) {\n            this.index.set($381c11e38cac5410$export$38ce90ac8b004d85.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set($381c11e38cac5410$export$1bdc69d2439d749d.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set($381c11e38cac5410$export$8d95dd32819bc86c.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set($381c11e38cac5410$export$d08982dd841d496f.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */ getPreExponential() {\n        let i = this.index.get($381c11e38cac5410$export$38ce90ac8b004d85.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */ getActivationEnergy() {\n        let i = this.index.get($381c11e38cac5410$export$1bdc69d2439d749d.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */ getTInfinity() {\n        let i = this.index.get($381c11e38cac5410$export$8d95dd32819bc86c.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */ getNInfinity() {\n        let i = this.index.get($381c11e38cac5410$export$d08982dd841d496f.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n}\nclass $381c11e38cac5410$export$c3cf6f96dac11421 extends (0, $6648a11f147a5c05$export$ca4ceee82ec565dc) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:tunneling\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */ constructor(attributes){\n        super(attributes, $381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n    }\n}\nclass $381c11e38cac5410$export$284227145ed02b04 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:excessReactantConc\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */ constructor(attributes, value){\n        super(attributes, $381c11e38cac5410$export$284227145ed02b04.tagName, value);\n    }\n}\nclass $381c11e38cac5410$export$d2ae4167a30cf6bb extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reaction\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */ constructor(attributes, id, reactants, products, tunneling, transitionStates, mCRCMethod, excessReactantConc){\n        super(attributes, $381c11e38cac5410$export$d2ae4167a30cf6bb.tagName);\n        this.index = new Map();\n        this.id = id;\n        this.reactantsIndex = new Map();\n        reactants.forEach((reactant)=>{\n            this.addNode(reactant);\n            this.addToIndex($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName, reactant);\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size - 1);\n        });\n        this.productsIndex = new Map();\n        products.forEach((product)=>{\n            this.addToIndex($381c11e38cac5410$export$264ad599d7cef668.tagName, product);\n            this.addNode(product);\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size - 1);\n        });\n        if (tunneling != undefined) {\n            this.index.set($381c11e38cac5410$export$c3cf6f96dac11421.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) transitionStates.forEach((transitionState)=>{\n            this.addToIndex($381c11e38cac5410$export$264ad599d7cef668.tagName, transitionState);\n            this.addNode(transitionState);\n        });\n        if (mCRCMethod != undefined) {\n            this.index.set($381c11e38cac5410$export$6fa70ee10f356b6.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set($381c11e38cac5410$export$284227145ed02b04.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n    /**\n     * Add a node to the index.\n     */ addToIndex(tagName, node) {\n        let v = this.index.get(tagName);\n        if (v == undefined) this.index.set(tagName, this.nodes.size);\n        else if (v instanceof Map) v.set(node.tagName, this.nodes.size);\n        else {\n            let map = new Map();\n            map.set(this.nodes.get(v).ref, v);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n    /**\n     * @returns The reactants.\n     */ getReactants() {\n        let i = this.index.get($381c11e38cac5410$export$dcfd4302d04b7fb6.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */ getReactant(ref) {\n        let index = this.reactantsIndex.get(ref);\n        if (index == undefined) throw new Error(`Reactant with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @returns The products.\n     */ getProducts() {\n        let i = this.index.get($381c11e38cac5410$export$264ad599d7cef668.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */ getProduct(ref) {\n        let index = this.productsIndex.get(ref);\n        if (index == undefined) throw new Error(`Product with ref ${ref} not found`);\n        return this.nodes.get(index);\n    }\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */ getTunneling() {\n        let i = this.index.get($381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */ setTunneling(tunneling) {\n        let i = this.index.get($381c11e38cac5410$export$c3cf6f96dac11421.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$c3cf6f96dac11421.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, tunneling);\n        }\n    }\n    /**\n     * @returns The transition states.\n     */ getTransitionStates() {\n        let i = this.index.get($381c11e38cac5410$export$145c1ed87b1a2216.tagName);\n        if (i == undefined) return [];\n        if (i instanceof Map) return Array.from(i.values()).map((index)=>this.nodes.get(index));\n        else return [\n            this.nodes.get(i)\n        ];\n    }\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */ getMCRCMethod() {\n        let i = this.index.get($381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */ setMCRCMethod(mCRCMethod) {\n        let i = this.index.get($381c11e38cac5410$export$6fa70ee10f356b6.tagName);\n        if (i == undefined) {\n            this.index.set($381c11e38cac5410$export$6fa70ee10f356b6.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            else this.nodes.set(i, mCRCMethod);\n        }\n    }\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */ getExcessReactantConc() {\n        let i = this.index.get($381c11e38cac5410$export$284227145ed02b04.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */ getReactantsLabel() {\n        return this.getReactants().map((reactant)=>reactant.getMolecule().ref).join(\" + \");\n    }\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */ getProductsLabel() {\n        return this.getProducts().map((product)=>product.getMolecule().ref).join(\" + \");\n    }\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */ getLabel() {\n        let label = this.getReactantsLabel() + \" -> \" + this.getProductsLabel();\n        return label;\n    }\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */ getReactantsEnergy(molecules) {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map((reactant)=>{\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            return molecule.getEnergy();\n        }).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */ getProductsEnergy(molecules) {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map((product)=>{\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            return molecule.getEnergy();\n        }).reduce((a, b)=>a + b, 0);\n    }\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */ get(tagName, dictRef) {\n        if (this.index.has(tagName)) {\n            let i = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex = i.get(dictRef);\n                    if (nodeIndex != undefined) return this.nodes.get(nodeIndex);\n                } else return this.nodes.get(i);\n            }\n        }\n    }\n}\n\n\n\n/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */ function $d2b4a77a4d44562c$export$479ac392a7fb4419(ctx, strokeStyle, strokewidth, x0, y0, x1, y1, font, th, label, energyString) {\n    let x_centre = x0 + (x1 - x0) / 2;\n    $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, energyString, font, strokeStyle, $d2b4a77a4d44562c$var$getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, label, font, strokeStyle, $d2b4a77a4d44562c$var$getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    $d2b4a77a4d44562c$export$819db45aec5fcbe5(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */ function $d2b4a77a4d44562c$var$getTextStartX(ctx, text, font, x_centre) {\n    let tw = $d2b4a77a4d44562c$export$37827d046293d309(ctx, text, font);\n    return x_centre - tw / 2;\n}\nfunction $d2b4a77a4d44562c$export$819db45aec5fcbe5(ctx, strokeStyle, strokewidth, x1, y1, x2, y2) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\nfunction $d2b4a77a4d44562c$export$bec150f75a9b8f11(ctx, text, font, colour, x, y) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\nfunction $d2b4a77a4d44562c$export$c398604a09be5382(ctx, text, font) {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\nfunction $d2b4a77a4d44562c$export$37827d046293d309(ctx, text, font) {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}\n\n\n\nclass $613b909b2797b099$export$b33a132661f4be58 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:bathGas\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     * @param molecules The molecules.\n     */ constructor(attributes, moleculeID, molecules){\n        super(attributes, $613b909b2797b099$export$b33a132661f4be58.tagName, moleculeID);\n        this.molecules = molecules;\n    }\n    getMolecule() {\n        return this.molecules.get(this.value);\n    }\n}\nclass $613b909b2797b099$export$ea088383ce76fc5a extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:experimentRate\";\n    }\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */ constructor(attributes, value){\n        super(attributes, $613b909b2797b099$export$ea088383ce76fc5a.tagName, value);\n    }\n}\nclass $613b909b2797b099$export$3961bdb9130b90e7 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PTpair\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */ constructor(attributes, bathGas, experimentRate){\n        super(attributes, $613b909b2797b099$export$3961bdb9130b90e7.tagName);\n        this.index = new Map();\n        if (bathGas) {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate) {\n            this.index.set($613b909b2797b099$export$ea088383ce76fc5a.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n    /**\n     * @returns The Pressure.\n     */ getP() {\n        if (this.attributes != undefined) {\n            let p = this.attributes.get(\"P\");\n            if (p) return parseFloat(p);\n            else throw new Error(\"P is undefined\");\n        }\n        return NaN;\n    }\n    /**\n     * Set The Pressure\n     */ setP(p) {\n        if (this.attributes != undefined) this.attributes.set(\"P\", p.toString());\n    }\n    /**\n     * @returns The Temperature.\n     */ getT() {\n        if (this.attributes != undefined) {\n            let t = this.attributes.get(\"T\");\n            if (t) return parseFloat(t);\n            else throw new Error(\"T is undefined\");\n        }\n        return NaN;\n    }\n    /**\n     * Set The Temperature.\n     */ setT(t) {\n        if (this.attributes != undefined) this.attributes.set(\"T\", t.toString());\n    }\n    /**\n     * @returns The bath gas.\n     */ getBathGas() {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param bathGas The bath gas.\n     */ setBathGas(bathGas) {\n        let i = this.index.get($613b909b2797b099$export$b33a132661f4be58.tagName);\n        if (i) this.nodes.set(i, bathGas);\n        else {\n            this.index.set($613b909b2797b099$export$b33a132661f4be58.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n    /**\n     * @returns The experiment rate.\n     */ getExperimentRate() {\n        let i = this.index.get($613b909b2797b099$export$ea088383ce76fc5a.tagName);\n        if (i) return this.nodes.get(i);\n        else return undefined;\n    }\n    /**\n     * @param experimentRate The experiment rate.\n     */ setExperimentRate(experimentRate) {\n        let i = this.index.get($613b909b2797b099$export$ea088383ce76fc5a.tagName);\n        if (i) this.nodes.set(i, experimentRate);\n        else {\n            this.index.set($613b909b2797b099$export$ea088383ce76fc5a.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n}\nclass $613b909b2797b099$export$3be0efe793283834 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:PTs\";\n    }\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PT[]} pTs The PTs.\n     */ constructor(attributes, pTs){\n        super(attributes, $613b909b2797b099$export$3be0efe793283834.tagName);\n        pTs.forEach((pTpair)=>{\n            this.addNode(pTpair);\n        });\n    }\n    /**\n     * @param index The index of the PT pair to return.\n     * @returns The PT pair at the given index.\n     */ getPTpair(index) {\n        return this.nodes.get(index);\n    }\n    /**\n     * Set the PT at the given index.\n     * @returns The PT pairs.\n     */ setPTpair(index, pT) {\n        this.nodes.set(index, pT);\n    }\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     * @returns The index of the PT added.\n     */ addPTpair(pT) {\n        return this.addNode(pT);\n    }\n}\nclass $613b909b2797b099$export$363c7374d425f4ad extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:conditions\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */ constructor(attributes, bathGas, pTs){\n        super(attributes, $613b909b2797b099$export$363c7374d425f4ad.tagName);\n        this.addNode(bathGas);\n        this.addNode(pTs);\n    }\n    /**\n     * @returns The bath gas.\n     */ getBathGas() {\n        return this.nodes.get(0);\n    }\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */ getPTs() {\n        return this.nodes.get(1);\n    }\n}\n\n\n\nclass $9a96fbd0df1ae67b$export$26e33f0df9ce919d extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:grainSize\";\n    }\n    /**\n     * @param {string} value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$26e33f0df9ce919d.tagName, value);\n    }\n    toString() {\n        return `GrainSize(${super.toString()})`;\n    }\n}\nclass $9a96fbd0df1ae67b$export$aa73446724166cdb extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:energyAboveTheTopHill\";\n    }\n    /**\n     * @param {string} value The value.\n     */ constructor(attributes, value){\n        super(attributes, $9a96fbd0df1ae67b$export$aa73446724166cdb.tagName, value);\n    }\n}\nclass $9a96fbd0df1ae67b$export$77f098867dc64198 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:modelParameters\";\n    }\n    constructor(grainSize, energyAboveTheTopHill){\n        super(new Map(), $9a96fbd0df1ae67b$export$77f098867dc64198.tagName);\n        this.addNode(grainSize);\n        this.addNode(energyAboveTheTopHill);\n    }\n    /**\n     * @returns The grain size.\n     */ getGrainSize() {\n        return this.nodes.get(0);\n    }\n    /**\n     * @returns The energy above the top hill.\n     */ getEnergyAboveTheTopHill() {\n        return this.nodes.get(1);\n    }\n}\n\n\n\nclass $d0ae5bc6e682c29f$export$a3d7e677521f681f extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printSpeciesProfile\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$1f37c7c73e401f31 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testMicroRates\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$980e5abe9a459423 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:testRateConstant\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$d23243bda4dfae2b extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$60b233651e162b60 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printCellDOS\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$60b233651e162b60.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$a915db169f144f37 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printReactionOperatorColumnSums\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$a915db169f144f37.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$8a58e03b7b3f0f47 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printTunnellingCoefficients\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$8a58e03b7b3f0f47.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$f8d814a406a0ff5b extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainkfE\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$e7fff349901f700d extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainBoltzmann\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$55888ef4e813a34d extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:printGrainkbE\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$2453e311f702d9c7 extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:eigenvalues\";\n    }\n    constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$9d51752a8549e2d6 extends (0, $6648a11f147a5c05$export$3288d34c523a1192) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:hideInactive\";\n    }\n    constructor(){\n        super($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName);\n    }\n}\nclass $d0ae5bc6e682c29f$export$159b5d3263f1049a extends (0, $6648a11f147a5c05$export$82583fad49645fc9) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:diagramEnergyOffset\";\n    }\n    constructor(attributes, value){\n        super(attributes, $d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName, value);\n    }\n}\nclass $d0ae5bc6e682c29f$export$7a7fa4424cb20976 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"me:control\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param testDOS The testDOS.\n     * @param printSpeciesProfile The printSpeciesProfile.\n     * @param testMicroRates The testMicroRates.\n     * @param testRateConstant T\n     * @param printGrainDOS The printGrainDOS.\n     * @param printCellDOS The printCellDOS.\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     * @param printTunnellingCoefficients The printTunnellingCoefficients.\n     * @param printGrainkfE The printGrainkfE.\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     * @param printGrainkbE The printGrainkbE.\n     * @param eigenvalues The eigenvalues.\n     * @param hideInactive The hideInactive.\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */ constructor(attributes, testDOS, printSpeciesProfile, testMicroRates, testRateConstant, printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE, printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset){\n        super(attributes, $d0ae5bc6e682c29f$export$7a7fa4424cb20976.tagName);\n        this.index = new Map();\n        if (testDOS != undefined) {\n            this.addNode(testDOS);\n            this.index.set($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName, this.index.size);\n        }\n        if (printSpeciesProfile != undefined) {\n            this.addNode(printSpeciesProfile);\n            this.index.set($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName, this.index.size);\n        }\n        if (testMicroRates != undefined) {\n            this.addNode(testMicroRates);\n            this.index.set($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName, this.index.size);\n        }\n        if (testRateConstant != undefined) {\n            this.addNode(testRateConstant);\n            this.index.set($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName, this.index.size);\n        }\n        if (printGrainDOS != undefined) {\n            this.addNode(printGrainDOS);\n            this.index.set($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName, this.index.size);\n        }\n        if (printCellDOS != undefined) {\n            this.addNode(printCellDOS);\n            this.index.set($d0ae5bc6e682c29f$export$60b233651e162b60.tagName, this.index.size);\n        }\n        if (printReactionOperatorColumnSums != undefined) {\n            this.addNode(printReactionOperatorColumnSums);\n            this.index.set($d0ae5bc6e682c29f$export$a915db169f144f37.tagName, this.index.size);\n        }\n        if (printTunnellingCoefficients != undefined) {\n            this.addNode(printTunnellingCoefficients);\n            this.index.set($d0ae5bc6e682c29f$export$8a58e03b7b3f0f47.tagName, this.index.size);\n        }\n        if (printGrainkfE != undefined) {\n            this.addNode(printGrainkfE);\n            this.index.set($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName, this.index.size);\n        }\n        if (printGrainBoltzmann != undefined) {\n            this.addNode(printGrainBoltzmann);\n            this.index.set($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName, this.index.size);\n        }\n        if (printGrainkbE != undefined) {\n            this.addNode(printGrainkbE);\n            this.index.set($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName, this.index.size);\n        }\n        if (eigenvalues != undefined) {\n            this.addNode(eigenvalues);\n            this.index.set($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName, this.index.size);\n        }\n        if (hideInactive != undefined) {\n            this.addNode(hideInactive);\n            this.index.set($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName, this.index.size);\n        }\n        if (diagramEnergyOffset != undefined) {\n            this.addNode(diagramEnergyOffset);\n            this.index.set($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName, this.index.size);\n        }\n    }\n    getTestDOS() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$a3d7e677521f681f.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintSpeciesProfile() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getTestMicroRates() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$1f37c7c73e401f31.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getTestRateConstant() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$980e5abe9a459423.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintGrainDOS() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$d23243bda4dfae2b.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintCellDOS() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$60b233651e162b60.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintReactionOperatorColumnSums() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$a915db169f144f37.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintTunnellingCoefficients() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$8a58e03b7b3f0f47.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintGrainkfE() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$f8d814a406a0ff5b.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintGrainBoltzmann() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$e7fff349901f700d.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getPrintGrainkbE() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$55888ef4e813a34d.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getEigenvalues() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$2453e311f702d9c7.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getHideInactive() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$9d51752a8549e2d6.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n    getDiagramEnergyOffset() {\n        const index = this.index.get($d0ae5bc6e682c29f$export$159b5d3263f1049a.tagName) ?? -1;\n        if (index !== -1) return this.nodes.get(index);\n        return undefined;\n    }\n}\n\n\n\n\n\n\n/**\n * The header of the XML file.\n */ const $762f625c179c0279$var$header = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\nclass $762f625c179c0279$export$f99233281efd08a0 extends (0, $6648a11f147a5c05$export$8f67221c6fb2ad09) {\n    static{\n        this.tagName = \"me:title\";\n    }\n    /**\n     * @param value \n     */ constructor(attributes, value){\n        super(attributes, $762f625c179c0279$export$f99233281efd08a0.tagName, value);\n    }\n}\nclass $762f625c179c0279$export$19d70f3647dee606 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"moleculeList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */ constructor(attributes, molecules){\n        super(attributes, $762f625c179c0279$export$19d70f3647dee606.tagName);\n        this.index = new Map();\n        if (molecules != undefined) molecules.forEach((molecule)=>{\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */ getMolecule(id) {\n        let i = this.index.get(id);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */ removeMolecule(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */ addMolecule(molecule) {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log(\"Replaced molecule with id \" + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$44466a39ca846289 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        /**\n     * The tag name.\n     */ this.tagName = \"reactionList\";\n    }\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */ constructor(attributes, reactions){\n        super(attributes, $762f625c179c0279$export$44466a39ca846289.tagName);\n        this.index = new Map();\n        if (reactions != undefined) reactions.forEach((reaction)=>{\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        });\n    }\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */ getReaction(id) {\n        let i = this.index.get(id);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */ removeReaction(id) {\n        let i = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */ addReaction(reaction) {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log(\"Replaced reaction with id \" + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\nclass $762f625c179c0279$export$692079bb871c6039 extends (0, $6648a11f147a5c05$export$bd431b64ad3b0433) {\n    static{\n        this.tagName = \"me:mesmer\";\n    }\n    constructor(attributes, moleculeList, reactionList, conditions, modelParameters, control){\n        super(attributes, $762f625c179c0279$export$692079bb871c6039.tagName);\n        this.index = new Map();\n        if (moleculeList != undefined) {\n            this.index.set($762f625c179c0279$export$19d70f3647dee606.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set($762f625c179c0279$export$44466a39ca846289.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        if (conditions != undefined) {\n            this.index.set((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n        if (modelParameters != undefined) {\n            this.index.set((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        if (control != undefined) {\n            this.index.set((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n    /**\n     * @returns The molecule list.\n     */ getMoleculeList() {\n        let i = this.index.get($762f625c179c0279$export$19d70f3647dee606.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */ setMoleculeList(moleculeList) {\n        let i = this.index.get($762f625c179c0279$export$19d70f3647dee606.tagName);\n        if (i != undefined) this.nodes.set(i, moleculeList);\n        else {\n            this.index.set($762f625c179c0279$export$19d70f3647dee606.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n    /**\n     * @returns The reaction list.\n     */ getReactionList() {\n        let i = this.index.get($762f625c179c0279$export$44466a39ca846289.tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */ setReactionList(reactionList) {\n        let i = this.index.get($762f625c179c0279$export$44466a39ca846289.tagName);\n        if (i != undefined) this.nodes.set(i, reactionList);\n        else {\n            this.index.set($762f625c179c0279$export$44466a39ca846289.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n    /**\n     * @returns The conditions.\n     */ getConditions() {\n        let i = this.index.get((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the conditions.\n     * @param conditions The conditions.\n     */ setConditions(conditions) {\n        let i = this.index.get((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n        if (i != undefined) this.nodes.set(i, conditions);\n        else {\n            this.index.set((0, $613b909b2797b099$export$363c7374d425f4ad).tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n    /**\n     * @returns The model parameters.\n     */ getModelParameters() {\n        let i = this.index.get((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */ setModelParameters(modelParameters) {\n        let i = this.index.get((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n        if (i != undefined) this.nodes.set(i, modelParameters);\n        else {\n            this.index.set((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n    /**\n     * @returns The control.\n     */ getControl() {\n        let i = this.index.get((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n        if (i == undefined) return undefined;\n        return this.nodes.get(i);\n    }\n    /**\n     * Set the control.\n     * @param control The control.\n     */ setControl(control) {\n        let i = this.index.get((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n        if (i != undefined) this.nodes.set(i, control);\n        else {\n            this.index.set((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n}\n\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */ let $22c7fca7c69edc03$var$molecules = new Map();\n/**\n * For storing the maximum molecule energy in a reaction.\n */ let $22c7fca7c69edc03$var$maxMoleculeEnergy = -Infinity;\n/**\n * For storing the minimum molecule energy in a reaction.\n */ let $22c7fca7c69edc03$var$minMoleculeEnergy = Infinity;\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */ let $22c7fca7c69edc03$var$reactions = new Map();\n/**\n * The filename of the mesmer input file loaded.\n */ let $22c7fca7c69edc03$var$input_xml_filename;\n/**\n * The load button.\n */ let $22c7fca7c69edc03$var$loadButton;\n/**\n * The save button.\n */ let $22c7fca7c69edc03$var$saveButton;\n/**\n * The XML text element.\n */ let $22c7fca7c69edc03$var$me_title;\nlet $22c7fca7c69edc03$var$molecules_title;\n//let moleculesDiv: HTMLElement | null;\nlet $22c7fca7c69edc03$var$reactions_title;\nlet $22c7fca7c69edc03$var$reactionsDiv;\nlet $22c7fca7c69edc03$var$conditions_title;\nlet $22c7fca7c69edc03$var$conditions_table;\nlet $22c7fca7c69edc03$var$modelParameters_title;\nlet $22c7fca7c69edc03$var$modelParameters_table;\nlet $22c7fca7c69edc03$var$xml_title;\nlet $22c7fca7c69edc03$var$xml_text;\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */ function $22c7fca7c69edc03$var$displayXML(xml) {\n    //console.log(\"xml=\" + xml);\n    if ($22c7fca7c69edc03$var$xml_title != null) $22c7fca7c69edc03$var$xml_title.innerHTML = $22c7fca7c69edc03$var$input_xml_filename;\n    if ($22c7fca7c69edc03$var$xml_text != null) $22c7fca7c69edc03$var$xml_text.innerHTML = (0, $6648a11f147a5c05$export$438fa7935f716bdf)(xml);\n}\n/**\n * Parse XML and create HTMLElement for molecules.\n * @param xml The XML.\n * @returns The HTMLElement.\n */ function $22c7fca7c69edc03$var$getMolecules(xml) {\n    // moleculesListDiv is the div that will contain the molecules list.\n    let moleculeListDiv = document.createElement(\"moleculesList\");\n    let xml_moleculeList = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $762f625c179c0279$export$19d70f3647dee606).tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames = new Set();\n    xml_moleculeList.childNodes.forEach(function(node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach((x)=>console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has((0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName)) throw new Error('Expecting tags with \"' + (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName + '\" tagName but there are none!');\n    // Process the XML \"molecule\" elements.\n    let xml_molecules = xml_moleculeList.getElementsByTagName((0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for(let i = 0; i < xml_molecules.length; i++){\n        let moleculeDiv = document.createElement(\"moleculeDiv\");\n        // Set attributes.\n        let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecules[i]);\n        let moleculeTagNames = new Set();\n        let cns = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for(let j = 0; j < cns.length; j++){\n            let cn = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) moleculeTagNames.add(cn.nodeName);\n            else // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n            if (cn.nodeName != \"#text\") console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n        //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n        // Init atomsNode.\n        let atomsNode;\n        // There can be an individual atom not in an atom array, or an attom array.\n        let xml_atomArrays = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName);\n        if (xml_atomArrays.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms = xml_atomArray.getElementsByTagName((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n            if (xml_atoms.length < 2) throw new Error(\"Expecting 2 or more atoms in \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \", but finding \" + xml_atoms.length + \"!\");\n            let atoms = [];\n            for(let j = 0; j < xml_atoms.length; j++)atoms.push(new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atoms[j])));\n            atomsNode = new (0, $7cb8c0739b32549c$export$9cea715eceba39a0)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atomArray), atoms);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName);\n        } else {\n            let xml_atoms = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n            if (xml_atoms.length == 1) atomsNode = new (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_atoms[0]));\n            else if (xml_atoms.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + (0, $7cb8c0739b32549c$export$9cea715eceba39a0).tagName + \"?\");\n        }\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$80986e6afdd7e0cb).tagName);\n        // Init bondsNode.\n        let bondsNode;\n        // There can be an individual bond not in a bond array, or a bond array.\n        let xml_bondArrays = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName);\n        if (xml_bondArrays.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n        if (xml_bondArrays.length == 1) {\n            let xml_bondArray = xml_bondArrays[0];\n            let xml_bonds = xml_bondArray.getElementsByTagName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n            // There may be only 1 bond in a BondArray.\n            let bonds = [];\n            for(let j = 0; j < xml_bonds.length; j++)bonds.push(new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bonds[j])));\n            bondsNode = new (0, $7cb8c0739b32549c$export$746fba2e30d93fe6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bondArray), bonds);\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName);\n        } else {\n            let xml_bonds = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n            if (xml_bonds.length == 1) bondsNode = new (0, $7cb8c0739b32549c$export$153327fc99ac0c53)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bonds[0]));\n            else if (xml_bonds.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + (0, $7cb8c0739b32549c$export$746fba2e30d93fe6).tagName + \"?\");\n        }\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$153327fc99ac0c53).tagName);\n        // Create molecule.\n        let molecule = new (0, $7cb8c0739b32549c$export$3da9759ad07746a3)(attributes, atomsNode, bondsNode);\n        $22c7fca7c69edc03$var$molecules.set(molecule.id, molecule);\n        // Add any propertyList or individual property.\n        // (There can be an individual property not in a propertyList?)\n        let xml_PLs = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n        if (xml_PLs.length > 1) throw new Error(\"Expecting 1 or 0 \" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \" but finding \" + xml_PLs.length + \"!\");\n        if (xml_PLs.length == 1) {\n            let pl = new (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PLs[0]));\n            let xml_Ps = xml_PLs[0].getElementsByTagName((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n            for(let j = 0; j < xml_Ps.length; j++){\n                let p = new (0, $7cb8c0739b32549c$export$41b04b3a73e7216d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_Ps[j]));\n                pl.setProperty(p);\n                molecule.setProperties(pl);\n                // Handle scalar or array property\n                let scalarNodes = xml_Ps[j].getElementsByTagName((0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName);\n                if (scalarNodes.length > 0) {\n                    if (scalarNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName + \" but finding \" + scalarNodes.length + \"!\");\n                    let inputString;\n                    let firstChildNode = (0, $6648a11f147a5c05$export$4e07613bf412feb7)(scalarNodes[0]);\n                    if (firstChildNode) inputString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)(firstChildNode).trim();\n                    else inputString = \"\";\n                    let value = parseFloat(inputString);\n                    let ps = new (0, $7cb8c0739b32549c$export$d29b345ea2be5072)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(scalarNodes[0]), value);\n                    p.setProperty(ps);\n                    let label = p.dictRef;\n                    // Create a new div element for the input.\n                    let inputDiv = (0, $2cda23d1e44619db$export$7c112ceec8941e67)(\"number\", molecule.id + \"_\" + p.dictRef, (event)=>{\n                        if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$4e634558561f5cca(p.dictRef, event.target);\n                    }, p.toString(), label);\n                    moleculeDiv.appendChild(inputDiv);\n                    let inputElement = inputDiv.querySelector(\"input\");\n                    inputElement.value = inputString;\n                    (0, $2cda23d1e44619db$export$4b454580398e92d5)(inputElement);\n                    inputElement.addEventListener(\"change\", (event)=>{\n                        let eventTarget = event.target;\n                        inputString = eventTarget.value;\n                        ps = p.getProperty();\n                        ps.value = parseFloat(inputString);\n                        console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                        (0, $2cda23d1e44619db$export$4b454580398e92d5)(inputElement);\n                    });\n                } else {\n                    let arrayNodes = xml_Ps[j].getElementsByTagName((0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName);\n                    if (arrayNodes.length > 0) {\n                        if (arrayNodes.length != 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName + \" but finding \" + arrayNodes.length + \"!\");\n                        let inputString;\n                        let firstChildNode = (0, $6648a11f147a5c05$export$4e07613bf412feb7)(arrayNodes[0]);\n                        if (firstChildNode) inputString = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)(firstChildNode).trim();\n                        else inputString = \"No value for \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName + \" \" + (0, $dcf293d9ee452407$export$dc22ec7f8e0b9ac)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_Ps[j]));\n                        let values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n                        let pa = new (0, $7cb8c0739b32549c$export$9f93a3fdf2490572)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(arrayNodes[0]), values);\n                        p.setProperty(pa);\n                        let label = p.dictRef;\n                        // Create a new div element for the input.\n                        let inputDiv = (0, $2cda23d1e44619db$export$7c112ceec8941e67)(\"number\", molecule.id + \"_\" + p.dictRef, (event)=>{\n                            if (event.target instanceof HTMLInputElement) $22c7fca7c69edc03$export$c01f4ac2c1d26a5a(p.dictRef, event.target);\n                        }, p.toString(), label);\n                        moleculeDiv.appendChild(inputDiv);\n                        let inputElement = inputDiv.querySelector(\"input\");\n                        inputElement.value = inputString;\n                        (0, $2cda23d1e44619db$export$4b454580398e92d5)(inputElement);\n                        inputElement.addEventListener(\"change\", (event)=>{\n                            let eventTarget = event.target;\n                            inputString = eventTarget.value;\n                            pa = p.getProperty();\n                            values = (0, $dcf293d9ee452407$export$8cfbaad830aa9e0a)(inputString.split(/\\s+/));\n                            pa.values = values;\n                            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                            (0, $2cda23d1e44619db$export$4b454580398e92d5)(inputElement);\n                        });\n                    } else throw new Error(\"Expecting \" + (0, $7cb8c0739b32549c$export$d29b345ea2be5072).tagName + \" or \" + (0, $7cb8c0739b32549c$export$9f93a3fdf2490572).tagName);\n                }\n            }\n            moleculeTagNames.delete((0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName);\n        } else {\n            let xml_Ps = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n            if (xml_Ps.length > 1) throw new Error(\"Expecting 1 \" + (0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + (0, $7cb8c0739b32549c$export$4e0d1ad7ad6a0802).tagName + \"?\");\n        }\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$41b04b3a73e7216d).tagName);\n        let els;\n        // Read energyTransferModel\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        els = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$499950da20810ac9).tagName);\n        if (els != null) {\n            if (els.length > 0) {\n                if (els.length != 1) throw new Error(\"energyTransferModel length=\" + els.length);\n                let xml_deltaEDown = els[0].getElementsByTagName((0, $7cb8c0739b32549c$export$16fc56ab40b12b45).tagName);\n                if (xml_deltaEDown != null) {\n                    let deltaEDowns = [];\n                    for(let k = 0; k < xml_deltaEDown.length; k++){\n                        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_deltaEDown[k])));\n                        let deltaEDown = new (0, $7cb8c0739b32549c$export$16fc56ab40b12b45)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_deltaEDown[k]), value);\n                        deltaEDowns.push(deltaEDown);\n                    }\n                    let etm = new (0, $7cb8c0739b32549c$export$499950da20810ac9)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(els[0]), deltaEDowns);\n                    molecule.setEnergyTransferModel(etm);\n                //addEventListenerMoleculeProperty(molecule, etm);\n                }\n            }\n        }\n        // Read DOSCMethod\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName);\n        els = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$bbdce6c921702068).tagName);\n        if (els != null) {\n            let el = els[0];\n            if (el != null) molecule.setDOSCMethod(new (0, $7cb8c0739b32549c$export$bbdce6c921702068)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(el)));\n        }\n        // Read ExtraDOSCMethod.\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n        els = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$ae98b7db6376163d).tagName);\n        if (els.length > 0) {\n            if (els.length != 1) throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + els.length);\n            // Read bondRef.\n            let bondRefs = els[0].getElementsByTagName((0, $7cb8c0739b32549c$export$aef8e5ad5552fd72).tagName);\n            let bondRef;\n            if (bondRefs.length > 0) {\n                if (bondRefs.length != 1) throw new Error(\"Expecting only 1 bondRef, but there are \" + bondRefs.length);\n                bondRef = new (0, $7cb8c0739b32549c$export$aef8e5ad5552fd72)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(bondRefs[0]), (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(bondRefs[0])));\n            }\n            // Read hunderedRotorPotential.\n            let hinderedRotorPotentials = els[0].getElementsByTagName((0, $7cb8c0739b32549c$export$9b8e857b9a081d2).tagName);\n            let hinderedRotorPotential;\n            if (hinderedRotorPotentials.length > 0) {\n                if (hinderedRotorPotentials.length != 1) throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + hinderedRotorPotentials.length);\n                // Load PotentialPoints.\n                let potentialPoints = [];\n                let xml_potentialPoints = hinderedRotorPotentials[0].getElementsByTagName((0, $7cb8c0739b32549c$export$86ca5149fcde8feb).tagName);\n                for(let k = 0; k < xml_potentialPoints.length; k++)potentialPoints.push(new (0, $7cb8c0739b32549c$export$86ca5149fcde8feb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_potentialPoints[k])));\n                hinderedRotorPotential = new (0, $7cb8c0739b32549c$export$9b8e857b9a081d2)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(hinderedRotorPotentials[0]), potentialPoints);\n            }\n            // Read periodicities.\n            let xml_periodicities = els[0].getElementsByTagName((0, $7cb8c0739b32549c$export$9513c16afdf7d852).tagName);\n            let periodicity;\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                periodicity = new (0, $7cb8c0739b32549c$export$9513c16afdf7d852)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_periodicities[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_periodicities[0]))));\n            }\n            molecule.setExtraDOSCMethod(new (0, $7cb8c0739b32549c$export$ae98b7db6376163d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(els[0]), bondRef, hinderedRotorPotential, periodicity));\n        }\n        // Read reservoirSize.\n        moleculeTagNames.delete((0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n        els = xml_molecules[i].getElementsByTagName((0, $7cb8c0739b32549c$export$97850fe2f2906f00).tagName);\n        if (els.length > 0) {\n            if (els.length != 1) throw new Error(\"Expecting only 1 reservoirSize, but there are \" + els.length);\n            molecule.setReservoirSize(new (0, $7cb8c0739b32549c$export$97850fe2f2906f00)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(els[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(els[0])))));\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach((x)=>console.warn(x));\n        //throw new Error(\"Unexpected tags in molecule.\");\n        }\n        let buttonId = \"buttonId\";\n        let buttonLabel = molecule.getLabel();\n        let contentDivId = molecule.tagName + \"_\" + molecule.id;\n        //let collapsibleDiv = getCollapsibleDiv(buttonId, buttonLabel, paragraph, contentDivId);\n        let collapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)(buttonId, buttonLabel, moleculeDiv, contentDivId);\n        moleculeListDiv.appendChild(collapsibleDiv);\n    }\n    return moleculeListDiv;\n}\nfunction $22c7fca7c69edc03$export$c01f4ac2c1d26a5a(dictRef, input) {\n    let inputId = input.id;\n    let moleculeID = inputId.split(\"_\")[0];\n    let molecule = $22c7fca7c69edc03$var$molecules.get(moleculeID);\n    if (molecule) {\n        let inputString = input.value;\n        let values = inputString.split(/\\s+/);\n        let pA = molecule.getProperty(dictRef).getProperty();\n        //console.log(\"propertyArray=\" + propertyArray);\n        let pAValues = pA.values;\n        let n = pAValues.length;\n        let success = true;\n        values.forEach(function(value) {\n            if (!(0, $dcf293d9ee452407$export$e90fb89750dba83f)(value)) success = false;\n        });\n        if (!success) {\n            alert(dictRef + \" input for \" + moleculeID + \" is not a number, resetting...\");\n            let input = document.getElementById(inputId);\n            input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(pAValues, \" \");\n            return;\n        }\n        if (values.length == n) {\n            let inputPAValues = inputString.split(\" \").map(Number);\n            pA.values = inputPAValues;\n            console.log(\"Changed \" + dictRef + \" input for \" + moleculeID + \" from: \" + inputString + \" to: \" + (0, $dcf293d9ee452407$export$4323cc4280d5be7)(inputPAValues, \" \"));\n        //console.log(\"molecule=\" + molecule);\n        } else {\n            alert(\"Expecting \" + n + \" \" + dictRef + \" values for \" + moleculeID + \" but finding \" + values.length + \" resetting...\");\n            let input = document.getElementById(inputId);\n            input.value = (0, $dcf293d9ee452407$export$4323cc4280d5be7)(pAValues, \" \");\n        }\n    }\n}\nwindow.setPropertyArray = $22c7fca7c69edc03$export$c01f4ac2c1d26a5a;\nfunction $22c7fca7c69edc03$export$4e634558561f5cca(dictRef, input) {\n    let inputId = input.id;\n    let moleculeID = inputId.split(\"_\")[0];\n    let molecule = $22c7fca7c69edc03$var$molecules.get(moleculeID);\n    if (molecule != undefined) {\n        let ps = molecule.getProperty(dictRef).getProperty();\n        if ((0, $dcf293d9ee452407$export$e90fb89750dba83f)(input.value)) {\n            let inputNumber = parseFloat(input.value);\n            ps.value = inputNumber;\n            console.log(dictRef + \" of \" + moleculeID + \" set to \" + inputNumber);\n        } else {\n            alert(dictRef + \" input for \" + moleculeID + \" is not numeric, resetting...\");\n            let inputElement = document.getElementById(inputId);\n            let value = ps.value;\n            if (value != undefined) inputElement.value = value.toString();\n        }\n    //console.log(\"molecule=\" + molecule);\n    }\n}\nwindow.setProperty = $22c7fca7c69edc03$export$4e634558561f5cca;\n/**\n * Load the XML file.\n */ function $22c7fca7c69edc03$var$loadXML() {\n    let inputElement = document.createElement(\"input\");\n    inputElement.type = \"file\";\n    inputElement.onchange = function() {\n        if (inputElement.files) {\n            for(let i = 0; i < inputElement.files.length; i++)console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            let file = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            $22c7fca7c69edc03$var$input_xml_filename = file.name;\n            if ($22c7fca7c69edc03$var$xml_text != null) {\n                let reader = new FileReader();\n                let chunkSize = 1048576; // 1MB\n                let start = 0;\n                let contents = \"\";\n                reader.onload = function(e) {\n                    if (e.target == null) throw new Error(\"Event target is null\");\n                    contents += e.target.result;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            $22c7fca7c69edc03$var$displayXML(contents);\n                            let parser = new DOMParser();\n                            let xml = parser.parseFromString(contents, \"text/xml\");\n                            $22c7fca7c69edc03$var$parse(xml);\n                        /*\n                            // Sending to the server for validation is no longer implemented as there is currently no server.\n                            // Send XML to the server\n                            fetch('http://localhost:1234/', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'text/xml',\n                                },\n                                body: contents,\n                            })\n                                .then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(`HTTP error! status: ${response.status}`);\n                                    }\n                                    return response.text();\n                                })\n                                .then(data => {\n                                    console.log('Server response:', data);\n                                })\n                                .catch(error => {\n                                    console.error('There was a problem with the fetch operation:', error);\n                                });\n                            */ }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        }\n    };\n    inputElement.click();\n    // Add event listener to load button.\n    $22c7fca7c69edc03$var$loadButton = document.getElementById(\"load_button\");\n    if ($22c7fca7c69edc03$var$loadButton != null) //loadButton.addEventListener('click', reload);\n    $22c7fca7c69edc03$var$loadButton.addEventListener(\"click\", $22c7fca7c69edc03$var$loadXML);\n    // Ensure save button is displayed.\n    $22c7fca7c69edc03$var$saveButton = document.getElementById(\"saveButton\");\n    if ($22c7fca7c69edc03$var$saveButton != null) $22c7fca7c69edc03$var$saveButton.style.display = \"inline\";\n}\n/**\n * Once the DOM is loaded, set up the elements.\n */ document.addEventListener(\"DOMContentLoaded\", (event)=>{\n    // Initialise elements\n    $22c7fca7c69edc03$var$xml_title = document.getElementById(\"xml_title\");\n    $22c7fca7c69edc03$var$xml_text = document.getElementById(\"xml_text\");\n    // Set up for XML loading.\n    window.loadXML = function() {\n        $22c7fca7c69edc03$var$loadXML();\n    //reload();\n    };\n});\n/**\n * Parse the XML.\n * @param {XMLDocument} xml \n */ function $22c7fca7c69edc03$var$parse(xml) {\n    // Title.\n    let xml_title = xml.getElementsByTagName((0, $762f625c179c0279$export$f99233281efd08a0).tagName);\n    if (xml_title.length != 1) throw new Error(\"Multiple \" + (0, $762f625c179c0279$export$f99233281efd08a0).tagName + \" tags found\");\n    else {\n        let title = xml_title[0].childNodes[0].nodeValue.trim();\n        let titleNode = new (0, $762f625c179c0279$export$f99233281efd08a0)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_title[0]), title);\n        let titleElement = document.getElementById(\"title\");\n        // Create a new input element.\n        let inputElement = document.createElement(\"input\");\n        inputElement.type = \"text\";\n        inputElement.value = title;\n        // Apply CSS styles to make the input text appear like a h1.\n        //inputElement.style.fontSize = '2em';\n        //inputElement.style.fontWeight = 'bold';\n        // Create a text node.\n        let textNode = document.createTextNode(\"Title: \");\n        // Insert the text node before the input element in the parent node.\n        titleElement.parentNode?.insertBefore(textNode, titleElement);\n        (0, $2cda23d1e44619db$export$4b454580398e92d5)(inputElement, 0);\n        // Replace the existing title element with the new input element.\n        titleElement.parentNode?.replaceChild(inputElement, titleElement);\n        console.log(\"inputElement.value=\" + inputElement.value);\n        // Add event listener to inputElement.\n        inputElement.addEventListener(\"change\", function() {\n            if (inputElement.value != title) titleNode.value = inputElement.value;\n            (0, $2cda23d1e44619db$export$4b454580398e92d5)(inputElement, 0);\n        });\n        // Molecules\n        // Create a collapsible div for molecules\n        let moleculesElement = document.getElementById(\"molecules\");\n        let paragraph = document.createElement(\"p\");\n        paragraph.innerHTML = \"Moleculesvfdafdfdsfds\";\n        let moleculeListElement = $22c7fca7c69edc03$var$getMolecules(xml);\n        let buttonId = \"buttonId\";\n        let buttonLabel = \"Molecules\";\n        let contentDivId = \"moleculesList\";\n        //let collapsibleDiv = getCollapsibleDiv(buttonId, buttonLabel, paragraph, contentDivId);\n        let collapsibleDiv = (0, $2cda23d1e44619db$export$8b2cd46c11844202)(buttonId, buttonLabel, moleculeListElement, contentDivId);\n        moleculesElement.appendChild(collapsibleDiv);\n        // Reactions\n        // Create a collapsible div for reactions\n        (0, $2cda23d1e44619db$export$2883f21c1f82e07d)();\n    }\n/**\n     * Generate molecules table.\n     */ //initMolecules(xml);\n//displayMolecules();\n/**\n     * Generate reactions table.\n     */ //initReactions(xml);\n//displayReactions();\n//addEventListeners();\n//displayReactionsDiagram();\n/**\n     * Generate conditions table.\n     */ //initConditions(xml);\n//displayConditions();\n/**\n     * Generate parameters table.\n     */ //initModelParameters(xml);\n//displayModelParameters();\n/**\n     * Generate control table.\n     */ //initControl(xml);\n//displayControl();\n}\nlet $22c7fca7c69edc03$var$conditions;\n/**\n * Parse xml to initialise conditions.\n * @param {XMLDocument} xml The XML document.\n */ function $22c7fca7c69edc03$var$initConditions(xml) {\n    console.log((0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n    let xml_conditions = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $613b909b2797b099$export$363c7374d425f4ad).tagName);\n    // Set conditions_title.\n    $22c7fca7c69edc03$var$conditions_title = document.getElementById(\"conditions_title\");\n    if ($22c7fca7c69edc03$var$conditions_title != null) $22c7fca7c69edc03$var$conditions_title.innerHTML = \"Conditions\";\n    // BathGas\n    let xml_bathGas = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_conditions, (0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n    let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bathGas);\n    let moleculeID = (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bathGas));\n    let bathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)(attributes, moleculeID, $22c7fca7c69edc03$var$molecules);\n    // PTs\n    let xml_PTs = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml_conditions, \"me:PTs\");\n    let xml_PTPairs = xml_PTs.getElementsByTagName((0, $613b909b2797b099$export$3961bdb9130b90e7).tagName);\n    // Process each PTpair.\n    let pTs = [];\n    for(let i = 0; i < xml_PTPairs.length; i++){\n        // Add optional BathGas\n        let xml_bathGass = xml_PTPairs[i].getElementsByTagName((0, $613b909b2797b099$export$b33a132661f4be58).tagName);\n        let pTBathGas;\n        if (xml_bathGass.length > 0) {\n            if (xml_bathGass.length > 1) console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n            pTBathGas = new (0, $613b909b2797b099$export$b33a132661f4be58)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_bathGass[0]), (0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_bathGass[0])), $22c7fca7c69edc03$var$molecules);\n            console.log(\"pTBathGas\" + pTBathGas.toString());\n        }\n        // Add optional ExperimentRate\n        let xml_experimentRates = xml_PTPairs[i].getElementsByTagName((0, $613b909b2797b099$export$ea088383ce76fc5a).tagName);\n        let experimentRate;\n        if (xml_experimentRates.length > 0) {\n            if (xml_experimentRates.length > 1) console.warn(\"xml_experimentRates.length=\" + xml_experimentRates.length);\n            experimentRate = new (0, $613b909b2797b099$export$ea088383ce76fc5a)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_experimentRates[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_experimentRates[0]))));\n            console.log(\"experimentRate\" + experimentRate.toString());\n        }\n        pTs.push(new (0, $613b909b2797b099$export$3961bdb9130b90e7)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTPairs[i]), pTBathGas, experimentRate));\n    //console.log(pTs[i].toString()); // For debugging.\n    }\n    $22c7fca7c69edc03$var$conditions = new (0, $613b909b2797b099$export$363c7374d425f4ad)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_conditions), bathGas, new (0, $613b909b2797b099$export$3be0efe793283834)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_PTs), pTs));\n}\nlet $22c7fca7c69edc03$var$modelParameters;\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */ function $22c7fca7c69edc03$var$initModelParameters(xml) {\n    console.log((0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n    let xml_modelParameters = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $9a96fbd0df1ae67b$export$77f098867dc64198).tagName);\n    // Set modelParameters_title.\n    $22c7fca7c69edc03$var$modelParameters_title = document.getElementById(\"modelParameters_title\");\n    if ($22c7fca7c69edc03$var$modelParameters_title != null) $22c7fca7c69edc03$var$modelParameters_title.innerHTML = \"Model Parameters\";\n    // GrainSize\n    let xml_grainSize = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml_modelParameters, (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d).tagName);\n    let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_grainSize);\n    let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_grainSize)));\n    let grainSize = new (0, $9a96fbd0df1ae67b$export$26e33f0df9ce919d)(attributes, value);\n    // EnergyAboveTheTopHill\n    let xml_energyAboveTheTopHill = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml_modelParameters, (0, $9a96fbd0df1ae67b$export$aa73446724166cdb).tagName);\n    let energyAboveTheTopHill = new (0, $9a96fbd0df1ae67b$export$aa73446724166cdb)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_energyAboveTheTopHill), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_energyAboveTheTopHill))));\n    $22c7fca7c69edc03$var$modelParameters = new (0, $9a96fbd0df1ae67b$export$77f098867dc64198)(grainSize, energyAboveTheTopHill);\n}\nlet $22c7fca7c69edc03$var$control;\n/**\n * Parses xml to initialise control.\n * @param {XMLDocument} xml The XML document.\n */ function $22c7fca7c69edc03$var$initControl(xml) {\n    console.log((0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n    let xml_control = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976).tagName);\n    // Set control_title.\n    let control_title = document.getElementById(\"control_title\");\n    if (control_title != null) control_title.innerHTML = \"Control\";\n    // me:testDOS\n    let xml_testDOS = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$a3d7e677521f681f).tagName);\n    let testDOS;\n    if (xml_testDOS.length == 1) testDOS = new (0, $d0ae5bc6e682c29f$export$a3d7e677521f681f)();\n    else if (xml_testDOS.length > 1) console.warn(\"testDOS.length=\" + xml_testDOS.length);\n    // me:printSpeciesProfile\n    let xml_printSpeciesProfile = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1).tagName);\n    let printSpeciesProfile;\n    if (xml_printSpeciesProfile.length == 1) printSpeciesProfile = new (0, $d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1)();\n    else if (xml_printSpeciesProfile.length > 1) console.warn(\"printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n    // me:testMicroRates\n    let xml_testMicroRates = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31).tagName);\n    let testMicroRates;\n    if (xml_testMicroRates.length == 1) testMicroRates = new (0, $d0ae5bc6e682c29f$export$1f37c7c73e401f31)();\n    else if (xml_testMicroRates.length > 1) console.warn(\"testMicroRates.length=\" + xml_testMicroRates.length);\n    // me:testRateConstant\n    let xml_testRateConstant = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$980e5abe9a459423).tagName);\n    let testRateConstant;\n    if (xml_testRateConstant.length == 1) testRateConstant = new (0, $d0ae5bc6e682c29f$export$980e5abe9a459423)();\n    else if (xml_testRateConstant.length > 1) console.warn(\"testRateConstant.length=\" + xml_testRateConstant.length);\n    // me:printGrainDOS\n    let xml_printGrainDOS = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b).tagName);\n    let printGrainDOS;\n    if (xml_printGrainDOS.length == 1) printGrainDOS = new (0, $d0ae5bc6e682c29f$export$d23243bda4dfae2b)();\n    else if (xml_printGrainDOS.length > 1) console.warn(\"printGrainDOS.length=\" + xml_printGrainDOS.length);\n    // me:printCellDOS\n    let xml_printCellDOS = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$60b233651e162b60).tagName);\n    let printCellDOS;\n    if (xml_printCellDOS.length == 1) printCellDOS = new (0, $d0ae5bc6e682c29f$export$60b233651e162b60)();\n    else if (xml_printCellDOS.length > 1) console.warn(\"printCellDOS.length=\" + xml_printCellDOS.length);\n    // me:printReactionOperatorColumnSums\n    let xml_printReactionOperatorColumnSums = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$a915db169f144f37).tagName);\n    let printReactionOperatorColumnSums;\n    if (xml_printReactionOperatorColumnSums.length == 1) printReactionOperatorColumnSums = new (0, $d0ae5bc6e682c29f$export$a915db169f144f37)();\n    else if (xml_printReactionOperatorColumnSums.length > 1) console.warn(\"printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n    // me:printTunnellingCoefficients\n    let xml_printTunnellingCoefficients = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$8a58e03b7b3f0f47).tagName);\n    let printTunnellingCoefficients;\n    if (xml_printTunnellingCoefficients.length == 1) printTunnellingCoefficients = new (0, $d0ae5bc6e682c29f$export$8a58e03b7b3f0f47)();\n    else if (xml_printTunnellingCoefficients.length > 1) console.warn(\"printTunnellingCoefficients.length=\" + xml_printTunnellingCoefficients.length);\n    // me:printGrainkfE\n    let xml_printGrainkfE = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b).tagName);\n    let printGrainkfE;\n    if (xml_printGrainkfE.length == 1) printGrainkfE = new (0, $d0ae5bc6e682c29f$export$f8d814a406a0ff5b)();\n    else if (xml_printGrainkfE.length > 1) console.warn(\"printGrainkfE.length=\" + xml_printGrainkfE.length);\n    // me:printGrainBoltzmann\n    let xml_printGrainBoltzmann = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$e7fff349901f700d).tagName);\n    let printGrainBoltzmann;\n    if (xml_printGrainBoltzmann.length == 1) printGrainBoltzmann = new (0, $d0ae5bc6e682c29f$export$e7fff349901f700d)();\n    else if (xml_printGrainBoltzmann.length > 1) console.warn(\"printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n    // me:printGrainkbE\n    let xml_printGrainkbE = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$55888ef4e813a34d).tagName);\n    let printGrainkbE;\n    if (xml_printGrainkbE.length == 1) printGrainkbE = new (0, $d0ae5bc6e682c29f$export$55888ef4e813a34d)();\n    else if (xml_printGrainkbE.length > 1) console.warn(\"printGrainkbE.length=\" + xml_printGrainkbE.length);\n    // me:eigenvalues\n    let xml_eigenvalues = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$2453e311f702d9c7).tagName);\n    let eigenvalues;\n    if (xml_eigenvalues.length == 1) eigenvalues = new (0, $d0ae5bc6e682c29f$export$2453e311f702d9c7)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_eigenvalues[0]), parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_eigenvalues[0]))));\n    else console.warn(\"eigenvalues.length=\" + xml_eigenvalues.length);\n    // me:hideInactive\n    let xml_hideInactive = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6).tagName);\n    let hideInactive;\n    if (xml_hideInactive.length == 1) hideInactive = new (0, $d0ae5bc6e682c29f$export$9d51752a8549e2d6)();\n    else console.warn(\"hideInactive.length=\" + xml_hideInactive.length);\n    // me:diagramEnergyOffset\n    let xml_diagramEnergyOffset = xml_control.getElementsByTagName((0, $d0ae5bc6e682c29f$export$159b5d3263f1049a).tagName);\n    let diagramEnergyOffset;\n    if (xml_diagramEnergyOffset.length == 1) {\n        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffset = new (0, $d0ae5bc6e682c29f$export$159b5d3263f1049a)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_diagramEnergyOffset[0]), value);\n    } else console.warn(\"diagramEnergyOffset.length=\" + xml_diagramEnergyOffset.length);\n    $22c7fca7c69edc03$var$control = new (0, $d0ae5bc6e682c29f$export$7a7fa4424cb20976)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_control), testDOS, printSpeciesProfile, testMicroRates, testRateConstant, printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE, printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset);\n}\n/**\n * Parses xml to initialise reactions.\n * @param {XMLDocument} xml The XML document.\n */ function $22c7fca7c69edc03$var$initReactions(xml) {\n    let reactionList_s = \"reactionList\";\n    console.log(reactionList_s);\n    let xml_reactionList = (0, $6648a11f147a5c05$export$b7531b8ff18dc588)(xml, reactionList_s);\n    let xml_reactions = xml_reactionList.getElementsByTagName((0, $381c11e38cac5410$export$d2ae4167a30cf6bb).tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    // Process each reaction.\n    if (xml_reactions_length == 0) //return;\n    throw new Error(\"No reactions: There should be at least 1!\");\n    // Set reactions_title.\n    $22c7fca7c69edc03$var$reactions_title = document.getElementById(\"reactions_title\");\n    if ($22c7fca7c69edc03$var$reactions_title != null) $22c7fca7c69edc03$var$reactions_title.innerHTML = \"Reactions\";\n    for(let i = 0; i < xml_reactions_length; i++){\n        let attributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactions[i]);\n        let reactionID = attributes.get(\"id\");\n        if (reactionID == null) throw new Error(\"reactionID is null\");\n        if (reactionID != null) {\n            console.log(\"id=\" + reactionID);\n            // Load reactants.\n            let reactants = [];\n            let xml_reactants = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$dcfd4302d04b7fb6).tagName);\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            if (xml_reactants.length > 0) {\n                if (xml_reactants.length < 2) {\n                    let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_reactants[0], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                    reactants.push(new (0, $381c11e38cac5410$export$dcfd4302d04b7fb6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactants[0]), new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule))));\n                } else for(let j = 0; j < xml_reactants.length; j++){\n                    let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_reactants[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                    reactants.push(new (0, $381c11e38cac5410$export$dcfd4302d04b7fb6)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_reactants[j]), new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule))));\n                }\n            }\n            // Load products.\n            let products = [];\n            let xml_products = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$264ad599d7cef668).tagName);\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            if (xml_products.length > 0) {\n                if (xml_products.length < 2) {\n                    let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_products[0], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                    products.push(new (0, $381c11e38cac5410$export$264ad599d7cef668)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_products[0]), new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule))));\n                } else for(let j = 0; j < xml_products.length; j++){\n                    let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_products[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                    products.push(new (0, $381c11e38cac5410$export$264ad599d7cef668)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_products[j]), new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule))));\n                }\n            }\n            // Load transition states.\n            let transitionStates = [];\n            let xml_transitionStates = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$145c1ed87b1a2216).tagName);\n            //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n            if (xml_transitionStates.length > 0) {\n                if (xml_transitionStates.length < 2) {\n                    let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_transitionStates[0], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                    transitionStates.push(new (0, $381c11e38cac5410$export$145c1ed87b1a2216)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_transitionStates[0]), new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule))));\n                } else for(let j = 0; j < xml_transitionStates.length; j++){\n                    let xml_molecule = (0, $6648a11f147a5c05$export$91e73a91db22e6a2)(xml_transitionStates[j], (0, $7cb8c0739b32549c$export$3da9759ad07746a3).tagName);\n                    transitionStates.push(new (0, $381c11e38cac5410$export$145c1ed87b1a2216)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_transitionStates[j]), new (0, $381c11e38cac5410$export$e8a062bb2fc9e2ba)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_molecule))));\n                }\n            }\n            //console.log(\"transitionStates=\" + transitionStates);\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName);\n            let tunneling;\n            if (xml_tunneling.length > 0) {\n                if (xml_tunneling.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$c3cf6f96dac11421).tagName + \" but finding \" + xml_tunneling.length + \"!\");\n                tunneling = new (0, $381c11e38cac5410$export$c3cf6f96dac11421)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tunneling[0]));\n            }\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let mCRCMethod;\n            let xml_MCRCMethod = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName);\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                if (xml_MCRCMethod.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$6fa70ee10f356b6).tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n                else {\n                    let mCRCMethodAttributes = (0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_MCRCMethod[0]);\n                    let name = mCRCMethodAttributes.get(\"name\");\n                    //console.log(MCRCMethod.tagName + \" name=\" + name);\n                    if (name == undefined || name == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType2) {\n                        let type = mCRCMethodAttributes.get(\"xsi:type\");\n                        //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                        if (type != undefined) {\n                            if (type == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType || type == (0, $381c11e38cac5410$export$191e95ebb11cc88).xsiType2) {\n                                let preExponential;\n                                let xml_preExponential = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$38ce90ac8b004d85).tagName);\n                                if (xml_preExponential != null) {\n                                    if (xml_preExponential[0] != null) {\n                                        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_preExponential[0])));\n                                        preExponential = new (0, $381c11e38cac5410$export$38ce90ac8b004d85)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_preExponential[0]), value);\n                                    }\n                                }\n                                //console.log(\"preExponential \" + preExponential);\n                                let activationEnergy;\n                                let xml_activationEnergy = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$1bdc69d2439d749d).tagName);\n                                if (xml_activationEnergy != null) {\n                                    if (xml_activationEnergy[0] != null) {\n                                        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_activationEnergy[0])));\n                                        activationEnergy = new (0, $381c11e38cac5410$export$1bdc69d2439d749d)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_activationEnergy[0]), value);\n                                    }\n                                }\n                                //console.log(\"activationEnergy \" + activationEnergy);\n                                let tInfinity;\n                                let xml_tInfinity = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$8d95dd32819bc86c).tagName);\n                                if (xml_tInfinity != null) {\n                                    if (xml_tInfinity[0] != null) {\n                                        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_tInfinity[0])));\n                                        tInfinity = new (0, $381c11e38cac5410$export$d08982dd841d496f)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_tInfinity[0]), value);\n                                    }\n                                }\n                                //console.log(\"tInfinity \" + tInfinity);\n                                let nInfinity;\n                                let xml_nInfinity = xml_MCRCMethod[0].getElementsByTagName((0, $381c11e38cac5410$export$d08982dd841d496f).tagName);\n                                if (xml_nInfinity != null) {\n                                    if (xml_nInfinity[0] != null) {\n                                        let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_nInfinity[0])));\n                                        nInfinity = new (0, $381c11e38cac5410$export$d08982dd841d496f)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_nInfinity[0]), value);\n                                    }\n                                }\n                                //console.log(\"nInfinity \" + nInfinity);\n                                mCRCMethod = new (0, $381c11e38cac5410$export$191e95ebb11cc88)(mCRCMethodAttributes, preExponential, activationEnergy, tInfinity, nInfinity);\n                            }\n                        }\n                    } else mCRCMethod = new (0, $381c11e38cac5410$export$6fa70ee10f356b6)(mCRCMethodAttributes);\n                }\n            }\n            // Load excessReactantConc\n            let xml_excessReactantConc = xml_reactions[i].getElementsByTagName((0, $381c11e38cac5410$export$284227145ed02b04).tagName);\n            let excessReactantConc;\n            if (xml_excessReactantConc.length > 0) {\n                if (xml_excessReactantConc.length > 1) throw new Error(\"Expecting 1 \" + (0, $381c11e38cac5410$export$284227145ed02b04).tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n                let value = parseFloat((0, $6648a11f147a5c05$export$13cb40e9b656ab9e)((0, $6648a11f147a5c05$export$4e07613bf412feb7)(xml_excessReactantConc[0])));\n                excessReactantConc = new (0, $381c11e38cac5410$export$284227145ed02b04)((0, $6648a11f147a5c05$export$fe94072fee8a6976)(xml_excessReactantConc[0]), value);\n            }\n            // Create reaction.\n            let reaction = new (0, $381c11e38cac5410$export$d2ae4167a30cf6bb)(attributes, reactionID, reactants, products, tunneling, transitionStates, mCRCMethod, excessReactantConc);\n            $22c7fca7c69edc03$var$reactions.set(reactionID, reaction);\n        //console.log(\"reaction=\" + reaction);\n        }\n    }\n}\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */ function $22c7fca7c69edc03$var$drawReactionDiagram(canvas, dark, font, lw, lwc) {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx = canvas.getContext(\"2d\");\n    //ctx.fillStyle = background;\n    // Get text height for font size.\n    let th = (0, $d2b4a77a4d44562c$export$c398604a09be5382)(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants = new Set();\n    let products = new Set();\n    let intProducts = new Set();\n    let transitionStates = new Set();\n    let orders = new Map();\n    let energies = new Map();\n    let i = 0;\n    let energyMin = Number.MAX_VALUE;\n    let energyMax = Number.MIN_VALUE;\n    $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n        // Get TransitionStates.\n        let reactionTransitionStates = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel = reaction.getReactantsLabel();\n        if (reactantsLabel != undefined) {\n            reactants.add(reactantsLabel);\n            if (products.has(reactantsLabel)) intProducts.add(reactantsLabel);\n            let energy = reaction.getReactantsEnergy($22c7fca7c69edc03$var$molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(reactantsLabel, energy);\n            if (!orders.has(reactantsLabel)) {\n                orders.set(reactantsLabel, i);\n                i++;\n            }\n        }\n        let productsLabel = reaction.getProductsLabel();\n        if (productsLabel != undefined) {\n            products.add(productsLabel);\n            let energy = reaction.getProductsEnergy($22c7fca7c69edc03$var$molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(productsLabel, energy);\n            if (orders.has(productsLabel)) {\n                i--;\n                let j = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(orders, productsLabel);\n                // Move product to end and shift everything back.\n                orders.forEach(function(value, key) {\n                    if (value > j) orders.set(key, value - 1);\n                });\n                // Insert transition states.\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function(ts) {\n                        let ref = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = $22c7fca7c69edc03$var$molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                    orders.set(productsLabel, i);\n                    i++;\n                }\n            } else {\n                if (reactionTransitionStates != undefined) reactionTransitionStates.forEach(function(ts) {\n                    let ref = ts.getMolecule().ref;\n                    transitionStates.add(ref);\n                    orders.set(ref, i);\n                    energy = $22c7fca7c69edc03$var$molecules.get(ref)?.getEnergy() ?? 0;\n                    energyMin = Math.min(energyMin, energy);\n                    energyMax = Math.max(energyMax, energy);\n                    energies.set(ref, energy);\n                    i++;\n                });\n                orders.set(productsLabel, i);\n                i++;\n            }\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n    // Create a lookup from order to label.\n    let reorders = [];\n    orders.forEach(function(value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0 = 0;\n    let y0;\n    let x1;\n    let y1;\n    let xmax = 0;\n    let tw;\n    let textSpacing = 5; // Spacing between end of line and start of text.\n    let stepSpacing = 10; // Spacing between steps.\n    let reactantsInXY = new Map();\n    let reactantsOutXY = new Map();\n    let productsInXY = new Map();\n    let productsOutXY = new Map();\n    let transitionStatesInXY = new Map();\n    let transitionStatesOutXY = new Map();\n    reorders.forEach(function(value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max((0, $d2b4a77a4d44562c$export$37827d046293d309)(ctx, energy.toString(), font), (0, $d2b4a77a4d44562c$export$37827d046293d309)(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines, but\n        // the code is left here commented out for code comprehension.)\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [\n            x0,\n            y0\n        ]);\n        reactantsOutXY.set(value, [\n            x1,\n            y1\n        ]);\n        if (products.has(value)) {\n            productsInXY.set(value, [\n                x0,\n                y0\n            ]);\n            productsOutXY.set(value, [\n                x1,\n                y1\n            ]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [\n                x0,\n                y0\n            ]);\n            transitionStatesOutXY.set(value, [\n                x1,\n                y1\n            ]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + 4 * th + 2 * lw;\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n    let originalCanvasHeight = canvas.height;\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder);\n    // Go through reactions and draw connecting lines.\n    $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let reactionTransitionStates = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel = reaction.getReactantsLabel();\n        let productsLabel = reaction.getProductsLabel();\n        let reactantOutXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsOutXY, reactantsLabel);\n        let productInXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsInXY, productsLabel);\n        if (reactionTransitionStates != undefined) reactionTransitionStates.forEach(function(ts) {\n            let transitionStateLabel = ts.getMolecule().ref;\n            let transitionStateInXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesInXY, transitionStateLabel);\n            (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0], transitionStateInXY[1]);\n            let transitionStateOutXY = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesOutXY, transitionStateLabel);\n            (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1], productInXY[0], productInXY[1]);\n        });\n        else (0, $d2b4a77a4d44562c$export$819db45aec5fcbe5)(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], productInXY[0], productInXY[1]);\n    });\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function(value) {\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsInXY, value)[0];\n        let y = energyRescaled + lw;\n        let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(reactantsOutXY, value)[0];\n        let energyString = energy.toString();\n        (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function(value) {\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsInXY, value)[0];\n        let y = energyRescaled + lw;\n        let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(productsOutXY, value)[0];\n        let energyString = energy.toString();\n        if (intProducts.has(value)) (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        else (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    transitionStates.forEach(function(value) {\n        let energy = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(energies, value);\n        let energyRescaled = (0, $dcf293d9ee452407$export$bd2782c820638828)(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesInXY, value)[0];\n        let y = energyRescaled + lw;\n        let x1 = (0, $dcf293d9ee452407$export$3988ae62b71be9a3)(transitionStatesOutXY, value)[0];\n        let energyString = energy.toString();\n        (0, $d2b4a77a4d44562c$export$479ac392a7fb4419)(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\nfunction $22c7fca7c69edc03$var$getLabel(key, twa) {\n    let attributes = twa.attributes;\n    let label = key;\n    if (attributes != undefined) label += \" \" + (0, $dcf293d9ee452407$export$dc22ec7f8e0b9ac)(attributes, \" \");\n    return label.trim();\n}\n/**\n * Display molecules.\n */ function $22c7fca7c69edc03$var$displayMolecules() {\n/*\n    if (molecules.size == 0) {\n        return;\n    }\n    molecules.forEach(function (molecule, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"molecule=\" + molecule);\n        // Create molecule div.\n        let div = document.createElement(\"div\");\n        // Go through each node\n        molecule.nodes.forEach(function (node) {\n            if (node instanceof NodeWithNodes) {\n                processNodeWithNodes(molecule.tagName, id, div, node);\n            } else if (node instanceof StringNode) {\n                processStringNode(molecule.tagName, id, div, \"\", node);\n            } else if (node instanceof NumberArrayNode) {\n                processNumberArrayNode(molecule.tagName, id, div, \"\", node);\n            } else if (node instanceof NumberNode) {\n                processNumberNode(molecule.tagName, id, div, \"\", node);\n            } else if (node instanceof TagWithAttributes) {\n                processTagWithAttributes(molecule.tagName, id, div, \"\", node);\n            } else {\n                processTag(molecule.tagName, id, div, node);\n            }\n        });\n        let moleculeDetailDiv = getCollapsibleDiv(div, molecule.getLabel(), id + \"_details\", \"molecule\");\n        moleculesDiv = document.getElementById(\"moleculesList\");\n        if (moleculesDiv !== null) {\n            let parentElement = document.getElementById('molecules');\n            if (parentElement != undefined) {\n                parentElement.appendChild(moleculeDetailDiv);\n            }\n        }\n    });\n    makeCollapsible();\n        */ }\n/**\n * Display reactions table.\n */ function $22c7fca7c69edc03$var$displayReactions() {\n    if ($22c7fca7c69edc03$var$reactions.size == 0) return;\n    $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reactions=\" + reactions);\n        // Create reactions div.\n        let div = document.createElement(\"div\");\n        // Properties.\n        reaction.index.forEach(function(value, key) {});\n    });\n/*\n    if (reactions.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let reactionsTable = getTH([\"ID\", \"Reactants\", \"Products\", \"Transition State\",\n        \"PreExponential\", \"Activation Energy\", \"TInfinity\", \"NInfinity\"]);\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        let reactants: string = reaction.getReactantsLabel() || \"\";\n        let products: string = reaction.getProductsLabel() || \"\";\n        let transitionState: string = \"\";\n        let preExponential: string = \"\";\n        let activationEnergy: string = \"\";\n        let tInfinity: string = \"\";\n        let nInfinity: string = \"\";\n        let tSs: Map<string, TransitionState> | TransitionState | undefined = reaction.transitionStates;\n        //console.log(\"tSs=\" + tSs);\n        if (tSs != undefined) {\n            if (tSs instanceof Map) {\n                // Join all names together.\n                tSs.forEach(function (ts) {\n                    let name: string | undefined = ts.getRef();\n                    if (name != null) {\n                        transitionState = name + \" \";\n                    }\n                });\n            } else {\n                let ts: TransitionState = tSs as TransitionState;\n                let name: string | undefined = ts.getRef();\n                if (name != null) {\n                    transitionState = name;\n                }\n            }\n        }\n        let mCRCMethod: MCRCMethod | undefined = reaction.getMCRCMethod();\n        //console.log(\"mCRCMethod=\" + mCRCMethod);\n        //console.log(\"typeof mCRCMethod=\" + typeof mCRCMethod);\n        if (mCRCMethod != undefined) {\n            if (mCRCMethod instanceof MesmerILT) {\n                let mp: PreExponential | undefined = mCRCMethod.getPreExponential();\n                if (mp != undefined) {\n                    preExponential = mp.value.toString() + \" \"\n                        + mp.attributes.get(\"units\");\n                }\n                let ae: ActivationEnergy | undefined = mCRCMethod.getActivationEnergy();\n                if (ae != undefined) {\n                    activationEnergy = ae.value.toString() + \" \"\n                        + ae.attributes.get(\"units\");\n                }\n                let ti: TInfinity | undefined = mCRCMethod.getTInfinity();\n                if (ti != undefined) {\n                    tInfinity = ti.value.toString();\n                }\n                let ni: NInfinity | undefined = mCRCMethod.getNInfinity();\n                if (ni != undefined) {\n                    nInfinity = ni.value.toString();\n                }\n            } else {\n                if (mCRCMethod.attributes.get(\"name\") == \"RRKM\") {\n                } else {\n                    console.log(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                    throw new Error(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                }\n            }\n        }\n        // Complete table creation.\n        reactionsTable += getTR(getTD(id) + getTD(reactants) + getTD(products) + getTD(transitionState)\n            + getTD(preExponential, true) + getTD(activationEnergy, true) + getTD(tInfinity, true)\n            + getTD(nInfinity, true));\n        reactions_table = document.getElementById(\"reactions_table\");\n        if (reactions_table !== null) {\n            reactions_table.innerHTML = reactionsTable;\n        }\n    });\n    */ }\n/**\n * Display reactions diagram.\n */ function $22c7fca7c69edc03$var$displayReactionsDiagram() {\n    if ($22c7fca7c69edc03$var$reactions.size > 1) {\n        // Display the diagram.\n        let canvas = document.getElementById(\"reactions_diagram\");\n        let font = \"14px Arial\";\n        let dark = true;\n        let lw = 4;\n        let lwc = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            $22c7fca7c69edc03$var$drawReactionDiagram(canvas, dark, font, lw, lwc);\n        }\n    }\n}\n/**\n * Display conditions.\n */ function $22c7fca7c69edc03$var$displayConditions() {\n/*\n    let bathGas_element: HTMLElement | null = document.getElementById(\"bathGas\");\n    if (bathGas_element != null) {\n        bathGas_element.innerHTML = \"Bath Gas \" + conditions.getBathGas().value;\n    }\n    let pTs_element: HTMLElement | null = document.getElementById(\"PT_table\");\n    let th: string[] = [\"P\", \"T\"];\n    // If PTs contain BathGas\n    let hasBathGas: boolean = conditions.getPTs().pTpairs.some(pair => {\n        return pair.getBathGas() != undefined;\n    });\n    if (hasBathGas) {\n        th.push(\"BathGas\");\n    }\n    // Check if PTs contain ExperimentRate\n    let hasExperimentRate: boolean = conditions.getPTs().pTpairs.some(pair => {\n        return pair.getExperimentRate() != undefined;\n    });\n    if (hasExperimentRate) {\n        th.push(\"ExperimentRate\");\n    }\n    let table: string = getTH(th);\n    if (pTs_element != null) {\n        conditions.getPTs().pTpairs.forEach(function (pTpair) {\n            table += getTR(getTD(pTpair.getP().toString()) + getTD(pTpair.getT().toString()));\n            if (hasBathGas) {\n                table += getTD(pTpair.getBathGas()?.toString() ?? '');\n            }\n            if (hasExperimentRate) {\n                table += getTD(pTpair.getExperimentRate()?.toString() ?? '');\n            }\n        });\n        pTs_element.innerHTML = table;\n    }\n    */ }\n/**\n * Display modelParameters.\n */ function $22c7fca7c69edc03$var$displayModelParameters() {\n/*\n    let modelParameters_element: HTMLElement | null = document.getElementById(\"modelParameters_table\");\n    let table: string = getTH([\"Parameter\", \"Value\"]);\n    table += getTR(getTD(\"Grain Size\") + getTD(modelParameters.getGrainSize().value.toString()));\n    table += getTR(getTD(\"Energy Above The Top Hill\") + getTD(modelParameters.getEnergyAboveTheTopHill().value.toString()));\n\n    if (modelParameters_element != null) {\n        modelParameters_element.innerHTML = table;\n    }\n    */ }\n/**\n * Display control.\n */ function $22c7fca7c69edc03$var$displayControl() {\n/*\n    let control_table_element: HTMLElement | null = document.getElementById(\"control_table\");\n    let table: string = getTH([\"Control\", \"Value\"]);\n    // TestDOS\n    let testDOS: TestDOS | undefined = control.getTestDOS();\n    if (testDOS != undefined) {\n        table += getTR(getTD(TestDOS.tagName) + getTD(\"\"));\n    }\n    // PrintSpeciesProfile\n    let printSpeciesProfile: PrintSpeciesProfile | undefined = control.getPrintSpeciesProfile();\n    if (printSpeciesProfile != undefined) {\n        table += getTR(getTD(PrintSpeciesProfile.tagName) + getTD(\"\"));\n    }\n    // TestMicroRates\n    let testMicroRates: TestMicroRates | undefined = control.getTestMicroRates();\n    if (testMicroRates != undefined) {\n        table += getTR(getTD(TestMicroRates.tagName) + getTD(\"\"));\n    }\n    // TestRateConstant\n    let testRateConstant: TestRateConstant | undefined = control.getTestRateConstant();\n    if (testRateConstant != undefined) {\n        table += getTR(getTD(TestRateConstant.tagName) + getTD(\"\"));\n    }\n    // PrintGrainDOS\n    let printGrainDOS: PrintGrainDOS | undefined = control.getPrintGrainDOS();\n    if (printGrainDOS != undefined) {\n        table += getTR(getTD(PrintGrainDOS.tagName) + getTD(\"\"));\n    }\n    // PrintCellDOS\n    let printCellDOS: PrintCellDOS | undefined = control.getPrintCellDOS();\n    if (printCellDOS != undefined) {\n        table += getTR(getTD(PrintCellDOS.tagName) + getTD(\"\"));\n    }\n    // PrintReactionOperatorColumnSums\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined = control.getPrintReactionOperatorColumnSums();\n    if (printReactionOperatorColumnSums != undefined) {\n        table += getTR(getTD(PrintReactionOperatorColumnSums.tagName) + getTD(\"\"));\n    }\n    // PrintTunnellingCoefficients\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined = control.getPrintTunnellingCoefficients();\n    if (printTunnellingCoefficients != undefined) {\n        table += getTR(getTD(PrintTunnellingCoefficients.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkfE\n    let printGrainkfE: PrintGrainkfE | undefined = control.getPrintGrainkfE();\n    if (printGrainkfE != undefined) {\n        table += getTR(getTD(PrintGrainkfE.tagName) + getTD(\"\"));\n    }\n    // PrintGrainBoltzmann\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined = control.getPrintGrainBoltzmann();\n    if (printGrainBoltzmann != undefined) {\n        table += getTR(getTD(PrintGrainBoltzmann.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkbE\n    let printGrainkbE: PrintGrainkbE | undefined = control.getPrintGrainkbE();\n    if (printGrainkbE != undefined) {\n        table += getTR(getTD(PrintGrainkbE.tagName) + getTD(\"\"));\n    }\n    // Eigenvalues\n    let eigenvalues: Eigenvalues | undefined = control.getEigenvalues();\n    if (eigenvalues != undefined) {\n        table += getTR(getTD(Eigenvalues.tagName) + getTD(eigenvalues.value.toString()));\n    }\n    // HideInactive\n    let hideInactive: HideInactive | undefined = control.getHideInactive();\n    if (hideInactive != undefined) {\n        table += getTR(getTD(HideInactive.tagName) + getTD(\"\"));\n    }\n    // DiagramEnergyOffset\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined = control.getDiagramEnergyOffset();\n    if (diagramEnergyOffset != undefined) {\n        table += getTR(getTD(DiagramEnergyOffset.tagName) + getTD(diagramEnergyOffset.value.toString()));\n    }\n    // Set the table.\n    if (control_table_element != null) {\n        control_table_element.innerHTML = table;\n    }\n    */ }\n/**\n * Save to XML file.\n */ window.saveXML = function() {\n    console.log(\"saveXML\");\n    const pad = \"  \";\n    const padding2 = pad.repeat(2);\n    // Create moleculeList.\n    let moleculeList = \"\";\n    $22c7fca7c69edc03$var$molecules.forEach(function(molecule, id) {\n        moleculeList += molecule.toXML(pad, padding2);\n    //moleculeList += molecule.toXML(\"molecule\", pad, level);\n    });\n    moleculeList = (0, $6648a11f147a5c05$export$dad497fe1f6e27c0)(moleculeList, \"moleculeList\", undefined, pad, true);\n    // Create reactionList.\n    let reactionList = \"\";\n    $22c7fca7c69edc03$var$reactions.forEach(function(reaction, id) {\n        reactionList += reaction.toXML(pad, padding2);\n    //reactionList += reaction.toXML(\"reaction\", pad, level);\n    });\n    reactionList = (0, $6648a11f147a5c05$export$dad497fe1f6e27c0)(reactionList, \"reactionList\", undefined, pad, true);\n    // Create me.Conditions\n    let xml_conditions = $22c7fca7c69edc03$var$conditions.toXML(pad, pad);\n    // Create modelParameters\n    let xml_modelParameters = $22c7fca7c69edc03$var$modelParameters.toXML(pad, pad);\n    // create me.control\n    let xml_control = $22c7fca7c69edc03$var$control.toXML(pad, pad);\n    // Create a new Blob object from the data\n    let blob = new Blob([\n        moleculeList,\n        reactionList,\n        xml_conditions,\n        xml_modelParameters,\n        xml_control\n    ], {\n        type: \"text/plain\"\n    });\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    a.download = $22c7fca7c69edc03$var$input_xml_filename; // Replace with your desired filename\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n};\n\n\n//# sourceMappingURL=index.028a3593.js.map\n","import {\n    get, isNumeric, mapToString, rescale, setToString\n} from './util.js';\n\nimport {\n    getFirstElement, getFirstChildNode, getNodeValue, getTag, getEndTag,\n    getAttributes, toHTML, getSingularElement, TagWithAttributes, NodeWithNodes, Tag, StringNode, NumberArrayNode, NumberNode\n} from './xml.js';\n\nimport {\n    Molecule, Atom, Bond, EnergyTransferModel, DeltaEDown, DOSCMethod, Property, AtomArray, BondArray, PropertyList, PropertyScalar, PropertyArray, ExtraDOSCMethod, BondRef, HinderedRotorPotential, PotentialPoint, Periodicity, ReservoirSize, ZPE, RotConsts, VibFreqs\n} from './molecule.js';\n\nimport {\n    Reaction, TransitionState, ReactionMolecule, Reactant, Product, MCRCMethod, MesmerILT,\n    PreExponential, ActivationEnergy, NInfinity, Tunneling, TInfinity, ExcessReactantConc\n} from './reaction.js';\n\nimport {\n    arrayToString, toNumberArray\n} from './util.js';\n\nimport {\n    getInput, makeCollapsible, getCollapsibleDiv, resizeInput\n} from './html.js';\n\nimport {\n    drawLevel, drawLine, getTextHeight, getTextWidth\n} from './canvas.js';\n\nimport {\n    BathGas, Conditions, ExperimentRate, PT, PTs\n} from './conditions.js';\n\nimport {\n    EnergyAboveTheTopHill, GrainSize, ModelParameters\n} from './modelParameters.js';\n\nimport {\n    Control, DiagramEnergyOffset, Eigenvalues, HideInactive, TestDOS, PrintSpeciesProfile,\n    TestMicroRates, TestRateConstant, PrintGrainDOS, PrintCellDOS, PrintReactionOperatorColumnSums,\n    PrintTunnellingCoefficients, PrintGrainkfE, PrintGrainBoltzmann, PrintGrainkbE\n} from './control.js';\nimport { MoleculeList, Title } from './mesmer.js';\n\n/**\n * Extend the global Window interface so that the functions can be called using:\n * window.loadXML() and window.saveXML()\n */\ndeclare global {\n    interface Window {\n        loadXML(): void;\n        saveXML(): void;\n    }\n}\n\n\n/**\n * A map of molecules with Molecule.id as key and Molecules as values.\n */\nlet molecules: Map<string, Molecule> = new Map();\n\n/**\n * For storing the maximum molecule energy in a reaction.\n */\nlet maxMoleculeEnergy: number = -Infinity;\n\n/**\n * For storing the minimum molecule energy in a reaction.\n */\nlet minMoleculeEnergy: number = Infinity;\n\n/**\n * A map of reactions with Reaction.id as keys and Reactions as values.\n */\nlet reactions: Map<string, Reaction> = new Map();\n\n/**\n * The filename of the mesmer input file loaded.\n */\nlet input_xml_filename: string;\n\n/**\n * The load button.\n */\nlet loadButton: HTMLElement | null;\n\n/**\n * The save button.\n */\nlet saveButton: HTMLElement | null;\n\n/**\n * The XML text element.\n */\nlet me_title: HTMLCollectionOf<Element> | null;\nlet molecules_title: HTMLElement | null;\n//let moleculesDiv: HTMLElement | null;\nlet reactions_title: HTMLElement | null;\nlet reactionsDiv: HTMLElement | null;\nlet conditions_title: HTMLElement | null;\nlet conditions_table: HTMLElement | null;\nlet modelParameters_title: HTMLElement | null;\nlet modelParameters_table: HTMLElement | null;\nlet xml_title: HTMLElement | null;\nlet xml_text: HTMLElement | null;\n\n/**\n * Display the XML.\n * @param {string} xml The XML to display.\n */\nfunction displayXML(xml: string) {\n    //console.log(\"xml=\" + xml);\n    if (xml_title != null) {\n        xml_title.innerHTML = input_xml_filename;\n    }\n    if (xml_text != null) {\n        xml_text.innerHTML = toHTML(xml);\n    }\n}\n\n/**\n * Parse XML and create HTMLElement for molecules.\n * @param xml The XML.\n * @returns The HTMLElement.\n */\nfunction getMolecules(xml: XMLDocument): HTMLElement {\n    // moleculesListDiv is the div that will contain the molecules list.\n    let moleculeListDiv: HTMLElement = document.createElement(\"moleculesList\") as HTMLElement;\n\n\n    let xml_moleculeList: Element = getSingularElement(xml, MoleculeList.tagName);\n    // Check the XML \"moleculeList\" element has one or more \"molecule\" elements and no other elements.\n    let moleculeListTagNames: Set<string> = new Set();\n    xml_moleculeList.childNodes.forEach(function (node) {\n        moleculeListTagNames.add(node.nodeName);\n    });\n    if (moleculeListTagNames.size != 1) {\n        if (!(moleculeListTagNames.size == 2 && moleculeListTagNames.has(\"#text\"))) {\n            console.error(\"moleculeListTagNames:\");\n            moleculeListTagNames.forEach(x => console.error(x));\n            throw new Error(\"Additional tag names in moleculeList:\");\n        }\n    }\n    if (!moleculeListTagNames.has(Molecule.tagName)) {\n        throw new Error(\"Expecting tags with \\\"\" + Molecule.tagName + \"\\\" tagName but there are none!\");\n    }\n    // Process the XML \"molecule\" elements.\n    let xml_molecules: HTMLCollectionOf<Element> = xml_moleculeList.getElementsByTagName(Molecule.tagName);\n    let xml_molecules_length = xml_molecules.length;\n    console.log(\"Number of molecules=\" + xml_molecules_length);\n    //xml_molecules.forEach(function (xml_molecule) { // Cannot iterate over HTMLCollectionOf<Element> like this.\n    for (let i = 0; i < xml_molecules.length; i++) {\n\n        let moleculeDiv: HTMLElement = document.createElement(\"moleculeDiv\") as HTMLElement;\n\n\n\n        // Set attributes.\n        let attributes: Map<string, string> = getAttributes(xml_molecules[i]);\n        let moleculeTagNames: Set<string> = new Set();\n        let cns: NodeListOf<ChildNode> = xml_molecules[i].childNodes;\n        //console.log(\"cns.length=\" + cns.length);\n        //cns.forEach(function (cn) {\n        for (let j = 0; j < cns.length; j++) {\n            let cn: ChildNode = cns[j];\n            // Check for nodeName repeats that are not #text.\n            if (!moleculeTagNames.has(cn.nodeName)) {\n                moleculeTagNames.add(cn.nodeName);\n            } else {\n                // nodeName = #text are comments or white space/newlines in the XML which are ignored.\n                if (cn.nodeName != \"#text\") {\n                    console.warn(\"Another ChildNode with nodeName=\" + cn.nodeName);\n                    //throw new Error(\"cn.nodeName appears twice in molecule.\");\n                }\n            }\n            //console.log(cn.nodeName);\n        }\n        //});\n        //console.log(\"moleculeTagNames:\");\n        //moleculeTagNames.forEach(x => console.log(x));\n        // Init atomsNode.\n        let atomsNode: AtomArray | Atom | undefined;\n        // There can be an individual atom not in an atom array, or an attom array.\n        let xml_atomArrays = xml_molecules[i].getElementsByTagName(AtomArray.tagName);\n        if (xml_atomArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + AtomArray.tagName + \" but finding \" + xml_atomArrays.length + \"!\");\n        }\n        if (xml_atomArrays.length == 1) {\n            let xml_atomArray = xml_atomArrays[0];\n            let xml_atoms: HTMLCollectionOf<Element> = xml_atomArray.getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length < 2) {\n                throw new Error(\"Expecting 2 or more atoms in \" + AtomArray.tagName + \", but finding \" + xml_atoms.length + \"!\");\n            }\n            let atoms: Atom[] = [];\n            for (let j = 0; j < xml_atoms.length; j++) {\n                atoms.push(new Atom(getAttributes(xml_atoms[j])));\n            }\n            atomsNode = new AtomArray(getAttributes(xml_atomArray), atoms);\n            moleculeTagNames.delete(AtomArray.tagName);\n        } else {\n            let xml_atoms: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Atom.tagName);\n            if (xml_atoms.length == 1) {\n                atomsNode = new Atom(getAttributes(xml_atoms[0]));\n            } else if (xml_atoms.length > 1) {\n                throw new Error(\"Expecting 1 \" + Atom.tagName + \" but finding \" + xml_atoms.length + \". Should these be in an \" + AtomArray.tagName + \"?\");\n            }\n        }\n        //console.log(\"atomsNode=\" + atomsNode);\n        moleculeTagNames.delete(Atom.tagName);\n        // Init bondsNode.\n        let bondsNode: BondArray | Bond | undefined;\n        // There can be an individual bond not in a bond array, or a bond array.\n        let xml_bondArrays = xml_molecules[i].getElementsByTagName(BondArray.tagName);\n        if (xml_bondArrays.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + BondArray.tagName + \" but finding \" + xml_bondArrays.length + \"!\");\n        }\n        if (xml_bondArrays.length == 1) {\n            let xml_bondArray = xml_bondArrays[0];\n            let xml_bonds: HTMLCollectionOf<Element> = xml_bondArray.getElementsByTagName(Bond.tagName);\n            // There may be only 1 bond in a BondArray.\n            let bonds: Bond[] = [];\n            for (let j = 0; j < xml_bonds.length; j++) {\n                bonds.push(new Bond(getAttributes(xml_bonds[j])));\n            }\n            bondsNode = new BondArray(getAttributes(xml_bondArray), bonds);\n            moleculeTagNames.delete(BondArray.tagName);\n        } else {\n            let xml_bonds: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Bond.tagName);\n            if (xml_bonds.length == 1) {\n                bondsNode = new Bond(getAttributes(xml_bonds[0]));\n            } else if (xml_bonds.length > 1) {\n                throw new Error(\"Expecting 1 \" + Bond.tagName + \" but finding \" + xml_bonds.length + \". Should these be in a \" + BondArray.tagName + \"?\");\n            }\n        }\n        moleculeTagNames.delete(Bond.tagName);\n        // Create molecule.\n        let molecule = new Molecule(attributes, atomsNode, bondsNode);\n        molecules.set(molecule.id, molecule);\n\n        // Add any propertyList or individual property.\n        // (There can be an individual property not in a propertyList?)\n        let xml_PLs = xml_molecules[i].getElementsByTagName(PropertyList.tagName);\n        if (xml_PLs.length > 1) {\n            throw new Error(\"Expecting 1 or 0 \" + PropertyList.tagName + \" but finding \" + xml_PLs.length + \"!\");\n        }\n        if (xml_PLs.length == 1) {\n            let pl = new PropertyList(getAttributes(xml_PLs[0]));\n            let xml_Ps: HTMLCollectionOf<Element> = xml_PLs[0].getElementsByTagName(Property.tagName);\n            for (let j = 0; j < xml_Ps.length; j++) {\n                let p: Property = new Property(getAttributes(xml_Ps[j]));\n                pl.setProperty(p);\n                molecule.setProperties(pl);\n                // Handle scalar or array property\n                let scalarNodes: HTMLCollectionOf<Element> = xml_Ps[j].getElementsByTagName(PropertyScalar.tagName);\n                if (scalarNodes.length > 0) {\n                    if (scalarNodes.length != 1) {\n                        throw new Error(\"Expecting 1 \" + PropertyScalar.tagName + \" but finding \" + scalarNodes.length + \"!\");\n                    }\n                    let inputString: string;\n                    let firstChildNode = getFirstChildNode(scalarNodes[0]);\n                    if (firstChildNode) {\n                        inputString = getNodeValue(firstChildNode).trim();\n                    } else {\n                        inputString = \"\";\n                    }\n                    let value: number = parseFloat(inputString);\n                    let ps: PropertyScalar = new PropertyScalar(getAttributes(scalarNodes[0]), value);\n                    p.setProperty(ps);\n                    let label: string = p.dictRef;\n                    // Create a new div element for the input.\n                    let inputDiv: HTMLDivElement = getInput(\"number\", molecule.id + \"_\" + p.dictRef, (event) => {\n                        if (event.target instanceof HTMLInputElement) {\n                            setPropertyScalar(p.dictRef, event.target);\n                        }\n                    }, p.toString(), label);\n                    moleculeDiv.appendChild(inputDiv);\n                    let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                    inputElement.value = inputString;\n                    resizeInput(inputElement);\n                    inputElement.addEventListener('change', (event) => {\n                        let eventTarget = event.target as HTMLInputElement;\n                        inputString = eventTarget.value;\n                        ps = p.getProperty() as PropertyScalar;\n                        ps.value = parseFloat(inputString);\n                        console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                        resizeInput(inputElement);\n                    });\n                } else {\n                    let arrayNodes: HTMLCollectionOf<Element> = xml_Ps[j].getElementsByTagName(PropertyArray.tagName);\n                    if (arrayNodes.length > 0) {\n                        if (arrayNodes.length != 1) {\n                            throw new Error(\"Expecting 1 \" + PropertyArray.tagName + \" but finding \" + arrayNodes.length + \"!\");\n                        }\n                        let inputString: string;\n                        let firstChildNode = getFirstChildNode(arrayNodes[0]);\n                        if (firstChildNode) {\n                            inputString = getNodeValue(firstChildNode).trim();\n                        } else {\n                            inputString = \"No value for \" + PropertyArray.tagName + \" \" + mapToString(getAttributes(xml_Ps[j]));\n                        }\n                        let values: number[] = toNumberArray(inputString.split(/\\s+/));\n                        let pa: PropertyArray = new PropertyArray(getAttributes(arrayNodes[0]), values);\n                        p.setProperty(pa);\n                        let label: string = p.dictRef;\n                        // Create a new div element for the input.\n                        let inputDiv: HTMLDivElement = getInput(\"number\", molecule.id + \"_\" + p.dictRef, (event) => {\n                            if (event.target instanceof HTMLInputElement) {\n                                setPropertyArray(p.dictRef, event.target);\n                            }\n                        }, p.toString(), label);\n                        moleculeDiv.appendChild(inputDiv);\n                        let inputElement: HTMLInputElement = inputDiv.querySelector('input') as HTMLInputElement;\n                        inputElement.value = inputString;\n                        resizeInput(inputElement);\n                        inputElement.addEventListener('change', (event) => {\n                            let eventTarget = event.target as HTMLInputElement;\n                            inputString = eventTarget.value;\n                            pa = p.getProperty() as PropertyArray;\n                            values = toNumberArray(inputString.split(/\\s+/));\n                            pa.values = values;\n                            console.log(\"Set \" + p.dictRef + \" of \" + molecule.id + \" to \" + inputString);\n                            resizeInput(inputElement);\n                        });\n                    } else {\n                        throw new Error(\"Expecting \" + PropertyScalar.tagName + \" or \" + PropertyArray.tagName);\n                    }\n                }\n            }\n            moleculeTagNames.delete(PropertyList.tagName);\n        } else {\n            let xml_Ps: HTMLCollectionOf<Element> = xml_molecules[i].getElementsByTagName(Property.tagName);\n            if (xml_Ps.length > 1) {\n                throw new Error(\"Expecting 1 \" + Property.tagName + \" but finding \" + xml_Ps.length + \". Should these be in a \" + PropertyList.tagName + \"?\");\n            }\n        }\n        moleculeTagNames.delete(Property.tagName);\n\n        let els: HTMLCollectionOf<Element> | null;\n        // Read energyTransferModel\n        moleculeTagNames.delete(EnergyTransferModel.tagName);\n        els = xml_molecules[i].getElementsByTagName(EnergyTransferModel.tagName);\n        if (els != null) {\n            if (els.length > 0) {\n                if (els.length != 1) {\n                    throw new Error(\"energyTransferModel length=\" + els.length);\n                }\n                let xml_deltaEDown: HTMLCollectionOf<Element> = els[0].getElementsByTagName(DeltaEDown.tagName);\n                if (xml_deltaEDown != null) {\n                    let deltaEDowns: DeltaEDown[] = [];\n                    for (let k = 0; k < xml_deltaEDown.length; k++) {\n                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_deltaEDown[k])));\n                        let deltaEDown: DeltaEDown = new DeltaEDown(getAttributes(xml_deltaEDown[k]), value);\n                        deltaEDowns.push(deltaEDown);\n                    }\n                    let etm = new EnergyTransferModel(getAttributes(els[0]), deltaEDowns);\n                    molecule.setEnergyTransferModel(etm);\n                    //addEventListenerMoleculeProperty(molecule, etm);\n                }\n            }\n        }\n        // Read DOSCMethod\n        moleculeTagNames.delete(DOSCMethod.tagName);\n        els = xml_molecules[i].getElementsByTagName(DOSCMethod.tagName);\n        if (els != null) {\n            let el: Element | null = els[0];\n            if (el != null) {\n                molecule.setDOSCMethod(new DOSCMethod(getAttributes(el)));\n            }\n        }\n        // Read ExtraDOSCMethod.\n        moleculeTagNames.delete(ExtraDOSCMethod.tagName);\n        els = xml_molecules[i].getElementsByTagName(ExtraDOSCMethod.tagName);\n        if (els.length > 0) {\n            if (els.length != 1) {\n                throw new Error(\"Expecting only 1 extra DOSCMethod, but there are \" + els.length);\n            }\n            // Read bondRef.\n            let bondRefs: HTMLCollectionOf<Element> = els[0].getElementsByTagName(BondRef.tagName);\n            let bondRef: BondRef | undefined;\n            if (bondRefs.length > 0) {\n                if (bondRefs.length != 1) {\n                    throw new Error(\"Expecting only 1 bondRef, but there are \" + bondRefs.length);\n                }\n                bondRef = new BondRef(getAttributes(bondRefs[0]), getNodeValue(getFirstChildNode(bondRefs[0])));\n            }\n            // Read hunderedRotorPotential.\n            let hinderedRotorPotentials: HTMLCollectionOf<Element> = els[0].getElementsByTagName(HinderedRotorPotential.tagName);\n            let hinderedRotorPotential: HinderedRotorPotential | undefined;\n            if (hinderedRotorPotentials.length > 0) {\n                if (hinderedRotorPotentials.length != 1) {\n                    throw new Error(\"Expecting only 1 HinderedRotorPotential, but there are \" + hinderedRotorPotentials.length);\n                }\n                // Load PotentialPoints.\n                let potentialPoints: PotentialPoint[] = [];\n                let xml_potentialPoints: HTMLCollectionOf<Element> = hinderedRotorPotentials[0].getElementsByTagName(PotentialPoint.tagName);\n                for (let k = 0; k < xml_potentialPoints.length; k++) {\n                    potentialPoints.push(new PotentialPoint(getAttributes(xml_potentialPoints[k])));\n                }\n                hinderedRotorPotential = new HinderedRotorPotential(getAttributes(hinderedRotorPotentials[0]), potentialPoints);\n            }\n            // Read periodicities.\n            let xml_periodicities: HTMLCollectionOf<Element> = els[0].getElementsByTagName(Periodicity.tagName);\n            let periodicity: Periodicity | undefined;\n            if (xml_periodicities.length > 0) {\n                if (xml_periodicities.length != 1) {\n                    throw new Error(\"Expecting only 1 Periodicity, but there are \" + xml_periodicities.length);\n                }\n                periodicity = new Periodicity(getAttributes(xml_periodicities[0]),\n                    parseFloat(getNodeValue(getFirstChildNode(xml_periodicities[0]))));\n            }\n            molecule.setExtraDOSCMethod(new ExtraDOSCMethod(getAttributes(els[0]), bondRef, hinderedRotorPotential, periodicity));\n        }\n        // Read reservoirSize.\n        moleculeTagNames.delete(ReservoirSize.tagName);\n        els = xml_molecules[i].getElementsByTagName(ReservoirSize.tagName);\n        if (els.length > 0) {\n            if (els.length != 1) {\n                throw new Error(\"Expecting only 1 reservoirSize, but there are \" + els.length);\n            }\n            molecule.setReservoirSize(new ReservoirSize(getAttributes(els[0]), parseFloat(getNodeValue(getFirstChildNode(els[0])))));\n        }\n        // Check for unexpected tags.\n        moleculeTagNames.delete(\"#text\");\n        if (moleculeTagNames.size > 0) {\n            console.warn(\"There are additional unexpected moleculeTagNames:\");\n            moleculeTagNames.forEach(x => console.warn(x));\n            //throw new Error(\"Unexpected tags in molecule.\");\n        }\n\n        let buttonId: string = \"buttonId\";\n        let buttonLabel: string = molecule.getLabel();\n        let contentDivId: string = molecule.tagName + \"_\" + molecule.id;\n        //let collapsibleDiv = getCollapsibleDiv(buttonId, buttonLabel, paragraph, contentDivId);\n        let collapsibleDiv = getCollapsibleDiv(buttonId, buttonLabel, moleculeDiv, contentDivId);\n        moleculeListDiv.appendChild(collapsibleDiv);\n\n    }\n    return moleculeListDiv;\n}\n\n/**\n * Set a molecule property array when the input value is changed.\n * @param dictRef The dictionary reference of the property.\n * @param input The input element.\n */\nexport function setPropertyArray(dictRef: string, input: HTMLInputElement): void {\n    let inputId: string = input.id;\n    let moleculeID: string = inputId.split(\"_\")[0];\n    let molecule: Molecule | undefined = molecules.get(moleculeID);\n    if (molecule) {\n        let inputString: string = input.value;\n        let values: string[] = inputString.split(/\\s+/);\n        let pA: PropertyArray = ((molecule.getProperty(dictRef) as Property).getProperty() as PropertyArray);\n        //console.log(\"propertyArray=\" + propertyArray);\n        let pAValues: number[] = pA.values;\n        let n = pAValues.length;\n        let success: boolean = true;\n        values.forEach(function (value) {\n            if (!isNumeric(value)) {\n                success = false;\n            }\n        });\n        if (!success) {\n            alert(dictRef + \" input for \" + moleculeID + \" is not a number, resetting...\");\n            let input = document.getElementById(inputId) as HTMLInputElement;\n            input.value = arrayToString(pAValues, \" \");\n            return;\n        }\n        if (values.length == n) {\n            let inputPAValues: number[] = inputString.split(\" \").map(Number);\n            pA.values = inputPAValues;\n            console.log(\"Changed \" + dictRef + \" input for \" + moleculeID + \" from: \" + inputString + \" to: \" + arrayToString(inputPAValues, \" \"));\n            //console.log(\"molecule=\" + molecule);\n        } else {\n            alert(\"Expecting \" + n + \" \" + dictRef + \" values for \" + moleculeID + \" but finding \" + values.length + \" resetting...\");\n            let input = document.getElementById(inputId) as HTMLInputElement;\n            input.value = arrayToString(pAValues, \" \");\n        }\n    }\n}\n\n(window as any).setPropertyArray = setPropertyArray;\n\n/**\n * Set a molecule property scalar when the input value is changed.\n * @param dictRef The dictionary reference of the property.\n * @param input The input element.\n */\nexport function setPropertyScalar(dictRef: string, input: HTMLInputElement): void {\n    let inputId: string = input.id;\n    let moleculeID: string = inputId.split(\"_\")[0];\n    let molecule: Molecule | undefined = molecules.get(moleculeID);\n    if (molecule != undefined) {\n        let ps: PropertyScalar = ((molecule.getProperty(dictRef) as Property).getProperty() as PropertyScalar);\n        if (isNumeric(input.value)) {\n            let inputNumber: number = parseFloat(input.value);\n            ps.value = inputNumber;\n            console.log(dictRef + \" of \" + moleculeID + \" set to \" + inputNumber);\n        } else {\n            alert(dictRef + \" input for \" + moleculeID + \" is not numeric, resetting...\");\n            let inputElement = document.getElementById(inputId) as HTMLInputElement;\n            let value: number | undefined = ps.value;\n            if (value != undefined) {\n                inputElement.value = value.toString();\n            }\n        }\n        //console.log(\"molecule=\" + molecule);\n    }\n}\n\n(window as any).setProperty = setPropertyScalar;\n\n/**\n * Load the XML file.\n */\nfunction loadXML() {\n    let inputElement: HTMLInputElement = document.createElement('input');\n    inputElement.type = 'file';\n    inputElement.onchange = function () {\n        if (inputElement.files) {\n            for (let i = 0; i < inputElement.files.length; i++) {\n                console.log(\"inputElement.files[\" + i + \"]=\" + inputElement.files[i]);\n            }\n            let file: File | null = inputElement.files[0];\n            //console.log(\"file=\" + file);\n            console.log(file.name);\n            input_xml_filename = file.name;\n            if (xml_text != null) {\n                let reader = new FileReader();\n                let chunkSize = 1024 * 1024; // 1MB\n                let start = 0;\n                let contents = '';\n                reader.onload = function (e) {\n                    if (e.target == null) {\n                        throw new Error('Event target is null');\n                    }\n                    contents += (e.target as FileReader).result as string;\n                    if (file != null) {\n                        if (start < file.size) {\n                            // Read the next chunk\n                            let blob = file.slice(start, start + chunkSize);\n                            reader.readAsText(blob);\n                            start += chunkSize;\n                        } else {\n                            // All chunks have been read\n                            contents = contents.trim();\n                            displayXML(contents);\n                            let parser = new DOMParser();\n                            let xml = parser.parseFromString(contents, \"text/xml\");\n                            parse(xml);\n                            /*\n                            // Sending to the server for validation is no longer implemented as there is currently no server.\n                            // Send XML to the server\n                            fetch('http://localhost:1234/', {\n                                method: 'POST',\n                                headers: {\n                                    'Content-Type': 'text/xml',\n                                },\n                                body: contents,\n                            })\n                                .then(response => {\n                                    if (!response.ok) {\n                                        throw new Error(`HTTP error! status: ${response.status}`);\n                                    }\n                                    return response.text();\n                                })\n                                .then(data => {\n                                    console.log('Server response:', data);\n                                })\n                                .catch(error => {\n                                    console.error('There was a problem with the fetch operation:', error);\n                                });\n                            */\n                        }\n                    }\n                };\n                // Read the first chunk\n                let blob = file.slice(start, start + chunkSize);\n                reader.readAsText(blob);\n                start += chunkSize;\n            }\n        }\n    };\n    inputElement.click();\n    // Add event listener to load button.\n    loadButton = document.getElementById('load_button');\n    if (loadButton != null) {\n        //loadButton.addEventListener('click', reload);\n        loadButton.addEventListener('click', loadXML);\n    }\n    // Ensure save button is displayed.\n    saveButton = document.getElementById('saveButton');\n    if (saveButton != null) {\n        saveButton.style.display = 'inline';\n    }\n}\n\n/**\n * Once the DOM is loaded, set up the elements.\n */\ndocument.addEventListener('DOMContentLoaded', (event) => {\n    // Initialise elements\n    xml_title = document.getElementById(\"xml_title\");\n    xml_text = document.getElementById(\"xml_text\");\n    // Set up for XML loading.\n    window.loadXML = function () {\n        loadXML();\n        //reload();\n    }\n});\n\n\n/**\n * Parse the XML.\n * @param {XMLDocument} xml \n */\nfunction parse(xml: XMLDocument) {\n    // Title.\n    let xml_title: HTMLCollectionOf<Element> = xml.getElementsByTagName(Title.tagName) as HTMLCollectionOf<Element>;\n    if (xml_title.length != 1) {\n        throw new Error('Multiple ' + Title.tagName + ' tags found');\n    } else {\n        let title = (xml_title[0].childNodes[0].nodeValue as string).trim();\n        let titleNode: Title = new Title(getAttributes(xml_title[0]), title);\n        let titleElement: HTMLElement = document.getElementById(\"title\") as HTMLElement;\n        // Create a new input element.\n        let inputElement = document.createElement(\"input\");\n        inputElement.type = \"text\";\n        inputElement.value = title;\n        // Apply CSS styles to make the input text appear like a h1.\n        //inputElement.style.fontSize = '2em';\n        //inputElement.style.fontWeight = 'bold';\n        // Create a text node.\n        let textNode = document.createTextNode(\"Title: \");\n        // Insert the text node before the input element in the parent node.\n        titleElement.parentNode?.insertBefore(textNode, titleElement);\n        resizeInput(inputElement, 0);\n        // Replace the existing title element with the new input element.\n        titleElement.parentNode?.replaceChild(inputElement, titleElement);\n        console.log(\"inputElement.value=\" + inputElement.value);\n        // Add event listener to inputElement.\n        inputElement.addEventListener('change', function () {\n            if (inputElement.value != title) {\n                titleNode.value = inputElement.value;\n                //console.log(\"title=\" + title);\n            }\n            resizeInput(inputElement, 0);\n        });\n\n        // Molecules\n        // Create a collapsible div for molecules\n        let moleculesElement: HTMLElement = document.getElementById(\"molecules\") as HTMLElement;\n\n        let paragraph: HTMLParagraphElement = document.createElement(\"p\");\n        paragraph.innerHTML = \"Moleculesvfdafdfdsfds\";\n\n        let moleculeListElement = getMolecules(xml);\n\n\n        let buttonId: string = \"buttonId\";\n        let buttonLabel: string = \"Molecules\";\n        let contentDivId: string = \"moleculesList\";\n        //let collapsibleDiv = getCollapsibleDiv(buttonId, buttonLabel, paragraph, contentDivId);\n        let collapsibleDiv = getCollapsibleDiv(buttonId, buttonLabel, moleculeListElement, contentDivId);\n        moleculesElement.appendChild(collapsibleDiv);\n\n\n        // Reactions\n        // Create a collapsible div for reactions\n        makeCollapsible();\n\n    }\n\n    /**\n     * Generate molecules table.\n     */\n    //initMolecules(xml);\n    //displayMolecules();\n    /**\n     * Generate reactions table.\n     */\n    //initReactions(xml);\n    //displayReactions();\n    //addEventListeners();\n    //displayReactionsDiagram();\n    /**\n     * Generate conditions table.\n     */\n    //initConditions(xml);\n    //displayConditions();\n    /**\n     * Generate parameters table.\n     */\n    //initModelParameters(xml);\n    //displayModelParameters();\n    /**\n     * Generate control table.\n     */\n    //initControl(xml);\n    //displayControl();\n}\n\nlet conditions: Conditions;\n\n/**\n * Parse xml to initialise conditions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initConditions(xml: XMLDocument): void {\n    console.log(Conditions.tagName);\n    let xml_conditions: Element = getSingularElement(xml, Conditions.tagName);\n    // Set conditions_title.\n    conditions_title = document.getElementById(\"conditions_title\");\n    if (conditions_title != null) {\n        conditions_title.innerHTML = \"Conditions\";\n    }\n    // BathGas\n    let xml_bathGas: Element = getFirstElement(xml_conditions, BathGas.tagName);\n    let attributes: Map<string, string> = getAttributes(xml_bathGas);\n    let moleculeID: string = getNodeValue(getFirstChildNode(xml_bathGas));\n    let bathGas: BathGas = new BathGas(attributes, moleculeID, molecules);\n    // PTs\n    let xml_PTs: Element = getSingularElement(xml_conditions, 'me:PTs');\n    let xml_PTPairs: HTMLCollectionOf<Element> = xml_PTs.getElementsByTagName(PT.tagName);\n    // Process each PTpair.\n    let pTs: PT[] = [];\n    for (let i = 0; i < xml_PTPairs.length; i++) {\n        // Add optional BathGas\n        let xml_bathGass: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(BathGas.tagName);\n        let pTBathGas: BathGas | undefined;\n        if (xml_bathGass.length > 0) {\n            if (xml_bathGass.length > 1) {\n                console.warn(\"xml_bathGass.length=\" + xml_bathGass.length);\n            }\n            pTBathGas = new BathGas(getAttributes(xml_bathGass[0]), getNodeValue(getFirstChildNode(xml_bathGass[0])), molecules);\n            console.log(\"pTBathGas\" + pTBathGas.toString());\n        }\n        // Add optional ExperimentRate\n        let xml_experimentRates: HTMLCollectionOf<Element> = xml_PTPairs[i].getElementsByTagName(ExperimentRate.tagName);\n        let experimentRate: ExperimentRate | undefined;\n        if (xml_experimentRates.length > 0) {\n            if (xml_experimentRates.length > 1) {\n                console.warn(\"xml_experimentRates.length=\" + xml_experimentRates.length);\n            }\n            experimentRate = new ExperimentRate(getAttributes(xml_experimentRates[0]), parseFloat(getNodeValue(getFirstChildNode(xml_experimentRates[0]))));\n            console.log(\"experimentRate\" + experimentRate.toString());\n        }\n        pTs.push(new PT(getAttributes(xml_PTPairs[i]), pTBathGas, experimentRate));\n        //console.log(pTs[i].toString()); // For debugging.\n    }\n    conditions = new Conditions(getAttributes(xml_conditions), bathGas, new PTs(getAttributes(xml_PTs), pTs));\n}\n\nlet modelParameters: ModelParameters;\n\n/**\n * Parses xml to initialise modelParameters.\n * @param xml The XML document.\n */\nfunction initModelParameters(xml: XMLDocument): void {\n    console.log(ModelParameters.tagName);\n    let xml_modelParameters: Element = getSingularElement(xml, ModelParameters.tagName);\n    // Set modelParameters_title.\n    modelParameters_title = document.getElementById(\"modelParameters_title\");\n    if (modelParameters_title != null) {\n        modelParameters_title.innerHTML = \"Model Parameters\";\n    }\n    // GrainSize\n    let xml_grainSize: Element = getSingularElement(xml_modelParameters, GrainSize.tagName);\n    let attributes: Map<string, string> = getAttributes(xml_grainSize);\n    let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_grainSize)));\n    let grainSize: GrainSize = new GrainSize(attributes, value);\n    // EnergyAboveTheTopHill\n    let xml_energyAboveTheTopHill: Element = getSingularElement(xml_modelParameters, EnergyAboveTheTopHill.tagName);\n    let energyAboveTheTopHill: EnergyAboveTheTopHill = new EnergyAboveTheTopHill(getAttributes(xml_energyAboveTheTopHill),\n        parseFloat(getNodeValue(getFirstChildNode(xml_energyAboveTheTopHill))));\n\n    modelParameters = new ModelParameters(grainSize, energyAboveTheTopHill);\n}\n\nlet control: Control;\n\n/**\n * Parses xml to initialise control.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initControl(xml: XMLDocument): void {\n    console.log(Control.tagName);\n    let xml_control: Element = getSingularElement(xml, Control.tagName);\n    // Set control_title.\n    let control_title = document.getElementById(\"control_title\");\n    if (control_title != null) {\n        control_title.innerHTML = \"Control\";\n    }\n    // me:testDOS\n    let xml_testDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestDOS.tagName);\n    let testDOS: TestDOS | undefined;\n    if (xml_testDOS.length == 1) {\n        testDOS = new TestDOS();\n    } else {\n        if (xml_testDOS.length > 1) {\n            console.warn(\"testDOS.length=\" + xml_testDOS.length);\n        }\n    }\n    // me:printSpeciesProfile\n    let xml_printSpeciesProfile: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintSpeciesProfile.tagName);\n    let printSpeciesProfile: PrintSpeciesProfile | undefined;\n    if (xml_printSpeciesProfile.length == 1) {\n        printSpeciesProfile = new PrintSpeciesProfile();\n    } else {\n        if (xml_printSpeciesProfile.length > 1) {\n            console.warn(\"printSpeciesProfile.length=\" + xml_printSpeciesProfile.length);\n        }\n    }\n    // me:testMicroRates\n    let xml_testMicroRates: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestMicroRates.tagName);\n    let testMicroRates: TestMicroRates | undefined;\n    if (xml_testMicroRates.length == 1) {\n        testMicroRates = new TestMicroRates();\n    } else {\n        if (xml_testMicroRates.length > 1) {\n            console.warn(\"testMicroRates.length=\" + xml_testMicroRates.length);\n        }\n    }\n    // me:testRateConstant\n    let xml_testRateConstant: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(TestRateConstant.tagName);\n    let testRateConstant: TestRateConstant | undefined;\n    if (xml_testRateConstant.length == 1) {\n        testRateConstant = new TestRateConstant();\n    } else {\n        if (xml_testRateConstant.length > 1) {\n            console.warn(\"testRateConstant.length=\" + xml_testRateConstant.length);\n        }\n    }\n    // me:printGrainDOS\n    let xml_printGrainDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainDOS.tagName);\n    let printGrainDOS: PrintGrainDOS | undefined;\n    if (xml_printGrainDOS.length == 1) {\n        printGrainDOS = new PrintGrainDOS();\n    } else {\n        if (xml_printGrainDOS.length > 1) {\n            console.warn(\"printGrainDOS.length=\" + xml_printGrainDOS.length);\n        }\n    }\n    // me:printCellDOS\n    let xml_printCellDOS: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintCellDOS.tagName);\n    let printCellDOS: PrintCellDOS | undefined;\n    if (xml_printCellDOS.length == 1) {\n        printCellDOS = new PrintCellDOS();\n    } else {\n        if (xml_printCellDOS.length > 1) {\n            console.warn(\"printCellDOS.length=\" + xml_printCellDOS.length);\n        }\n    }\n    // me:printReactionOperatorColumnSums\n    let xml_printReactionOperatorColumnSums: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintReactionOperatorColumnSums.tagName);\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined;\n    if (xml_printReactionOperatorColumnSums.length == 1) {\n        printReactionOperatorColumnSums = new PrintReactionOperatorColumnSums();\n    } else {\n        if (xml_printReactionOperatorColumnSums.length > 1) {\n            console.warn(\"printReactionOperatorColumnSums.length=\" + xml_printReactionOperatorColumnSums.length);\n        }\n    }\n    // me:printTunnellingCoefficients\n    let xml_printTunnellingCoefficients: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintTunnellingCoefficients.tagName);\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined;\n    if (xml_printTunnellingCoefficients.length == 1) {\n        printTunnellingCoefficients = new PrintTunnellingCoefficients();\n    } else {\n        if (xml_printTunnellingCoefficients.length > 1) {\n            console.warn(\"printTunnellingCoefficients.length=\" + xml_printTunnellingCoefficients.length);\n        }\n    }\n    // me:printGrainkfE\n    let xml_printGrainkfE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkfE.tagName);\n    let printGrainkfE: PrintGrainkfE | undefined;\n    if (xml_printGrainkfE.length == 1) {\n        printGrainkfE = new PrintGrainkfE();\n    } else {\n        if (xml_printGrainkfE.length > 1) {\n            console.warn(\"printGrainkfE.length=\" + xml_printGrainkfE.length);\n        }\n    }\n    // me:printGrainBoltzmann\n    let xml_printGrainBoltzmann: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainBoltzmann.tagName);\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined;\n    if (xml_printGrainBoltzmann.length == 1) {\n        printGrainBoltzmann = new PrintGrainBoltzmann();\n    } else {\n        if (xml_printGrainBoltzmann.length > 1) {\n            console.warn(\"printGrainBoltzmann.length=\" + xml_printGrainBoltzmann.length);\n        }\n    }\n    // me:printGrainkbE\n    let xml_printGrainkbE: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(PrintGrainkbE.tagName);\n    let printGrainkbE: PrintGrainkbE | undefined;\n    if (xml_printGrainkbE.length == 1) {\n        printGrainkbE = new PrintGrainkbE();\n    } else {\n        if (xml_printGrainkbE.length > 1) {\n            console.warn(\"printGrainkbE.length=\" + xml_printGrainkbE.length);\n        }\n    }\n    // me:eigenvalues\n    let xml_eigenvalues: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(Eigenvalues.tagName);\n    let eigenvalues: Eigenvalues | undefined;\n    if (xml_eigenvalues.length == 1) {\n        eigenvalues = new Eigenvalues(getAttributes(xml_eigenvalues[0]), parseFloat(getNodeValue(getFirstChildNode(xml_eigenvalues[0]))));\n    } else {\n        console.warn(\"eigenvalues.length=\" + xml_eigenvalues.length);\n    }\n    // me:hideInactive\n    let xml_hideInactive: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(HideInactive.tagName);\n    let hideInactive: HideInactive | undefined;\n    if (xml_hideInactive.length == 1) {\n        hideInactive = new HideInactive();\n    } else {\n        console.warn(\"hideInactive.length=\" + xml_hideInactive.length);\n    }\n    // me:diagramEnergyOffset\n    let xml_diagramEnergyOffset: HTMLCollectionOf<Element> = xml_control.getElementsByTagName(DiagramEnergyOffset.tagName);\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined;\n    if (xml_diagramEnergyOffset.length == 1) {\n        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_diagramEnergyOffset[0])));\n        diagramEnergyOffset = new DiagramEnergyOffset(getAttributes(xml_diagramEnergyOffset[0]), value);\n    } else {\n        console.warn(\"diagramEnergyOffset.length=\" + xml_diagramEnergyOffset.length);\n    }\n    control = new Control(getAttributes(xml_control), testDOS, printSpeciesProfile, testMicroRates, testRateConstant,\n        printGrainDOS, printCellDOS, printReactionOperatorColumnSums, printTunnellingCoefficients, printGrainkfE,\n        printGrainBoltzmann, printGrainkbE, eigenvalues, hideInactive, diagramEnergyOffset);\n}\n\n/**\n * Parses xml to initialise reactions.\n * @param {XMLDocument} xml The XML document.\n */\nfunction initReactions(xml: XMLDocument): void {\n    let reactionList_s: string = 'reactionList';\n    console.log(reactionList_s);\n    let xml_reactionList: Element = getSingularElement(xml, reactionList_s);\n    let xml_reactions: HTMLCollectionOf<Element> = xml_reactionList.getElementsByTagName(Reaction.tagName);\n    let xml_reactions_length = xml_reactions.length;\n    console.log(\"Number of reactions=\" + xml_reactions_length);\n    // Process each reaction.\n    if (xml_reactions_length == 0) {\n        //return;\n        throw new Error(\"No reactions: There should be at least 1!\");\n    }\n    // Set reactions_title.\n    reactions_title = document.getElementById(\"reactions_title\");\n    if (reactions_title != null) {\n        reactions_title.innerHTML = \"Reactions\";\n    }\n    for (let i = 0; i < xml_reactions_length; i++) {\n        let attributes: Map<string, string> = getAttributes(xml_reactions[i]);\n        let reactionID = attributes.get(\"id\");\n        if (reactionID == null) {\n            throw new Error(\"reactionID is null\");\n        }\n        if (reactionID != null) {\n            console.log(\"id=\" + reactionID);\n            // Load reactants.\n            let reactants: Reactant[] = [];\n            let xml_reactants: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Reactant.tagName);\n            //console.log(\"xml_reactants.length=\" + xml_reactants.length);\n            if (xml_reactants.length > 0) {\n                if (xml_reactants.length < 2) {\n                    let xml_molecule: Element = getFirstElement(xml_reactants[0], Molecule.tagName);\n                    reactants.push(new Reactant(getAttributes(xml_reactants[0]),\n                        new ReactionMolecule(getAttributes(xml_molecule))));\n                } else {\n                    for (let j = 0; j < xml_reactants.length; j++) {\n                        let xml_molecule: Element = getFirstElement(xml_reactants[j], Molecule.tagName);\n                        reactants.push(new Reactant(getAttributes(xml_reactants[j]),\n                            new ReactionMolecule(getAttributes(xml_molecule))));\n                    }\n                }\n            }\n            // Load products.\n            let products: Product[] = [];\n            let xml_products: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(Product.tagName);\n            //console.log(\"xml_products.length=\" + xml_products.length);\n            if (xml_products.length > 0) {\n                if (xml_products.length < 2) {\n                    let xml_molecule: Element = getFirstElement(xml_products[0], Molecule.tagName);\n                    products.push(new Product(getAttributes(xml_products[0]),\n                        new ReactionMolecule(getAttributes(xml_molecule))));\n                } else {\n                    for (let j = 0; j < xml_products.length; j++) {\n                        let xml_molecule: Element = getFirstElement(xml_products[j], Molecule.tagName);\n                        products.push(new Product(getAttributes(xml_products[j]),\n                            new ReactionMolecule(getAttributes(xml_molecule))));\n                    }\n                }\n            }\n            // Load transition states.\n            let transitionStates: TransitionState[] = [];\n            let xml_transitionStates: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(TransitionState.tagName);\n            //console.log(\"xml_transitionStates.length=\" + xml_transitionStates.length);\n            if (xml_transitionStates.length > 0) {\n                if (xml_transitionStates.length < 2) {\n                    let xml_molecule: Element = getFirstElement(xml_transitionStates[0], Molecule.tagName);\n                    transitionStates.push(new TransitionState(getAttributes(xml_transitionStates[0]),\n                        new ReactionMolecule(getAttributes(xml_molecule))));\n                } else {\n                    for (let j = 0; j < xml_transitionStates.length; j++) {\n                        let xml_molecule: Element = getFirstElement(xml_transitionStates[j], Molecule.tagName);\n                        transitionStates.push(new TransitionState(getAttributes(xml_transitionStates[j]),\n                            new ReactionMolecule(getAttributes(xml_molecule))));\n                    }\n                }\n            }\n            //console.log(\"transitionStates=\" + transitionStates);\n            // Load tunneling.\n            let xml_tunneling = xml_reactions[i].getElementsByTagName(Tunneling.tagName);\n            let tunneling: Tunneling | undefined;\n            if (xml_tunneling.length > 0) {\n                if (xml_tunneling.length > 1) {\n                    throw new Error(\"Expecting 1 \" + Tunneling.tagName + \" but finding \" + xml_tunneling.length + \"!\");\n                }\n                tunneling = new Tunneling(getAttributes(xml_tunneling[0]));\n            }\n            // Load MCRCMethod.\n            //console.log(\"Load MCRCMethod...\");\n            let mCRCMethod: MCRCMethod | undefined;\n            let xml_MCRCMethod: HTMLCollectionOf<Element> = xml_reactions[i].getElementsByTagName(MCRCMethod.tagName);\n            //console.log(\"xml_MCRCMethod=\" + xml_MCRCMethod);\n            //console.log(\"xml_MCRCMethod.length=\" + xml_MCRCMethod.length);\n            if (xml_MCRCMethod.length > 0) {\n                if (xml_MCRCMethod.length > 1) {\n                    throw new Error(\"Expecting 1 \" + MCRCMethod.tagName + \" but finding \" + xml_MCRCMethod.length + \"!\");\n                } else {\n                    let mCRCMethodAttributes: Map<string, string> = getAttributes(xml_MCRCMethod[0]);\n                    let name: string | undefined = mCRCMethodAttributes.get(\"name\");\n                    //console.log(MCRCMethod.tagName + \" name=\" + name);\n                    if (name == undefined || name == MesmerILT.xsiType2) {\n                        let type: string | undefined = mCRCMethodAttributes.get(\"xsi:type\");\n                        //console.log(MCRCMethod.tagName + \"xsi:type=\" + type);\n                        if (type != undefined) {\n                            if (type == MesmerILT.xsiType || type == MesmerILT.xsiType2) {\n                                let preExponential: PreExponential | undefined;\n                                let xml_preExponential: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(PreExponential.tagName);\n                                if (xml_preExponential != null) {\n                                    if (xml_preExponential[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_preExponential[0])));\n                                        preExponential = new PreExponential(getAttributes(xml_preExponential[0]), value);\n                                    }\n                                }\n                                //console.log(\"preExponential \" + preExponential);\n                                let activationEnergy: ActivationEnergy | undefined;\n                                let xml_activationEnergy: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(ActivationEnergy.tagName);\n                                if (xml_activationEnergy != null) {\n                                    if (xml_activationEnergy[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_activationEnergy[0])));\n                                        activationEnergy = new ActivationEnergy(getAttributes(xml_activationEnergy[0]), value);\n                                    }\n                                }\n                                //console.log(\"activationEnergy \" + activationEnergy);\n                                let tInfinity: TInfinity | undefined;\n                                let xml_tInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(TInfinity.tagName);\n                                if (xml_tInfinity != null) {\n                                    if (xml_tInfinity[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_tInfinity[0])));\n                                        tInfinity = new NInfinity(getAttributes(xml_tInfinity[0]), value);\n                                    }\n                                }\n                                //console.log(\"tInfinity \" + tInfinity);\n                                let nInfinity: NInfinity | undefined;\n                                let xml_nInfinity: HTMLCollectionOf<Element> = xml_MCRCMethod[0].getElementsByTagName(NInfinity.tagName);\n                                if (xml_nInfinity != null) {\n                                    if (xml_nInfinity[0] != null) {\n                                        let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_nInfinity[0])));\n                                        nInfinity = new NInfinity(getAttributes(xml_nInfinity[0]), value);\n                                    }\n                                }\n                                //console.log(\"nInfinity \" + nInfinity);\n                                mCRCMethod = new MesmerILT(mCRCMethodAttributes, preExponential, activationEnergy, tInfinity, nInfinity);\n                            }\n                        }\n                    } else {\n                        mCRCMethod = new MCRCMethod(mCRCMethodAttributes);\n                    }\n                }\n            }\n            // Load excessReactantConc\n            let xml_excessReactantConc = xml_reactions[i].getElementsByTagName(ExcessReactantConc.tagName);\n            let excessReactantConc: ExcessReactantConc | undefined;\n            if (xml_excessReactantConc.length > 0) {\n                if (xml_excessReactantConc.length > 1) {\n                    throw new Error(\"Expecting 1 \" + ExcessReactantConc.tagName + \" but finding \" + xml_excessReactantConc.length + \"!\");\n                }\n                let value: number = parseFloat(getNodeValue(getFirstChildNode(xml_excessReactantConc[0])));\n                excessReactantConc = new ExcessReactantConc(getAttributes(xml_excessReactantConc[0]), value);\n            }\n            // Create reaction.\n            let reaction = new Reaction(attributes, reactionID, reactants, products, tunneling, transitionStates,\n                mCRCMethod, excessReactantConc);\n            reactions.set(reactionID, reaction);\n            //console.log(\"reaction=\" + reaction);\n        }\n    }\n}\n\n/**\n * Create a diagram.\n * @param canvas The canvas.\n * @param dark True for dark mode.\n * @param font The font to use.\n * @param lw The line width of reactants, transition states and products.\n * @param lwc The line width color to use.\n */\nfunction drawReactionDiagram(canvas: HTMLCanvasElement, dark: boolean, font: string, lw: number, lwc: number): void {\n    console.log(\"drawReactionDiagram\");\n    // TODO: Set styles depending on dark/light mode settings of users browser and not hard code.\n    //let white = \"white\";\n    let black = \"black\";\n    let green = \"green\";\n    let red = \"red\";\n    let blue = \"blue\";\n    //let yellow = \"yellow\";\n    let orange = \"orange\";\n    let background = \"black\";\n    let foreground = \"white\";\n    const ctx: CanvasRenderingContext2D = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n    //ctx.fillStyle = background;\n    // Get text height for font size.\n    let th = getTextHeight(ctx, \"Aj\", font);\n    //console.log(\"th=\" + th);\n    // Go through reactions:\n    // 1. Create sets of reactants, end products, intermediate products and transition states.\n    // 2. Create maps of orders and energies.\n    // 3. Calculate maximum energy.\n    let reactants: Set<string> = new Set();\n    let products: Set<string> = new Set();\n    let intProducts: Set<string> = new Set();\n    let transitionStates: Set<string> = new Set();\n    let orders: Map<string, number> = new Map();\n    let energies: Map<string, number> = new Map();\n    let i: number = 0;\n    let energyMin: number = Number.MAX_VALUE;\n    let energyMax: number = Number.MIN_VALUE;\n    reactions.forEach(function (reaction, id) {\n        // Get TransitionStates.\n        let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        if (reactantsLabel != undefined) {\n            reactants.add(reactantsLabel);\n            if (products.has(reactantsLabel)) {\n                intProducts.add(reactantsLabel);\n            }\n            let energy: number = reaction.getReactantsEnergy(molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(reactantsLabel, energy);\n            if (!orders.has(reactantsLabel)) {\n                orders.set(reactantsLabel, i);\n                i++;\n            }\n        }\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        if (productsLabel != undefined) {\n            products.add(productsLabel);\n            let energy = reaction.getProductsEnergy(molecules);\n            energyMin = Math.min(energyMin, energy);\n            energyMax = Math.max(energyMax, energy);\n            energies.set(productsLabel, energy);\n            if (orders.has(productsLabel)) {\n                i--;\n                let j: number = get(orders, productsLabel);\n                // Move product to end and shift everything back.\n                orders.forEach(function (value, key) {\n                    if (value > j) {\n                        orders.set(key, value - 1);\n                    }\n                });\n                // Insert transition states.\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function (ts) {\n                        let ref: string = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                    orders.set(productsLabel, i);\n                    i++\n                }\n            } else {\n                if (reactionTransitionStates != undefined) {\n                    reactionTransitionStates.forEach(function (ts) {\n                        let ref: string = ts.getMolecule().ref;\n                        transitionStates.add(ref);\n                        orders.set(ref, i);\n                        energy = molecules.get(ref)?.getEnergy() ?? 0;\n                        energyMin = Math.min(energyMin, energy);\n                        energyMax = Math.max(energyMax, energy);\n                        energies.set(ref, energy);\n                        i++;\n                    });\n                }\n                orders.set(productsLabel, i);\n                i++;\n            }\n        }\n    });\n    //console.log(\"orders=\" + mapToString(orders));\n    //console.log(\"energies=\" + mapToString(energies));\n    //console.log(\"energyMax=\" + energyMax);\n    //console.log(\"energyMin=\" + energyMin);\n    let energyRange: number = energyMax - energyMin;\n    //console.log(\"energyRange=\" + energyRange);\n    //console.log(\"reactants=\" + reactants);\n    //console.log(\"products=\" + products);\n    //console.log(\"transitionStates=\" + transitionStates);\n    // Create a lookup from order to label.\n    let reorders: string[] = [];\n    orders.forEach(function (value, key) {\n        reorders[value] = key;\n    });\n    //console.log(\"reorders=\" + arrayToString(reorders));\n    // Iterate through the reorders:\n    // 1. Capture coordinates for connecting lines.\n    // 2. Store maximum x.\n    let x0: number = 0;\n    let y0: number;\n    let x1: number;\n    let y1: number;\n    let xmax: number = 0;\n    let tw: number;\n    let textSpacing: number = 5; // Spacing between end of line and start of text.\n    let stepSpacing: number = 10; // Spacing between steps.\n    let reactantsInXY: Map<string, number[]> = new Map();\n    let reactantsOutXY: Map<string, number[]> = new Map();\n    let productsInXY: Map<string, number[]> = new Map();\n    let productsOutXY: Map<string, number[]> = new Map();\n    let transitionStatesInXY: Map<string, number[]> = new Map();\n    let transitionStatesOutXY: Map<string, number[]> = new Map();\n    reorders.forEach(function (value) {\n        //console.log(\"value=\" + value + \".\");\n        //console.log(\"energies=\" + mapToString(energies));\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, canvas.height, energy);\n        // Get text width.\n        tw = Math.max(getTextWidth(ctx, energy.toString(), font), getTextWidth(ctx, value, font));\n        x1 = x0 + tw + textSpacing;\n        y0 = energyRescaled + lw;\n        y1 = y0;\n        // Draw horizontal line and add label.\n        // (The drawing is now not done here but done later so labels are on top of lines, but\n        // the code is left here commented out for code comprehension.)\n        //drawLevel(ctx, green, 4, x0, y0, x1, y1, th, value);\n        reactantsInXY.set(value, [x0, y0]);\n        reactantsOutXY.set(value, [x1, y1]);\n        if (products.has(value)) {\n            productsInXY.set(value, [x0, y0]);\n            productsOutXY.set(value, [x1, y1]);\n        }\n        if (transitionStates.has(value)) {\n            transitionStatesInXY.set(value, [x0, y0]);\n            transitionStatesOutXY.set(value, [x1, y1]);\n        }\n        x0 = x1 + stepSpacing;\n        xmax = x1;\n    });\n    // Set canvas width to maximum x.\n    canvas.width = xmax;\n    //console.log(\"canvas.width=\" + canvas.width);\n    // Set canvas height to maximum energy plus the label.\n    let canvasHeightWithBorder = canvas.height + (4 * th) + (2 * lw);\n    //console.log(\"canvasHeightWithBorder=\" + canvasHeightWithBorder);\n    let originalCanvasHeight = canvas.height;\n    // Update the canvas height.\n    canvas.height = canvasHeightWithBorder;\n    // Set the transformation matrix.\n    //ctx.transform(1, 0, 0, 1, 0, canvasHeightWithBorder);\n    ctx.transform(1, 0, 0, -1, 0, canvasHeightWithBorder)\n    // Go through reactions and draw connecting lines.\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        // Get TransitionState if there is one.\n        let reactionTransitionStates: TransitionState[] = reaction.getTransitionStates();\n        //console.log(\"reactant=\" + reactant);\n        let reactantsLabel: string | undefined = reaction.getReactantsLabel();\n        let productsLabel: string | undefined = reaction.getProductsLabel();\n        let reactantOutXY: number[] = get(reactantsOutXY, reactantsLabel);\n        let productInXY: number[] = get(productsInXY, productsLabel);\n        if (reactionTransitionStates != undefined) {\n            reactionTransitionStates.forEach(function (ts) {\n                let transitionStateLabel: string = ts.getMolecule().ref;\n                let transitionStateInXY: number[] = get(transitionStatesInXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1], transitionStateInXY[0],\n                    transitionStateInXY[1]);\n                let transitionStateOutXY: number[] = get(transitionStatesOutXY, transitionStateLabel);\n                drawLine(ctx, black, lwc, transitionStateOutXY[0], transitionStateOutXY[1],\n                    productInXY[0], productInXY[1]);\n            });\n        } else {\n            drawLine(ctx, black, lwc, reactantOutXY[0], reactantOutXY[1],\n                productInXY[0], productInXY[1]);\n        }\n    });\n    // Draw horizontal lines and labels.\n    // (This is done last so that the labels are on top of the vertical lines.)\n    reactants.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(reactantsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(reactantsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, blue, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n    products.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(productsInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(productsOutXY, value)[0];\n        let energyString: string = energy.toString();\n        if (intProducts.has(value)) {\n            drawLevel(ctx, orange, lw, x0, y, x1, y, font, th, value, energyString);\n        } else {\n            drawLevel(ctx, green, lw, x0, y, x1, y, font, th, value, energyString);\n        }\n    });\n    transitionStates.forEach(function (value) {\n        let energy: number = get(energies, value);\n        let energyRescaled: number = rescale(energyMin, energyRange, 0, originalCanvasHeight, energy);\n        let x0: number = get(transitionStatesInXY, value)[0];\n        let y: number = energyRescaled + lw;\n        let x1: number = get(transitionStatesOutXY, value)[0];\n        let energyString: string = energy.toString();\n        drawLevel(ctx, red, lw, x0, y, x1, y, font, th, value, energyString);\n    });\n}\n\n\n\nfunction getLabel(key: string, twa: TagWithAttributes): string {\n    let attributes: Map<string, string> | undefined = twa.attributes;\n    let label: string = key;\n    if (attributes != undefined) {\n        label += \" \" + mapToString(attributes, \" \");\n    }\n    return label.trim();\n}\n\n/**\n * Display molecules.\n */\nfunction displayMolecules(): void {\n    /*\n    if (molecules.size == 0) {\n        return;\n    }\n    molecules.forEach(function (molecule, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"molecule=\" + molecule);\n        // Create molecule div.\n        let div = document.createElement(\"div\");\n        // Go through each node\n        molecule.nodes.forEach(function (node) {\n            if (node instanceof NodeWithNodes) {\n                processNodeWithNodes(molecule.tagName, id, div, node);\n            } else if (node instanceof StringNode) {\n                processStringNode(molecule.tagName, id, div, \"\", node);\n            } else if (node instanceof NumberArrayNode) {\n                processNumberArrayNode(molecule.tagName, id, div, \"\", node);\n            } else if (node instanceof NumberNode) {\n                processNumberNode(molecule.tagName, id, div, \"\", node);\n            } else if (node instanceof TagWithAttributes) {\n                processTagWithAttributes(molecule.tagName, id, div, \"\", node);\n            } else {\n                processTag(molecule.tagName, id, div, node);\n            }\n        });\n        let moleculeDetailDiv = getCollapsibleDiv(div, molecule.getLabel(), id + \"_details\", \"molecule\");\n        moleculesDiv = document.getElementById(\"moleculesList\");\n        if (moleculesDiv !== null) {\n            let parentElement = document.getElementById('molecules');\n            if (parentElement != undefined) {\n                parentElement.appendChild(moleculeDetailDiv);\n            }\n        }\n    });\n    makeCollapsible();\n        */\n}\n\n/**\n * Display reactions table.\n */\nfunction displayReactions(): void {\n    if (reactions.size == 0) {\n        return;\n    }\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reactions=\" + reactions);\n        // Create reactions div.\n        let div = document.createElement(\"div\");\n        // Properties.\n        reaction.index.forEach(function (value, key) {\n\n        });\n    });\n\n    /*\n    if (reactions.size == 0) {\n        return;\n    }\n    // Prepare table headings.\n    let reactionsTable = getTH([\"ID\", \"Reactants\", \"Products\", \"Transition State\",\n        \"PreExponential\", \"Activation Energy\", \"TInfinity\", \"NInfinity\"]);\n    reactions.forEach(function (reaction, id) {\n        //console.log(\"id=\" + id);\n        //console.log(\"reaction=\" + reaction);\n        let reactants: string = reaction.getReactantsLabel() || \"\";\n        let products: string = reaction.getProductsLabel() || \"\";\n        let transitionState: string = \"\";\n        let preExponential: string = \"\";\n        let activationEnergy: string = \"\";\n        let tInfinity: string = \"\";\n        let nInfinity: string = \"\";\n        let tSs: Map<string, TransitionState> | TransitionState | undefined = reaction.transitionStates;\n        //console.log(\"tSs=\" + tSs);\n        if (tSs != undefined) {\n            if (tSs instanceof Map) {\n                // Join all names together.\n                tSs.forEach(function (ts) {\n                    let name: string | undefined = ts.getRef();\n                    if (name != null) {\n                        transitionState = name + \" \";\n                    }\n                });\n            } else {\n                let ts: TransitionState = tSs as TransitionState;\n                let name: string | undefined = ts.getRef();\n                if (name != null) {\n                    transitionState = name;\n                }\n            }\n        }\n        let mCRCMethod: MCRCMethod | undefined = reaction.getMCRCMethod();\n        //console.log(\"mCRCMethod=\" + mCRCMethod);\n        //console.log(\"typeof mCRCMethod=\" + typeof mCRCMethod);\n        if (mCRCMethod != undefined) {\n            if (mCRCMethod instanceof MesmerILT) {\n                let mp: PreExponential | undefined = mCRCMethod.getPreExponential();\n                if (mp != undefined) {\n                    preExponential = mp.value.toString() + \" \"\n                        + mp.attributes.get(\"units\");\n                }\n                let ae: ActivationEnergy | undefined = mCRCMethod.getActivationEnergy();\n                if (ae != undefined) {\n                    activationEnergy = ae.value.toString() + \" \"\n                        + ae.attributes.get(\"units\");\n                }\n                let ti: TInfinity | undefined = mCRCMethod.getTInfinity();\n                if (ti != undefined) {\n                    tInfinity = ti.value.toString();\n                }\n                let ni: NInfinity | undefined = mCRCMethod.getNInfinity();\n                if (ni != undefined) {\n                    nInfinity = ni.value.toString();\n                }\n            } else {\n                if (mCRCMethod.attributes.get(\"name\") == \"RRKM\") {\n                } else {\n                    console.log(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                    throw new Error(\"Unexpected mCRCMethod: \" + mCRCMethod);\n                }\n            }\n        }\n        // Complete table creation.\n        reactionsTable += getTR(getTD(id) + getTD(reactants) + getTD(products) + getTD(transitionState)\n            + getTD(preExponential, true) + getTD(activationEnergy, true) + getTD(tInfinity, true)\n            + getTD(nInfinity, true));\n        reactions_table = document.getElementById(\"reactions_table\");\n        if (reactions_table !== null) {\n            reactions_table.innerHTML = reactionsTable;\n        }\n    });\n    */\n}\n\n/**\n * Display reactions diagram.\n */\nfunction displayReactionsDiagram(): void {\n    if (reactions.size > 1) {\n        // Display the diagram.\n        let canvas: HTMLCanvasElement | null = document.getElementById(\"reactions_diagram\") as HTMLCanvasElement;\n        let font: string = \"14px Arial\";\n        let dark: boolean = true;\n        let lw: number = 4;\n        let lwc: number = 2;\n        if (canvas != null) {\n            canvas.style.display = \"block\";\n            drawReactionDiagram(canvas, dark, font, lw, lwc);\n        }\n    }\n}\n\n/**\n * Display conditions.\n */\nfunction displayConditions(): void {\n    /*\n    let bathGas_element: HTMLElement | null = document.getElementById(\"bathGas\");\n    if (bathGas_element != null) {\n        bathGas_element.innerHTML = \"Bath Gas \" + conditions.getBathGas().value;\n    }\n    let pTs_element: HTMLElement | null = document.getElementById(\"PT_table\");\n    let th: string[] = [\"P\", \"T\"];\n    // If PTs contain BathGas\n    let hasBathGas: boolean = conditions.getPTs().pTpairs.some(pair => {\n        return pair.getBathGas() != undefined;\n    });\n    if (hasBathGas) {\n        th.push(\"BathGas\");\n    }\n    // Check if PTs contain ExperimentRate\n    let hasExperimentRate: boolean = conditions.getPTs().pTpairs.some(pair => {\n        return pair.getExperimentRate() != undefined;\n    });\n    if (hasExperimentRate) {\n        th.push(\"ExperimentRate\");\n    }\n    let table: string = getTH(th);\n    if (pTs_element != null) {\n        conditions.getPTs().pTpairs.forEach(function (pTpair) {\n            table += getTR(getTD(pTpair.getP().toString()) + getTD(pTpair.getT().toString()));\n            if (hasBathGas) {\n                table += getTD(pTpair.getBathGas()?.toString() ?? '');\n            }\n            if (hasExperimentRate) {\n                table += getTD(pTpair.getExperimentRate()?.toString() ?? '');\n            }\n        });\n        pTs_element.innerHTML = table;\n    }\n    */\n}\n\n/**\n * Display modelParameters.\n */\nfunction displayModelParameters(): void {\n    /*\n    let modelParameters_element: HTMLElement | null = document.getElementById(\"modelParameters_table\");\n    let table: string = getTH([\"Parameter\", \"Value\"]);\n    table += getTR(getTD(\"Grain Size\") + getTD(modelParameters.getGrainSize().value.toString()));\n    table += getTR(getTD(\"Energy Above The Top Hill\") + getTD(modelParameters.getEnergyAboveTheTopHill().value.toString()));\n\n    if (modelParameters_element != null) {\n        modelParameters_element.innerHTML = table;\n    }\n    */\n}\n\n/**\n * Display control.\n */\nfunction displayControl(): void {\n    /*\n    let control_table_element: HTMLElement | null = document.getElementById(\"control_table\");\n    let table: string = getTH([\"Control\", \"Value\"]);\n    // TestDOS\n    let testDOS: TestDOS | undefined = control.getTestDOS();\n    if (testDOS != undefined) {\n        table += getTR(getTD(TestDOS.tagName) + getTD(\"\"));\n    }\n    // PrintSpeciesProfile\n    let printSpeciesProfile: PrintSpeciesProfile | undefined = control.getPrintSpeciesProfile();\n    if (printSpeciesProfile != undefined) {\n        table += getTR(getTD(PrintSpeciesProfile.tagName) + getTD(\"\"));\n    }\n    // TestMicroRates\n    let testMicroRates: TestMicroRates | undefined = control.getTestMicroRates();\n    if (testMicroRates != undefined) {\n        table += getTR(getTD(TestMicroRates.tagName) + getTD(\"\"));\n    }\n    // TestRateConstant\n    let testRateConstant: TestRateConstant | undefined = control.getTestRateConstant();\n    if (testRateConstant != undefined) {\n        table += getTR(getTD(TestRateConstant.tagName) + getTD(\"\"));\n    }\n    // PrintGrainDOS\n    let printGrainDOS: PrintGrainDOS | undefined = control.getPrintGrainDOS();\n    if (printGrainDOS != undefined) {\n        table += getTR(getTD(PrintGrainDOS.tagName) + getTD(\"\"));\n    }\n    // PrintCellDOS\n    let printCellDOS: PrintCellDOS | undefined = control.getPrintCellDOS();\n    if (printCellDOS != undefined) {\n        table += getTR(getTD(PrintCellDOS.tagName) + getTD(\"\"));\n    }\n    // PrintReactionOperatorColumnSums\n    let printReactionOperatorColumnSums: PrintReactionOperatorColumnSums | undefined = control.getPrintReactionOperatorColumnSums();\n    if (printReactionOperatorColumnSums != undefined) {\n        table += getTR(getTD(PrintReactionOperatorColumnSums.tagName) + getTD(\"\"));\n    }\n    // PrintTunnellingCoefficients\n    let printTunnellingCoefficients: PrintTunnellingCoefficients | undefined = control.getPrintTunnellingCoefficients();\n    if (printTunnellingCoefficients != undefined) {\n        table += getTR(getTD(PrintTunnellingCoefficients.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkfE\n    let printGrainkfE: PrintGrainkfE | undefined = control.getPrintGrainkfE();\n    if (printGrainkfE != undefined) {\n        table += getTR(getTD(PrintGrainkfE.tagName) + getTD(\"\"));\n    }\n    // PrintGrainBoltzmann\n    let printGrainBoltzmann: PrintGrainBoltzmann | undefined = control.getPrintGrainBoltzmann();\n    if (printGrainBoltzmann != undefined) {\n        table += getTR(getTD(PrintGrainBoltzmann.tagName) + getTD(\"\"));\n    }\n    // PrintGrainkbE\n    let printGrainkbE: PrintGrainkbE | undefined = control.getPrintGrainkbE();\n    if (printGrainkbE != undefined) {\n        table += getTR(getTD(PrintGrainkbE.tagName) + getTD(\"\"));\n    }\n    // Eigenvalues\n    let eigenvalues: Eigenvalues | undefined = control.getEigenvalues();\n    if (eigenvalues != undefined) {\n        table += getTR(getTD(Eigenvalues.tagName) + getTD(eigenvalues.value.toString()));\n    }\n    // HideInactive\n    let hideInactive: HideInactive | undefined = control.getHideInactive();\n    if (hideInactive != undefined) {\n        table += getTR(getTD(HideInactive.tagName) + getTD(\"\"));\n    }\n    // DiagramEnergyOffset\n    let diagramEnergyOffset: DiagramEnergyOffset | undefined = control.getDiagramEnergyOffset();\n    if (diagramEnergyOffset != undefined) {\n        table += getTR(getTD(DiagramEnergyOffset.tagName) + getTD(diagramEnergyOffset.value.toString()));\n    }\n    // Set the table.\n    if (control_table_element != null) {\n        control_table_element.innerHTML = table;\n    }\n    */\n}\n\n/**\n * Save to XML file.\n */\nwindow.saveXML = function () {\n    console.log(\"saveXML\");\n\n    const pad: string = \"  \";\n    const padding2: string = pad.repeat(2);\n\n\n    // Create moleculeList.\n    let moleculeList: string = \"\";\n    molecules.forEach(function (molecule, id) {\n        moleculeList += molecule.toXML(pad, padding2);\n        //moleculeList += molecule.toXML(\"molecule\", pad, level);\n    });\n    moleculeList = getTag(moleculeList, \"moleculeList\", undefined, pad, true);\n\n    // Create reactionList.\n    let reactionList: string = \"\";\n    reactions.forEach(function (reaction, id) {\n        reactionList += reaction.toXML(pad, padding2);\n        //reactionList += reaction.toXML(\"reaction\", pad, level);\n    });\n    reactionList = getTag(reactionList, \"reactionList\", undefined, pad, true);\n\n    // Create me.Conditions\n    let xml_conditions: string = conditions.toXML(pad, pad);\n\n    // Create modelParameters\n    let xml_modelParameters: string = modelParameters.toXML(pad, pad);\n\n    // create me.control\n    let xml_control: string = control.toXML(pad, pad);\n\n    // Create a new Blob object from the data\n    let blob = new Blob([moleculeList, reactionList,\n        xml_conditions, xml_modelParameters, xml_control],\n        { type: \"text/plain\" });\n\n    // Create a new object URL for the blob\n    let url = URL.createObjectURL(blob);\n\n    // Create a new 'a' element\n    let a = document.createElement(\"a\");\n\n    // Set the href and download attributes for the 'a' element\n    a.href = url;\n    a.download = input_xml_filename; // Replace with your desired filename\n\n    // Append the 'a' element to the body and click it to start the download\n    document.body.appendChild(a);\n    a.click();\n\n    // Remove the 'a' element after the download starts\n    document.body.removeChild(a);\n\n}","/**\n * Thow an error if the key is not in the map otherwise return the value mapped to the key.\n * @param map The map to search in. \n * @param key The key to search for.\n * @returns The value mapped to the key.\n * @throws An error if the key is not in the map.\n */\nexport function get(map: Map<any, any>, key: any): any {\n    if (!map.has(key)) {\n        throw new Error(`Key ${key} not found in map`);\n    }\n    return map.get(key);\n}\n\n/**\n * Linearly rescale a value from one range to another.\n * @param min The minimum value of the original range.\n * @param range The original range.\n * @param newMin The minimum value of the new range.\n * @param newRange The new range.\n * @param value The value to rescale.\n * @returns The rescaled value.\n */\nexport function rescale(min: number, range: number, newMin: number, newRange: number, value: number): number {\n    // The + 0.0 is to force the division to be a floating point division.\n    //return (((value - min) / (range + 0.0)) * (newRange)) + newMin;\n    return ((value - min) * (newRange) / (range + 0.0) ) + newMin;\n}\n\n/**\n * For convertina a map to a string.\n * @param map The map to convert to a string.\n * @param delimiter The (optional) delimiter.\n * @returns A string representation of all the entries in the map.\n */\nexport function mapToString(map: Map<any, any>, delimiter?: string): string {\n    if (map == null) {\n        return \"\";\n    }\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(map.entries()).map(([key, value]) =>\n        `${key == null ? \"null\" : key.toString()}(${value == null ? \"null\" : value.toString()})`).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} array The array to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function arrayToString(array: any[], delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return array.map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting an array to a string.\n * @param {any[]} set The set to convert to a string.\n * @param {string} delimiter The (optional) delimiter.\n */\nexport function setToString(set: Set<any>, delimiter?: string): string {\n    if (delimiter == undefined) {\n        delimiter = ', ';\n    }\n    return Array.from(set).map((value) => value == null ? \"null\" : value.toString()).join(delimiter);\n}\n\n/**\n * For converting a string array to a number array.\n * @param {string[]} s The string to convert to a number array.\n * @returns A number array.\n */\nexport function toNumberArray(s: string[]): number[] {\n    let r: number[] = [];\n    for (let i = 0; i < s.length; i++) {\n        if (isNumeric(s[i])) {\n            r.push(parseFloat(s[i]));\n        //} else {\n        //    throw new Error(`toNumberArray: ${s[i]} is not a number`);\n        }\n    }\n    return r;\n}\n\n/**\n * @param s The string to check.\n * @returns true iff s is a number.\n */\nexport function isNumeric(s: string) : boolean {\n    if (s === \"\") {\n      return false;\n    }\n    return !isNaN(Number(s))\n}","import {\n    getSelfClosingTag\n} from \"./html\";\n\n/**\n * Get the attribute of an xml element.\n * @param xml The xml element to search in.\n * @param name The name of the attribute to search for.\n * @returns The value of the attribute.\n * @throws An error if the attribute is not found.\n */\nexport function getAttribute(xml: Element, name: string): string {\n    let v: string | null = xml.getAttribute(name);\n    if (!v) {\n        throw new Error(name + ' attribute not found');\n    }\n    return v;\n}\n\n/**\n * Get the first element in element with a tag name tagName.\n * @param element The xml element to search in.\n * @param tagName The tag name of the elements to search for.\n * @returns The first element in element with a tag name tagName.\n * @throws An error if the element is not found.\n */\nexport function getFirstElement(element: Element, tagName: string): Element {\n    let el: Element | null = element.getElementsByTagName(tagName)[0];\n    if (el == null) {\n        throw new Error(tagName + ' element not found');\n    }\n    return el;\n}\n\n/**\n * Get the first childNode.\n * @param element The xml element to search in.\n * @returns The first ChildNode if there is one.\n * @throws An error if the element has no childNodes.\n */\nexport function getFirstChildNode(element: Element): ChildNode {\n    let cn: NodeListOf<ChildNode> = element.childNodes;\n    if (cn == null) {\n        throw new Error('Element has no childNodes');\n    }\n    return cn[0];\n}\n\n/**\n * Get the nodeValue of a Node throwing an Error if this is null.\n * @param node The node to get the nodeValue of.\n * @returns The nodeValue of the node.\n * @throws An error if the nodeValue is null.\n */\nexport function getNodeValue(node: Node): string {\n    let nodeValue: string | null = node.nodeValue;\n    if (nodeValue == null) {\n        throw new Error('nodeValue is null');\n    }\n    return nodeValue;\n}\n\n/**\n * A class for a tag.\n */\nexport class Tag {\n\n    /**\n     * The tag name.\n     */\n    tagName: string;\n\n    /**\n     * @param tagName The tag name.\n     */\n    constructor(tagName: string) {\n        this.tagName = tagName;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * Whilst not strictly XML, some consider self closing tags as XML.\n     * @param padding The padding (optional).\n     * @returns A self closing tag.\n     */\n    toXML(padding?: string | undefined): string {\n        let s = getSelfClosingTag(undefined, this.tagName);\n        if (padding) {\n            return \"\\n\" + padding + s;\n        }\n        return s;\n    }\n}\n\n/**\n * A class for representing A Tag with attributes.\n */\nexport class TagWithAttributes extends Tag {\n\n    /**\n     * The attributes.\n     * This class is identified with the name \"TagWithAttributes\", but often there are no attributes\n     * for an XML Tag, so this is allowed to be undefined. This is thought to be beneficial for memory \n     * reasons and the performance implications of having to test if this is undefined is thought to \n     * be balanced by not having to set up to iterate over an empty Map. There are assumptions in this\n     * approach that might be worth testing if performance is an issue...\n     */\n    attributes: Map<string, string> | undefined;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string) {\n        super(tagName);\n        this.attributes = attributes;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        let r = this.tagName + `(`;\n        if (this.attributes) {\n            this.attributes.forEach((value, key) => {\n                r += `${key}(${value}), `;\n            });\n        }\n        return r;\n    }\n\n    /**\n     * Get an XML like representation that instead of having a closing tag is a self closing tag.\n     * These are allowed and perhaps expected in MESMER XML format.\n     * @param {string} padding The padding (Optional).\n     * @returns An XML like representation.\n     */\n    toXML(padding?: string): string {\n        let s: string = \"\";\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n        s += '<' + this.tagName;\n        if (this.attributes) {\n            for (let [k, v] of this.attributes) {\n                s += ' ' + k + '=\"' + v.toString() + '\"';\n            }\n        }\n        return s + ' />';\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a string as a value.\n */\nexport class StringNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string, value: string) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with a number as a value.\n */\nexport class NumberNode extends TagWithAttributes {\n\n    /**\n     * The value.\n     */\n    value: number;\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string, value: number) {\n        super(attributes, tagName);\n        this.value = value;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.value.toString()})`;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    override toXML(padding?: string): string {\n        return getTag(this.value.toString().trim(), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing a TagWithAttributes with an array of numbers as a value.\n */\nexport class NumberArrayNode extends TagWithAttributes {\n\n    /**\n     * The values.\n     */\n    values: number[];\n\n    /**\n     * The delimiter of the values.\n     */\n    delimiter: string = \",\";\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string, values: number[], delimiter?: string) {\n        super(attributes, tagName);\n        this.values = values;\n        if (delimiter != undefined) {\n            this.delimiter = delimiter;\n        }\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    toString(): string {\n        return super.toString() + `, ${this.values.toString()})`;\n    }\n\n    /**\n     * Set the delimiter.\n     * @param delimiter The delimiter.\n     */\n    setDelimiter(delimiter: string) {\n        this.delimiter = delimiter;\n    }\n\n    /**\n     * Get the XML representation.\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(padding?: string): string {\n        return getTag(this.values.toString().replaceAll(\",\", this.delimiter), this.tagName, this.attributes, padding, false);\n    }\n}\n\n/**\n * A class for representing attributes with attributes.\n */\nexport class NodeWithNodes extends TagWithAttributes {\n\n    /**\n     * The contents.\n     */\n    nodes: Map<number, Tag | TagWithAttributes | NodeWithNodes>;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     */\n    constructor(attributes: Map<string, string> | undefined, tagName: string) {\n        super(attributes, tagName);\n        this.nodes = new Map();\n    }\n\n    /**\n     * Add a node.\n     * @param {Tag | TagWithAttributes | NodeWithNodes} node The node.\n     * @returns The index of the node added.\n     */\n    addNode(node: Tag | TagWithAttributes | NodeWithNodes): number {\n        this.nodes.set(this.nodes.size, node);\n        return this.nodes.size - 1;\n    }\n\n    /**\n     * @returns A string representation.\n     */\n    override toString(): string {\n        let s = super.toString();\n        this.nodes.forEach((v, k) => {\n            s += `, ${v.toString()}`;\n        });\n        return s + \")\";\n    }\n\n    /**\n     * Get the XML representation.\n     * @param pad The pad (Optional).\n     * @param padding The padding (Optional).\n     * @returns An XML representation.\n     */\n    toXML(pad?: string, padding?: string): string {\n        let padding1: string;\n        if (pad != undefined && padding != undefined) {\n            padding1 = padding + pad;\n        }\n        let s: string = \"\";\n        if (this.nodes.size > 0) {\n            this.nodes.forEach((v) => {\n                if (v instanceof NodeWithNodes) {\n                    s += (v as NodeWithNodes).toXML(pad, padding1);\n                } else if (v instanceof TagWithAttributes) {\n                    s += (v as TagWithAttributes).toXML(padding1);\n                } else {\n                    s += (v as Tag).toXML(padding1);\n                }\n            });\n            return getTag(s, this.tagName, this.attributes, padding, true);\n        } else {\n            let s: string = getSelfClosingTag(this.attributes, this.tagName);\n            if (padding != undefined) {\n                return \"\\n\" + padding + s;\n            }\n            return s;\n        }\n    }\n}\n\n/**\n * Create and return a XML start tag. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @returns The XML start tag.\n */\nexport function getStartTag(tagName: string, attributes?: Map<string, any>, padding?: string): string {\n    let s: string = \"\";\n    if (padding != undefined) {\n        s += \"\\n\" + padding;\n    }\n    s += '<' + tagName;\n    if (attributes) {\n        for (let [k, v] of attributes) {\n            s += ' ' + k + '=\"' + v.toString() + '\"';\n        }\n    }\n    return s + '>';\n}\n\n/**\n * Create and return an XML end tag.\n * @param tagName The tag name.\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML end tag.\n */\nexport function getEndTag(tagName: string, padding?: string, padValue?: boolean): string {\n    let s: string = \"\";\n    if (padValue) {\n        if (padding != undefined) {\n            s += \"\\n\" + padding;\n        }\n    }\n    return s + '</' + tagName + '>';\n}\n\n/**\n * Create and return an XML tag with content. For multiple attributes, pass them in a map.\n * If there is only one, then pass the name and value as separate parameters.\n * @param content The content of the tag.\n * @param tagName The tag name.\n * @param attributes The attributes (optional).\n * @param padding The padding (optional).\n * @param padValue Whether to pad the value (optional).\n * @returns The XML tag with content.\n */\nexport function getTag(content: string, tagName: string, attributes?: Map<string, any>,\n    padding?: string, padValue?: boolean): string {\n    let startTag: string = getStartTag(tagName, attributes, padding);\n    let endTag: string = getEndTag(tagName, padding, padValue);\n    return startTag + content + endTag;\n}\n\n/**\n * Get the attributes of an element.\n * @param element The element to get the attributes of.\n * @returns The attributes of the element.\n */\nexport function getAttributes(element: Element): Map<string, string> {\n    let attributeNames: string[] = element.getAttributeNames();\n    let attributes: Map<string, string> = new Map();\n    attributeNames.forEach(function (attributeName) {\n        let attributeValue: string | null = element.getAttribute(attributeName);\n        if (attributeValue != null) {\n            attributes.set(attributeName, attributeValue);\n            //console.log(\"attributeName=\" + attributeName + \" attributeValue=\" + attributeValue);\n        }\n    });\n    return attributes;\n}\n\n/**\n * Get an XML element checking that it is the only one with a given tagName.\n * @param xml The XML document or element.\n * @param tagName The tag name.\n * @returns The element.\n * @throws An error if there is not exactly one element with the given tag name.\n */\nexport function getSingularElement(xml: XMLDocument | Element, tagName: string): Element {\n    ;\n    let e: HTMLCollectionOf<Element> = xml.getElementsByTagName(tagName);\n    if (e.length != 1) {\n        throw new Error(\"Expecting 1 \" + tagName + \" but finding \" + e.length);\n    }\n    return e[0];\n}\n\n/**\n * Convert XML to HTML.\n * @param {string} text The XML text.\n */\nexport function toHTML(text: string): string {\n    return text.replace(/</g, \"&lt;\")\n        .replace(/>/g, \"&gt;\")\n        .replace(/\\n/g, \"<br>\")\n        .replace(/\\t/g, \"&nbsp;&nbsp;&nbsp;&nbsp;\")\n        .replace(/  /g, \"&nbsp;&nbsp;\");\n}","/**\n * Get a heading.\n * @param text The text.\n * @param type The heading type (i.e. 'h1', 'h2', 'h3', 'h4', 'h5', or 'h6').\n * @param id The id of the div.\n * @param className The class of the div.\n */\n/*\nexport function getH3(text: string, type: string, id?: string, className?: string): HTMLHeadingElement {\n    //let heading: HTMLHeadingElement = document.createElement(type);\n    let heading: HTMLHeadingElement = document.createElement(\"h3\");\n    heading.innerHTML = text;\n    if (id != undefined) {\n        heading.id = id;\n    }\n    if (className != undefined) {\n        heading.className = className;\n    }\n\n    return heading + \">\" + text + \"</h\" + level + \">\";\n}\n*/\n\n/**\n * @deprecated There is no need for this method - simply use HTMLButtonElement.\n * Create a button.\n * @param text The text.\n * @param id The id of the button.\n * @param  _class The class of the button.\n * @param  func The function called on a click.\n * @returns The button.\n */\n/*\nexport function getButton(text: string, id?: string, _class?: string, func?: string): HTMLButtonElement {\n    let button: HTMLButtonElement = new HTMLButtonElement();\n    button.innerHTML = text;\n    button.type = \"button\";\n    button.onclick = function () {\n\n    if (id) {\n        button += \" id=\\\"\" + id + \"\\\"\";\n    }\n    if (_class) {\n        button += \" class=\\\"\" + _class + \"\\\"\";\n    }\n    if (func) {\n        button += \" onclick=\\\"\" + func + \"\\\"\";\n    }\n    return button + \">\" + text + \"</button>\";\n}\n*/\n\n/**\n * Create a table cell.\n * @param x A cell for a table row.\n * @param contentEditable If true then the cell is set to be editable.  \n * @returns x wrapped in td tags.\n */\n/*\nexport function getTD(x: string, contentEditable: boolean = false): HTMLTableCellElement {\n    let td: HTMLTableCellElement = document.createElement('td');\n    if (contentEditable) {\n        td.contentEditable = \"true\";\n    }\n    td.innerHTML = x;\n    return td;\n}\n*/\n\n/**\n * @deprecated There is no need for this method - simply use HTMLTableRowElement.\n * Create a table row.\n * @param x A row for a table.\n * @returns x wrapped in tr tags.\n */\n/*\nexport function getTR(x: string): HTMLTableRowElement {\n    let tr: HTMLTableRowElement = document.createElement('tr');\n    tr.innerHTML = x;\n    return tr;\n}\n*/\n\n/**\n * @deprecated There is no need for this method - simply use HTMLTableElement.\n * Create a table.\n * @param {string} x Table rows for a table.\n * @returns {string} x wrapped in table tags.\n */\n/*\nexport function getTable(x: string): HTMLTableElement {\n    let table: HTMLTableElement = document.createElement('table');\n    table.innerHTML = x;\n    return table;\n}\n*/\n\n\n/**\n * Create a collapsible div.\n * @param buttonId The id of the button.\n * @param buttonLabel The label of the button.\n * @param content The content that will be collapsible.\n * @param contentDivId The id of the content div.\n * @param contentDivClassName The class of the content div.\n * @returns A collapsible div.\n */\nexport function getCollapsibleDiv(buttonId: string, buttonLabel: string, content: HTMLElement, \n    contentDivId: string, contentDivClassName?: string): HTMLDivElement {\n    let contentDiv: HTMLDivElement = document.createElement('div');\n    contentDiv.id = contentDivId;\n    if (contentDivClassName != undefined) {\n        contentDiv.className = contentDivClassName;\n    }\n    let button: HTMLButtonElement = document.createElement('button');\n    button.id = buttonId;\n    button.className = 'collapsible';\n    button.innerText = buttonLabel;\n    contentDiv.appendChild(button);\n    contentDiv.appendChild(content);\n    return contentDiv;\n}\n\n/**\n * For making elements with the class \"collapsible\" collapsible.\n */\nexport function makeCollapsible(): void {\n    var collapsibleElements = document.getElementsByClassName(\"collapsible\");\n    for (var i = 0; i < collapsibleElements.length; i++) {\n        // Remove existing event listener\n        collapsibleElements[i].removeEventListener(\"click\", toggleCollapsible);\n        // Add new event listener\n        collapsibleElements[i].addEventListener(\"click\", toggleCollapsible);\n    }\n}\n\n/**\n * For toggling the collapsible content.\n */\nfunction toggleCollapsible(this: HTMLElement): void {\n    this.classList.toggle(\"active\");\n    let contentDiv = this.nextElementSibling as HTMLElement;\n    if (contentDiv.style.display === \"block\") {\n        contentDiv.style.display = \"none\";\n    } else {\n        contentDiv.style.display = \"block\";\n    }\n}\n\n/**\n * Create a input. This is an HTMLDivElement that contains an HTMLLabelElement and a HTMLInputElement.\n * @param type The input type (e.g. \"text\", \"number\").\n * @param id The id of the input.\n * @param func The function called on a change to the input.\n * @param value The value of the input.\n * @param labelText The label text.\n * @returns A HTMLDivElement that contains a HTMLLabelElement and a HTMLInputElement.\n */\nexport function getInput(type: string, id: string, func: (event: Event) => void, value: string, labelText?: string): HTMLDivElement {\n        let input: HTMLInputElement = document.createElement('input');\n    input.type = type;\n    input.id = id;\n    input.onchange = func;\n    input.value = value;\n    let label: HTMLLabelElement = document.createElement('label');\n    label.htmlFor = id;\n    if (labelText) {\n        label.textContent = labelText + \": \";\n    } else {\n        label.textContent = \"\";\n    }\n    let container: HTMLDivElement = document.createElement('div');\n    container.appendChild(label);\n    container.appendChild(input);\n    return container;\n}\n\n/**\n * Create a self closing tag.\n * @param attributes The attributes.\n * @param tagName The tag name.\n */\nexport function getSelfClosingTag(attributes: Map<string, string> | undefined, tagName: string): string {\n    let s: string = \"<\" + tagName;\n    if (attributes) {\n        for (let [key, value] of attributes) {\n            s += \" \" + key + \"=\\\"\" + value + \"\\\"\";\n        }\n    }\n    return s + \" />\";\n}\n\n/**\n * For resizing an input to the width of what it contains.\n * @param input The input to resize.\n * @param minSize The minimum size of the input.\n */\nexport function resizeInput(input: HTMLInputElement, minSize?: number) {\n    if (minSize == undefined) {\n        minSize = 4;\n    }\n    input.style.width = (input.value.length + minSize) + \"ch\";\n}","import { get } from './util.js';\nimport {\n    TagWithAttributes, NodeWithNodes, NumberArrayNode, NumberNode, StringNode\n} from './xml.js';\n\n\n/**\n * Atom data.\n * The examples can be used to compile this.\n * It is likely that only a small subset of atoms in the periodic table are of interest...\n */\n\n/**\n * Molecule data.\n * The examples can be used to compile this.\n * It would be good to use, have, provide ways of sharing and to be able to specify/edit molecules...\n * This would include data about atoms, bonds, molecule properties and other things...\n */\n\n/**\n * Atom instances must have an \"elementType\" attribute.\n * The attributes may include \"id\", \"x3\", \"y3\", \"z3\" - coordinates used to depict a molecule containing the atom.\n * In the XML, an \"atom\" node is typically a child of an \"atomArray\" parent node.\n * If there is only one atom, it may be a child of a \"molecule\" parent node.\n */\nexport class Atom extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"atom\";\n\n    /**\n     * The id if specified, or the elementType.\n     */\n    id: string;\n\n    /**\n     * The element type.\n     */\n    elementType: string;\n\n    /**\n     * @param attributes The attributes. If there is no \"elementType\" key an error will be thrown.\n     * If there is no \"id\" then \"this.id\" is set to the \"elementType\".\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Atom.tagName);\n        let elementType: string | undefined = attributes.get(\"elementType\");\n        if (elementType == undefined) {\n            throw new Error('elementType is undefined');\n        }\n        this.elementType = elementType;\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            id = this.elementType;\n        }\n        this.id = id;\n    }\n}\n\n/**\n * A class for representing an atomArray.\n * There can be no attributes.\n * In the XML, a \"atomArray\" node is typically a child of a \"molecule\" parent node and has \"atom\" node children.\n */\nexport class AtomArray extends NodeWithNodes {\n\n    /**\n    * The tag name.\n    */\n    static readonly tagName: string = \"atomArray\";\n\n    /**\n     * @param attributes The attributes.\n     * @param atoms The atoms.\n     */\n    constructor(attributes: Map<string, string> | undefined, atoms: Atom[]) {\n        super(attributes, AtomArray.tagName);\n        atoms.forEach(atom => {\n            this.nodes.set(this.nodes.size, atom);\n        });\n    }\n}\n\n/**\n * An atomic bond between two atoms in a molecule.\n * Instances must have a \"atomRefs2\" attribute - a space separated list of two atom ids.\n * The attributes may include \"order\" - presumed to be the order of the bond. Generally:\n *  order = (the number of bonding electrons) - ((the number of non-bonding electrons) / 2).\n * In the XML, a \"bond\" node is typically a child of a \"bondArray\" parent node.\n */\nexport class Bond extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bond\";\n\n    /**\n     * The atomRefs2.\n     */\n    atomRefs2: string;\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Bond.tagName);\n        let atomRefs2: string | undefined = attributes.get(\"atomRefs2\");\n        if (atomRefs2 == undefined) {\n            throw new Error('atomRefs2 is undefined');\n        }\n        this.atomRefs2 = atomRefs2;\n    }\n}\n\n/**\n * There can be no attributes.\n * In the XML, a \"bondArray\" node is typically a child of a \"molecule\" parent node and has \"bond\" node children.\n */\nexport class BondArray extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"bondArray\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bonds A Map of bonds with keys as ids.\n     */\n    constructor(attributes: Map<string, string>, bonds: Bond[]) {\n        super(attributes, BondArray.tagName);\n        bonds.forEach(bond => {\n            this.nodes.set(this.nodes.size, bond);\n        });\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, a \"scalar\" node is a child of a \"property\" node.\n */\nexport class PropertyScalar extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"scalar\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PropertyScalar.tagName, value);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            if (this.attributes != undefined) {\n                let existingUnits: string | undefined = this.attributes.get(\"units\");\n                if (existingUnits != undefined) {\n                    if (existingUnits != units) {\n                        //console.log('Units are not the same, changing units...');\n                        this.attributes.set(\"units\", units);\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes may contain \"units\".\n * In the XML, an \"array\" node is a child of a \"property\" node.\n */\nexport class PropertyArray extends NumberArrayNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"array\";\n\n    /**\n     * @param attributes The attributes.\n     * @param values The values.\n     * @param delimiter The delimiter of the values (Optional - default will be \",\").\n     */\n    constructor(attributes: Map<string, string>, values: number[], delimiter?: string) {\n        super(attributes, PropertyArray.tagName, values, delimiter);\n    }\n\n    /**\n     * This updates the units of the property. It does not do any unit conversion.\n     * It simply updates the specified units of a property\n     * @param units Updates the units of the property.\n     */\n    updateUnits(units: string | undefined): void {\n        // Check the units are the same and if not replace the units...\n        if (units) {\n            if (this.attributes != undefined) {\n                let existingUnits: string | undefined = this.attributes.get(\"units\");\n                if (existingUnits != undefined) {\n                    if (existingUnits != units) {\n                        //console.log('Units are not the same, changing units...');\n                        this.attributes.set(\"units\", units);\n                    }\n                }\n            }\n        }\n    }\n}\n\n/**\n * The attributes must contain \"dictRef\" which is a dictionary reference for a type of property.\n * In the XML, a \"property\" node has a \"propertyList\" parent and either a \"scalar\" or \"array\" or another type of child not yet implemented (there could be a \"matrix\" type).\n */\nexport class Property extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"property\";\n\n    /**\n     * The dictRef.\n     */\n    dictRef: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property?: PropertyScalar | PropertyArray) {\n        super(attributes, Property.tagName);\n        let dictRef: string | undefined = attributes.get(\"dictRef\");\n        if (dictRef == undefined) {\n            throw new Error('dictRef is undefined');\n        }\n        this.dictRef = dictRef;\n        if (property) {\n            this.nodes.set(0, property);\n        }\n    }\n\n    /**\n     * @returns The property.\n     */\n    getProperty(): PropertyScalar | PropertyArray {\n        return this.nodes.get(0) as PropertyScalar | PropertyArray;\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: PropertyScalar | PropertyArray): void {\n        this.nodes.set(0, property);\n    }\n\n}\n\n/**\n * The Zero Potential Energy.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[kJ/mol]).\n */\nexport class ZPE extends Property {\n\n    static readonly dictRef: string = \"me:ZPE\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:frequenciesScaleFactor\" property.\n */\nexport class FrequenciesScaleFactor extends Property {\n\n    static readonly dictRef: string = \"me:frequenciesScaleFactor\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The vibration frequencies.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class VibFreqs extends Property {\n\n    static readonly dictRef: string = \"me:vibFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The rotation constants.\n * The child \"array\" node should have a \"units\" attribute (known units=[cm-1]).\n */\nexport class RotConsts extends Property {\n\n    static readonly dictRef: string = \"me:rotConsts\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * The Molecular Weight.\n * The child \"scalar\" node should have a \"units\" attribute (known units=[amu]).\n */\nexport class MW extends Property {\n\n    static readonly dictRef: string = \"me:MW\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyScalar) {\n        super(attributes, property);\n    }\n}\n\n/**\n * \"me:imFreqs\"\n */\nexport class ImFreqs extends Property {\n\n    static readonly dictRef: string = \"me:imFreqs\";\n\n    /**\n     * @param attributes The attributes.\n     * @param property The property.\n     */\n    constructor(attributes: Map<string, string>, property: PropertyArray) {\n        super(attributes, property);\n    }\n}\n\n/**\n * In the XML, a \"propertyList\" node is a child node of a \"molecule\" node and has one or more \"property\" child node.\n * There can be no attributes.\n */\nexport class PropertyList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"propertyList\";\n\n    /**\n     * The index.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param properties The properties (optional).\n     */\n    constructor(attributes: Map<string, string>, properties?: Property[]) {\n        super(attributes, PropertyList.tagName);\n        this.index = new Map();\n        if (properties) {\n            properties.forEach(property => {\n                this.nodes.set(this.nodes.size, property);\n                this.index.set(property.dictRef, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let i: number | undefined = this.index.get(dictRef);\n        if (i != undefined) {\n            return this.nodes.get(i) as Property;\n        } else {\n            throw new Error('Property ' + dictRef + ' does not exist');\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let i: number | undefined = this.index.get(property.dictRef);\n        if (i == undefined) {\n            //console.log('Property ' + property.dictRef + ' does not exist, adding...');\n            this.nodes.set(this.nodes.size, property);\n            this.index.set(property.dictRef, this.nodes.size - 1);\n        } else {\n            console.log('Property ' + property.dictRef + ' already exists, updating...');\n            this.nodes.set(i, property);\n        }\n    }\n}\n\n/**\n * In the XML, a \"me:deltaEDown\" node is a child node of a \"me:energyTransferModel\" node.\n * The attributes may include \"bathGas\", \"units\", \"lower\", \"upper\", and \"stepsize\".\n */\nexport class DeltaEDown extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:deltaEDown\";\n\n    /**\n     * @param attributes The attributes.\n     * @param units The units.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, DeltaEDown.tagName, value);\n    }\n\n    /**\n     * @returns The bath gas of the DeltaEDown.\n     */\n    getBathGas(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"bathGas\");\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas of the DeltaEDown.\n     */\n    setBathGas(bathGas: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"bathGas\", bathGas);\n        }\n    }\n\n    /**\n     * @returns The units of the DeltaEDown.\n     */\n    getUnits(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"units\");\n        }\n    }\n\n    /**\n     * @returns The lower of the DeltaEDown.\n     */\n    getLower(): number | undefined {\n        if (this.attributes != undefined) {\n            return parseFloat(get(this.attributes, \"lower\"));\n        }\n    }\n\n    /**\n     * @param lower The lower of the DeltaEDown.\n     */\n    setLower(lower: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"lower\", lower.toString());\n        }\n    }\n\n    /**\n     * @returns The upper of the DeltaEDown.\n     */\n    getUpper(): number | undefined {\n        if (this.attributes != undefined) {\n            return parseFloat(get(this.attributes, \"upper\"));\n        }\n    }\n\n    /**\n     * @param upper The upper of the DeltaEDown.\n     */\n    setUpper(upper: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"upper\", upper.toString());\n        }\n    }\n\n    /**\n     * @returns The stepsize of the DeltaEDown.\n     */\n    getStepsize(): number | undefined {\n        if (this.attributes != undefined) {\n            return parseFloat(get(this.attributes, \"stepsize\"));\n        }\n    }\n\n    /**\n     * @param stepsize The stepsize of the DeltaEDown.\n     */\n    setStepsize(stepsize: number): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"stepsize\", stepsize.toString());\n        }\n    }\n\n    /**\n     * @param value The value of the DeltaEDown.\n     */\n    setValue(value: number): void {\n        this.value = value;\n    }\n}\n\n/**\n * In the XML, a \"me:energyTransferModel\" node is a child node of a \"molecule\" node.\n * It may have:\n * One or more \"me:deltaEDown\" child nodes.\n * Additional child nodes might include \"me:deltaEDownTExponent\".\n */\nexport class EnergyTransferModel extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyTransferModel\";\n\n    /**\n     * @param attributes The attributes.\n     * @param deltaEDowns The DeltaEDowns.\n     */\n    constructor(attributes: Map<string, string>, deltaEDowns: DeltaEDown[]) {\n        super(attributes, EnergyTransferModel.tagName);\n        deltaEDowns.forEach(deltaEDown => {\n            this.nodes.set(this.nodes.size, deltaEDown);\n        });\n    }\n\n    /**\n     * @param index The index of the DeltaEDown to return.\n     * @returns The DeltaEDown at the given index.\n     */\n    getDeltaEDown(index: number): DeltaEDown {\n        if (index < 0 || index >= this.nodes.size) {\n            throw new Error('index out of range');\n        }\n        return this.nodes.get(index) as DeltaEDown;\n    }\n\n    /**\n     * Set the DeltaEDown at the given index.\n     * @param index The index to set the DeltaEDown at.\n     * @param deltaEDown The DeltaEDown to set at the index.\n     */\n    setDeltaEDown(index: number, deltaEDown: DeltaEDown): void {\n        this.nodes.set(index, deltaEDown);\n    }\n\n    /**\n     * Add the DeltaEDowns.\n     * @param deltaEDown The DeltaEDown.\n     * @returns The index of the DeltaEDown added.\n     */\n    addDeltaEDown(deltaEDown: DeltaEDown): number {\n        this.nodes.set(this.nodes.size, deltaEDown);\n        return this.nodes.size - 1;\n    }\n}\n\n/**\n * In the XML, a \"me:DOSCMethod\" node is a child node of a \"molecule\" node.\n */\nexport class DOSCMethod extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:DOSCMethod\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, DOSCMethod.tagName);\n    }\n}\n\n/**\n * In the XML, a \"me:bondRef\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class BondRef extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bondRef\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     */\n    constructor(attributes: Map<string, string>, bondRef: string) {\n        super(attributes, BondRef.tagName, bondRef);\n    }\n}\n\n/**\n * In the XML, a \"me:PotentialPoint\" node is a child node of a \"me:HinderedRotorPotential\" node.\n */\nexport class PotentialPoint extends TagWithAttributes {\n\n    static readonly tagName: string = \"me:PotentialPoint\";\n\n    /**\n     * @param attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, PotentialPoint.tagName);\n    }\n}\n\n/**\n * In the XML, a \"me:HinderedRotorPotential\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class HinderedRotorPotential extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:HinderedRotorPotential\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PotentialPoint[]} potentialPoints The PotentialPoints.\n     */\n    constructor(attributes: Map<string, string>, potentialPoints: PotentialPoint[]) {\n        super(attributes, HinderedRotorPotential.tagName);\n        potentialPoints.forEach(p => {\n            this.nodes.set(this.nodes.size, p);\n        });\n    }\n\n    /**\n     * @returns The potential point with the given index.\n     */\n    getPotentialPoint(index: number): PotentialPoint {\n        return this.nodes.get(index) as PotentialPoint;\n    }\n\n    /**\n     * Set the potential point at the given index.\n     * @param index The index to set the potential point at.\n     * @param p The potential point to set at the index.\n     */\n    setPotentialPoints(index: number, p: PotentialPoint): void {\n        this.nodes.set(index, p);\n    }\n\n    /**\n     * Add the potential point.\n     * @param p The potential point.\n     * @returns The index of the potential point added.\n     */\n    addPotentialPoint(p: PotentialPoint): number {\n        this.nodes.set(this.nodes.size, p);\n        return this.nodes.size - 1;\n    }\n\n}\n\n/**\n * In the XML, a \"me:periodicity\" node is a child node of a \"me:ExtraDOSCMethod\" node.\n */\nexport class Periodicity extends NumberNode {\n\n    static readonly tagName: string = \"me:periodicity\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Periodicity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:ExtraDOSCMethod\" node is a child node of a \"molecule\" node.\n */\nexport class ExtraDOSCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:ExtraDOSCMethod\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bondRef The bondRef.\n     * @param hinderedRotorPotential The HinderedRotorPotential.\n     * @param periodicity The Periodicity.\n     */\n    constructor(attributes: Map<string, string>, bondRef: BondRef | undefined,\n        hinderedRotorPotential: HinderedRotorPotential | undefined,\n        periodicity: Periodicity | undefined) {\n        super(attributes, ExtraDOSCMethod.tagName);\n        if (bondRef) {\n            this.nodes.set(this.nodes.size, bondRef);\n        }\n        if (hinderedRotorPotential) {\n            this.nodes.set(this.nodes.size, hinderedRotorPotential);\n        }\n        if (periodicity) {\n            this.nodes.set(this.nodes.size, periodicity);\n        }\n    }\n\n    /**\n     * @returns The bondRef.\n     */\n    getBondRef(): BondRef | undefined {\n        return this.nodes.get(0) as BondRef;\n    }\n\n    /**\n     * Set the bondRef.\n     * @param bondRef The bondRef.\n     */\n    setBondRef(bondRef: BondRef) {\n        this.nodes.set(0, bondRef);\n    }\n\n    /**\n     * @returns The hindered rotor potential of the molecule.\n     */\n    getHinderedRotorPotential(): HinderedRotorPotential | undefined {\n        return this.nodes.get(1) as HinderedRotorPotential;\n    }\n\n    /**\n     * Set the hindered rotor potential.\n     * @param hinderedRotorPotential The hindered rotor potential.\n     */\n    setHinderedRotorPotential(hinderedRotorPotential: HinderedRotorPotential) {\n        this.nodes.set(1, hinderedRotorPotential);\n    }\n\n    /**\n     * @returns The periodicity of the molecule.\n     */\n    getPeriodicity(): Periodicity | undefined {\n        return this.nodes.get(2) as Periodicity;\n    }\n\n    /**\n     * Set the periodicity.\n     * @param periodicity The periodicity.\n     */\n    setPeriodicity(periodicity: Periodicity) {\n        this.nodes.set(2, periodicity);\n    }\n\n}\n\n/**\n * The attributes may include \"units\".\n * In the XML, a \"me:reservoirSize\" node is a child node of a \"molecule\" node.\n */\nexport class ReservoirSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:reservoirSize\";\n\n    /**\n     * @param attributes The attributes.\n     * @param value The value.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ReservoirSize.tagName, value);\n    }\n}\n\n\n/**\n * The attributes may include \"description\" and \"active\" (and possibly others).\n * In the XML, a \"molecule\" node is a child node of a \"moleculeList\" node.\n */\nexport class Molecule extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The index. The keys are the tag names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    // The molecule ID.\n    id: string;\n\n    /**\n     * Create a molecule.\n     * @param attributes The attributes. If there is no \"id\" key an error will be thrown.\n     * Additional attributes may include \"description\" and \"active\" (and posibly others), but these do not exist for all molecules.\n     * @param atoms The atom or atoms.\n     * @param bonds The bonds.\n     * @param properties The properties.\n     * @param energyTransferModel The energy transfer model.\n     * @param dOSCMethod The method for calculating density of states.\n     * @param extraDOSCMethod The extra method for calculating density of states.\n     * @param reservoirSize The reservoir size.\n     */\n    constructor(\n        attributes: Map<string, string>,\n        atoms?: Atom | AtomArray,\n        bonds?: Bond | BondArray,\n        properties?: PropertyList | Property,\n        energyTransferModel?: EnergyTransferModel,\n        dOSCMethod?: DOSCMethod,\n        extraDOSCMethod?: ExtraDOSCMethod,\n        reservoirSize?: ReservoirSize) {\n        super(attributes, Molecule.tagName);\n        this.index = new Map();\n        let id: string | undefined = attributes.get(\"id\");\n        if (id == undefined) {\n            throw new Error('id is undefined');\n        }\n        this.id = id;\n        let i: number = 0;\n        // Atoms\n        if (atoms) {\n            this.nodes.set(i, atoms);\n            if (atoms instanceof Atom) {\n                this.index.set(Atom.tagName, i);\n            } else {\n                this.index.set(AtomArray.tagName, i);\n            }\n            i++;\n        }\n        // Bonds\n        if (bonds) {\n            this.nodes.set(i, bonds);\n            this.index.set(BondArray.tagName, i);\n            i++;\n        }\n        // Properties\n        if (properties) {\n            this.nodes.set(i, properties);\n            this.index.set(PropertyList.tagName, i);\n            i++;\n        }\n        // EnergyTransferModel\n        if (energyTransferModel) {\n            this.nodes.set(i, energyTransferModel);\n            this.index.set(EnergyTransferModel.tagName, i);\n            i++;\n        }\n        // DOSCMethod\n        if (dOSCMethod) {\n            this.nodes.set(i, dOSCMethod);\n            this.index.set(DOSCMethod.tagName, i);\n        }\n        // ExtraDOSCMethod\n        if (extraDOSCMethod) {\n            this.nodes.set(i, extraDOSCMethod);\n            this.index.set(ExtraDOSCMethod.tagName, i);\n        }\n        // ReservoirSize\n        if (reservoirSize) {\n            this.nodes.set(i, reservoirSize);\n            this.index.set(ReservoirSize.tagName, i);\n        }\n    }\n\n    /**\n     * Get the description of the molecule.\n     * @returns The description of the molecule, or undefined if it is not set.\n     */\n    getDescription(): string | undefined {\n        if (this.attributes != undefined) {\n            return this.attributes.get(\"description\");\n        }\n    }\n\n    /**\n     * Set the description of the molecule.\n     * @param description The description of the molecule.\n     */\n    setDescription(description: string): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"description\", description);\n        }\n    }\n\n    /**\n     * Get the active status of the molecule.\n     * @returns The active status of the molecule, or undefined if it is not set.\n     */\n    getActive(): boolean | undefined {\n        if (this.attributes != undefined) {\n            let active = this.attributes.get(\"active\");\n            if (active != undefined) {\n                if (active == \"true\") {\n                    return true;\n                } else {\n                    return false;\n                }\n            }\n        }\n    }\n\n    /**\n     * Set the active status of the molecule.\n     * @param active The active status of the molecule.\n     */\n    setActive(active: boolean): void {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"active\", active.toString());\n        }\n    }\n\n    /**\n     * Get a label for the molecule which includes the is and any description and whether active.\n     * @returns A label for the molecule detailing the attributes of the XML element (including id, \n     * and possibly including description and whether active).\n     */\n    getLabel(): string {\n        let label: string = this.id;\n        let description: string | undefined = this.getDescription();\n        if (description != undefined) {\n            label += \" (\" + description + \")\";\n        }\n        let active: boolean | undefined = this.getActive();\n        if (active) {\n            label += \" (active)\";\n        }\n        return label;\n    }\n\n    /**\n     * @returns A comma and space separated string of the attributes of the molecule.\n     */\n    getAttributesAsString(): string {\n        if (this.attributes == undefined) {\n            return \"\";\n        }\n        return Array.from(this.attributes, ([key, value]) => `${key}=\\\"${value}\\\"`).join(', ');\n    }\n\n    /**\n     * @returns The properties of the molecule.\n     */\n    getProperties(): PropertyList | Property | undefined {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            i = this.index.get(Property.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as Property;\n            }\n        } else {\n            return this.nodes.get(i) as PropertyList;\n        }\n    }\n\n    /**\n     * @param properties The properties.\n     */\n    setProperties(properties: PropertyList | Property) {\n        let i: number | undefined = this.index.get(PropertyList.tagName);\n        if (i == undefined) {\n            this.index.set(PropertyList.tagName, this.nodes.size);\n            this.addNode(properties);\n        } else {\n            this.nodes.set(i, properties);\n        }\n    }\n\n    /**\n     * Get a property.\n     * @param dictRef The dictRef of the property.\n     * @returns The property.\n     */\n    getProperty(dictRef: string): Property | undefined {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                //console.log('PropertyList');\n                return properties.getProperty(dictRef);\n            } else {\n                //console.log('Property');\n                return properties;\n            }\n        }\n    }\n\n    /**\n     * Set the property.\n     * @param property The property.\n     */\n    setProperty(property: Property): void {\n        let properties: PropertyList | Property | undefined = this.getProperties();\n        if (properties != undefined) {\n            if (properties instanceof PropertyList) {\n                properties.setProperty(property);\n            } else {\n                this.setProperties(properties);\n            }\n        } else {\n            this.setProperties(property);\n        }\n    }\n\n    /**\n     * @returns The atoms of the molecule.\n     */\n    getAtoms(): Atom | AtomArray | undefined {\n        let i: number | undefined = this.index.get(Atom.tagName);\n        if (i == undefined) {\n            i = this.index.get(AtomArray.tagName);\n            if (i == undefined) {\n                return undefined;\n            } else {\n                return this.nodes.get(i) as AtomArray;\n            }\n        } else {\n            return this.nodes.get(i) as Atom;\n        }\n    }\n\n    /**\n     * @returns The bonds of the molecule.\n     */\n    getBonds(): Bond | undefined {\n        let i: number | undefined = this.index.get(BondArray.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as Bond;\n        }\n    }\n\n    /**\n     * @returns The energy transfer model of the molecule.\n     */\n    getEnergyTransferModel(): EnergyTransferModel | undefined {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as EnergyTransferModel;\n        }\n    }\n\n    /**\n     * Set the energy transfer model.\n     * @param energyTransferModel The energy transfer model.\n     */\n    setEnergyTransferModel(energyTransferModel: EnergyTransferModel) {\n        let i: number | undefined = this.index.get(EnergyTransferModel.tagName);\n        if (i == undefined) {\n            this.index.set(EnergyTransferModel.tagName, this.nodes.size);\n            this.addNode(energyTransferModel);\n        } else {\n            this.nodes.set(i, energyTransferModel);\n        }\n    }\n\n    /**\n     * @returns The DOSC method of the molecule.\n     */\n    getDOSCMethod(): DOSCMethod | undefined {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as DOSCMethod;\n        }\n    }\n\n    /**\n     * Set the DOSC method.\n     * @param dOSCMethod The DOSC method.\n     */\n    setDOSCMethod(dOSCMethod: DOSCMethod) {\n        let i: number | undefined = this.index.get(DOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(DOSCMethod.tagName, this.nodes.size);\n            this.addNode(dOSCMethod);\n        } else {\n            this.nodes.set(i, dOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The extra DOSC method of the molecule.\n     */\n    getExtraDOSCMethod(): ExtraDOSCMethod | undefined {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ExtraDOSCMethod;\n        }\n    }\n\n    /**\n     * Set the extra DOSC method.\n     * @param extraDOSCMethod The extra DOSC method.\n     */\n    setExtraDOSCMethod(extraDOSCMethod: ExtraDOSCMethod) {\n        let i: number | undefined = this.index.get(ExtraDOSCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(ExtraDOSCMethod.tagName, this.nodes.size);\n            this.addNode(extraDOSCMethod);\n        } else {\n            this.nodes.set(i, extraDOSCMethod);\n        }\n    }\n\n    /**\n     * @returns The reservoir size of the molecule.\n     */\n    getReservoirSize(): ReservoirSize | undefined {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            return undefined;\n        } else {\n            return this.nodes.get(i) as ReservoirSize;\n        }\n    }\n\n    /**\n     * Set the reservoir size.\n     * @param reservoirSize The reservoir size.\n     */\n    setReservoirSize(reservoirSize: ReservoirSize) {\n        let i: number | undefined = this.index.get(ReservoirSize.tagName);\n        if (i == undefined) {\n            this.index.set(ReservoirSize.tagName, this.nodes.size);\n            this.addNode(reservoirSize);\n        } else {\n            this.nodes.set(i, reservoirSize);\n        }\n    }\n\n    /**\n     * Get the ZPE value of the molecule.\n     */\n    getEnergy(): number {\n        let p: Property | undefined = this.getProperty(ZPE.dictRef);\n        if (p == undefined) {\n            console.log(this.toString());\n            throw new Error('ZPE property not found');\n            //return 0;\n        }\n        return (p.getProperty() as PropertyScalar).value;\n    }\n}","import {\n    Molecule, ZPE\n} from './molecule.js';\n\nimport {\n    TagWithAttributes, NodeWithNodes, NumberNode, Tag, NumberArrayNode, StringNode\n} from './xml.js';\n\n/**\n * A reference to a molecule, not to be confused with a Molecule.\n * The attribute \"ref\" is the same as a Molecule ID for a molecule in the XML \"moleculeList\".\n */\nexport class ReactionMolecule extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"molecule\";\n\n    /**\n     * The ref attribute.\n     */\n    ref: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param tagName The tag name.\n     * @param molecule The molecule (an abbreviated molecule).\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, ReactionMolecule.tagName);\n        this.ref = attributes.get(\"ref\") as string;\n    }\n}\n\n/**\n * A molecule that reacts in a reaction.\n * In the XML, a \"reactant\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Reactant extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactant\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Reactant.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * A molecule produced in a reaction.\n * In the XML, a \"product\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class Product extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"product\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, Product.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n\n}\n\n/**\n * A molecule that is a transition state in a reaction.\n * In the XML, a \"me:transitionState\" node is a child of the \"reaction\" node and has a child \"molecule\" node.\n */\nexport class TransitionState extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:transitionState\";\n\n    /**\n     * @param attributes The attributes.\n     * @param molecule The reaction molecule.\n     */\n    constructor(attributes: Map<string, string>, molecule: ReactionMolecule) {\n        super(attributes, TransitionState.tagName);\n        this.addNode(molecule);\n    }\n\n    /**\n     * @returns The molecule.\n     */\n    getMolecule(): ReactionMolecule {\n        return this.nodes.get(0) as ReactionMolecule;\n    }\n}\n\n/**\n * In the XML, a \"me:preExponential\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class PreExponential extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:preExponential\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, PreExponential.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:activationEnergy\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class ActivationEnergy extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:activationEnergy\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, ActivationEnergy.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:TInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class TInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:TInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, TInfinity.tagName, value);\n    }\n}\n\n/**\n * In the XML, a \"me:nInfinity\" node is a child of a \"me:MCRCMethod\" node.\n */\nexport class NInfinity extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:nInfinity\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, NInfinity.tagName, value);\n    }\n}\n\n/**\n * Extended classes indicate how microcanonical rate constant is to be treated.\n * In the XML, a \"me:MCRCMethod\" node is a child of a \"reaction\" node.\n */\nexport class MCRCMethod extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:MCRCMethod\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, MCRCMethod.tagName);\n    }\n}\n\n/**\n * The Inverse Laplace Transform (ILT) type of microcanonical rate constant.\n */\nexport class MesmerILT extends MCRCMethod {\n\n    /**\n     * The xsiType.\n     */\n    static readonly xsiType: string = \"me:MesmerILT\";\n\n    /**\n     * The tag name.\n     */\n    static readonly xsiType2: string = \"MesmerILT\";\n\n    /**\n     * The index for the nodes. \n     */\n    index: Map<string, number>;\n\n    /**\n     * Should any parameters be specified as being optional?\n     * @param attributes The attributes.\n     * @param preExponential The pre-exponential factor (optional).\n     * @param activationEnergy The activation energy (optional).\n     * @param tInfinity The TInfinity (optional).\n     * @param nInfinity The nInfinity (optional).\n     */\n    constructor(attributes: Map<string, string>, preExponential?: PreExponential,\n        activationEnergy?: ActivationEnergy, tInfinity?: TInfinity, nInfinity?: NInfinity) {\n        super(attributes);\n        this.index = new Map<string, number>();\n        if (preExponential != undefined) {\n            this.index.set(PreExponential.tagName, this.index.size);\n            this.addNode(preExponential);\n        }\n        if (activationEnergy != undefined) {\n            this.index.set(ActivationEnergy.tagName, this.index.size);\n            this.addNode(activationEnergy);\n        }\n        if (tInfinity != undefined) {\n            this.index.set(TInfinity.tagName, this.index.size);\n            this.addNode(tInfinity);\n        }\n        if (nInfinity != undefined) {\n            this.index.set(NInfinity.tagName, this.index.size);\n            this.addNode(nInfinity);\n        }\n    }\n\n    /**\n     * @returns The pre-exponential factor or undefined if it does not exist.\n     */\n    getPreExponential(): PreExponential | undefined {\n        let i: number | undefined = this.index.get(PreExponential.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as PreExponential;\n    }\n\n    /**\n     * @returns The activation energy or undefined if it does not exist.\n     */\n    getActivationEnergy(): ActivationEnergy | undefined {\n        let i: number | undefined = this.index.get(ActivationEnergy.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ActivationEnergy;\n    }\n\n    /**\n     * @returns The TInfinity or undefined if it does not exist.\n     */\n    getTInfinity(): TInfinity | undefined {\n        let i: number | undefined = this.index.get(TInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as TInfinity;\n    }\n\n    /**\n     * @returns The NInfinity or undefined if it does not exist.\n     */\n    getNInfinity(): NInfinity | undefined {\n        let i: number | undefined = this.index.get(NInfinity.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as NInfinity;\n    }\n}\n\n/**\n * In the XML, the \"me:tunneling\" node is a child of a \"reaction\" node.\n */\nexport class Tunneling extends TagWithAttributes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:tunneling\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     */\n    constructor(attributes: Map<string, string>) {\n        super(attributes, Tunneling.tagName);\n    }\n}\n\n/**\n * In the XML, the \"me:excessReactantConc\" node is a child of a \"reaction\" node.\n */\nexport class ExcessReactantConc extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:excessReactantConc\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value of the factor.\n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExcessReactantConc.tagName, value);\n    }\n}\n\n/**\n * A class for representing a reaction.\n */\nexport class Reaction extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reaction\";\n\n    /**\n     * The index for the nodes.\n     * The key is the type of node.\n     * The value is the index of the node in the nodes array or if there are multiple nodes of this type, \n     * the value is a Map where the key of the map is the dictRef of the Node and the value is the respective node index for that specific thing.\n     */\n    index: Map<string, number | Map<string, number>>;\n\n    /**\n     * The reactants index.\n     * The key is the ref of the reactant.\n     * The value is the index of the reactant in the nodes array.\n     */\n    reactantsIndex: Map<string, number>;\n\n    /**\n     * The products index.\n     * The key is the ref of the product.\n     * The value is the index of the product in the nodes array.\n     */\n    productsIndex: Map<string, number>;\n\n    /**\n     * The id of the reaction.\n     */\n    id: string;\n\n    /**\n     * @param attributes The attributes.\n     * @param id The id of the reaction.\n     * @param reactants The reactants in the reaction.\n     * @param products The products of the reaction.\n     * @param tunneling The tunneling (optional).\n     * @param transitionStates The transition states (optional).\n     * @param mCRCMethod The MCRCMethod (optional).\n     * @param excessReactantConc The excess reactant concentration (optional).\n     */\n    constructor(attributes: Map<string, string>, id: string,\n        reactants: Reactant[], products: Product[], tunneling?: Tunneling,\n        transitionStates?: TransitionState[], mCRCMethod?: MCRCMethod,\n        excessReactantConc?: ExcessReactantConc) {\n        super(attributes, Reaction.tagName);\n        this.index = new Map();\n        this.id = id;\n        this.reactantsIndex = new Map();\n        reactants.forEach(reactant => {\n            this.addNode(reactant);\n            this.addToIndex(Reactant.tagName, reactant);\n            this.reactantsIndex.set(reactant.getMolecule().ref, this.nodes.size - 1);\n        });\n        this.productsIndex = new Map();\n        products.forEach(product => {\n            this.addToIndex(Product.tagName, product);\n            this.addNode(product);\n            this.productsIndex.set(product.getMolecule().ref, this.nodes.size - 1);\n        });\n        if (tunneling != undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        }\n        if (transitionStates != undefined) {\n            transitionStates.forEach(transitionState => {\n                this.addToIndex(Product.tagName, transitionState);\n                this.addNode(transitionState);\n            });\n        }\n        if (mCRCMethod != undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        }\n        if (excessReactantConc != undefined) {\n            this.index.set(ExcessReactantConc.tagName, this.nodes.size);\n            this.addNode(excessReactantConc);\n        }\n    }\n\n    /**\n     * Add a node to the index.\n     */\n    addToIndex(tagName: string, node: NodeWithNodes): void {\n        let v: Map<string, number> | number | undefined = this.index.get(tagName);\n        if (v == undefined) {\n            this.index.set(tagName, this.nodes.size);\n        } else if (v instanceof Map) {\n            (v as Map<string, number>).set(node.tagName, this.nodes.size);\n        } else {\n            let map: Map<string, number> = new Map<string, number>();\n            map.set((this.nodes.get(v) as ReactionMolecule).ref, v as number);\n            map.set(node.tagName, this.nodes.size);\n            this.index.set(tagName, map);\n        }\n    }\n\n    /**\n     * @returns The reactants.\n     */\n    getReactants(): Reactant[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Reactant.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Reactant);\n        } else {\n            return [this.nodes.get(i) as Reactant];\n        }\n    }\n\n    /**\n     * @returns A particular Reactant.\n     * @param ref The ref of the reactant to return.\n     * @returns The reactant at the given index.\n     */\n    getReactant(ref: string): Reactant {\n        let index: number | undefined = this.reactantsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Reactant with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Reactant;\n    }\n\n    /**\n     * @returns The products.\n     */\n    getProducts(): Product[] {\n        let i: Map<string, number> | number | undefined = this.index.get(Product.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as Product);\n        } else {\n            return [this.nodes.get(i) as Product];\n        }\n    }\n\n    /**\n     * @returns A particular Product.\n     * @param ref The ref of the product to return.\n     * @returns The product at the given index.\n     */\n    getProduct(ref: string): Product {\n        let index: number | undefined = this.productsIndex.get(ref);\n        if (index == undefined) {\n            throw new Error(`Product with ref ${ref} not found`);\n        }\n        return this.nodes.get(index) as Product;\n    }\n\n    /**\n     * @returns The tunneling node or undefined if it does not exist.\n     */\n    getTunneling(): Tunneling | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as Tunneling;\n    }\n\n    /**\n     * Set the tunneling node or create it if it is undefined.\n     */\n    setTunneling(tunneling: Tunneling): void {\n        let i = this.index.get(Tunneling.tagName);\n        if (i == undefined) {\n            this.index.set(Tunneling.tagName, this.nodes.size);\n            this.addNode(tunneling);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"Tunneling is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, tunneling);\n            }\n        }\n    }\n\n    /**\n     * @returns The transition states.\n     */\n    getTransitionStates(): TransitionState[] {\n        let i: Map<string, number> | number | undefined = this.index.get(TransitionState.tagName);\n        if (i == undefined) {\n            return [];\n        }\n        if (i instanceof Map) {\n            return Array.from(i.values()).map(index => this.nodes.get(index) as TransitionState);\n        } else {\n            return [this.nodes.get(i) as TransitionState];\n        }\n    }\n\n    /**\n     * @returns The MCRCMethod node or undefined if it does not exist.\n     */\n    getMCRCMethod(): MCRCMethod | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as MCRCMethod;\n    }\n\n    /**\n     * Set the MCRCMethod node or create it if it is undefined.\n     */\n    setMCRCMethod(mCRCMethod: MCRCMethod): void {\n        let i = this.index.get(MCRCMethod.tagName);\n        if (i == undefined) {\n            this.index.set(MCRCMethod.tagName, this.nodes.size);\n            this.addNode(mCRCMethod);\n        } else {\n            if (i instanceof Map) {\n                throw new Error(\"MCRCMethod is a map and it is assumed there would be only 1!\");\n            } else {\n                this.nodes.set(i, mCRCMethod);\n            }\n        }\n    }\n\n    /**\n     * @returns The excess reactant concentration or undefined if it does not exist.\n     */\n    getExcessReactantConc(): ExcessReactantConc | undefined {\n        let i: Map<string, number> | number | undefined = this.index.get(ExcessReactantConc.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i as number) as ExcessReactantConc;\n    }\n\n    /**\n     * Get the label of the reactants.\n     * @returns The label of the reactants.\n     */\n    getReactantsLabel(): string {\n        return this.getReactants().map(reactant => reactant.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Returns the label for the products.\n     * @returns The label for the products.\n     */\n    getProductsLabel(): string {\n        return this.getProducts().map(product => product.getMolecule().ref).join(' + ');\n    }\n\n    /**\n     * Get the label of the reaction.\n     * @returns The label of the reaction.\n     */\n    getLabel(): string {\n        let label: string = this.getReactantsLabel() + ' -> ' + this.getProductsLabel();\n        return label;\n    }\n\n    /**\n     * Returns the total energy of all reactants.\n     * @returns The total energy of all reactants.\n     */\n    getReactantsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the reactants in the reaction\n        return Array.from(this.getReactants()).map(reactant => {\n            let molecule = molecules.get(reactant.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${reactant.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * Returns the total energy of all products.\n     * @returns The total energy of all products.\n     */\n    getProductsEnergy(molecules: Map<string, Molecule>): number {\n        // Sum up the energy values of all the products in the reaction\n        return Array.from(this.getProducts()).map(product => {\n            let molecule = molecules.get(product.getMolecule().ref);\n            if (molecule == undefined) {\n                throw new Error(`Molecule with ref ${product.getMolecule().ref} not found`);\n            }\n            return molecule.getEnergy();\n        }).reduce((a, b) => a + b, 0);\n    }\n\n    /**\n     * @param tagName The tag name.\n     * @param dictRef The dictRef.\n     * @returns The node with the tag name and dictRef or undefined if it does not exist.\n     */\n    get(tagName: string, dictRef: string): NodeWithNodes | TagWithAttributes | Tag | undefined {\n        if (this.index.has(tagName)) {\n            let i: number | Map<string, number> | undefined = this.index.get(tagName);\n            if (i != undefined) {\n                if (i instanceof Map) {\n                    let nodeIndex: number | undefined = i.get(dictRef);\n                    if (nodeIndex != undefined) {\n                        return this.nodes.get(nodeIndex);\n                    }\n                } else {\n                    return this.nodes.get(i);\n                }\n            }\n        }\n    }\n\n\n}","/**\n * Draw a horizontal line and add labels.\n * @param ctx The context to use.\n * @param strokeStyle The name of a style to use for the line.\n * @param strokewidth The width of the line.\n * @param x0 The start x-coordinate of the line.\n * @param y0 The start y-coordinate of the line. Also used for an energy label.\n * @param {number} x1 The end x-coordinate of the line.\n * @param {number} y1 The end y-coordinate of the line.\n * @param {string} font The font to use.\n * @param {number} th The height of the text in pixels.\n * @param {string} label The label.\n * @param {string} energyString The energy.\n */\nexport function drawLevel(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x0: number, y0: number, x1: number, y1: number, font: string, th: number, label: string, \n    energyString: string) {\n    let x_centre: number = x0 + ((x1 - x0) / 2);\n    writeText(ctx, energyString, font, strokeStyle, getTextStartX(ctx, energyString, font, x_centre), y1 + th);\n    writeText(ctx, label, font, strokeStyle, getTextStartX(ctx, label, font, x_centre), y1 + 3 * th);\n    drawLine(ctx, strokeStyle, strokewidth, x0, y0, x1, y1);\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the start x-coordinate of.\n * @param {string} font The font to use.  \n * @param {number} x_centre The x-coordinate of the centre of the text.\n * @returns The x-coordinate of the start of the text.\n */\nfunction getTextStartX(ctx: CanvasRenderingContext2D, text: string, font: string, x_centre: number) {\n    let tw: number = getTextWidth(ctx, text, font);\n    return x_centre - (tw / 2);\n}\n\n/**\n * Draw a line (segment) on the canvas.\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} strokeStyle The name of a style to use for the line.\n * @param {Integer} x1 The start x-coordinate of the line.\n * @param {Integer} y1 The start y-coordinate of the line.\n * @param {Integer} x2 The end x-coordinate of the line.\n * @param {Integer} y2 The end y-coordinate of the line.\n */\nexport function drawLine(ctx: CanvasRenderingContext2D, strokeStyle: string, strokewidth: number,\n    x1: number, y1: number, x2: number, y2: number) {\n    ctx.beginPath();\n    ctx.strokeStyle = strokeStyle;\n    ctx.lineWidth = strokewidth;\n    ctx.moveTo(x1, y1);\n    ctx.lineTo(x2, y2);\n    ctx.stroke();\n}\n\n/**\n * Writes text to the canvas. (It is probably better to write all the labels in one go.)\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to write.\n * @param {string} font The font to use.\n * @param {string} colour The colour of the text.\n * @param {number} x The horizontal position of the text.\n * @param {number} y The vertical position of the text.\n */\nexport function writeText(ctx: CanvasRenderingContext2D, text: string, font: string,\n    colour: string, x: number, y: number) {\n    // Save the context (to restore after).\n    ctx.save();\n    // Translate to the point where text is to be added.\n    ctx.translate(x, y);\n    // Invert Y-axis.\n    ctx.scale(1, -1);\n    // Set the text font.\n    ctx.font = font;\n    // Set the text colour.\n    ctx.fillStyle = colour;\n    // Write the text.\n    ctx.fillText(text, 0, 0);\n    // Restore the context.\n    ctx.restore();\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the height of.\n * @param {string} font The font to use.\n * @returns {number} The height of the text in pixels.\n */\nexport function getTextHeight(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    var fontMetric = ctx.measureText(text);\n    return fontMetric.actualBoundingBoxAscent + fontMetric.actualBoundingBoxDescent;\n}\n\n/**\n * @param {CanvasRenderingContext2D} ctx The context to use.\n * @param {string} text The text to get the width of.\n * @param {string} font The font to use.\n * @returns {number} The width of the text in pixels.\n */\nexport function getTextWidth(ctx: CanvasRenderingContext2D, text: string, font: string): number {\n    ctx.font = font;\n    return ctx.measureText(text).width;\n}","import {\n    TagWithAttributes, NodeWithNodes, NumberNode, StringNode\n} from \"./xml.js\";\n\nimport {\n    Molecule\n} from \"./molecule.js\";\n\n/**\n * A class for representing a bath gas reaction molecule.\n */\nexport class BathGas extends StringNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:bathGas\";\n\n    /**\n     * The molecules.\n     */\n    molecules: Map<string, Molecule>;\n\n    /**\n     * @param attributes The attributes.\n     * @param moleculeID The moleculeID.\n     * @param molecules The molecules.\n     */\n    constructor(attributes: Map<string, string> | undefined, moleculeID: string,\n        molecules: Map<string, Molecule>) {\n        super(attributes, BathGas.tagName, moleculeID);\n        this.molecules = molecules;\n    }\n\n    getMolecule(): Molecule {\n        return this.molecules.get(this.value) as Molecule;\n    }\n}\n\n/**\n * A class for representing an experiment rate.\n */\nexport class ExperimentRate extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:experimentRate\";\n\n    /**\n     * @param attributes The attributes. \n     * @param value The value. \n     */\n    constructor(attributes: Map<string, string> | undefined, value: number) {\n        super(attributes, ExperimentRate.tagName, value);\n    }\n}\n\n/**\n * A class for representing a Pressure and Temperature pair with optional BathGas and ExperimentRate.\n * Can there be multiple BathGases and ExperimentRates?\n */\nexport class PT extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:PTpair\";\n\n    /**\n     * The index. Keys are types and values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param experimentRate The experiment rate.\n     */\n    constructor(attributes: Map<string, string>, bathGas?: BathGas, experimentRate?: ExperimentRate) {\n        super(attributes, PT.tagName);\n        this.index = new Map();\n        if (bathGas) {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n        if (experimentRate) {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n\n    /**\n     * @returns The Pressure.\n     */\n    getP(): number {\n        if (this.attributes != undefined) {\n            let p: string | undefined = this.attributes.get(\"P\");\n            if (p) {\n                return parseFloat(p);\n            } else {\n                throw new Error(\"P is undefined\");\n            }\n        }\n        return NaN;\n    }\n\n    /**\n     * Set The Pressure\n     */\n    setP(p: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"P\", p.toString());\n        }\n    }\n\n    /**\n     * @returns The Temperature.\n     */\n    getT(): number {\n        if (this.attributes != undefined) {\n            let t: string | undefined = this.attributes.get(\"T\");\n            if (t) {\n                return parseFloat(t);\n            } else {\n                throw new Error(\"T is undefined\");\n            }\n        }\n        return NaN;\n    }\n\n    /**\n     * Set The Temperature.\n     */\n    setT(t: number) {\n        if (this.attributes != undefined) {\n            this.attributes.set(\"T\", t.toString());\n        }\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas | undefined {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i) {\n            return this.nodes.get(i) as BathGas;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param bathGas The bath gas.\n     */\n    setBathGas(bathGas: BathGas) {\n        let i: number | undefined = this.index.get(BathGas.tagName);\n        if (i) {\n            this.nodes.set(i, bathGas);\n        } else {\n            this.index.set(BathGas.tagName, this.nodes.size);\n            this.addNode(bathGas);\n        }\n    }\n\n    /**\n     * @returns The experiment rate.\n     */\n    getExperimentRate(): ExperimentRate | undefined {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i) {\n            return this.nodes.get(i) as ExperimentRate;\n        } else {\n            return undefined;\n        }\n    }\n\n    /**\n     * @param experimentRate The experiment rate.\n     */\n    setExperimentRate(experimentRate: ExperimentRate) {\n        let i: number | undefined = this.index.get(ExperimentRate.tagName);\n        if (i) {\n            this.nodes.set(i, experimentRate);\n        } else {\n            this.index.set(ExperimentRate.tagName, this.nodes.size);\n            this.addNode(experimentRate);\n        }\n    }\n}\n\n/**\n * A class for representing a set of Pressure and Temperature pairs.\n */\nexport class PTs extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:PTs\";\n\n    /**\n     * @param {Map<string, string>} attributes The attributes.\n     * @param {PT[]} pTs The PTs.\n     */\n    constructor(attributes: Map<string, string>, pTs: PT[]) {\n        super(attributes, PTs.tagName);\n        pTs.forEach((pTpair) => {\n            this.addNode(pTpair);\n        });\n    }\n\n    /**\n     * @param index The index of the PT pair to return.\n     * @returns The PT pair at the given index.\n     */\n    getPTpair(index: number): PT {\n        return this.nodes.get(index) as PT;\n    }\n\n    /**\n     * Set the PT at the given index.\n     * @returns The PT pairs.\n     */\n    setPTpair(index: number, pT: PT): void {\n        this.nodes.set(index, pT);\n    }\n\n    /**\n     * Add a PT.\n     * @param pTPair The PT to add.\n     * @returns The index of the PT added.\n     */\n    addPTpair(pT: PT): number {\n        return this.addNode(pT);\n    }\n}\n\n/**\n * A class for representing the experiment conditions.\n */\nexport class Conditions extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static tagName: string = \"me:conditions\";\n\n    /**\n     * @param attributes The attributes.\n     * @param bathGas The bath gas.\n     * @param pTs The PTs - the Pressure, Temperature, BathGas, ExperimentRate instances.\n     */\n    constructor(attributes: Map<string, string> | undefined, bathGas: BathGas, pTs: PTs) {\n        super(attributes, Conditions.tagName);\n        this.addNode(bathGas);\n        this.addNode(pTs);\n    }\n\n    /**\n     * @returns The bath gas.\n     */\n    getBathGas(): BathGas {\n        return this.nodes.get(0) as BathGas;\n    }\n\n    /**\n     * @returns The Pressure and Temperature pairs.\n     */\n    getPTs(): PTs {\n        return this.nodes.get(1) as PTs;\n    }\n}","import {\n    NodeWithNodes, NumberNode\n} from \"./xml.js\";\n\n/**\n * A class for measures of grain size.\n */\nexport class GrainSize extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:grainSize\";\n\n    /**\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, GrainSize.tagName, value);\n    }\n    toString() {\n        return `GrainSize(${super.toString()})`;\n    }\n}\n\n/**\n * A class for measures of grain size.\n */\nexport class EnergyAboveTheTopHill extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:energyAboveTheTopHill\";\n\n    /**\n     * @param {string} value The value.\n     */\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, EnergyAboveTheTopHill.tagName, value);\n    }\n}\n\n/**\n * A class for model parameters.\n */\nexport class ModelParameters extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:modelParameters\";\n\n    constructor(grainSize: GrainSize, energyAboveTheTopHill: EnergyAboveTheTopHill) {\n        super(new Map<string, string>(), ModelParameters.tagName);\n        this.addNode(grainSize);\n        this.addNode(energyAboveTheTopHill);\n    }\n\n    /**\n     * @returns The grain size.\n     */\n    getGrainSize(): GrainSize {\n        return this.nodes.get(0) as GrainSize;\n    }\n\n    /**\n     * @returns The energy above the top hill.\n     */\n    getEnergyAboveTheTopHill(): EnergyAboveTheTopHill {\n        return this.nodes.get(1) as EnergyAboveTheTopHill;\n    }\n}","import {\n    Tag, NodeWithNodes, NumberNode\n} from \"./xml\";\n\n/**\n * A class for me:testDOS.\n */\nexport class TestDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testDOS\";\n\n    constructor() {\n        super(TestDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printSpeciesProfile.\n */\nexport class PrintSpeciesProfile extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printSpeciesProfile\";\n\n    constructor() {\n        super(PrintSpeciesProfile.tagName);\n    }\n}\n\n/**\n * A class for me:testMicroRates.\n */\nexport class TestMicroRates extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testMicroRates\";\n\n    constructor() {\n        super(TestMicroRates.tagName);\n    }\n}\n\n/**\n * A class for me:testRateConstant.\n */\nexport class TestRateConstant extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:testRateConstant\";\n\n    constructor() {\n        super(TestRateConstant.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainDOS.\n */\nexport class PrintGrainDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainDOS\";\n\n    constructor() {\n        super(PrintGrainDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printCellDOS.\n */\nexport class PrintCellDOS extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printCellDOS\";\n\n    constructor() {\n        super(PrintCellDOS.tagName);\n    }\n}\n\n/**\n * A class for me:printReactionOperatorColumnSums.\n */\nexport class PrintReactionOperatorColumnSums extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printReactionOperatorColumnSums\";\n\n    constructor() {\n        super(PrintReactionOperatorColumnSums.tagName);\n    }\n}\n\n/**\n * A class for me:printTunnellingCoefficients.\n */\nexport class PrintTunnellingCoefficients extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printTunnellingCoefficients\";\n\n    constructor() {\n        super(PrintTunnellingCoefficients.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainkfE.\n */\nexport class PrintGrainkfE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkfE\";\n\n    constructor() {\n        super(PrintGrainkfE.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainBoltzmann.\n */\nexport class PrintGrainBoltzmann extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainBoltzmann\";\n\n    constructor() {\n        super(PrintGrainBoltzmann.tagName);\n    }\n}\n\n/**\n * A class for me:printGrainkbE.\n */\nexport class PrintGrainkbE extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:printGrainkbE\";\n\n    constructor() {\n        super(PrintGrainkbE.tagName);\n    }\n}\n\n/**\n * A class for me:eigenvalues.\n */\nexport class Eigenvalues extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:eigenvalues\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, Eigenvalues.tagName, value);\n    }\n}\n\n/**\n * A class for me:hideInactive.\n */\nexport class HideInactive extends Tag {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:hideInactive\";\n\n    constructor() {\n        super(HideInactive.tagName);\n    }\n}\n\n/**\n * A class for me:diagramEnergyOffset.\n */\nexport class DiagramEnergyOffset extends NumberNode {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:diagramEnergyOffset\";\n\n    constructor(attributes: Map<string, string>, value: number) {\n        super(attributes, DiagramEnergyOffset.tagName, value);\n    }\n}\n\n/**\n * A class for the control.\n */\nexport class Control extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"me:control\";\n\n    /**\n     * The index. A map from the tag name to the index of the node in the nodes array.\n     */\n    index: Map<string, number>;\n    \n    /**\n     * @param attributes The attributes.\n     * @param testDOS The testDOS.\n     * @param printSpeciesProfile The printSpeciesProfile.\n     * @param testMicroRates The testMicroRates.\n     * @param testRateConstant T\n     * @param printGrainDOS The printGrainDOS.\n     * @param printCellDOS The printCellDOS.\n     * @param printReactionOperatorColumnSums The printReactionOperatorColumnSums.\n     * @param printTunnellingCoefficients The printTunnellingCoefficients.\n     * @param printGrainkfE The printGrainkfE.\n     * @param printGrainBoltzmann The printGrainBoltzmann.\n     * @param printGrainkbE The printGrainkbE.\n     * @param eigenvalues The eigenvalues.\n     * @param hideInactive The hideInactive.\n     * @param diagramEnergyOffset The diagramEnergyOffset.\n     */\n    constructor(attributes: Map<string,string>, testDOS?: TestDOS, printSpeciesProfile?: PrintSpeciesProfile, \n        testMicroRates?: TestMicroRates, testRateConstant?: TestRateConstant, printGrainDOS?: PrintGrainDOS, \n        printCellDOS?: PrintCellDOS, printReactionOperatorColumnSums?: PrintReactionOperatorColumnSums, \n        printTunnellingCoefficients?: PrintTunnellingCoefficients, printGrainkfE?: PrintGrainkfE, \n        printGrainBoltzmann?: PrintGrainBoltzmann, printGrainkbE?: PrintGrainkbE, eigenvalues?: Eigenvalues, \n        hideInactive?: HideInactive, diagramEnergyOffset?: DiagramEnergyOffset) {\n        super(attributes, Control.tagName);\n        this.index = new Map<string, number>();\n        if (testDOS != undefined) {\n            this.addNode(testDOS);\n            this.index.set(TestDOS.tagName, this.index.size);\n        }\n        if (printSpeciesProfile != undefined) {\n            this.addNode(printSpeciesProfile);\n            this.index.set(PrintSpeciesProfile.tagName, this.index.size);\n        }\n        if (testMicroRates != undefined) {\n            this.addNode(testMicroRates);\n            this.index.set(TestMicroRates.tagName, this.index.size);\n        }\n        if (testRateConstant != undefined) {\n            this.addNode(testRateConstant);\n            this.index.set(TestRateConstant.tagName, this.index.size);\n        }\n        if (printGrainDOS != undefined) {\n            this.addNode(printGrainDOS);\n            this.index.set(PrintGrainDOS.tagName, this.index.size);\n        }\n        if (printCellDOS != undefined) {\n            this.addNode(printCellDOS);\n            this.index.set(PrintCellDOS.tagName, this.index.size);\n        }\n        if (printReactionOperatorColumnSums != undefined) {\n            this.addNode(printReactionOperatorColumnSums);\n            this.index.set(PrintReactionOperatorColumnSums.tagName, this.index.size);\n        }\n        if (printTunnellingCoefficients != undefined) {\n            this.addNode(printTunnellingCoefficients);\n            this.index.set(PrintTunnellingCoefficients.tagName, this.index.size);\n        }\n        if (printGrainkfE != undefined) {\n            this.addNode(printGrainkfE);\n            this.index.set(PrintGrainkfE.tagName, this.index.size);\n        }\n        if (printGrainBoltzmann != undefined) {\n            this.addNode(printGrainBoltzmann);\n            this.index.set(PrintGrainBoltzmann.tagName, this.index.size);\n        }\n        if (printGrainkbE != undefined) {\n            this.addNode(printGrainkbE);\n            this.index.set(PrintGrainkbE.tagName, this.index.size);\n        }\n        if (eigenvalues != undefined) {\n            this.addNode(eigenvalues);\n            this.index.set(Eigenvalues.tagName, this.index.size);\n        }\n        if (hideInactive != undefined) {\n            this.addNode(hideInactive);\n            this.index.set(HideInactive.tagName, this.index.size);\n        }\n        if (diagramEnergyOffset != undefined) {\n            this.addNode(diagramEnergyOffset);\n            this.index.set(DiagramEnergyOffset.tagName, this.index.size);\n        }\n    }\n\n    getTestDOS(): TestDOS | undefined {\n        const index = this.index.get(TestDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestDOS;\n        }\n        return undefined;\n    }\n\n    getPrintSpeciesProfile(): PrintSpeciesProfile | undefined {\n        const index = this.index.get(PrintSpeciesProfile.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintSpeciesProfile;\n        }\n        return undefined;\n    }\n\n    getTestMicroRates(): TestMicroRates | undefined {\n        const index = this.index.get(TestMicroRates.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestMicroRates;\n        }\n        return undefined;\n    }\n\n    getTestRateConstant(): TestRateConstant | undefined {\n        const index = this.index.get(TestRateConstant.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as TestRateConstant;\n        }\n        return undefined;\n    }\n\n    getPrintGrainDOS(): PrintGrainDOS | undefined {\n        const index = this.index.get(PrintGrainDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainDOS;\n        }\n        return undefined;\n    }\n\n    getPrintCellDOS(): PrintCellDOS | undefined {\n        const index = this.index.get(PrintCellDOS.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintCellDOS;\n        }\n        return undefined;\n    }\n\n    getPrintReactionOperatorColumnSums(): PrintReactionOperatorColumnSums | undefined {\n        const index = this.index.get(PrintReactionOperatorColumnSums.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintReactionOperatorColumnSums;\n        }\n        return undefined;\n    }\n\n    getPrintTunnellingCoefficients(): PrintTunnellingCoefficients | undefined {\n        const index = this.index.get(PrintTunnellingCoefficients.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintTunnellingCoefficients;\n        }\n        return undefined;\n    }\n\n    getPrintGrainkfE(): PrintGrainkfE | undefined {\n        const index = this.index.get(PrintGrainkfE.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainkfE;\n        }\n        return undefined;\n    }\n\n    getPrintGrainBoltzmann(): PrintGrainBoltzmann | undefined {\n        const index = this.index.get(PrintGrainBoltzmann.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainBoltzmann;\n        }\n        return undefined;\n    }\n\n    getPrintGrainkbE(): PrintGrainkbE | undefined {\n        const index = this.index.get(PrintGrainkbE.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as PrintGrainkbE;\n        }\n        return undefined;\n    }\n\n    getEigenvalues(): Eigenvalues | undefined {\n        const index = this.index.get(Eigenvalues.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as Eigenvalues;\n        }\n        return undefined;\n    }\n\n    getHideInactive(): HideInactive | undefined {\n        const index = this.index.get(HideInactive.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as HideInactive;\n        }\n        return undefined;\n    }\n\n    getDiagramEnergyOffset(): DiagramEnergyOffset | undefined {\n        const index = this.index.get(DiagramEnergyOffset.tagName) ?? -1;\n        if (index !== -1) {\n            return this.nodes.get(index) as DiagramEnergyOffset;\n        }\n        return undefined;\n    }\n\n}","import { Conditions } from \"./conditions.js\";\nimport { Control } from \"./control.js\";\nimport { ModelParameters } from \"./modelParameters.js\";\nimport { Molecule } from \"./molecule.js\";\nimport { Reaction } from \"./reaction.js\";\nimport { NodeWithNodes, StringNode } from \"./xml.js\";\n\n/**\n * The header of the XML file.\n */\nconst header: string = `<?xml version=\"1.0\" encoding=\"utf-8\" ?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer2.xsl' media='other'?>\n<?xml-stylesheet type='text/xsl' href='../../mesmer1.xsl' media='screen'?>`;\n\n/**\n * The title.\n */\nexport class Title extends StringNode {\n\n    static readonly tagName: string = \"me:title\";\n\n    /**\n     * @param value \n     */\n    constructor(attributes:  Map<string, string>, value: string) {\n        super(attributes, Title.tagName, value);\n    }\n\n}\n\n\n/**\n * A class for representing a \"moleculeList\".\n * In the XML, a \"moleculeList\" node is a child node of the \"me:mesmer\" node and has \"molecule\" node children.\n */\nexport class MoleculeList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"moleculeList\";\n\n    /**\n     * The index. The keys are the molecule ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param molecules The molecules.\n     */\n    constructor(attributes: Map<string, string>, molecules?: Molecule[]) {\n        super(attributes, MoleculeList.tagName);\n        this.index = new Map();\n        if (molecules != undefined) {\n            molecules.forEach(molecule => {\n                this.nodes.set(this.nodes.size, molecule);\n                this.index.set(molecule.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the molecule.\n     * @returns The molecule.\n     */\n    getMolecule(id: string): Molecule | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Molecule;\n    }\n\n    /**\n     * Remove a molecule.\n     * @param id The id of the molecule to remove.\n     */\n    removeMolecule(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a molecule.\n     * @param molecule The molecule.\n     */\n    addMolecule(molecule: Molecule): void {\n        let index = this.index.get(molecule.id);\n        if (index !== undefined) {\n            this.nodes.set(index, molecule);\n            console.log('Replaced molecule with id ' + molecule.id);\n        } else {\n            this.nodes.set(this.nodes.size, molecule);\n            this.index.set(molecule.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * A class for representing a \"reactionList\".\n * In the XML, a \"reactionList\" node is a child node of a \"me:mesmer\" node and has \"reaction\" node children.\n */\nexport class ReactionList extends NodeWithNodes {\n\n    /**\n     * The tag name.\n     */\n    static readonly tagName: string = \"reactionList\";\n\n    /**\n     * The index. The keys are the reaction ids and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    /**\n     * @param attributes The attributes.\n     * @param reactions The reactions.\n     */\n    constructor(attributes: Map<string, string>, reactions?: Reaction[]) {\n        super(attributes, ReactionList.tagName);\n        this.index = new Map();\n        if (reactions != undefined) {\n            reactions.forEach(reaction => {\n                this.nodes.set(this.nodes.size, reaction);\n                this.index.set(reaction.id, this.nodes.size - 1);\n            });\n        }\n    }\n\n    /**\n     * @param id The id of the reaction.\n     * @returns The reaction.\n     */\n    getReaction(id: string): Reaction | undefined {\n        let i: number | undefined = this.index.get(id);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Reaction;\n    }\n\n    /**\n     * Remove a reaction.\n     * @param id The id of the reaction to remove.\n     */\n    removeReaction(id: string): void {\n        let i: number | undefined = this.index.get(id);\n        if (i != undefined) {\n            this.nodes.delete(i);\n            this.index.delete(id);\n        }\n    }\n\n    /**\n     * Add a reaction.\n     * @param reaction The reaction.\n     */\n    addReaction(reaction: Reaction): void {\n        let index = this.index.get(reaction.id);\n        if (index !== undefined) {\n            this.nodes.set(index, reaction);\n            console.log('Replaced reaction with id ' + reaction.id);\n        } else {\n            this.nodes.set(this.nodes.size, reaction);\n            this.index.set(reaction.id, this.nodes.size - 1);\n        }\n    }\n}\n\n/**\n * The \"me:mesmer\" node contains a \"me:title\", \"moleculeList\", \"reactionList\", \"me:conditions\", \n * \"me:modelParameters\" and \"me:control\".\n */\nexport class Mesmer extends NodeWithNodes {\n\n    static readonly tagName: string = \"me:mesmer\";\n\n    /**\n     * The index. The keys are the node names and the values are the node indexes.\n     */\n    index: Map<string, number>;\n\n    constructor(attributes: Map<string, string>, moleculeList?: MoleculeList, reactionList?: ReactionList,\n        conditions?: Conditions, modelParameters?: ModelParameters, control?: Control) {\n        super(attributes, Mesmer.tagName);\n        this.index = new Map();\n        if (moleculeList != undefined) {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n        if (reactionList != undefined) {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n        if (conditions != undefined) {\n            this.index.set(Conditions.tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n        if (modelParameters != undefined) {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n        if (control != undefined) {\n            this.index.set(Control.tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n\n    /**\n     * @returns The molecule list.\n     */\n    getMoleculeList() {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as MoleculeList;\n    }\n\n    /**\n     * Set the molecule list.\n     * @param moleculeList The molecule list.\n     */\n    setMoleculeList(moleculeList: MoleculeList) {\n        let i: number | undefined = this.index.get(MoleculeList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, moleculeList);\n        } else {\n            this.index.set(MoleculeList.tagName, this.nodes.size);\n            this.addNode(moleculeList);\n        }\n    }\n\n    /**\n     * @returns The reaction list.\n     */\n    getReactionList() {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ReactionList;\n    }\n\n    /**\n     * Set the reaction list.\n     * @param reactionList The reaction list.\n     */\n    setReactionList(reactionList: ReactionList) {\n        let i: number | undefined = this.index.get(ReactionList.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, reactionList);\n        } else {\n            this.index.set(ReactionList.tagName, this.nodes.size);\n            this.addNode(reactionList);\n        }\n    }\n\n    /**\n     * @returns The conditions.\n     */\n    getConditions() {\n        let i: number | undefined = this.index.get(Conditions.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Conditions;\n    }\n\n    /**\n     * Set the conditions.\n     * @param conditions The conditions.\n     */\n    setConditions(conditions: Conditions) {\n        let i: number | undefined = this.index.get(Conditions.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, conditions);\n        } else {\n            this.index.set(Conditions.tagName, this.nodes.size);\n            this.addNode(conditions);\n        }\n    }\n\n    /**\n     * @returns The model parameters.\n     */\n    getModelParameters() {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as ModelParameters;\n    }\n\n    /**\n     * Set the model parameters.\n     * @param modelParameters The model parameters.\n     */\n    setModelParameters(modelParameters: ModelParameters) {\n        let i: number | undefined = this.index.get(ModelParameters.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, modelParameters);\n        } else {\n            this.index.set(ModelParameters.tagName, this.nodes.size);\n            this.addNode(modelParameters);\n        }\n    }\n\n    /**\n     * @returns The control.\n     */\n    getControl() {\n        let i: number | undefined = this.index.get(Control.tagName);\n        if (i == undefined) {\n            return undefined;\n        }\n        return this.nodes.get(i) as Control;\n    }\n\n    /**\n     * Set the control.\n     * @param control The control.\n     */\n    setControl(control: Control) {\n        let i: number | undefined = this.index.get(Control.tagName);\n        if (i != undefined) {\n            this.nodes.set(i, control);\n        } else {\n            this.index.set(Control.tagName, this.nodes.size);\n            this.addNode(control);\n        }\n    }\n}"],"names":["$22c7fca7c69edc03$var$input_xml_filename","$22c7fca7c69edc03$var$loadButton","$22c7fca7c69edc03$var$saveButton","$22c7fca7c69edc03$var$xml_title","$22c7fca7c69edc03$var$xml_text","$22c7fca7c69edc03$var$conditions","$22c7fca7c69edc03$var$modelParameters","$22c7fca7c69edc03$var$control","$dcf293d9ee452407$export$3988ae62b71be9a3","map","key","has","Error","get","$dcf293d9ee452407$export$4323cc4280d5be7","array","delimiter","undefined","value","toString","join","$dcf293d9ee452407$export$8cfbaad830aa9e0a","s","r","i","length","$dcf293d9ee452407$export$e90fb89750dba83f","push","parseFloat","isNaN","Number","$2cda23d1e44619db$export$8b2cd46c11844202","buttonId","buttonLabel","content","contentDivId","contentDivClassName","contentDiv","document","createElement","id","className","button","innerText","appendChild","$2cda23d1e44619db$var$toggleCollapsible","classList","toggle","nextElementSibling","style","display","$2cda23d1e44619db$export$7c112ceec8941e67","type","func","labelText","input","onchange","label","htmlFor","textContent","container","$2cda23d1e44619db$export$ff083c49da8fe0f9","attributes","tagName","$2cda23d1e44619db$export$4b454580398e92d5","minSize","width","$6648a11f147a5c05$export$4e07613bf412feb7","element","cn","childNodes","$6648a11f147a5c05$export$13cb40e9b656ab9e","node","nodeValue","$6648a11f147a5c05$export$3288d34c523a1192","constructor","toXML","padding","$6648a11f147a5c05$export$ca4ceee82ec565dc","forEach","k","v","$6648a11f147a5c05$export$8f67221c6fb2ad09","$6648a11f147a5c05$export$dad497fe1f6e27c0","trim","$6648a11f147a5c05$export$82583fad49645fc9","$6648a11f147a5c05$export$38d8ebe2767f8865","values","setDelimiter","replaceAll","$6648a11f147a5c05$export$bd431b64ad3b0433","nodes","Map","addNode","set","size","pad","padding1","padValue","startTag","$6648a11f147a5c05$export$2cd488e9ab180ce2","$6648a11f147a5c05$export$fe94072fee8a6976","attributeNames","getAttributeNames","attributeName","attributeValue","getAttribute","$7cb8c0739b32549c$export$80986e6afdd7e0cb","elementType","$7cb8c0739b32549c$export$9cea715eceba39a0","atoms","atom","$7cb8c0739b32549c$export$153327fc99ac0c53","atomRefs2","$7cb8c0739b32549c$export$746fba2e30d93fe6","bonds","bond","$7cb8c0739b32549c$export$d29b345ea2be5072","updateUnits","units","existingUnits","$7cb8c0739b32549c$export$9f93a3fdf2490572","$7cb8c0739b32549c$export$41b04b3a73e7216d","property","dictRef","getProperty","setProperty","$7cb8c0739b32549c$export$95174cf0748f45cd","$7cb8c0739b32549c$export$1288989e9be37590","$7cb8c0739b32549c$export$2762c8fbc03043ca","$7cb8c0739b32549c$export$984abe26ded13ee0","$7cb8c0739b32549c$export$a3772f6eb527275b","$7cb8c0739b32549c$export$22995ecd2bdeb2","$7cb8c0739b32549c$export$4e0d1ad7ad6a0802","properties","index","console","log","$7cb8c0739b32549c$export$16fc56ab40b12b45","getBathGas","setBathGas","bathGas","getUnits","getLower","setLower","lower","getUpper","setUpper","upper","getStepsize","setStepsize","stepsize","setValue","$7cb8c0739b32549c$export$499950da20810ac9","deltaEDowns","deltaEDown","getDeltaEDown","setDeltaEDown","addDeltaEDown","$7cb8c0739b32549c$export$bbdce6c921702068","$7cb8c0739b32549c$export$aef8e5ad5552fd72","bondRef","$7cb8c0739b32549c$export$86ca5149fcde8feb","$7cb8c0739b32549c$export$9b8e857b9a081d2","potentialPoints","p","getPotentialPoint","setPotentialPoints","addPotentialPoint","$7cb8c0739b32549c$export$9513c16afdf7d852","$7cb8c0739b32549c$export$ae98b7db6376163d","hinderedRotorPotential","periodicity","getBondRef","setBondRef","getHinderedRotorPotential","setHinderedRotorPotential","getPeriodicity","setPeriodicity","$7cb8c0739b32549c$export$97850fe2f2906f00","$7cb8c0739b32549c$export$3da9759ad07746a3","energyTransferModel","dOSCMethod","extraDOSCMethod","reservoirSize","getDescription","setDescription","description","getActive","active","setActive","getLabel","getAttributesAsString","Array","from","getProperties","setProperties","getAtoms","getBonds","getEnergyTransferModel","setEnergyTransferModel","getDOSCMethod","setDOSCMethod","getExtraDOSCMethod","setExtraDOSCMethod","getReservoirSize","setReservoirSize","getEnergy","$381c11e38cac5410$export$e8a062bb2fc9e2ba","ref","$381c11e38cac5410$export$dcfd4302d04b7fb6","molecule","getMolecule","$381c11e38cac5410$export$264ad599d7cef668","$381c11e38cac5410$export$145c1ed87b1a2216","$381c11e38cac5410$export$38ce90ac8b004d85","$381c11e38cac5410$export$1bdc69d2439d749d","$381c11e38cac5410$export$8d95dd32819bc86c","$381c11e38cac5410$export$d08982dd841d496f","$381c11e38cac5410$export$6fa70ee10f356b6","$381c11e38cac5410$export$191e95ebb11cc88","xsiType","xsiType2","preExponential","activationEnergy","tInfinity","nInfinity","getPreExponential","getActivationEnergy","getTInfinity","getNInfinity","$381c11e38cac5410$export$c3cf6f96dac11421","$381c11e38cac5410$export$284227145ed02b04","$381c11e38cac5410$export$d2ae4167a30cf6bb","reactants","products","tunneling","transitionStates","mCRCMethod","excessReactantConc","reactantsIndex","reactant","addToIndex","productsIndex","product","transitionState","getReactants","getReactant","getProducts","getProduct","getTunneling","setTunneling","getTransitionStates","getMCRCMethod","setMCRCMethod","getExcessReactantConc","getReactantsLabel","getProductsLabel","getReactantsEnergy","molecules","reduce","a","b","getProductsEnergy","nodeIndex","$613b909b2797b099$export$b33a132661f4be58","moleculeID","$613b909b2797b099$export$ea088383ce76fc5a","$613b909b2797b099$export$3961bdb9130b90e7","experimentRate","getP","NaN","setP","getT","t","setT","getExperimentRate","setExperimentRate","$613b909b2797b099$export$3be0efe793283834","pTs","pTpair","getPTpair","setPTpair","pT","addPTpair","$613b909b2797b099$export$363c7374d425f4ad","getPTs","$9a96fbd0df1ae67b$export$26e33f0df9ce919d","$9a96fbd0df1ae67b$export$aa73446724166cdb","$9a96fbd0df1ae67b$export$77f098867dc64198","grainSize","energyAboveTheTopHill","getGrainSize","getEnergyAboveTheTopHill","$d0ae5bc6e682c29f$export$a3d7e677521f681f","$d0ae5bc6e682c29f$export$ed9b9e07e51c2ac1","$d0ae5bc6e682c29f$export$1f37c7c73e401f31","$d0ae5bc6e682c29f$export$980e5abe9a459423","$d0ae5bc6e682c29f$export$d23243bda4dfae2b","$d0ae5bc6e682c29f$export$60b233651e162b60","$d0ae5bc6e682c29f$export$a915db169f144f37","$d0ae5bc6e682c29f$export$8a58e03b7b3f0f47","$d0ae5bc6e682c29f$export$f8d814a406a0ff5b","$d0ae5bc6e682c29f$export$e7fff349901f700d","$d0ae5bc6e682c29f$export$55888ef4e813a34d","$d0ae5bc6e682c29f$export$2453e311f702d9c7","$d0ae5bc6e682c29f$export$9d51752a8549e2d6","$d0ae5bc6e682c29f$export$159b5d3263f1049a","$d0ae5bc6e682c29f$export$7a7fa4424cb20976","testDOS","printSpeciesProfile","testMicroRates","testRateConstant","printGrainDOS","printCellDOS","printReactionOperatorColumnSums","printTunnellingCoefficients","printGrainkfE","printGrainBoltzmann","printGrainkbE","eigenvalues","hideInactive","diagramEnergyOffset","getTestDOS","getPrintSpeciesProfile","getTestMicroRates","getTestRateConstant","getPrintGrainDOS","getPrintCellDOS","getPrintReactionOperatorColumnSums","getPrintTunnellingCoefficients","getPrintGrainkfE","getPrintGrainBoltzmann","getPrintGrainkbE","getEigenvalues","getHideInactive","getDiagramEnergyOffset","$762f625c179c0279$export$f99233281efd08a0","$762f625c179c0279$export$19d70f3647dee606","removeMolecule","delete","addMolecule","$762f625c179c0279$export$44466a39ca846289","reactions","reaction","getReaction","removeReaction","addReaction","$762f625c179c0279$export$692079bb871c6039","moleculeList","reactionList","conditions","modelParameters","control","getMoleculeList","setMoleculeList","getReactionList","setReactionList","getConditions","setConditions","getModelParameters","setModelParameters","getControl","setControl","$22c7fca7c69edc03$var$molecules","$22c7fca7c69edc03$var$reactions","$22c7fca7c69edc03$export$c01f4ac2c1d26a5a","inputId","split","inputString","pA","pAValues","n","success","alert","getElementById","inputPAValues","$22c7fca7c69edc03$export$4e634558561f5cca","ps","inputNumber","inputElement","window","setPropertyArray","addEventListener","event","loadXML","$22c7fca7c69edc03$var$loadXML","files","file","name","reader","FileReader","start","contents","onload","e","target","result","blob","slice","readAsText","xml","innerHTML","text","replace","$22c7fca7c69edc03$var$parse","xml_title","getElementsByTagName","title","titleNode","titleElement","textNode","createTextNode","parentNode","insertBefore","replaceChild","moleculesElement","paragraph","moleculeListElement","$22c7fca7c69edc03$var$getMolecules","moleculeListDiv","xml_moleculeList","moleculeListTagNames","Set","add","nodeName","error","x","xml_molecules","atomsNode","bondsNode","els","moleculeDiv","moleculeTagNames","cns","j","warn","xml_atomArrays","xml_atomArray","xml_atoms","xml_bondArrays","xml_bondArray","xml_bonds","xml_PLs","pl","xml_Ps","scalarNodes","firstChildNode","inputDiv","HTMLInputElement","querySelector","eventTarget","arrayNodes","entries","pa","xml_deltaEDown","etm","el","bondRefs","hinderedRotorPotentials","xml_potentialPoints","xml_periodicities","collapsibleDiv","collapsibleElements","getElementsByClassName","removeEventListener","parser","DOMParser","parseFromString","click","saveXML","padding2","repeat","xml_conditions","xml_modelParameters","xml_control","Blob","url","URL","createObjectURL","href","download","body","removeChild"],"version":3,"file":"index.028a3593.js.map"}